
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000faf4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800fd94  0800fd94  00010d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ff18  0800ff18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ff20  0800ff20  00010f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ff24  0800ff24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800ff28  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000348f4  24000068  0800ff90  00011068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2403495c  0800ff90  0001195c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002abf5  00000000  00000000  00011096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055d3  00000000  00000000  0003bc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e68  00000000  00000000  00041260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000174d  00000000  00000000  000430c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e136  00000000  00000000  00044815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b62e  00000000  00000000  0008294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001864be  00000000  00000000  000adf79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00234437  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008598  00000000  00000000  002344f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0023ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000d00  00000000  00000000  0023cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0023d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fd7c 	.word	0x0800fd7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800fd7c 	.word	0x0800fd7c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006be:	2204      	movs	r2, #4
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000704:	f001 fb12 	bl	8001d2c <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 fd2b 	bl	8001168 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800071e:	f002 fca9 	bl	8003074 <HAL_ADCEx_MultiModeConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000728:	f000 fd1e 	bl	8001168 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0xf0>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000734:	2304      	movs	r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2304      	movs	r3, #4
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f001 fdc8 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 fd05 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	24000084 	.word	0x24000084
 800076c:	40022000 	.word	0x40022000
 8000770:	3ef08000 	.word	0x3ef08000

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ba      	sub	sp, #232	@ 0xe8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00e fe1b 	bl	800f3d0 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <HAL_ADC_MspInit+0x13c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8081 	bne.w	80008a8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 f9b9 	bl	8007b54 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007e8:	f000 fcbe 	bl	8001168 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x144>)
 8000842:	f005 fe01 	bl	8006448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_ADC_MspInit+0x14c>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800086c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800088e:	f002 ff9f 	bl	80037d0 <HAL_DMA_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000898:	f000 fc66 	bl	8001168 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e8      	adds	r7, #232	@ 0xe8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000
 80008bc:	240000e8 	.word	0x240000e8
 80008c0:	40020010 	.word	0x40020010

080008c4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_COMP1_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_COMP1_Init+0x58>)
 80008d2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008da:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008fc:	2211      	movs	r2, #17
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_COMP1_Init+0x50>)
 8000902:	f002 fc95 	bl	8003230 <HAL_COMP_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 fc2c 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000160 	.word	0x24000160
 8000918:	5800380c 	.word	0x5800380c
 800091c:	00020006 	.word	0x00020006

08000920 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <HAL_COMP_MspInit+0x90>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d131      	bne.n	80009a6 <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* COMP1 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000948:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <HAL_COMP_MspInit+0x98>)
 8000992:	f005 fd59 	bl	8006448 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	2089      	movs	r0, #137	@ 0x89
 800099c:	f002 fef0 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80009a0:	2089      	movs	r0, #137	@ 0x89
 80009a2:	f002 ff07 	bl	80037b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	5800380c 	.word	0x5800380c
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020400 	.word	0x58020400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2105      	movs	r1, #5
 80009e4:	200b      	movs	r0, #11
 80009e6:	f002 fecb 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ea:	200b      	movs	r0, #11
 80009ec:	f002 fee2 	bl	80037b4 <HAL_NVIC_EnableIRQ>

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	58024400 	.word	0x58024400

080009fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <vApplicationGetIdleTaskMemory+0x30>)
 8000a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	24030254 	.word	0x24030254
 8000a2c:	240302f4 	.word	0x240302f4

08000a30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_FREERTOS_Init+0x7c>)
 8000a38:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000a4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00c ff95 	bl	800d980 <osThreadCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_FREERTOS_Init+0x80>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_FREERTOS_Init+0x84>)
 8000a5e:	f107 0420 	add.w	r4, r7, #32
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00c ff82 	bl	800d980 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <MX_FREERTOS_Init+0x88>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_FREERTOS_Init+0x8c>)
 8000a84:	1d3c      	adds	r4, r7, #4
 8000a86:	461d      	mov	r5, r3
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00c ff71 	bl	800d980 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <MX_FREERTOS_Init+0x90>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	@ 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000aac:	0800fda0 	.word	0x0800fda0
 8000ab0:	24030248 	.word	0x24030248
 8000ab4:	0800fdcc 	.word	0x0800fdcc
 8000ab8:	2403024c 	.word	0x2403024c
 8000abc:	0800fdf4 	.word	0x0800fdf4
 8000ac0:	24030250 	.word	0x24030250

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f00c ffa3 	bl	800da18 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartDefaultTask+0x8>

08000ad4 <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
	HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <StartSamplingTask+0x98>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4822      	ldr	r0, [pc, #136]	@ (8000b70 <StartSamplingTask+0x9c>)
 8000ae8:	f001 fac2 	bl	8002070 <HAL_ADC_Start_DMA>
	HAL_COMP_Start_IT(&hcomp1);
 8000aec:	4821      	ldr	r0, [pc, #132]	@ (8000b74 <StartSamplingTask+0xa0>)
 8000aee:	f002 fcc9 	bl	8003484 <HAL_COMP_Start_IT>

	initFIR();
 8000af2:	f000 f8dd 	bl	8000cb0 <initFIR>
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {

	  if (capture_done == 1) {
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <StartSamplingTask+0xa4>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d1fb      	bne.n	8000af6 <StartSamplingTask+0x22>
		  capture_done = 0;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <StartSamplingTask+0xa4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]


		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e01e      	b.n	8000b48 <StartSamplingTask+0x74>
			  if (*(sendBuffer+i) > 2000) {
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <StartSamplingTask+0xa8>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b1a:	d912      	bls.n	8000b42 <StartSamplingTask+0x6e>
				  write_ptr = (i + BUFFER_SIZE - PREEMPT_SIZE) % BUFFER_SIZE;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8000b22:	425a      	negs	r2, r3
 8000b24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b28:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000b2c:	bf58      	it	pl
 8000b2e:	4253      	negpl	r3, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <StartSamplingTask+0xac>)
 8000b34:	601a      	str	r2, [r3, #0]
				  contador++;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <StartSamplingTask+0xb0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a11      	ldr	r2, [pc, #68]	@ (8000b84 <StartSamplingTask+0xb0>)
 8000b3e:	6013      	str	r3, [r2, #0]
				  break;
 8000b40:	e006      	b.n	8000b50 <StartSamplingTask+0x7c>
		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b4e:	dbdc      	blt.n	8000b0a <StartSamplingTask+0x36>
			  }
		  }

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2102      	movs	r1, #2
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <StartSamplingTask+0xb4>)
 8000b56:	f005 fe27 	bl	80067a8 <HAL_GPIO_WritePin>
		  osDelay(20);
 8000b5a:	2014      	movs	r0, #20
 8000b5c:	f00c ff5c 	bl	800da18 <osDelay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <StartSamplingTask+0xb4>)
 8000b66:	f005 fe1f 	bl	80067a8 <HAL_GPIO_WritePin>
	  if (capture_done == 1) {
 8000b6a:	e7c4      	b.n	8000af6 <StartSamplingTask+0x22>
 8000b6c:	24000000 	.word	0x24000000
 8000b70:	24000084 	.word	0x24000084
 8000b74:	24000160 	.word	0x24000160
 8000b78:	240201b0 	.word	0x240201b0
 8000b7c:	240201a4 	.word	0x240201a4
 8000b80:	240201ac 	.word	0x240201ac
 8000b84:	240201b4 	.word	0x240201b4
 8000b88:	58021000 	.word	0x58021000

08000b8c <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	493a      	ldr	r1, [pc, #232]	@ (8000c80 <StartSerialTask+0xf4>)
 8000b98:	483a      	ldr	r0, [pc, #232]	@ (8000c84 <StartSerialTask+0xf8>)
 8000b9a:	f00a f885 	bl	800aca8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c88 <StartSerialTask+0xfc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d168      	bne.n	8000c78 <StartSerialTask+0xec>
		  fl_receive = 0;
 8000ba6:	4b38      	ldr	r3, [pc, #224]	@ (8000c88 <StartSerialTask+0xfc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

		  // Copiar los datos del buffer ADC al buffer de entrada
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e020      	b.n	8000bf4 <StartSerialTask+0x68>
		    input = (float32_t)sendBuffer[i];
 8000bb2:	4b36      	ldr	r3, [pc, #216]	@ (8000c8c <StartSerialTask+0x100>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc6:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <StartSerialTask+0x104>)
 8000bc8:	edc3 7a00 	vstr	s15, [r3]
		    arm_fir_f32(&S, &input, &output, 1);
 8000bcc:	2301      	movs	r3, #1
 8000bce:	4a31      	ldr	r2, [pc, #196]	@ (8000c94 <StartSerialTask+0x108>)
 8000bd0:	492f      	ldr	r1, [pc, #188]	@ (8000c90 <StartSerialTask+0x104>)
 8000bd2:	4831      	ldr	r0, [pc, #196]	@ (8000c98 <StartSerialTask+0x10c>)
 8000bd4:	f00e f958 	bl	800ee88 <arm_fir_f32>
		    outbuff[i] = (uint32_t)output;
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <StartSerialTask+0x108>)
 8000bda:	edd3 7a00 	vldr	s15, [r3]
 8000bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be2:	ee17 1a90 	vmov	r1, s15
 8000be6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c9c <StartSerialTask+0x110>)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000bfa:	dbda      	blt.n	8000bb2 <StartSerialTask+0x26>




		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	e036      	b.n	8000c70 <StartSerialTask+0xe4>
			  sprintf(Tx_Data, "%lu,", outbuff[(write_ptr + i) % BUFFER_SIZE]);
 8000c02:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <StartSerialTask+0x114>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	4413      	add	r3, r2
 8000c0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000c0e:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <StartSerialTask+0x110>)
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4923      	ldr	r1, [pc, #140]	@ (8000ca4 <StartSerialTask+0x118>)
 8000c18:	4823      	ldr	r0, [pc, #140]	@ (8000ca8 <StartSerialTask+0x11c>)
 8000c1a:	f00e fbb9 	bl	800f390 <siprintf>
			  // sprintf(Tx_Data, "%lu\r\n", *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000c1e:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <StartSerialTask+0x11c>)
 8000c20:	f7ff fb5e 	bl	80002e0 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	491e      	ldr	r1, [pc, #120]	@ (8000ca8 <StartSerialTask+0x11c>)
 8000c2e:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <StartSerialTask+0xf8>)
 8000c30:	f009 ffac 	bl	800ab8c <HAL_UART_Transmit>

			  			  sprintf(Tx_Data, "%lu\r\n", *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <StartSerialTask+0x100>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <StartSerialTask+0x114>)
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	440b      	add	r3, r1
 8000c40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4917      	ldr	r1, [pc, #92]	@ (8000cac <StartSerialTask+0x120>)
 8000c4e:	4816      	ldr	r0, [pc, #88]	@ (8000ca8 <StartSerialTask+0x11c>)
 8000c50:	f00e fb9e 	bl	800f390 <siprintf>
			  			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000c54:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <StartSerialTask+0x11c>)
 8000c56:	f7ff fb43 	bl	80002e0 <strlen>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	4911      	ldr	r1, [pc, #68]	@ (8000ca8 <StartSerialTask+0x11c>)
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <StartSerialTask+0xf8>)
 8000c66:	f009 ff91 	bl	800ab8c <HAL_UART_Transmit>
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c76:	dbc4      	blt.n	8000c02 <StartSerialTask+0x76>
		  }


	  }

    osDelay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f00c fecd 	bl	800da18 <osDelay>
	  if (fl_receive == 1){
 8000c7e:	e78e      	b.n	8000b9e <StartSerialTask+0x12>
 8000c80:	2400018c 	.word	0x2400018c
 8000c84:	24030544 	.word	0x24030544
 8000c88:	24000196 	.word	0x24000196
 8000c8c:	240201a4 	.word	0x240201a4
 8000c90:	24020240 	.word	0x24020240
 8000c94:	24020244 	.word	0x24020244
 8000c98:	24020234 	.word	0x24020234
 8000c9c:	24020248 	.word	0x24020248
 8000ca0:	240201ac 	.word	0x240201ac
 8000ca4:	0800fe10 	.word	0x0800fe10
 8000ca8:	24000198 	.word	0x24000198
 8000cac:	0800fe18 	.word	0x0800fe18

08000cb0 <initFIR>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void initFIR(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af02      	add	r7, sp, #8
  // arm_fir_init_q31(&S, FIR_TAP_NUM, &firCoeffs32, &firStateF32, BUFFER_SIZE);
  arm_fir_init_f32(&S, FIR_TAP_NUM, firCoeffs32, firStateF32, 1);
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <initFIR+0x1c>)
 8000cbc:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <initFIR+0x20>)
 8000cbe:	211f      	movs	r1, #31
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <initFIR+0x24>)
 8000cc2:	f00e f8cf 	bl	800ee64 <arm_fir_init_f32>
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	240201b8 	.word	0x240201b8
 8000cd0:	0800fe28 	.word	0x0800fe28
 8000cd4:	24020234 	.word	0x24020234

08000cd8 <HAL_COMP_TriggerCallback>:

/* ******************************************************************************** */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	fl_trigger = 1;
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <HAL_COMP_TriggerCallback+0x1c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]


}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	24000197 	.word	0x24000197

08000cf8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	read_ptr = (read_ptr + 1) % BUFFER_SIZE;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_ADC_ConvCpltCallback+0x74>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d0a:	4a18      	ldr	r2, [pc, #96]	@ (8000d6c <HAL_ADC_ConvCpltCallback+0x74>)
 8000d0c:	6013      	str	r3, [r2, #0]

	if (fl_trigger == 1){
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_ADC_ConvCpltCallback+0x78>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d126      	bne.n	8000d64 <HAL_ADC_ConvCpltCallback+0x6c>
		fl_trigger = 0;
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <HAL_ADC_ConvCpltCallback+0x78>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
		if (capture_done ==  0) {
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d11f      	bne.n	8000d64 <HAL_ADC_ConvCpltCallback+0x6c>
				capture_done = 1;
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 8000d2a:	4813      	ldr	r0, [pc, #76]	@ (8000d78 <HAL_ADC_ConvCpltCallback+0x80>)
 8000d2c:	f001 fa64 	bl	80021f8 <HAL_ADC_Stop_DMA>
			  // Alternar buffers
			  if (currentBuffer == medicion)
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_ADC_ConvCpltCallback+0x84>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d106      	bne.n	8000d48 <HAL_ADC_ConvCpltCallback+0x50>
			  {
				  currentBuffer = envio;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <HAL_ADC_ConvCpltCallback+0x84>)
 8000d3c:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d3e:	601a      	str	r2, [r3, #0]
				  sendBuffer = medicion;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e005      	b.n	8000d54 <HAL_ADC_ConvCpltCallback+0x5c>
			  }
			  else
			  {
				  currentBuffer = medicion;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <HAL_ADC_ConvCpltCallback+0x84>)
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d4c:	601a      	str	r2, [r3, #0]
				  sendBuffer = envio;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d52:	601a      	str	r2, [r3, #0]
			  }

			  // Reiniciar el DMA con el nuevo buffer
			  HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_ADC_ConvCpltCallback+0x84>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <HAL_ADC_ConvCpltCallback+0x80>)
 8000d60:	f001 f986 	bl	8002070 <HAL_ADC_Start_DMA>
			}
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	240201a8 	.word	0x240201a8
 8000d70:	24000197 	.word	0x24000197
 8000d74:	240201b0 	.word	0x240201b0
 8000d78:	24000084 	.word	0x24000084
 8000d7c:	24000000 	.word	0x24000000
 8000d80:	240001a4 	.word	0x240001a4
 8000d84:	240101a4 	.word	0x240101a4
 8000d88:	240201a4 	.word	0x240201a4

08000d8c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d98:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <HAL_UART_TxCpltCallback+0x1c>)
 8000d9a:	f005 fd1e 	bl	80067da <HAL_GPIO_TogglePin>
	return;
 8000d9e:	bf00      	nop
}
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	58020400 	.word	0x58020400

08000dac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000db4:	2101      	movs	r1, #1
 8000db6:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x28>)
 8000db8:	f005 fd0f 	bl	80067da <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4906      	ldr	r1, [pc, #24]	@ (8000dd8 <HAL_UART_RxCpltCallback+0x2c>)
 8000dc0:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <HAL_UART_RxCpltCallback+0x30>)
 8000dc2:	f009 ff71 	bl	800aca8 <HAL_UART_Receive_IT>
	fl_receive = 1;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_UART_RxCpltCallback+0x34>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
	return;
 8000dcc:	bf00      	nop
}
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	2400018c 	.word	0x2400018c
 8000ddc:	24030544 	.word	0x24030544
 8000de0:	24000196 	.word	0x24000196

08000de4 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA3   ------> ADCx_INP15
*/
void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	@ 0x30
 8000de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b68      	ldr	r3, [pc, #416]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a66      	ldr	r2, [pc, #408]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b64      	ldr	r3, [pc, #400]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e18:	4b60      	ldr	r3, [pc, #384]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b5c      	ldr	r3, [pc, #368]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b59      	ldr	r3, [pc, #356]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	4a57      	ldr	r2, [pc, #348]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e46:	4b55      	ldr	r3, [pc, #340]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b51      	ldr	r3, [pc, #324]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	4a50      	ldr	r2, [pc, #320]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e64:	4b4d      	ldr	r3, [pc, #308]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e72:	4b4a      	ldr	r3, [pc, #296]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	4a48      	ldr	r2, [pc, #288]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e82:	4b46      	ldr	r3, [pc, #280]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e90:	4b42      	ldr	r3, [pc, #264]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4a41      	ldr	r2, [pc, #260]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eae:	4b3b      	ldr	r3, [pc, #236]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	4a39      	ldr	r2, [pc, #228]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebe:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <MX_GPIO_Init+0x1b8>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ed2:	4833      	ldr	r0, [pc, #204]	@ (8000fa0 <MX_GPIO_Init+0x1bc>)
 8000ed4:	f005 fc68 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ede:	4831      	ldr	r0, [pc, #196]	@ (8000fa4 <MX_GPIO_Init+0x1c0>)
 8000ee0:	f005 fc62 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	482f      	ldr	r0, [pc, #188]	@ (8000fa8 <MX_GPIO_Init+0x1c4>)
 8000eea:	f005 fc5d 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	482a      	ldr	r0, [pc, #168]	@ (8000fac <MX_GPIO_Init+0x1c8>)
 8000f04:	f005 faa0 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <MX_GPIO_Init+0x1cc>)
 8000f1c:	f005 fa94 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f20:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4819      	ldr	r0, [pc, #100]	@ (8000fa0 <MX_GPIO_Init+0x1bc>)
 8000f3a:	f005 fa85 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4813      	ldr	r0, [pc, #76]	@ (8000fa4 <MX_GPIO_Init+0x1c0>)
 8000f58:	f005 fa76 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <MX_GPIO_Init+0x1d0>)
 8000f72:	f005 fa69 	bl	8006448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <MX_GPIO_Init+0x1c4>)
 8000f8e:	f005 fa5b 	bl	8006448 <HAL_GPIO_Init>

}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020400 	.word	0x58020400
 8000fa4:	58020c00 	.word	0x58020c00
 8000fa8:	58021000 	.word	0x58021000
 8000fac:	58020800 	.word	0x58020800
 8000fb0:	58020000 	.word	0x58020000
 8000fb4:	58021800 	.word	0x58021800

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fbf2 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f812 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff ff0e 	bl	8000de4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc8:	f7ff fcf8 	bl	80009bc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fcc:	f000 fb12 	bl	80015f4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000fd0:	f7ff fb56 	bl	8000680 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000fd4:	f000 fa50 	bl	8001478 <MX_USART3_UART_Init>
  MX_COMP1_Init();
 8000fd8:	f7ff fc74 	bl	80008c4 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fdc:	f7ff fd28 	bl	8000a30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fe0:	f00c fcc7 	bl	800d972 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <main+0x2c>

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09e      	sub	sp, #120	@ 0x78
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00e f9ea 	bl	800f3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2220      	movs	r2, #32
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f00e f9e3 	bl	800f3d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800100a:	2002      	movs	r0, #2
 800100c:	f005 fd30 	bl	8006a70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b48      	ldr	r3, [pc, #288]	@ (8001138 <SystemClock_Config+0x150>)
 8001016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001018:	4a47      	ldr	r2, [pc, #284]	@ (8001138 <SystemClock_Config+0x150>)
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001020:	4b45      	ldr	r3, [pc, #276]	@ (8001138 <SystemClock_Config+0x150>)
 8001022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b44      	ldr	r3, [pc, #272]	@ (800113c <SystemClock_Config+0x154>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4a43      	ldr	r2, [pc, #268]	@ (800113c <SystemClock_Config+0x154>)
 8001030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001034:	6193      	str	r3, [r2, #24]
 8001036:	4b41      	ldr	r3, [pc, #260]	@ (800113c <SystemClock_Config+0x154>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001042:	bf00      	nop
 8001044:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <SystemClock_Config+0x154>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800104c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001050:	d1f8      	bne.n	8001044 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <SystemClock_Config+0x158>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001058:	4a39      	ldr	r2, [pc, #228]	@ (8001140 <SystemClock_Config+0x158>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001062:	4b37      	ldr	r3, [pc, #220]	@ (8001140 <SystemClock_Config+0x158>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <SystemClock_Config+0x154>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a30      	ldr	r2, [pc, #192]	@ (800113c <SystemClock_Config+0x154>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <SystemClock_Config+0x154>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <SystemClock_Config+0x150>)
 800108c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108e:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <SystemClock_Config+0x150>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <SystemClock_Config+0x150>)
 8001098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010a2:	bf00      	nop
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <SystemClock_Config+0x154>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010b0:	d1f8      	bne.n	80010a4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010b6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c0:	2302      	movs	r3, #2
 80010c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010c8:	2378      	movs	r3, #120	@ 0x78
 80010ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80010d0:	230f      	movs	r3, #15
 80010d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010d8:	230c      	movs	r3, #12
 80010da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010dc:	2300      	movs	r3, #0
 80010de:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 fd0b 	bl	8006b04 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80010f4:	f000 f838 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	233f      	movs	r3, #63	@ 0x3f
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2303      	movs	r3, #3
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001104:	2308      	movs	r3, #8
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800110c:	2340      	movs	r3, #64	@ 0x40
 800110e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001116:	2340      	movs	r3, #64	@ 0x40
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2104      	movs	r1, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f006 f949 	bl	80073b8 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800112c:	f000 f81c 	bl	8001168 <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3778      	adds	r7, #120	@ 0x78
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58000400 	.word	0x58000400
 800113c:	58024800 	.word	0x58024800
 8001140:	58024400 	.word	0x58024400

08001144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001156:	f000 fb61 	bl	800181c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010000 	.word	0x40010000

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <Error_Handler+0x8>

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_MspInit+0x38>)
 800117c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001180:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <HAL_MspInit+0x38>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_MspInit+0x38>)
 800118c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	210f      	movs	r1, #15
 800119c:	f06f 0001 	mvn.w	r0, #1
 80011a0:	f002 faee 	bl	8003780 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	58024400 	.word	0x58024400

080011b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	@ 0x38
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d844      	bhi.n	8001248 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80011be:	2200      	movs	r2, #0
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	2019      	movs	r0, #25
 80011c4:	f002 fadc 	bl	8003780 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011c8:	2019      	movs	r0, #25
 80011ca:	f002 faf3 	bl	80037b4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80011ce:	4a24      	ldr	r2, [pc, #144]	@ (8001260 <HAL_InitTick+0xb0>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_InitTick+0xb4>)
 80011d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011da:	4a22      	ldr	r2, [pc, #136]	@ (8001264 <HAL_InitTick+0xb4>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_InitTick+0xb4>)
 80011e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 fc67 	bl	8007ad0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001202:	f006 fc4f 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800120c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120e:	4a16      	ldr	r2, [pc, #88]	@ (8001268 <HAL_InitTick+0xb8>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	3b01      	subs	r3, #1
 8001218:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_InitTick+0xbc>)
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <HAL_InitTick+0xc0>)
 800121e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0xbc>)
 8001222:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001226:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001228:	4a10      	ldr	r2, [pc, #64]	@ (800126c <HAL_InitTick+0xbc>)
 800122a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_InitTick+0xbc>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <HAL_InitTick+0xbc>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800123a:	480c      	ldr	r0, [pc, #48]	@ (800126c <HAL_InitTick+0xbc>)
 800123c:	f009 f988 	bl	800a550 <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <HAL_InitTick+0xa6>
 8001246:	e001      	b.n	800124c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e005      	b.n	8001258 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800124c:	4807      	ldr	r0, [pc, #28]	@ (800126c <HAL_InitTick+0xbc>)
 800124e:	f009 f9e1 	bl	800a614 <HAL_TIM_Base_Start_IT>
 8001252:	4603      	mov	r3, r0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3738      	adds	r7, #56	@ 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2400000c 	.word	0x2400000c
 8001264:	58024400 	.word	0x58024400
 8001268:	431bde83 	.word	0x431bde83
 800126c:	240304f4 	.word	0x240304f4
 8001270:	40010000 	.word	0x40010000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA1_Stream0_IRQHandler+0x10>)
 80012b2:	f003 fdb7 	bl	8004e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	240000e8 	.word	0x240000e8

080012c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <TIM1_UP_IRQHandler+0x10>)
 80012c6:	f009 fa1d 	bl	800a704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240304f4 	.word	0x240304f4

080012d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <USART3_IRQHandler+0x10>)
 80012da:	f009 fd31 	bl	800ad40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24030544 	.word	0x24030544

080012e8 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <COMP1_IRQHandler+0x10>)
 80012ee:	f002 f91b 	bl	8003528 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	24000160 	.word	0x24000160

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f00e f8ae 	bl	800f48c <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24080000 	.word	0x24080000
 800135c:	00000400 	.word	0x00000400
 8001360:	24030540 	.word	0x24030540
 8001364:	24034960 	.word	0x24034960

08001368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800136c:	4b37      	ldr	r3, [pc, #220]	@ (800144c <SystemInit+0xe4>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001372:	4a36      	ldr	r2, [pc, #216]	@ (800144c <SystemInit+0xe4>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137c:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <SystemInit+0xe8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	2b06      	cmp	r3, #6
 8001386:	d807      	bhi.n	8001398 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001388:	4b31      	ldr	r3, [pc, #196]	@ (8001450 <SystemInit+0xe8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 030f 	bic.w	r3, r3, #15
 8001390:	4a2f      	ldr	r2, [pc, #188]	@ (8001450 <SystemInit+0xe8>)
 8001392:	f043 0307 	orr.w	r3, r3, #7
 8001396:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001398:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <SystemInit+0xec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a2d      	ldr	r2, [pc, #180]	@ (8001454 <SystemInit+0xec>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <SystemInit+0xec>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <SystemInit+0xec>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4929      	ldr	r1, [pc, #164]	@ (8001454 <SystemInit+0xec>)
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <SystemInit+0xf0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <SystemInit+0xe8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <SystemInit+0xe8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 030f 	bic.w	r3, r3, #15
 80013ca:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <SystemInit+0xe8>)
 80013cc:	f043 0307 	orr.w	r3, r3, #7
 80013d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <SystemInit+0xec>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <SystemInit+0xec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <SystemInit+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <SystemInit+0xec>)
 80013e6:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <SystemInit+0xf4>)
 80013e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <SystemInit+0xec>)
 80013ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <SystemInit+0xf8>)
 80013ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013f0:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <SystemInit+0xec>)
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <SystemInit+0xfc>)
 80013f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013f6:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <SystemInit+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <SystemInit+0xec>)
 80013fe:	4a19      	ldr	r2, [pc, #100]	@ (8001464 <SystemInit+0xfc>)
 8001400:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <SystemInit+0xec>)
 8001404:	2200      	movs	r2, #0
 8001406:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <SystemInit+0xec>)
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <SystemInit+0xfc>)
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <SystemInit+0xec>)
 8001410:	2200      	movs	r2, #0
 8001412:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <SystemInit+0xec>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <SystemInit+0xec>)
 800141a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800141e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <SystemInit+0xec>)
 8001422:	2200      	movs	r2, #0
 8001424:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <SystemInit+0x100>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <SystemInit+0x104>)
 800142c:	4013      	ands	r3, r2
 800142e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001432:	d202      	bcs.n	800143a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <SystemInit+0x108>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <SystemInit+0x10c>)
 800143c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001440:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	52002000 	.word	0x52002000
 8001454:	58024400 	.word	0x58024400
 8001458:	eaf6ed7f 	.word	0xeaf6ed7f
 800145c:	02020200 	.word	0x02020200
 8001460:	01ff0000 	.word	0x01ff0000
 8001464:	01010280 	.word	0x01010280
 8001468:	5c001000 	.word	0x5c001000
 800146c:	ffff0000 	.word	0xffff0000
 8001470:	51008108 	.word	0x51008108
 8001474:	52004000 	.word	0x52004000

08001478 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800147e:	4a23      	ldr	r2, [pc, #140]	@ (800150c <MX_USART3_UART_Init+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001484:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014c2:	f009 fb13 	bl	800aaec <HAL_UART_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014cc:	f7ff fe4c 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014d4:	f00b fe63 	bl	800d19e <HAL_UARTEx_SetTxFifoThreshold>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014de:	f7ff fe43 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014e6:	f00b fe98 	bl	800d21a <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014f0:	f7ff fe3a 	bl	8001168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014f6:	f00b fe19 	bl	800d12c <HAL_UARTEx_DisableFifoMode>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001500:	f7ff fe32 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24030544 	.word	0x24030544
 800150c:	40004800 	.word	0x40004800

08001510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0ba      	sub	sp, #232	@ 0xe8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	22c0      	movs	r2, #192	@ 0xc0
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00d ff4d 	bl	800f3d0 <memset>
  if(uartHandle->Instance==USART3)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a2b      	ldr	r2, [pc, #172]	@ (80015e8 <HAL_UART_MspInit+0xd8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d14e      	bne.n	80015de <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001540:	f04f 0202 	mov.w	r2, #2
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f006 fafc 	bl	8007b54 <HAL_RCCEx_PeriphCLKConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001562:	f7ff fe01 	bl	8001168 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_UART_MspInit+0xdc>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800156c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ec <HAL_UART_MspInit+0xdc>)
 800156e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001572:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001576:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <HAL_UART_MspInit+0xdc>)
 8001578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800157c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_UART_MspInit+0xdc>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <HAL_UART_MspInit+0xdc>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_UART_MspInit+0xdc>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015bc:	2307      	movs	r3, #7
 80015be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4809      	ldr	r0, [pc, #36]	@ (80015f0 <HAL_UART_MspInit+0xe0>)
 80015ca:	f004 ff3d 	bl	8006448 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2105      	movs	r1, #5
 80015d2:	2027      	movs	r0, #39	@ 0x27
 80015d4:	f002 f8d4 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015d8:	2027      	movs	r0, #39	@ 0x27
 80015da:	f002 f8eb 	bl	80037b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	37e8      	adds	r7, #232	@ 0xe8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004800 	.word	0x40004800
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58020c00 	.word	0x58020c00

080015f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015fa:	4a16      	ldr	r2, [pc, #88]	@ (8001654 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80015fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001600:	2209      	movs	r2, #9
 8001602:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001606:	2202      	movs	r2, #2
 8001608:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800160c:	2200      	movs	r2, #0
 800160e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001612:	2202      	movs	r2, #2
 8001614:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001618:	2201      	movs	r2, #1
 800161a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800161e:	2200      	movs	r2, #0
 8001620:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800162a:	2201      	movs	r2, #1
 800162c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001630:	2201      	movs	r2, #1
 8001632:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800163c:	f005 f8e7 	bl	800680e <HAL_PCD_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001646:	f7ff fd8f 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	240305d8 	.word	0x240305d8
 8001654:	40080000 	.word	0x40080000

08001658 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0ba      	sub	sp, #232	@ 0xe8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	22c0      	movs	r2, #192	@ 0xc0
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00d fea9 	bl	800f3d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a30      	ldr	r2, [pc, #192]	@ (8001744 <HAL_PCD_MspInit+0xec>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d159      	bne.n	800173c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001688:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001694:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 fa57 	bl	8007b54 <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80016ac:	f7ff fd5c 	bl	8001168 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80016b0:	f005 fa18 	bl	8006ae4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <HAL_PCD_MspInit+0xf0>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <HAL_PCD_MspInit+0xf0>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <HAL_PCD_MspInit+0xf0>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80016d2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80016d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016ec:	230a      	movs	r3, #10
 80016ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4814      	ldr	r0, [pc, #80]	@ (800174c <HAL_PCD_MspInit+0xf4>)
 80016fa:	f004 fea5 	bl	8006448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001716:	4619      	mov	r1, r3
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <HAL_PCD_MspInit+0xf4>)
 800171a:	f004 fe95 	bl	8006448 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_PCD_MspInit+0xf0>)
 8001720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001724:	4a08      	ldr	r2, [pc, #32]	@ (8001748 <HAL_PCD_MspInit+0xf0>)
 8001726:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800172a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_PCD_MspInit+0xf0>)
 8001730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800173c:	bf00      	nop
 800173e:	37e8      	adds	r7, #232	@ 0xe8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40080000 	.word	0x40080000
 8001748:	58024400 	.word	0x58024400
 800174c:	58020000 	.word	0x58020000

08001750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001788 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001754:	f7ff fe08 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	@ (8001790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	@ (800179c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177e:	f00d fe8b 	bl	800f498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001782:	f7ff fc19 	bl	8000fb8 <main>
  bx  lr
 8001786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001788:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800178c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001790:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001794:	0800ff28 	.word	0x0800ff28
  ldr r2, =_sbss
 8001798:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800179c:	2403495c 	.word	0x2403495c

080017a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC3_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f001 ffdd 	bl	800376a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017b0:	f005 ffb8 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_Init+0x68>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	4913      	ldr	r1, [pc, #76]	@ (8001810 <HAL_Init+0x6c>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_Init+0x68>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <HAL_Init+0x6c>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <HAL_Init+0x70>)
 80017e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_Init+0x74>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	200f      	movs	r0, #15
 80017f0:	f7ff fcde 	bl	80011b0 <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e002      	b.n	8001804 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017fe:	f7ff fcb9 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	58024400 	.word	0x58024400
 8001810:	0800fea4 	.word	0x0800fea4
 8001814:	24000008 	.word	0x24000008
 8001818:	24000004 	.word	0x24000004

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	24000010 	.word	0x24000010
 8001840:	24030abc 	.word	0x24030abc

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	24030abc 	.word	0x24030abc

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff ffee 	bl	8001844 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffde 	bl	8001844 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000010 	.word	0x24000010

080018a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_GetREVID+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1b      	lsrs	r3, r3, #16
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	5c001000 	.word	0x5c001000

080018bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3360      	adds	r3, #96	@ 0x60
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001958:	bf00      	nop
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	431a      	orrs	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	611a      	str	r2, [r3, #16]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001996:	b480      	push	{r7}
 8001998:	b087      	sub	sp, #28
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3360      	adds	r3, #96	@ 0x60
 80019a6:	461a      	mov	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
  }
}
 80019c0:	bf00      	nop
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b087      	sub	sp, #28
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3330      	adds	r3, #48	@ 0x30
 8001a02:	461a      	mov	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	4413      	add	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	211f      	movs	r1, #31
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	401a      	ands	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	f003 011f 	and.w	r1, r3, #31
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f023 0203 	bic.w	r2, r3, #3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3314      	adds	r3, #20
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	0e5b      	lsrs	r3, r3, #25
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	4413      	add	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	0d1b      	lsrs	r3, r3, #20
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	2107      	movs	r1, #7
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	0d1b      	lsrs	r3, r3, #20
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0318 	and.w	r3, r3, #24
 8001aea:	4908      	ldr	r1, [pc, #32]	@ (8001b0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	400b      	ands	r3, r1
 8001af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001af6:	431a      	orrs	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	000fffff 	.word	0x000fffff

08001b10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6093      	str	r3, [r2, #8]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	5fffffc0 	.word	0x5fffffc0

08001b50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	6fffffc0 	.word	0x6fffffc0

08001ba0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <LL_ADC_Enable+0x24>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	7fffffc0 	.word	0x7fffffc0

08001bf0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <LL_ADC_Disable+0x24>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	f043 0202 	orr.w	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	7fffffc0 	.word	0x7fffffc0

08001c18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <LL_ADC_IsEnabled+0x18>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <LL_ADC_IsEnabled+0x1a>
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d101      	bne.n	8001c56 <LL_ADC_IsDisableOngoing+0x18>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_ADC_IsDisableOngoing+0x1a>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <LL_ADC_REG_StartConversion+0x24>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	7fffffc0 	.word	0x7fffffc0

08001c8c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <LL_ADC_REG_StopConversion+0x24>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	f043 0210 	orr.w	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	7fffffc0 	.word	0x7fffffc0

08001cb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d101      	bne.n	8001ccc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <LL_ADC_INJ_StopConversion+0x24>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	7fffffc0 	.word	0x7fffffc0

08001d04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d101      	bne.n	8001d1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e18f      	b.n	8002066 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe fd0d 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff feef 	bl	8001b50 <LL_ADC_IsDeepPowerDownEnabled>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fed5 	bl	8001b2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff0a 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d114      	bne.n	8001dbc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff feee 	bl	8001b78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d9c:	4b87      	ldr	r3, [pc, #540]	@ (8001fbc <HAL_ADC_Init+0x290>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	4a87      	ldr	r2, [pc, #540]	@ (8001fc0 <HAL_ADC_Init+0x294>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	3301      	adds	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff feed 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	f043 0210 	orr.w	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff61 	bl	8001cb4 <LL_ADC_REG_IsConversionOngoing>
 8001df2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 8129 	bne.w	8002054 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8125 	bne.w	8002054 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fefa 	bl	8001c18 <LL_ADC_IsEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d136      	bne.n	8001e98 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a65      	ldr	r2, [pc, #404]	@ (8001fc4 <HAL_ADC_Init+0x298>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_ADC_Init+0x112>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a63      	ldr	r2, [pc, #396]	@ (8001fc8 <HAL_ADC_Init+0x29c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10e      	bne.n	8001e5c <HAL_ADC_Init+0x130>
 8001e3e:	4861      	ldr	r0, [pc, #388]	@ (8001fc4 <HAL_ADC_Init+0x298>)
 8001e40:	f7ff feea 	bl	8001c18 <LL_ADC_IsEnabled>
 8001e44:	4604      	mov	r4, r0
 8001e46:	4860      	ldr	r0, [pc, #384]	@ (8001fc8 <HAL_ADC_Init+0x29c>)
 8001e48:	f7ff fee6 	bl	8001c18 <LL_ADC_IsEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4323      	orrs	r3, r4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	e008      	b.n	8001e6e <HAL_ADC_Init+0x142>
 8001e5c:	485b      	ldr	r0, [pc, #364]	@ (8001fcc <HAL_ADC_Init+0x2a0>)
 8001e5e:	f7ff fedb 	bl	8001c18 <LL_ADC_IsEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d012      	beq.n	8001e98 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a53      	ldr	r2, [pc, #332]	@ (8001fc4 <HAL_ADC_Init+0x298>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_ADC_Init+0x15a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a51      	ldr	r2, [pc, #324]	@ (8001fc8 <HAL_ADC_Init+0x29c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x15e>
 8001e86:	4a52      	ldr	r2, [pc, #328]	@ (8001fd0 <HAL_ADC_Init+0x2a4>)
 8001e88:	e000      	b.n	8001e8c <HAL_ADC_Init+0x160>
 8001e8a:	4a52      	ldr	r2, [pc, #328]	@ (8001fd4 <HAL_ADC_Init+0x2a8>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd12 	bl	80018bc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e98:	f7ff fd04 	bl	80018a4 <HAL_GetREVID>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d914      	bls.n	8001ed0 <HAL_ADC_Init+0x1a4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d110      	bne.n	8001ed0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7d5b      	ldrb	r3, [r3, #21]
 8001eb2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ebe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7f1b      	ldrb	r3, [r3, #28]
 8001ec4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ec6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec8:	f043 030c 	orr.w	r3, r3, #12
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e00d      	b.n	8001eec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7d5b      	ldrb	r3, [r3, #21]
 8001ed4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eda:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ee0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7f1b      	ldrb	r3, [r3, #28]
 8001ee6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	045b      	lsls	r3, r3, #17
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <HAL_ADC_Init+0x2ac>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	69b9      	ldr	r1, [r7, #24]
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff febc 	bl	8001cb4 <LL_ADC_REG_IsConversionOngoing>
 8001f3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fede 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 8001f48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d15f      	bne.n	8002010 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d15c      	bne.n	8002010 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7d1b      	ldrb	r3, [r3, #20]
 8001f5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_ADC_Init+0x2b0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d130      	bne.n	8001fe4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <HAL_ADC_Init+0x2b4>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f96:	3a01      	subs	r2, #1
 8001f98:	0411      	lsls	r1, r2, #16
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001faa:	430a      	orrs	r2, r1
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	e01c      	b.n	8001ff4 <HAL_ADC_Init+0x2c8>
 8001fba:	bf00      	nop
 8001fbc:	24000004 	.word	0x24000004
 8001fc0:	053e2d63 	.word	0x053e2d63
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40022100 	.word	0x40022100
 8001fcc:	58026000 	.word	0x58026000
 8001fd0:	40022300 	.word	0x40022300
 8001fd4:	58026300 	.word	0x58026300
 8001fd8:	fff0c003 	.word	0xfff0c003
 8001fdc:	ffffbffc 	.word	0xffffbffc
 8001fe0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 ff00 	bl	8002e10 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10c      	bne.n	8002032 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	f023 010f 	bic.w	r1, r3, #15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 020f 	bic.w	r2, r2, #15
 8002040:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	@ 0x54
 8002052:	e007      	b.n	8002064 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	f043 0210 	orr.w	r2, r3, #16
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002064:	7ffb      	ldrb	r3, [r7, #31]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop

08002070 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a55      	ldr	r2, [pc, #340]	@ (80021d8 <HAL_ADC_Start_DMA+0x168>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_ADC_Start_DMA+0x20>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a54      	ldr	r2, [pc, #336]	@ (80021dc <HAL_ADC_Start_DMA+0x16c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_ADC_Start_DMA+0x24>
 8002090:	4b53      	ldr	r3, [pc, #332]	@ (80021e0 <HAL_ADC_Start_DMA+0x170>)
 8002092:	e000      	b.n	8002096 <HAL_ADC_Start_DMA+0x26>
 8002094:	4b53      	ldr	r3, [pc, #332]	@ (80021e4 <HAL_ADC_Start_DMA+0x174>)
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fd3a 	bl	8001b10 <LL_ADC_GetMultimode>
 800209c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fe06 	bl	8001cb4 <LL_ADC_REG_IsConversionOngoing>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 808c 	bne.w	80021c8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Start_DMA+0x4e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e087      	b.n	80021ce <HAL_ADC_Start_DMA+0x15e>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d002      	beq.n	80020d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	d170      	bne.n	80021ba <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fd1b 	bl	8002b14 <ADC_Enable>
 80020de:	4603      	mov	r3, r0
 80020e0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d163      	bne.n	80021b0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020ec:	4b3e      	ldr	r3, [pc, #248]	@ (80021e8 <HAL_ADC_Start_DMA+0x178>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a37      	ldr	r2, [pc, #220]	@ (80021dc <HAL_ADC_Start_DMA+0x16c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d002      	beq.n	8002108 <HAL_ADC_Start_DMA+0x98>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e000      	b.n	800210a <HAL_ADC_Start_DMA+0x9a>
 8002108:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <HAL_ADC_Start_DMA+0x168>)
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	4293      	cmp	r3, r2
 8002110:	d002      	beq.n	8002118 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f023 0206 	bic.w	r2, r3, #6
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58
 800213c:	e002      	b.n	8002144 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	4a28      	ldr	r2, [pc, #160]	@ (80021ec <HAL_ADC_Start_DMA+0x17c>)
 800214a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002150:	4a27      	ldr	r2, [pc, #156]	@ (80021f0 <HAL_ADC_Start_DMA+0x180>)
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002158:	4a26      	ldr	r2, [pc, #152]	@ (80021f4 <HAL_ADC_Start_DMA+0x184>)
 800215a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	221c      	movs	r2, #28
 8002162:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0210 	orr.w	r2, r2, #16
 800217a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f7ff fc5f 	bl	8001a4a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3340      	adds	r3, #64	@ 0x40
 8002196:	4619      	mov	r1, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f001 fe74 	bl	8003e88 <HAL_DMA_Start_IT>
 80021a0:	4603      	mov	r3, r0
 80021a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fd5b 	bl	8001c64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80021ae:	e00d      	b.n	80021cc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80021b8:	e008      	b.n	80021cc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021c6:	e001      	b.n	80021cc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
 80021ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40022100 	.word	0x40022100
 80021e0:	40022300 	.word	0x40022300
 80021e4:	58026300 	.word	0x58026300
 80021e8:	fffff0fe 	.word	0xfffff0fe
 80021ec:	08002ce7 	.word	0x08002ce7
 80021f0:	08002dbf 	.word	0x08002dbf
 80021f4:	08002ddb 	.word	0x08002ddb

080021f8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADC_Stop_DMA+0x16>
 800220a:	2302      	movs	r3, #2
 800220c:	e04f      	b.n	80022ae <HAL_ADC_Stop_DMA+0xb6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002216:	2103      	movs	r1, #3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fbbf 	bl	800299c <ADC_ConversionStop>
 800221e:	4603      	mov	r3, r0
 8002220:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d13d      	bne.n	80022a4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0203 	bic.w	r2, r2, #3
 8002236:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d10f      	bne.n	8002266 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	4618      	mov	r0, r3
 800224c:	f002 f886 	bl	800435c <HAL_DMA_Abort>
 8002250:	4603      	mov	r3, r0
 8002252:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0210 	bic.w	r2, r2, #16
 8002274:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fcd3 	bl	8002c28 <ADC_Disable>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	e002      	b.n	800228e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fccd 	bl	8002c28 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002298:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <HAL_ADC_Stop_DMA+0xc0>)
 800229a:	4013      	ands	r3, r2
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	ffffeefe 	.word	0xffffeefe

080022bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b0a1      	sub	sp, #132	@ 0x84
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a65      	ldr	r2, [pc, #404]	@ (8002494 <HAL_ADC_ConfigChannel+0x1b0>)
 80022fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x2a>
 800230a:	2302      	movs	r3, #2
 800230c:	e32e      	b.n	800296c <HAL_ADC_ConfigChannel+0x688>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fcca 	bl	8001cb4 <LL_ADC_REG_IsConversionOngoing>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8313 	bne.w	800294e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db2c      	blt.n	800238a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <HAL_ADC_ConfigChannel+0x6a>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2201      	movs	r2, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	e016      	b.n	800237c <HAL_ADC_ConfigChannel+0x98>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800235c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800235e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800236a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2201      	movs	r2, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	69d1      	ldr	r1, [r2, #28]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	430b      	orrs	r3, r1
 8002388:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	f7ff fb2b 	bl	80019f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fc87 	bl	8001cb4 <LL_ADC_REG_IsConversionOngoing>
 80023a6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fca9 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 80023b2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 80b8 	bne.w	800252c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 80b4 	bne.w	800252c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	461a      	mov	r2, r3
 80023d2:	f7ff fb4d 	bl	8001a70 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023d6:	4b30      	ldr	r3, [pc, #192]	@ (8002498 <HAL_ADC_ConfigChannel+0x1b4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80023de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023e2:	d10b      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x118>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	e01d      	b.n	8002438 <HAL_ADC_ConfigChannel+0x154>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x13e>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	e00a      	b.n	8002438 <HAL_ADC_ConfigChannel+0x154>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d02c      	beq.n	800249c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6919      	ldr	r1, [r3, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002450:	f7ff fa68 	bl	8001924 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6919      	ldr	r1, [r3, #16]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	7e5b      	ldrb	r3, [r3, #25]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d102      	bne.n	800246a <HAL_ADC_ConfigChannel+0x186>
 8002464:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002468:	e000      	b.n	800246c <HAL_ADC_ConfigChannel+0x188>
 800246a:	2300      	movs	r3, #0
 800246c:	461a      	mov	r2, r3
 800246e:	f7ff fa92 	bl	8001996 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	7e1b      	ldrb	r3, [r3, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1a4>
 8002482:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002486:	e000      	b.n	800248a <HAL_ADC_ConfigChannel+0x1a6>
 8002488:	2300      	movs	r3, #0
 800248a:	461a      	mov	r2, r3
 800248c:	f7ff fa6a 	bl	8001964 <LL_ADC_SetDataRightShift>
 8002490:	e04c      	b.n	800252c <HAL_ADC_ConfigChannel+0x248>
 8002492:	bf00      	nop
 8002494:	47ff0000 	.word	0x47ff0000
 8002498:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	069b      	lsls	r3, r3, #26
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d107      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024be:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	069b      	lsls	r3, r3, #26
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024e2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	069b      	lsls	r3, r3, #26
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002506:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	069b      	lsls	r3, r3, #26
 8002518:	429a      	cmp	r2, r3
 800251a:	d107      	bne.n	800252c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800252a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fb71 	bl	8001c18 <LL_ADC_IsEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 8211 	bne.w	8002960 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	f7ff fabc 	bl	8001ac8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4aa1      	ldr	r2, [pc, #644]	@ (80027dc <HAL_ADC_ConfigChannel+0x4f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f040 812e 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x2a0>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	3301      	adds	r3, #1
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2b09      	cmp	r3, #9
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e019      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x2d4>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002594:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80025a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	bf94      	ite	ls
 80025b2:	2301      	movls	r3, #1
 80025b4:	2300      	movhi	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d079      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x2f4>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	069b      	lsls	r3, r3, #26
 80025d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d6:	e015      	b.n	8002604 <HAL_ADC_ConfigChannel+0x320>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80025f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x340>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	e017      	b.n	8002654 <HAL_ADC_ConfigChannel+0x370>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002634:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	ea42 0103 	orr.w	r1, r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <HAL_ADC_ConfigChannel+0x396>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	3301      	adds	r3, #1
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	051b      	lsls	r3, r3, #20
 8002678:	e018      	b.n	80026ac <HAL_ADC_ConfigChannel+0x3c8>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800268c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e003      	b.n	800269e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ac:	430b      	orrs	r3, r1
 80026ae:	e07e      	b.n	80027ae <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x3e8>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	069b      	lsls	r3, r3, #26
 80026c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ca:	e015      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x414>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80026e4:	2320      	movs	r3, #32
 80026e6:	e003      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80026e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	069b      	lsls	r3, r3, #26
 80026f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x434>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	3301      	adds	r3, #1
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	e017      	b.n	8002748 <HAL_ADC_ConfigChannel+0x464>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	61bb      	str	r3, [r7, #24]
  return result;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	ea42 0103 	orr.w	r1, r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x490>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	3301      	adds	r3, #1
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	3b1e      	subs	r3, #30
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002772:	e01b      	b.n	80027ac <HAL_ADC_ConfigChannel+0x4c8>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	60fb      	str	r3, [r7, #12]
  return result;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e003      	b.n	8002798 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	051b      	lsls	r3, r3, #20
 80027a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ac:	430b      	orrs	r3, r1
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	6892      	ldr	r2, [r2, #8]
 80027b2:	4619      	mov	r1, r3
 80027b4:	f7ff f95c 	bl	8001a70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f280 80cf 	bge.w	8002960 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <HAL_ADC_ConfigChannel+0x4fc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x4f2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_ADC_ConfigChannel+0x500>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x508>
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <HAL_ADC_ConfigChannel+0x504>)
 80027d8:	e009      	b.n	80027ee <HAL_ADC_ConfigChannel+0x50a>
 80027da:	bf00      	nop
 80027dc:	47ff0000 	.word	0x47ff0000
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40022100 	.word	0x40022100
 80027e8:	40022300 	.word	0x40022300
 80027ec:	4b61      	ldr	r3, [pc, #388]	@ (8002974 <HAL_ADC_ConfigChannel+0x690>)
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f88a 	bl	8001908 <LL_ADC_GetCommonPathInternalCh>
 80027f4:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002978 <HAL_ADC_ConfigChannel+0x694>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_ADC_ConfigChannel+0x526>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5d      	ldr	r2, [pc, #372]	@ (800297c <HAL_ADC_ConfigChannel+0x698>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10e      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x544>
 800280a:	485b      	ldr	r0, [pc, #364]	@ (8002978 <HAL_ADC_ConfigChannel+0x694>)
 800280c:	f7ff fa04 	bl	8001c18 <LL_ADC_IsEnabled>
 8002810:	4604      	mov	r4, r0
 8002812:	485a      	ldr	r0, [pc, #360]	@ (800297c <HAL_ADC_ConfigChannel+0x698>)
 8002814:	f7ff fa00 	bl	8001c18 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	4323      	orrs	r3, r4
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e008      	b.n	800283a <HAL_ADC_ConfigChannel+0x556>
 8002828:	4855      	ldr	r0, [pc, #340]	@ (8002980 <HAL_ADC_ConfigChannel+0x69c>)
 800282a:	f7ff f9f5 	bl	8001c18 <LL_ADC_IsEnabled>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d07d      	beq.n	800293a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a50      	ldr	r2, [pc, #320]	@ (8002984 <HAL_ADC_ConfigChannel+0x6a0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d130      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x5c6>
 8002848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800284a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d12b      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <HAL_ADC_ConfigChannel+0x69c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	f040 8081 	bne.w	8002960 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a45      	ldr	r2, [pc, #276]	@ (8002978 <HAL_ADC_ConfigChannel+0x694>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x58e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a43      	ldr	r2, [pc, #268]	@ (800297c <HAL_ADC_ConfigChannel+0x698>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x592>
 8002872:	4a45      	ldr	r2, [pc, #276]	@ (8002988 <HAL_ADC_ConfigChannel+0x6a4>)
 8002874:	e000      	b.n	8002878 <HAL_ADC_ConfigChannel+0x594>
 8002876:	4a3f      	ldr	r2, [pc, #252]	@ (8002974 <HAL_ADC_ConfigChannel+0x690>)
 8002878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f7ff f82e 	bl	80018e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002886:	4b41      	ldr	r3, [pc, #260]	@ (800298c <HAL_ADC_ConfigChannel+0x6a8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	4a40      	ldr	r2, [pc, #256]	@ (8002990 <HAL_ADC_ConfigChannel+0x6ac>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	3301      	adds	r3, #1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800289a:	e002      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028a8:	e05a      	b.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a39      	ldr	r2, [pc, #228]	@ (8002994 <HAL_ADC_ConfigChannel+0x6b0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d11e      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x60e>
 80028b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d119      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002980 <HAL_ADC_ConfigChannel+0x69c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d14b      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <HAL_ADC_ConfigChannel+0x694>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_ADC_ConfigChannel+0x5f8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a29      	ldr	r2, [pc, #164]	@ (800297c <HAL_ADC_ConfigChannel+0x698>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x5fc>
 80028dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002988 <HAL_ADC_ConfigChannel+0x6a4>)
 80028de:	e000      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x5fe>
 80028e0:	4a24      	ldr	r2, [pc, #144]	@ (8002974 <HAL_ADC_ConfigChannel+0x690>)
 80028e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7fe fff9 	bl	80018e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f0:	e036      	b.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <HAL_ADC_ConfigChannel+0x6b4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d131      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
 80028fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d12c      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1d      	ldr	r2, [pc, #116]	@ (8002980 <HAL_ADC_ConfigChannel+0x69c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d127      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_ADC_ConfigChannel+0x694>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x640>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a17      	ldr	r2, [pc, #92]	@ (800297c <HAL_ADC_ConfigChannel+0x698>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x644>
 8002924:	4a18      	ldr	r2, [pc, #96]	@ (8002988 <HAL_ADC_ConfigChannel+0x6a4>)
 8002926:	e000      	b.n	800292a <HAL_ADC_ConfigChannel+0x646>
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <HAL_ADC_ConfigChannel+0x690>)
 800292a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800292c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7fe ffd5 	bl	80018e2 <LL_ADC_SetCommonPathInternalCh>
 8002938:	e012      	b.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800294c:	e008      	b.n	8002960 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002968:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800296c:	4618      	mov	r0, r3
 800296e:	3784      	adds	r7, #132	@ 0x84
 8002970:	46bd      	mov	sp, r7
 8002972:	bd90      	pop	{r4, r7, pc}
 8002974:	58026300 	.word	0x58026300
 8002978:	40022000 	.word	0x40022000
 800297c:	40022100 	.word	0x40022100
 8002980:	58026000 	.word	0x58026000
 8002984:	cb840000 	.word	0xcb840000
 8002988:	40022300 	.word	0x40022300
 800298c:	24000004 	.word	0x24000004
 8002990:	053e2d63 	.word	0x053e2d63
 8002994:	c7520000 	.word	0xc7520000
 8002998:	cfb80000 	.word	0xcfb80000

0800299c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f97e 	bl	8001cb4 <LL_ADC_REG_IsConversionOngoing>
 80029b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f9a0 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 80029c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8098 	beq.w	8002b04 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02a      	beq.n	8002a38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7d5b      	ldrb	r3, [r3, #21]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d126      	bne.n	8002a38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7d1b      	ldrb	r3, [r3, #20]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d122      	bne.n	8002a38 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029f6:	e014      	b.n	8002a22 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4a45      	ldr	r2, [pc, #276]	@ (8002b10 <ADC_ConversionStop+0x174>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d90d      	bls.n	8002a1c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0210 	orr.w	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e074      	b.n	8002b06 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b40      	cmp	r3, #64	@ 0x40
 8002a2e:	d1e3      	bne.n	80029f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2240      	movs	r2, #64	@ 0x40
 8002a36:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d014      	beq.n	8002a68 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f936 	bl	8001cb4 <LL_ADC_REG_IsConversionOngoing>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f8f3 	bl	8001c3e <LL_ADC_IsDisableOngoing>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f912 	bl	8001c8c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d014      	beq.n	8002a98 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f946 	bl	8001d04 <LL_ADC_INJ_IsConversionOngoing>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00c      	beq.n	8002a98 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f8db 	bl	8001c3e <LL_ADC_IsDisableOngoing>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f922 	bl	8001cdc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d005      	beq.n	8002aaa <ADC_ConversionStop+0x10e>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d105      	bne.n	8002ab0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	617b      	str	r3, [r7, #20]
        break;
 8002aa8:	e005      	b.n	8002ab6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	617b      	str	r3, [r7, #20]
        break;
 8002aae:	e002      	b.n	8002ab6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	617b      	str	r3, [r7, #20]
        break;
 8002ab4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fec5 	bl	8001844 <HAL_GetTick>
 8002aba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002abc:	e01b      	b.n	8002af6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002abe:	f7fe fec1 	bl	8001844 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d914      	bls.n	8002af6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e007      	b.n	8002b06 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1dc      	bne.n	8002abe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	000cdbff 	.word	0x000cdbff

08002b14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f879 	bl	8001c18 <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d16e      	bne.n	8002c0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <ADC_Enable+0x100>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e05a      	b.n	8002c0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f834 	bl	8001bc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b60:	f7fe fe70 	bl	8001844 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c18 <ADC_Enable+0x104>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <ADC_Enable+0x66>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a29      	ldr	r2, [pc, #164]	@ (8002c1c <ADC_Enable+0x108>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <ADC_Enable+0x6a>
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <ADC_Enable+0x10c>)
 8002b7c:	e000      	b.n	8002b80 <ADC_Enable+0x6c>
 8002b7e:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <ADC_Enable+0x110>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe ffc5 	bl	8001b10 <LL_ADC_GetMultimode>
 8002b86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <ADC_Enable+0x108>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d002      	beq.n	8002b98 <ADC_Enable+0x84>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e000      	b.n	8002b9a <ADC_Enable+0x86>
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <ADC_Enable+0x104>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d130      	bne.n	8002c0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ba8:	e028      	b.n	8002bfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f832 	bl	8001c18 <LL_ADC_IsEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f802 	bl	8001bc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc4:	f7fe fe3e 	bl	8001844 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d914      	bls.n	8002bfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d00d      	beq.n	8002bfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be4:	f043 0210 	orr.w	r2, r3, #16
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e007      	b.n	8002c0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d1cf      	bne.n	8002baa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	8000003f 	.word	0x8000003f
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40022100 	.word	0x40022100
 8002c20:	40022300 	.word	0x40022300
 8002c24:	58026300 	.word	0x58026300

08002c28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f802 	bl	8001c3e <LL_ADC_IsDisableOngoing>
 8002c3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe ffe9 	bl	8001c18 <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d047      	beq.n	8002cdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d144      	bne.n	8002cdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030d 	and.w	r3, r3, #13
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10c      	bne.n	8002c7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ffc3 	bl	8001bf0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c72:	f7fe fde7 	bl	8001844 <HAL_GetTick>
 8002c76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c78:	e029      	b.n	8002cce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e023      	b.n	8002cde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c96:	f7fe fdd5 	bl	8001844 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d914      	bls.n	8002cce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1dc      	bne.n	8002c96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d14b      	bne.n	8002d98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d021      	beq.n	8002d5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fe54 	bl	80019cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d032      	beq.n	8002d90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12b      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11f      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d5c:	e018      	b.n	8002d90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fd ffb1 	bl	8000cf8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d96:	e00e      	b.n	8002db6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fa93 	bl	80022d0 <HAL_ADC_ErrorCallback>
}
 8002daa:	e004      	b.n	8002db6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fa75 	bl	80022bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fa65 	bl	80022d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003008 <ADC_ConfigureBoostMode+0x1f8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <ADC_ConfigureBoostMode+0x1c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a79      	ldr	r2, [pc, #484]	@ (800300c <ADC_ConfigureBoostMode+0x1fc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d109      	bne.n	8002e40 <ADC_ConfigureBoostMode+0x30>
 8002e2c:	4b78      	ldr	r3, [pc, #480]	@ (8003010 <ADC_ConfigureBoostMode+0x200>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e008      	b.n	8002e52 <ADC_ConfigureBoostMode+0x42>
 8002e40:	4b74      	ldr	r3, [pc, #464]	@ (8003014 <ADC_ConfigureBoostMode+0x204>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01c      	beq.n	8002e90 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e56:	f004 fddf 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8002e5a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e64:	d010      	beq.n	8002e88 <ADC_ConfigureBoostMode+0x78>
 8002e66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e6a:	d873      	bhi.n	8002f54 <ADC_ConfigureBoostMode+0x144>
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e70:	d002      	beq.n	8002e78 <ADC_ConfigureBoostMode+0x68>
 8002e72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e76:	d16d      	bne.n	8002f54 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	60fb      	str	r3, [r7, #12]
        break;
 8002e86:	e068      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	60fb      	str	r3, [r7, #12]
        break;
 8002e8e:	e064      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e90:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e94:	f04f 0100 	mov.w	r1, #0
 8002e98:	f006 f866 	bl	8008f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e9c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002ea6:	d051      	beq.n	8002f4c <ADC_ConfigureBoostMode+0x13c>
 8002ea8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002eac:	d854      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002eae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002eb2:	d047      	beq.n	8002f44 <ADC_ConfigureBoostMode+0x134>
 8002eb4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002eb8:	d84e      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002eba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ebe:	d03d      	beq.n	8002f3c <ADC_ConfigureBoostMode+0x12c>
 8002ec0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ec4:	d848      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eca:	d033      	beq.n	8002f34 <ADC_ConfigureBoostMode+0x124>
 8002ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed0:	d842      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ed2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ed6:	d029      	beq.n	8002f2c <ADC_ConfigureBoostMode+0x11c>
 8002ed8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002edc:	d83c      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ede:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ee2:	d01a      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002ee4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ee8:	d836      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002eea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002eee:	d014      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002ef0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002ef4:	d830      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002efa:	d00e      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002efc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f00:	d82a      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002f02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f06:	d008      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002f08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f0c:	d824      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x148>
 8002f0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f12:	d002      	beq.n	8002f1a <ADC_ConfigureBoostMode+0x10a>
 8002f14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f18:	d11e      	bne.n	8002f58 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	60fb      	str	r3, [r7, #12]
        break;
 8002f2a:	e016      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
        break;
 8002f32:	e012      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	60fb      	str	r3, [r7, #12]
        break;
 8002f3a:	e00e      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	60fb      	str	r3, [r7, #12]
        break;
 8002f42:	e00a      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	09db      	lsrs	r3, r3, #7
 8002f48:	60fb      	str	r3, [r7, #12]
        break;
 8002f4a:	e006      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	60fb      	str	r3, [r7, #12]
        break;
 8002f52:	e002      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f58:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f5a:	f7fe fca3 	bl	80018a4 <HAL_GetREVID>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d815      	bhi.n	8002f94 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003018 <ADC_ConfigureBoostMode+0x208>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d908      	bls.n	8002f82 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f7e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f80:	e03e      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	e035      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800301c <ADC_ConfigureBoostMode+0x20c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d808      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002fb0:	609a      	str	r2, [r3, #8]
}
 8002fb2:	e025      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003020 <ADC_ConfigureBoostMode+0x210>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d80a      	bhi.n	8002fd2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	e016      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	@ (8003024 <ADC_ConfigureBoostMode+0x214>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d80a      	bhi.n	8002ff0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	e007      	b.n	8003000 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40022000 	.word	0x40022000
 800300c:	40022100 	.word	0x40022100
 8003010:	40022300 	.word	0x40022300
 8003014:	58026300 	.word	0x58026300
 8003018:	01312d00 	.word	0x01312d00
 800301c:	005f5e10 	.word	0x005f5e10
 8003020:	00bebc20 	.word	0x00bebc20
 8003024:	017d7840 	.word	0x017d7840

08003028 <LL_ADC_IsEnabled>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <LL_ADC_IsEnabled+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_ADC_IsEnabled+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_ADC_REG_IsConversionOngoing>:
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d101      	bne.n	8003066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b09f      	sub	sp, #124	@ 0x7c
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0be      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800309e:	2300      	movs	r3, #0
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d102      	bne.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030ac:	4b5b      	ldr	r3, [pc, #364]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	e001      	b.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e09d      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ffb9 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 80030dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ffb3 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d17f      	bne.n	80031ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d17c      	bne.n	80031ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a47      	ldr	r2, [pc, #284]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a46      	ldr	r2, [pc, #280]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003108:	4b45      	ldr	r3, [pc, #276]	@ (8003220 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800310a:	e000      	b.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800310c:	4b45      	ldr	r3, [pc, #276]	@ (8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800310e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d039      	beq.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	431a      	orrs	r2, r3
 8003126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003128:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a3a      	ldr	r2, [pc, #232]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a38      	ldr	r2, [pc, #224]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10e      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800313e:	4836      	ldr	r0, [pc, #216]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003140:	f7ff ff72 	bl	8003028 <LL_ADC_IsEnabled>
 8003144:	4604      	mov	r4, r0
 8003146:	4835      	ldr	r0, [pc, #212]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003148:	f7ff ff6e 	bl	8003028 <LL_ADC_IsEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	4323      	orrs	r3, r4
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e008      	b.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800315c:	4832      	ldr	r0, [pc, #200]	@ (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800315e:	f7ff ff63 	bl	8003028 <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d047      	beq.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003178:	4013      	ands	r3, r2
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	6811      	ldr	r1, [r2, #0]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003188:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800318a:	e03a      	b.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800318c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003196:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10e      	bne.n	80031ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80031ac:	481a      	ldr	r0, [pc, #104]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031ae:	f7ff ff3b 	bl	8003028 <LL_ADC_IsEnabled>
 80031b2:	4604      	mov	r4, r0
 80031b4:	4819      	ldr	r0, [pc, #100]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031b6:	f7ff ff37 	bl	8003028 <LL_ADC_IsEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4323      	orrs	r3, r4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e008      	b.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80031ca:	4817      	ldr	r0, [pc, #92]	@ (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031cc:	f7ff ff2c 	bl	8003028 <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d010      	beq.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ec:	e009      	b.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	f043 0220 	orr.w	r2, r3, #32
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003200:	e000      	b.n	8003204 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003202:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800320c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003210:	4618      	mov	r0, r3
 8003212:	377c      	adds	r7, #124	@ 0x7c
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	40022000 	.word	0x40022000
 800321c:	40022100 	.word	0x40022100
 8003220:	40022300 	.word	0x40022300
 8003224:	58026300 	.word	0x58026300
 8003228:	58026000 	.word	0x58026000
 800322c:	fffff0e0 	.word	0xfffff0e0

08003230 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e10e      	b.n	800346a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800325a:	d102      	bne.n	8003262 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e103      	b.n	800346a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd fb4f 	bl	8000920 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8003296:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800329c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80032a2:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80032a8:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b6e      	ldr	r3, [pc, #440]	@ (8003474 <HAL_COMP_Init+0x244>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	6979      	ldr	r1, [r7, #20]
 80032c2:	430b      	orrs	r3, r1
 80032c4:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d108      	bne.n	80032e0 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0210 	orr.w	r2, r2, #16
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e007      	b.n	80032f0 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0210 	bic.w	r2, r2, #16
 80032ee:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_COMP_Init+0xfc>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003304:	4b5c      	ldr	r3, [pc, #368]	@ (8003478 <HAL_COMP_Init+0x248>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	4a5c      	ldr	r2, [pc, #368]	@ (800347c <HAL_COMP_Init+0x24c>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800331e:	e002      	b.n	8003326 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3b01      	subs	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f9      	bne.n	8003320 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a53      	ldr	r2, [pc, #332]	@ (8003480 <HAL_COMP_Init+0x250>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d102      	bne.n	800333c <HAL_COMP_Init+0x10c>
 8003336:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800333a:	e001      	b.n	8003340 <HAL_COMP_Init+0x110>
 800333c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003340:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06d      	beq.n	800342a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
 800336a:	e008      	b.n	800337e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800337a:	4013      	ands	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
 800339a:	e008      	b.n	80033ae <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033aa:	4013      	ands	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80033ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80033cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80033d8:	e00a      	b.n	80033f0 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ea:	4013      	ands	r3, r2
 80033ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003400:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003404:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003410:	e021      	b.n	8003456 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003416:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003422:	4013      	ands	r3, r2
 8003424:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003428:	e015      	b.n	8003456 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800343a:	4013      	ands	r3, r2
 800343c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003444:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003450:	4013      	ands	r3, r2
 8003452:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 800346a:	7ffb      	ldrb	r3, [r7, #31]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	f0e8cce1 	.word	0xf0e8cce1
 8003478:	24000004 	.word	0x24000004
 800347c:	053e2d63 	.word	0x053e2d63
 8003480:	5800380c 	.word	0x5800380c

08003484 <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	e038      	b.n	8003512 <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034ae:	d102      	bne.n	80034b6 <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e02d      	b.n	8003512 <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d125      	bne.n	800350e <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034e0:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <HAL_COMP_Start_IT+0x9c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003524 <HAL_COMP_Start_IT+0xa0>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	3301      	adds	r3, #1
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 80034fe:	e002      	b.n	8003506 <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	3b01      	subs	r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f9      	bne.n	8003500 <HAL_COMP_Start_IT+0x7c>
 800350c:	e001      	b.n	8003512 <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	24000004 	.word	0x24000004
 8003524:	053e2d63 	.word	0x053e2d63

08003528 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a33      	ldr	r2, [pc, #204]	@ (8003604 <HAL_COMP_IRQHandler+0xdc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d102      	bne.n	8003540 <HAL_COMP_IRQHandler+0x18>
 800353a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800353e:	e001      	b.n	8003544 <HAL_COMP_IRQHandler+0x1c>
 8003540:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003544:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800354a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8003556:	4b2c      	ldr	r3, [pc, #176]	@ (8003608 <HAL_COMP_IRQHandler+0xe0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003566:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800356a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800356e:	e004      	b.n	800357a <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8003570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd fbac 	bl	8000cd8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358a:	2b40      	cmp	r3, #64	@ 0x40
 800358c:	d136      	bne.n	80035fc <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800358e:	4b1f      	ldr	r3, [pc, #124]	@ (800360c <HAL_COMP_IRQHandler+0xe4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359a:	d101      	bne.n	80035a0 <HAL_COMP_IRQHandler+0x78>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_COMP_IRQHandler+0x7a>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 80035a6:	4b19      	ldr	r3, [pc, #100]	@ (800360c <HAL_COMP_IRQHandler+0xe4>)
 80035a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80035ac:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035bc:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 80035be:	4b13      	ldr	r3, [pc, #76]	@ (800360c <HAL_COMP_IRQHandler+0xe4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ca:	d101      	bne.n	80035d0 <HAL_COMP_IRQHandler+0xa8>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_COMP_IRQHandler+0xaa>
 80035d0:	2300      	movs	r3, #0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_COMP_IRQHandler+0xe4>)
 80035d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035dc:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ec:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fb6e 	bl	8000cd8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	5800380c 	.word	0x5800380c
 8003608:	58003810 	.word	0x58003810
 800360c:	58003800 	.word	0x58003800

08003610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <__NVIC_SetPriorityGrouping+0x40>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800362c:	4013      	ands	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <__NVIC_SetPriorityGrouping+0x44>)
 800363a:	4313      	orrs	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363e:	4a04      	ldr	r2, [pc, #16]	@ (8003650 <__NVIC_SetPriorityGrouping+0x40>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60d3      	str	r3, [r2, #12]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00
 8003654:	05fa0000 	.word	0x05fa0000

08003658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800365c:	4b04      	ldr	r3, [pc, #16]	@ (8003670 <__NVIC_GetPriorityGrouping+0x18>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 0307 	and.w	r3, r3, #7
}
 8003666:	4618      	mov	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800367e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003682:	2b00      	cmp	r3, #0
 8003684:	db0b      	blt.n	800369e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	f003 021f 	and.w	r2, r3, #31
 800368c:	4907      	ldr	r1, [pc, #28]	@ (80036ac <__NVIC_EnableIRQ+0x38>)
 800368e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2001      	movs	r0, #1
 8003696:	fa00 f202 	lsl.w	r2, r0, r2
 800369a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000e100 	.word	0xe000e100

080036b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	db0a      	blt.n	80036da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	490c      	ldr	r1, [pc, #48]	@ (80036fc <__NVIC_SetPriority+0x4c>)
 80036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ce:	0112      	lsls	r2, r2, #4
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	440b      	add	r3, r1
 80036d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d8:	e00a      	b.n	80036f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4908      	ldr	r1, [pc, #32]	@ (8003700 <__NVIC_SetPriority+0x50>)
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	3b04      	subs	r3, #4
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	440b      	add	r3, r1
 80036ee:	761a      	strb	r2, [r3, #24]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000e100 	.word	0xe000e100
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	@ 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f1c3 0307 	rsb	r3, r3, #7
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf28      	it	cs
 8003722:	2304      	movcs	r3, #4
 8003724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3304      	adds	r3, #4
 800372a:	2b06      	cmp	r3, #6
 800372c:	d902      	bls.n	8003734 <NVIC_EncodePriority+0x30>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3b03      	subs	r3, #3
 8003732:	e000      	b.n	8003736 <NVIC_EncodePriority+0x32>
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003738:	f04f 32ff 	mov.w	r2, #4294967295
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	401a      	ands	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800374c:	f04f 31ff 	mov.w	r1, #4294967295
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	43d9      	mvns	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	4313      	orrs	r3, r2
         );
}
 800375e:	4618      	mov	r0, r3
 8003760:	3724      	adds	r7, #36	@ 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff4c 	bl	8003610 <__NVIC_SetPriorityGrouping>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800378e:	f7ff ff63 	bl	8003658 <__NVIC_GetPriorityGrouping>
 8003792:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	6978      	ldr	r0, [r7, #20]
 800379a:	f7ff ffb3 	bl	8003704 <NVIC_EncodePriority>
 800379e:	4602      	mov	r2, r0
 80037a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ff82 	bl	80036b0 <__NVIC_SetPriority>
}
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff ff56 	bl	8003674 <__NVIC_EnableIRQ>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7fe f834 	bl	8001844 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e316      	b.n	8003e16 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a66      	ldr	r2, [pc, #408]	@ (8003988 <HAL_DMA_Init+0x1b8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04a      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a65      	ldr	r2, [pc, #404]	@ (800398c <HAL_DMA_Init+0x1bc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d045      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a63      	ldr	r2, [pc, #396]	@ (8003990 <HAL_DMA_Init+0x1c0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d040      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a62      	ldr	r2, [pc, #392]	@ (8003994 <HAL_DMA_Init+0x1c4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d03b      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a60      	ldr	r2, [pc, #384]	@ (8003998 <HAL_DMA_Init+0x1c8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d036      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5f      	ldr	r2, [pc, #380]	@ (800399c <HAL_DMA_Init+0x1cc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d031      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5d      	ldr	r2, [pc, #372]	@ (80039a0 <HAL_DMA_Init+0x1d0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02c      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5c      	ldr	r2, [pc, #368]	@ (80039a4 <HAL_DMA_Init+0x1d4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d027      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5a      	ldr	r2, [pc, #360]	@ (80039a8 <HAL_DMA_Init+0x1d8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d022      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a59      	ldr	r2, [pc, #356]	@ (80039ac <HAL_DMA_Init+0x1dc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d01d      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a57      	ldr	r2, [pc, #348]	@ (80039b0 <HAL_DMA_Init+0x1e0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d018      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a56      	ldr	r2, [pc, #344]	@ (80039b4 <HAL_DMA_Init+0x1e4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a54      	ldr	r2, [pc, #336]	@ (80039b8 <HAL_DMA_Init+0x1e8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00e      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a53      	ldr	r2, [pc, #332]	@ (80039bc <HAL_DMA_Init+0x1ec>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a51      	ldr	r2, [pc, #324]	@ (80039c0 <HAL_DMA_Init+0x1f0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_DMA_Init+0xb8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a50      	ldr	r2, [pc, #320]	@ (80039c4 <HAL_DMA_Init+0x1f4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_DMA_Init+0xbc>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_DMA_Init+0xbe>
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 813b 	beq.w	8003b0a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a37      	ldr	r2, [pc, #220]	@ (8003988 <HAL_DMA_Init+0x1b8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d04a      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a36      	ldr	r2, [pc, #216]	@ (800398c <HAL_DMA_Init+0x1bc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d045      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a34      	ldr	r2, [pc, #208]	@ (8003990 <HAL_DMA_Init+0x1c0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d040      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a33      	ldr	r2, [pc, #204]	@ (8003994 <HAL_DMA_Init+0x1c4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d03b      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a31      	ldr	r2, [pc, #196]	@ (8003998 <HAL_DMA_Init+0x1c8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d036      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a30      	ldr	r2, [pc, #192]	@ (800399c <HAL_DMA_Init+0x1cc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d031      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2e      	ldr	r2, [pc, #184]	@ (80039a0 <HAL_DMA_Init+0x1d0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02c      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2d      	ldr	r2, [pc, #180]	@ (80039a4 <HAL_DMA_Init+0x1d4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d027      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2b      	ldr	r2, [pc, #172]	@ (80039a8 <HAL_DMA_Init+0x1d8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d022      	beq.n	8003944 <HAL_DMA_Init+0x174>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a2a      	ldr	r2, [pc, #168]	@ (80039ac <HAL_DMA_Init+0x1dc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d01d      	beq.n	8003944 <HAL_DMA_Init+0x174>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a28      	ldr	r2, [pc, #160]	@ (80039b0 <HAL_DMA_Init+0x1e0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d018      	beq.n	8003944 <HAL_DMA_Init+0x174>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a27      	ldr	r2, [pc, #156]	@ (80039b4 <HAL_DMA_Init+0x1e4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d013      	beq.n	8003944 <HAL_DMA_Init+0x174>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a25      	ldr	r2, [pc, #148]	@ (80039b8 <HAL_DMA_Init+0x1e8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00e      	beq.n	8003944 <HAL_DMA_Init+0x174>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <HAL_DMA_Init+0x1ec>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_DMA_Init+0x174>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a22      	ldr	r2, [pc, #136]	@ (80039c0 <HAL_DMA_Init+0x1f0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_DMA_Init+0x174>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a21      	ldr	r2, [pc, #132]	@ (80039c4 <HAL_DMA_Init+0x1f4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d108      	bne.n	8003956 <HAL_DMA_Init+0x186>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e007      	b.n	8003966 <HAL_DMA_Init+0x196>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003966:	e02f      	b.n	80039c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003968:	f7fd ff6c 	bl	8001844 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b05      	cmp	r3, #5
 8003974:	d928      	bls.n	80039c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2203      	movs	r2, #3
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e246      	b.n	8003e16 <HAL_DMA_Init+0x646>
 8003988:	40020010 	.word	0x40020010
 800398c:	40020028 	.word	0x40020028
 8003990:	40020040 	.word	0x40020040
 8003994:	40020058 	.word	0x40020058
 8003998:	40020070 	.word	0x40020070
 800399c:	40020088 	.word	0x40020088
 80039a0:	400200a0 	.word	0x400200a0
 80039a4:	400200b8 	.word	0x400200b8
 80039a8:	40020410 	.word	0x40020410
 80039ac:	40020428 	.word	0x40020428
 80039b0:	40020440 	.word	0x40020440
 80039b4:	40020458 	.word	0x40020458
 80039b8:	40020470 	.word	0x40020470
 80039bc:	40020488 	.word	0x40020488
 80039c0:	400204a0 	.word	0x400204a0
 80039c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1c8      	bne.n	8003968 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4b83      	ldr	r3, [pc, #524]	@ (8003bf0 <HAL_DMA_Init+0x420>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d107      	bne.n	8003a2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	4313      	orrs	r3, r2
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a2c:	4b71      	ldr	r3, [pc, #452]	@ (8003bf4 <HAL_DMA_Init+0x424>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b71      	ldr	r3, [pc, #452]	@ (8003bf8 <HAL_DMA_Init+0x428>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a38:	d328      	bcc.n	8003a8c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b28      	cmp	r3, #40	@ 0x28
 8003a40:	d903      	bls.n	8003a4a <HAL_DMA_Init+0x27a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a48:	d917      	bls.n	8003a7a <HAL_DMA_Init+0x2aa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a50:	d903      	bls.n	8003a5a <HAL_DMA_Init+0x28a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b42      	cmp	r3, #66	@ 0x42
 8003a58:	d90f      	bls.n	8003a7a <HAL_DMA_Init+0x2aa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b46      	cmp	r3, #70	@ 0x46
 8003a60:	d903      	bls.n	8003a6a <HAL_DMA_Init+0x29a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b48      	cmp	r3, #72	@ 0x48
 8003a68:	d907      	bls.n	8003a7a <HAL_DMA_Init+0x2aa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a70:	d905      	bls.n	8003a7e <HAL_DMA_Init+0x2ae>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b52      	cmp	r3, #82	@ 0x52
 8003a78:	d801      	bhi.n	8003a7e <HAL_DMA_Init+0x2ae>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_DMA_Init+0x2b0>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0307 	bic.w	r3, r3, #7
 8003aa2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d117      	bne.n	8003ae6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f002 fb33 	bl	8006134 <DMA_CheckFifoParam>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2240      	movs	r2, #64	@ 0x40
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e197      	b.n	8003e16 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f002 fa6e 	bl	8005fd0 <DMA_CalcBaseAndBitshift>
 8003af4:	4603      	mov	r3, r0
 8003af6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	223f      	movs	r2, #63	@ 0x3f
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	e0cd      	b.n	8003ca6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003bfc <HAL_DMA_Init+0x42c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_Init+0x38a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a39      	ldr	r2, [pc, #228]	@ (8003c00 <HAL_DMA_Init+0x430>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_DMA_Init+0x38a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a38      	ldr	r2, [pc, #224]	@ (8003c04 <HAL_DMA_Init+0x434>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_DMA_Init+0x38a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a36      	ldr	r2, [pc, #216]	@ (8003c08 <HAL_DMA_Init+0x438>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_DMA_Init+0x38a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a35      	ldr	r2, [pc, #212]	@ (8003c0c <HAL_DMA_Init+0x43c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_DMA_Init+0x38a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a33      	ldr	r2, [pc, #204]	@ (8003c10 <HAL_DMA_Init+0x440>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_DMA_Init+0x38a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a32      	ldr	r2, [pc, #200]	@ (8003c14 <HAL_DMA_Init+0x444>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_DMA_Init+0x38a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a30      	ldr	r2, [pc, #192]	@ (8003c18 <HAL_DMA_Init+0x448>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_DMA_Init+0x38e>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_DMA_Init+0x390>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <HAL_DMA_Init+0x42c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d021      	beq.n	8003bb4 <HAL_DMA_Init+0x3e4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_DMA_Init+0x430>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01c      	beq.n	8003bb4 <HAL_DMA_Init+0x3e4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a21      	ldr	r2, [pc, #132]	@ (8003c04 <HAL_DMA_Init+0x434>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d017      	beq.n	8003bb4 <HAL_DMA_Init+0x3e4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <HAL_DMA_Init+0x438>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d012      	beq.n	8003bb4 <HAL_DMA_Init+0x3e4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <HAL_DMA_Init+0x43c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00d      	beq.n	8003bb4 <HAL_DMA_Init+0x3e4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c10 <HAL_DMA_Init+0x440>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d008      	beq.n	8003bb4 <HAL_DMA_Init+0x3e4>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <HAL_DMA_Init+0x444>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <HAL_DMA_Init+0x3e4>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <HAL_DMA_Init+0x448>)
 8003bb2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <HAL_DMA_Init+0x44c>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b40      	cmp	r3, #64	@ 0x40
 8003bda:	d021      	beq.n	8003c20 <HAL_DMA_Init+0x450>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b80      	cmp	r3, #128	@ 0x80
 8003be2:	d102      	bne.n	8003bea <HAL_DMA_Init+0x41a>
 8003be4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003be8:	e01b      	b.n	8003c22 <HAL_DMA_Init+0x452>
 8003bea:	2300      	movs	r3, #0
 8003bec:	e019      	b.n	8003c22 <HAL_DMA_Init+0x452>
 8003bee:	bf00      	nop
 8003bf0:	fe10803f 	.word	0xfe10803f
 8003bf4:	5c001000 	.word	0x5c001000
 8003bf8:	ffff0000 	.word	0xffff0000
 8003bfc:	58025408 	.word	0x58025408
 8003c00:	5802541c 	.word	0x5802541c
 8003c04:	58025430 	.word	0x58025430
 8003c08:	58025444 	.word	0x58025444
 8003c0c:	58025458 	.word	0x58025458
 8003c10:	5802546c 	.word	0x5802546c
 8003c14:	58025480 	.word	0x58025480
 8003c18:	58025494 	.word	0x58025494
 8003c1c:	fffe000f 	.word	0xfffe000f
 8003c20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b6e      	ldr	r3, [pc, #440]	@ (8003e20 <HAL_DMA_Init+0x650>)
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e24 <HAL_DMA_Init+0x654>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	009a      	lsls	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f002 f9a9 	bl	8005fd0 <DMA_CalcBaseAndBitshift>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	e008      	b.n	8003ca6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0b7      	b.n	8003e16 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5f      	ldr	r2, [pc, #380]	@ (8003e28 <HAL_DMA_Init+0x658>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d072      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e2c <HAL_DMA_Init+0x65c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d06d      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8003e30 <HAL_DMA_Init+0x660>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d068      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e34 <HAL_DMA_Init+0x664>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d063      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a59      	ldr	r2, [pc, #356]	@ (8003e38 <HAL_DMA_Init+0x668>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d05e      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a57      	ldr	r2, [pc, #348]	@ (8003e3c <HAL_DMA_Init+0x66c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d059      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a56      	ldr	r2, [pc, #344]	@ (8003e40 <HAL_DMA_Init+0x670>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d054      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a54      	ldr	r2, [pc, #336]	@ (8003e44 <HAL_DMA_Init+0x674>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d04f      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a53      	ldr	r2, [pc, #332]	@ (8003e48 <HAL_DMA_Init+0x678>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04a      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a51      	ldr	r2, [pc, #324]	@ (8003e4c <HAL_DMA_Init+0x67c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a50      	ldr	r2, [pc, #320]	@ (8003e50 <HAL_DMA_Init+0x680>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d040      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4e      	ldr	r2, [pc, #312]	@ (8003e54 <HAL_DMA_Init+0x684>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d03b      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a4d      	ldr	r2, [pc, #308]	@ (8003e58 <HAL_DMA_Init+0x688>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e5c <HAL_DMA_Init+0x68c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a4a      	ldr	r2, [pc, #296]	@ (8003e60 <HAL_DMA_Init+0x690>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d02c      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a48      	ldr	r2, [pc, #288]	@ (8003e64 <HAL_DMA_Init+0x694>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d027      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a47      	ldr	r2, [pc, #284]	@ (8003e68 <HAL_DMA_Init+0x698>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a45      	ldr	r2, [pc, #276]	@ (8003e6c <HAL_DMA_Init+0x69c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a44      	ldr	r2, [pc, #272]	@ (8003e70 <HAL_DMA_Init+0x6a0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a42      	ldr	r2, [pc, #264]	@ (8003e74 <HAL_DMA_Init+0x6a4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a41      	ldr	r2, [pc, #260]	@ (8003e78 <HAL_DMA_Init+0x6a8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e7c <HAL_DMA_Init+0x6ac>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3e      	ldr	r2, [pc, #248]	@ (8003e80 <HAL_DMA_Init+0x6b0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_DMA_Init+0x5c6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a3c      	ldr	r2, [pc, #240]	@ (8003e84 <HAL_DMA_Init+0x6b4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Init+0x5ca>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_DMA_Init+0x5cc>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d032      	beq.n	8003e06 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f002 fa43 	bl	800622c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b80      	cmp	r3, #128	@ 0x80
 8003dac:	d102      	bne.n	8003db4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003dc8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d010      	beq.n	8003df4 <HAL_DMA_Init+0x624>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d80c      	bhi.n	8003df4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f002 fac0 	bl	8006360 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	e008      	b.n	8003e06 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	a7fdabf8 	.word	0xa7fdabf8
 8003e24:	cccccccd 	.word	0xcccccccd
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
 8003e68:	58025408 	.word	0x58025408
 8003e6c:	5802541c 	.word	0x5802541c
 8003e70:	58025430 	.word	0x58025430
 8003e74:	58025444 	.word	0x58025444
 8003e78:	58025458 	.word	0x58025458
 8003e7c:	5802546c 	.word	0x5802546c
 8003e80:	58025480 	.word	0x58025480
 8003e84:	58025494 	.word	0x58025494

08003e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e226      	b.n	80042f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA_Start_IT+0x2a>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e21f      	b.n	80042f2 <HAL_DMA_Start_IT+0x46a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	f040 820a 	bne.w	80042dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a68      	ldr	r2, [pc, #416]	@ (800407c <HAL_DMA_Start_IT+0x1f4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a66      	ldr	r2, [pc, #408]	@ (8004080 <HAL_DMA_Start_IT+0x1f8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a65      	ldr	r2, [pc, #404]	@ (8004084 <HAL_DMA_Start_IT+0x1fc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a63      	ldr	r2, [pc, #396]	@ (8004088 <HAL_DMA_Start_IT+0x200>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a62      	ldr	r2, [pc, #392]	@ (800408c <HAL_DMA_Start_IT+0x204>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a60      	ldr	r2, [pc, #384]	@ (8004090 <HAL_DMA_Start_IT+0x208>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5f      	ldr	r2, [pc, #380]	@ (8004094 <HAL_DMA_Start_IT+0x20c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5d      	ldr	r2, [pc, #372]	@ (8004098 <HAL_DMA_Start_IT+0x210>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800409c <HAL_DMA_Start_IT+0x214>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a5a      	ldr	r2, [pc, #360]	@ (80040a0 <HAL_DMA_Start_IT+0x218>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a59      	ldr	r2, [pc, #356]	@ (80040a4 <HAL_DMA_Start_IT+0x21c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a57      	ldr	r2, [pc, #348]	@ (80040a8 <HAL_DMA_Start_IT+0x220>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a56      	ldr	r2, [pc, #344]	@ (80040ac <HAL_DMA_Start_IT+0x224>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a54      	ldr	r2, [pc, #336]	@ (80040b0 <HAL_DMA_Start_IT+0x228>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a53      	ldr	r2, [pc, #332]	@ (80040b4 <HAL_DMA_Start_IT+0x22c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a51      	ldr	r2, [pc, #324]	@ (80040b8 <HAL_DMA_Start_IT+0x230>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <HAL_DMA_Start_IT+0x100>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e007      	b.n	8003f98 <HAL_DMA_Start_IT+0x110>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f001 fe6a 	bl	8005c78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a34      	ldr	r2, [pc, #208]	@ (800407c <HAL_DMA_Start_IT+0x1f4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04a      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a33      	ldr	r2, [pc, #204]	@ (8004080 <HAL_DMA_Start_IT+0x1f8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d045      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a31      	ldr	r2, [pc, #196]	@ (8004084 <HAL_DMA_Start_IT+0x1fc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a30      	ldr	r2, [pc, #192]	@ (8004088 <HAL_DMA_Start_IT+0x200>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d03b      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800408c <HAL_DMA_Start_IT+0x204>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d036      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2d      	ldr	r2, [pc, #180]	@ (8004090 <HAL_DMA_Start_IT+0x208>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d031      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8004094 <HAL_DMA_Start_IT+0x20c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02c      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2a      	ldr	r2, [pc, #168]	@ (8004098 <HAL_DMA_Start_IT+0x210>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d027      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	@ (800409c <HAL_DMA_Start_IT+0x214>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a27      	ldr	r2, [pc, #156]	@ (80040a0 <HAL_DMA_Start_IT+0x218>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01d      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a25      	ldr	r2, [pc, #148]	@ (80040a4 <HAL_DMA_Start_IT+0x21c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a24      	ldr	r2, [pc, #144]	@ (80040a8 <HAL_DMA_Start_IT+0x220>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a22      	ldr	r2, [pc, #136]	@ (80040ac <HAL_DMA_Start_IT+0x224>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a21      	ldr	r2, [pc, #132]	@ (80040b0 <HAL_DMA_Start_IT+0x228>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1f      	ldr	r2, [pc, #124]	@ (80040b4 <HAL_DMA_Start_IT+0x22c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_DMA_Start_IT+0x1bc>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1e      	ldr	r2, [pc, #120]	@ (80040b8 <HAL_DMA_Start_IT+0x230>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_DMA_Start_IT+0x1c0>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_DMA_Start_IT+0x1c2>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d036      	beq.n	80040bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f023 021e 	bic.w	r2, r3, #30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0216 	orr.w	r2, r2, #22
 8004060:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d03e      	beq.n	80040e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0208 	orr.w	r2, r2, #8
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e035      	b.n	80040e8 <HAL_DMA_Start_IT+0x260>
 800407c:	40020010 	.word	0x40020010
 8004080:	40020028 	.word	0x40020028
 8004084:	40020040 	.word	0x40020040
 8004088:	40020058 	.word	0x40020058
 800408c:	40020070 	.word	0x40020070
 8004090:	40020088 	.word	0x40020088
 8004094:	400200a0 	.word	0x400200a0
 8004098:	400200b8 	.word	0x400200b8
 800409c:	40020410 	.word	0x40020410
 80040a0:	40020428 	.word	0x40020428
 80040a4:	40020440 	.word	0x40020440
 80040a8:	40020458 	.word	0x40020458
 80040ac:	40020470 	.word	0x40020470
 80040b0:	40020488 	.word	0x40020488
 80040b4:	400204a0 	.word	0x400204a0
 80040b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 020e 	bic.w	r2, r3, #14
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 020a 	orr.w	r2, r2, #10
 80040ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0204 	orr.w	r2, r2, #4
 80040e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a83      	ldr	r2, [pc, #524]	@ (80042fc <HAL_DMA_Start_IT+0x474>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d072      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a82      	ldr	r2, [pc, #520]	@ (8004300 <HAL_DMA_Start_IT+0x478>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d06d      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a80      	ldr	r2, [pc, #512]	@ (8004304 <HAL_DMA_Start_IT+0x47c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d068      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7f      	ldr	r2, [pc, #508]	@ (8004308 <HAL_DMA_Start_IT+0x480>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d063      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a7d      	ldr	r2, [pc, #500]	@ (800430c <HAL_DMA_Start_IT+0x484>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d05e      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a7c      	ldr	r2, [pc, #496]	@ (8004310 <HAL_DMA_Start_IT+0x488>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d059      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7a      	ldr	r2, [pc, #488]	@ (8004314 <HAL_DMA_Start_IT+0x48c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d054      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a79      	ldr	r2, [pc, #484]	@ (8004318 <HAL_DMA_Start_IT+0x490>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d04f      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a77      	ldr	r2, [pc, #476]	@ (800431c <HAL_DMA_Start_IT+0x494>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d04a      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a76      	ldr	r2, [pc, #472]	@ (8004320 <HAL_DMA_Start_IT+0x498>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d045      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a74      	ldr	r2, [pc, #464]	@ (8004324 <HAL_DMA_Start_IT+0x49c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d040      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a73      	ldr	r2, [pc, #460]	@ (8004328 <HAL_DMA_Start_IT+0x4a0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d03b      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a71      	ldr	r2, [pc, #452]	@ (800432c <HAL_DMA_Start_IT+0x4a4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d036      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a70      	ldr	r2, [pc, #448]	@ (8004330 <HAL_DMA_Start_IT+0x4a8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d031      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a6e      	ldr	r2, [pc, #440]	@ (8004334 <HAL_DMA_Start_IT+0x4ac>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d02c      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6d      	ldr	r2, [pc, #436]	@ (8004338 <HAL_DMA_Start_IT+0x4b0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d027      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a6b      	ldr	r2, [pc, #428]	@ (800433c <HAL_DMA_Start_IT+0x4b4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d022      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6a      	ldr	r2, [pc, #424]	@ (8004340 <HAL_DMA_Start_IT+0x4b8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d01d      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a68      	ldr	r2, [pc, #416]	@ (8004344 <HAL_DMA_Start_IT+0x4bc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d018      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a67      	ldr	r2, [pc, #412]	@ (8004348 <HAL_DMA_Start_IT+0x4c0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d013      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a65      	ldr	r2, [pc, #404]	@ (800434c <HAL_DMA_Start_IT+0x4c4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00e      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a64      	ldr	r2, [pc, #400]	@ (8004350 <HAL_DMA_Start_IT+0x4c8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d009      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a62      	ldr	r2, [pc, #392]	@ (8004354 <HAL_DMA_Start_IT+0x4cc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_DMA_Start_IT+0x350>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a61      	ldr	r2, [pc, #388]	@ (8004358 <HAL_DMA_Start_IT+0x4d0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_DMA_Start_IT+0x354>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <HAL_DMA_Start_IT+0x356>
 80041dc:	2300      	movs	r3, #0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01a      	beq.n	8004218 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004216:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a37      	ldr	r2, [pc, #220]	@ (80042fc <HAL_DMA_Start_IT+0x474>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d04a      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a36      	ldr	r2, [pc, #216]	@ (8004300 <HAL_DMA_Start_IT+0x478>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d045      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a34      	ldr	r2, [pc, #208]	@ (8004304 <HAL_DMA_Start_IT+0x47c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d040      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a33      	ldr	r2, [pc, #204]	@ (8004308 <HAL_DMA_Start_IT+0x480>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d03b      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a31      	ldr	r2, [pc, #196]	@ (800430c <HAL_DMA_Start_IT+0x484>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d036      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a30      	ldr	r2, [pc, #192]	@ (8004310 <HAL_DMA_Start_IT+0x488>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d031      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a2e      	ldr	r2, [pc, #184]	@ (8004314 <HAL_DMA_Start_IT+0x48c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02c      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a2d      	ldr	r2, [pc, #180]	@ (8004318 <HAL_DMA_Start_IT+0x490>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d027      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2b      	ldr	r2, [pc, #172]	@ (800431c <HAL_DMA_Start_IT+0x494>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d022      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2a      	ldr	r2, [pc, #168]	@ (8004320 <HAL_DMA_Start_IT+0x498>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d01d      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a28      	ldr	r2, [pc, #160]	@ (8004324 <HAL_DMA_Start_IT+0x49c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d018      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a27      	ldr	r2, [pc, #156]	@ (8004328 <HAL_DMA_Start_IT+0x4a0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a25      	ldr	r2, [pc, #148]	@ (800432c <HAL_DMA_Start_IT+0x4a4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00e      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a24      	ldr	r2, [pc, #144]	@ (8004330 <HAL_DMA_Start_IT+0x4a8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d009      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a22      	ldr	r2, [pc, #136]	@ (8004334 <HAL_DMA_Start_IT+0x4ac>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_DMA_Start_IT+0x430>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a21      	ldr	r2, [pc, #132]	@ (8004338 <HAL_DMA_Start_IT+0x4b0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <HAL_DMA_Start_IT+0x442>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e012      	b.n	80042f0 <HAL_DMA_Start_IT+0x468>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e009      	b.n	80042f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40020010 	.word	0x40020010
 8004300:	40020028 	.word	0x40020028
 8004304:	40020040 	.word	0x40020040
 8004308:	40020058 	.word	0x40020058
 800430c:	40020070 	.word	0x40020070
 8004310:	40020088 	.word	0x40020088
 8004314:	400200a0 	.word	0x400200a0
 8004318:	400200b8 	.word	0x400200b8
 800431c:	40020410 	.word	0x40020410
 8004320:	40020428 	.word	0x40020428
 8004324:	40020440 	.word	0x40020440
 8004328:	40020458 	.word	0x40020458
 800432c:	40020470 	.word	0x40020470
 8004330:	40020488 	.word	0x40020488
 8004334:	400204a0 	.word	0x400204a0
 8004338:	400204b8 	.word	0x400204b8
 800433c:	58025408 	.word	0x58025408
 8004340:	5802541c 	.word	0x5802541c
 8004344:	58025430 	.word	0x58025430
 8004348:	58025444 	.word	0x58025444
 800434c:	58025458 	.word	0x58025458
 8004350:	5802546c 	.word	0x5802546c
 8004354:	58025480 	.word	0x58025480
 8004358:	58025494 	.word	0x58025494

0800435c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004364:	f7fd fa6e 	bl	8001844 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e2dc      	b.n	800492e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d008      	beq.n	8004392 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e2cd      	b.n	800492e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a76      	ldr	r2, [pc, #472]	@ (8004570 <HAL_DMA_Abort+0x214>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d04a      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a74      	ldr	r2, [pc, #464]	@ (8004574 <HAL_DMA_Abort+0x218>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d045      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a73      	ldr	r2, [pc, #460]	@ (8004578 <HAL_DMA_Abort+0x21c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d040      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a71      	ldr	r2, [pc, #452]	@ (800457c <HAL_DMA_Abort+0x220>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d03b      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a70      	ldr	r2, [pc, #448]	@ (8004580 <HAL_DMA_Abort+0x224>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d036      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004584 <HAL_DMA_Abort+0x228>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d031      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004588 <HAL_DMA_Abort+0x22c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d02c      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6b      	ldr	r2, [pc, #428]	@ (800458c <HAL_DMA_Abort+0x230>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d027      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004590 <HAL_DMA_Abort+0x234>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d022      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a68      	ldr	r2, [pc, #416]	@ (8004594 <HAL_DMA_Abort+0x238>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01d      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a67      	ldr	r2, [pc, #412]	@ (8004598 <HAL_DMA_Abort+0x23c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a65      	ldr	r2, [pc, #404]	@ (800459c <HAL_DMA_Abort+0x240>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a64      	ldr	r2, [pc, #400]	@ (80045a0 <HAL_DMA_Abort+0x244>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a62      	ldr	r2, [pc, #392]	@ (80045a4 <HAL_DMA_Abort+0x248>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a61      	ldr	r2, [pc, #388]	@ (80045a8 <HAL_DMA_Abort+0x24c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_DMA_Abort+0xd6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5f      	ldr	r2, [pc, #380]	@ (80045ac <HAL_DMA_Abort+0x250>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_DMA_Abort+0xda>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_DMA_Abort+0xdc>
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 021e 	bic.w	r2, r2, #30
 800444a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800445a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e00a      	b.n	800447a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 020e 	bic.w	r2, r2, #14
 8004472:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a3c      	ldr	r2, [pc, #240]	@ (8004570 <HAL_DMA_Abort+0x214>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d072      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3a      	ldr	r2, [pc, #232]	@ (8004574 <HAL_DMA_Abort+0x218>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d06d      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a39      	ldr	r2, [pc, #228]	@ (8004578 <HAL_DMA_Abort+0x21c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d068      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a37      	ldr	r2, [pc, #220]	@ (800457c <HAL_DMA_Abort+0x220>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d063      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a36      	ldr	r2, [pc, #216]	@ (8004580 <HAL_DMA_Abort+0x224>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d05e      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a34      	ldr	r2, [pc, #208]	@ (8004584 <HAL_DMA_Abort+0x228>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d059      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a33      	ldr	r2, [pc, #204]	@ (8004588 <HAL_DMA_Abort+0x22c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d054      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a31      	ldr	r2, [pc, #196]	@ (800458c <HAL_DMA_Abort+0x230>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04f      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a30      	ldr	r2, [pc, #192]	@ (8004590 <HAL_DMA_Abort+0x234>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d04a      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004594 <HAL_DMA_Abort+0x238>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d045      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004598 <HAL_DMA_Abort+0x23c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d040      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2b      	ldr	r2, [pc, #172]	@ (800459c <HAL_DMA_Abort+0x240>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d03b      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2a      	ldr	r2, [pc, #168]	@ (80045a0 <HAL_DMA_Abort+0x244>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d036      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a28      	ldr	r2, [pc, #160]	@ (80045a4 <HAL_DMA_Abort+0x248>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d031      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a27      	ldr	r2, [pc, #156]	@ (80045a8 <HAL_DMA_Abort+0x24c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d02c      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a25      	ldr	r2, [pc, #148]	@ (80045ac <HAL_DMA_Abort+0x250>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d027      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a24      	ldr	r2, [pc, #144]	@ (80045b0 <HAL_DMA_Abort+0x254>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a22      	ldr	r2, [pc, #136]	@ (80045b4 <HAL_DMA_Abort+0x258>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a21      	ldr	r2, [pc, #132]	@ (80045b8 <HAL_DMA_Abort+0x25c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <HAL_DMA_Abort+0x260>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <HAL_DMA_Abort+0x264>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	@ (80045c4 <HAL_DMA_Abort+0x268>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	@ (80045c8 <HAL_DMA_Abort+0x26c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_DMA_Abort+0x20e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <HAL_DMA_Abort+0x270>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d132      	bne.n	80045d0 <HAL_DMA_Abort+0x274>
 800456a:	2301      	movs	r3, #1
 800456c:	e031      	b.n	80045d2 <HAL_DMA_Abort+0x276>
 800456e:	bf00      	nop
 8004570:	40020010 	.word	0x40020010
 8004574:	40020028 	.word	0x40020028
 8004578:	40020040 	.word	0x40020040
 800457c:	40020058 	.word	0x40020058
 8004580:	40020070 	.word	0x40020070
 8004584:	40020088 	.word	0x40020088
 8004588:	400200a0 	.word	0x400200a0
 800458c:	400200b8 	.word	0x400200b8
 8004590:	40020410 	.word	0x40020410
 8004594:	40020428 	.word	0x40020428
 8004598:	40020440 	.word	0x40020440
 800459c:	40020458 	.word	0x40020458
 80045a0:	40020470 	.word	0x40020470
 80045a4:	40020488 	.word	0x40020488
 80045a8:	400204a0 	.word	0x400204a0
 80045ac:	400204b8 	.word	0x400204b8
 80045b0:	58025408 	.word	0x58025408
 80045b4:	5802541c 	.word	0x5802541c
 80045b8:	58025430 	.word	0x58025430
 80045bc:	58025444 	.word	0x58025444
 80045c0:	58025458 	.word	0x58025458
 80045c4:	5802546c 	.word	0x5802546c
 80045c8:	58025480 	.word	0x58025480
 80045cc:	58025494 	.word	0x58025494
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a6d      	ldr	r2, [pc, #436]	@ (80047a0 <HAL_DMA_Abort+0x444>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a6b      	ldr	r2, [pc, #428]	@ (80047a4 <HAL_DMA_Abort+0x448>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a6a      	ldr	r2, [pc, #424]	@ (80047a8 <HAL_DMA_Abort+0x44c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a68      	ldr	r2, [pc, #416]	@ (80047ac <HAL_DMA_Abort+0x450>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a67      	ldr	r2, [pc, #412]	@ (80047b0 <HAL_DMA_Abort+0x454>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a65      	ldr	r2, [pc, #404]	@ (80047b4 <HAL_DMA_Abort+0x458>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a64      	ldr	r2, [pc, #400]	@ (80047b8 <HAL_DMA_Abort+0x45c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a62      	ldr	r2, [pc, #392]	@ (80047bc <HAL_DMA_Abort+0x460>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a61      	ldr	r2, [pc, #388]	@ (80047c0 <HAL_DMA_Abort+0x464>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a5f      	ldr	r2, [pc, #380]	@ (80047c4 <HAL_DMA_Abort+0x468>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a5e      	ldr	r2, [pc, #376]	@ (80047c8 <HAL_DMA_Abort+0x46c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a5c      	ldr	r2, [pc, #368]	@ (80047cc <HAL_DMA_Abort+0x470>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a5b      	ldr	r2, [pc, #364]	@ (80047d0 <HAL_DMA_Abort+0x474>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a59      	ldr	r2, [pc, #356]	@ (80047d4 <HAL_DMA_Abort+0x478>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a58      	ldr	r2, [pc, #352]	@ (80047d8 <HAL_DMA_Abort+0x47c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_Abort+0x32a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a56      	ldr	r2, [pc, #344]	@ (80047dc <HAL_DMA_Abort+0x480>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_DMA_Abort+0x33c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e007      	b.n	80046a8 <HAL_DMA_Abort+0x34c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046a8:	e013      	b.n	80046d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046aa:	f7fd f8cb 	bl	8001844 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	d90c      	bls.n	80046d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2203      	movs	r2, #3
 80046c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e12d      	b.n	800492e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <HAL_DMA_Abort+0x444>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04a      	beq.n	800477e <HAL_DMA_Abort+0x422>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2d      	ldr	r2, [pc, #180]	@ (80047a4 <HAL_DMA_Abort+0x448>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d045      	beq.n	800477e <HAL_DMA_Abort+0x422>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	@ (80047a8 <HAL_DMA_Abort+0x44c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d040      	beq.n	800477e <HAL_DMA_Abort+0x422>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2a      	ldr	r2, [pc, #168]	@ (80047ac <HAL_DMA_Abort+0x450>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d03b      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a29      	ldr	r2, [pc, #164]	@ (80047b0 <HAL_DMA_Abort+0x454>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d036      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a27      	ldr	r2, [pc, #156]	@ (80047b4 <HAL_DMA_Abort+0x458>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_DMA_Abort+0x422>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a26      	ldr	r2, [pc, #152]	@ (80047b8 <HAL_DMA_Abort+0x45c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d02c      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a24      	ldr	r2, [pc, #144]	@ (80047bc <HAL_DMA_Abort+0x460>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d027      	beq.n	800477e <HAL_DMA_Abort+0x422>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a23      	ldr	r2, [pc, #140]	@ (80047c0 <HAL_DMA_Abort+0x464>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <HAL_DMA_Abort+0x468>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01d      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a20      	ldr	r2, [pc, #128]	@ (80047c8 <HAL_DMA_Abort+0x46c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_DMA_Abort+0x422>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <HAL_DMA_Abort+0x470>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	@ (80047d0 <HAL_DMA_Abort+0x474>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <HAL_DMA_Abort+0x478>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_DMA_Abort+0x422>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <HAL_DMA_Abort+0x47c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_DMA_Abort+0x422>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <HAL_DMA_Abort+0x480>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_DMA_Abort+0x426>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_DMA_Abort+0x428>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d02b      	beq.n	80047e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	223f      	movs	r2, #63	@ 0x3f
 8004798:	409a      	lsls	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	609a      	str	r2, [r3, #8]
 800479e:	e02a      	b.n	80047f6 <HAL_DMA_Abort+0x49a>
 80047a0:	40020010 	.word	0x40020010
 80047a4:	40020028 	.word	0x40020028
 80047a8:	40020040 	.word	0x40020040
 80047ac:	40020058 	.word	0x40020058
 80047b0:	40020070 	.word	0x40020070
 80047b4:	40020088 	.word	0x40020088
 80047b8:	400200a0 	.word	0x400200a0
 80047bc:	400200b8 	.word	0x400200b8
 80047c0:	40020410 	.word	0x40020410
 80047c4:	40020428 	.word	0x40020428
 80047c8:	40020440 	.word	0x40020440
 80047cc:	40020458 	.word	0x40020458
 80047d0:	40020470 	.word	0x40020470
 80047d4:	40020488 	.word	0x40020488
 80047d8:	400204a0 	.word	0x400204a0
 80047dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2201      	movs	r2, #1
 80047f0:	409a      	lsls	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a4f      	ldr	r2, [pc, #316]	@ (8004938 <HAL_DMA_Abort+0x5dc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d072      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a4d      	ldr	r2, [pc, #308]	@ (800493c <HAL_DMA_Abort+0x5e0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d06d      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a4c      	ldr	r2, [pc, #304]	@ (8004940 <HAL_DMA_Abort+0x5e4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d068      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a4a      	ldr	r2, [pc, #296]	@ (8004944 <HAL_DMA_Abort+0x5e8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d063      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a49      	ldr	r2, [pc, #292]	@ (8004948 <HAL_DMA_Abort+0x5ec>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d05e      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a47      	ldr	r2, [pc, #284]	@ (800494c <HAL_DMA_Abort+0x5f0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d059      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a46      	ldr	r2, [pc, #280]	@ (8004950 <HAL_DMA_Abort+0x5f4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d054      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a44      	ldr	r2, [pc, #272]	@ (8004954 <HAL_DMA_Abort+0x5f8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d04f      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a43      	ldr	r2, [pc, #268]	@ (8004958 <HAL_DMA_Abort+0x5fc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d04a      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a41      	ldr	r2, [pc, #260]	@ (800495c <HAL_DMA_Abort+0x600>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d045      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a40      	ldr	r2, [pc, #256]	@ (8004960 <HAL_DMA_Abort+0x604>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d040      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3e      	ldr	r2, [pc, #248]	@ (8004964 <HAL_DMA_Abort+0x608>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d03b      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3d      	ldr	r2, [pc, #244]	@ (8004968 <HAL_DMA_Abort+0x60c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d036      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a3b      	ldr	r2, [pc, #236]	@ (800496c <HAL_DMA_Abort+0x610>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d031      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3a      	ldr	r2, [pc, #232]	@ (8004970 <HAL_DMA_Abort+0x614>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d02c      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a38      	ldr	r2, [pc, #224]	@ (8004974 <HAL_DMA_Abort+0x618>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d027      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a37      	ldr	r2, [pc, #220]	@ (8004978 <HAL_DMA_Abort+0x61c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a35      	ldr	r2, [pc, #212]	@ (800497c <HAL_DMA_Abort+0x620>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01d      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a34      	ldr	r2, [pc, #208]	@ (8004980 <HAL_DMA_Abort+0x624>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a32      	ldr	r2, [pc, #200]	@ (8004984 <HAL_DMA_Abort+0x628>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a31      	ldr	r2, [pc, #196]	@ (8004988 <HAL_DMA_Abort+0x62c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2f      	ldr	r2, [pc, #188]	@ (800498c <HAL_DMA_Abort+0x630>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004990 <HAL_DMA_Abort+0x634>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_DMA_Abort+0x58a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004994 <HAL_DMA_Abort+0x638>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_DMA_Abort+0x58e>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_DMA_Abort+0x590>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d015      	beq.n	800491c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004910:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800491a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40020010 	.word	0x40020010
 800493c:	40020028 	.word	0x40020028
 8004940:	40020040 	.word	0x40020040
 8004944:	40020058 	.word	0x40020058
 8004948:	40020070 	.word	0x40020070
 800494c:	40020088 	.word	0x40020088
 8004950:	400200a0 	.word	0x400200a0
 8004954:	400200b8 	.word	0x400200b8
 8004958:	40020410 	.word	0x40020410
 800495c:	40020428 	.word	0x40020428
 8004960:	40020440 	.word	0x40020440
 8004964:	40020458 	.word	0x40020458
 8004968:	40020470 	.word	0x40020470
 800496c:	40020488 	.word	0x40020488
 8004970:	400204a0 	.word	0x400204a0
 8004974:	400204b8 	.word	0x400204b8
 8004978:	58025408 	.word	0x58025408
 800497c:	5802541c 	.word	0x5802541c
 8004980:	58025430 	.word	0x58025430
 8004984:	58025444 	.word	0x58025444
 8004988:	58025458 	.word	0x58025458
 800498c:	5802546c 	.word	0x5802546c
 8004990:	58025480 	.word	0x58025480
 8004994:	58025494 	.word	0x58025494

08004998 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e237      	b.n	8004e1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d004      	beq.n	80049c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2280      	movs	r2, #128	@ 0x80
 80049ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e22c      	b.n	8004e1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5c      	ldr	r2, [pc, #368]	@ (8004b38 <HAL_DMA_Abort_IT+0x1a0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d04a      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a5b      	ldr	r2, [pc, #364]	@ (8004b3c <HAL_DMA_Abort_IT+0x1a4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d045      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a59      	ldr	r2, [pc, #356]	@ (8004b40 <HAL_DMA_Abort_IT+0x1a8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d040      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a58      	ldr	r2, [pc, #352]	@ (8004b44 <HAL_DMA_Abort_IT+0x1ac>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d03b      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a56      	ldr	r2, [pc, #344]	@ (8004b48 <HAL_DMA_Abort_IT+0x1b0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d036      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a55      	ldr	r2, [pc, #340]	@ (8004b4c <HAL_DMA_Abort_IT+0x1b4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d031      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a53      	ldr	r2, [pc, #332]	@ (8004b50 <HAL_DMA_Abort_IT+0x1b8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d02c      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a52      	ldr	r2, [pc, #328]	@ (8004b54 <HAL_DMA_Abort_IT+0x1bc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d027      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a50      	ldr	r2, [pc, #320]	@ (8004b58 <HAL_DMA_Abort_IT+0x1c0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d022      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b5c <HAL_DMA_Abort_IT+0x1c4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d01d      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a4d      	ldr	r2, [pc, #308]	@ (8004b60 <HAL_DMA_Abort_IT+0x1c8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d018      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4c      	ldr	r2, [pc, #304]	@ (8004b64 <HAL_DMA_Abort_IT+0x1cc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d013      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b68 <HAL_DMA_Abort_IT+0x1d0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00e      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a49      	ldr	r2, [pc, #292]	@ (8004b6c <HAL_DMA_Abort_IT+0x1d4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d009      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a47      	ldr	r2, [pc, #284]	@ (8004b70 <HAL_DMA_Abort_IT+0x1d8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d004      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a46      	ldr	r2, [pc, #280]	@ (8004b74 <HAL_DMA_Abort_IT+0x1dc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d101      	bne.n	8004a64 <HAL_DMA_Abort_IT+0xcc>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_DMA_Abort_IT+0xce>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8086 	beq.w	8004b78 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2f      	ldr	r2, [pc, #188]	@ (8004b38 <HAL_DMA_Abort_IT+0x1a0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d04a      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2e      	ldr	r2, [pc, #184]	@ (8004b3c <HAL_DMA_Abort_IT+0x1a4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d045      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b40 <HAL_DMA_Abort_IT+0x1a8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d040      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2b      	ldr	r2, [pc, #172]	@ (8004b44 <HAL_DMA_Abort_IT+0x1ac>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d03b      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	@ (8004b48 <HAL_DMA_Abort_IT+0x1b0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d036      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a28      	ldr	r2, [pc, #160]	@ (8004b4c <HAL_DMA_Abort_IT+0x1b4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d031      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a26      	ldr	r2, [pc, #152]	@ (8004b50 <HAL_DMA_Abort_IT+0x1b8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02c      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a25      	ldr	r2, [pc, #148]	@ (8004b54 <HAL_DMA_Abort_IT+0x1bc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d027      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	@ (8004b58 <HAL_DMA_Abort_IT+0x1c0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d022      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a22      	ldr	r2, [pc, #136]	@ (8004b5c <HAL_DMA_Abort_IT+0x1c4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d01d      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a20      	ldr	r2, [pc, #128]	@ (8004b60 <HAL_DMA_Abort_IT+0x1c8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b64 <HAL_DMA_Abort_IT+0x1cc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <HAL_DMA_Abort_IT+0x1d0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1c      	ldr	r2, [pc, #112]	@ (8004b6c <HAL_DMA_Abort_IT+0x1d4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <HAL_DMA_Abort_IT+0x1d8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x17c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <HAL_DMA_Abort_IT+0x1dc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d108      	bne.n	8004b26 <HAL_DMA_Abort_IT+0x18e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e178      	b.n	8004e18 <HAL_DMA_Abort_IT+0x480>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e16f      	b.n	8004e18 <HAL_DMA_Abort_IT+0x480>
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 020e 	bic.w	r2, r2, #14
 8004b86:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a6c      	ldr	r2, [pc, #432]	@ (8004d40 <HAL_DMA_Abort_IT+0x3a8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d04a      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a6b      	ldr	r2, [pc, #428]	@ (8004d44 <HAL_DMA_Abort_IT+0x3ac>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d045      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a69      	ldr	r2, [pc, #420]	@ (8004d48 <HAL_DMA_Abort_IT+0x3b0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d040      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a68      	ldr	r2, [pc, #416]	@ (8004d4c <HAL_DMA_Abort_IT+0x3b4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d03b      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a66      	ldr	r2, [pc, #408]	@ (8004d50 <HAL_DMA_Abort_IT+0x3b8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d036      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a65      	ldr	r2, [pc, #404]	@ (8004d54 <HAL_DMA_Abort_IT+0x3bc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d031      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a63      	ldr	r2, [pc, #396]	@ (8004d58 <HAL_DMA_Abort_IT+0x3c0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02c      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a62      	ldr	r2, [pc, #392]	@ (8004d5c <HAL_DMA_Abort_IT+0x3c4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d027      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a60      	ldr	r2, [pc, #384]	@ (8004d60 <HAL_DMA_Abort_IT+0x3c8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a5f      	ldr	r2, [pc, #380]	@ (8004d64 <HAL_DMA_Abort_IT+0x3cc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d01d      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8004d68 <HAL_DMA_Abort_IT+0x3d0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8004d6c <HAL_DMA_Abort_IT+0x3d4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a5a      	ldr	r2, [pc, #360]	@ (8004d70 <HAL_DMA_Abort_IT+0x3d8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a59      	ldr	r2, [pc, #356]	@ (8004d74 <HAL_DMA_Abort_IT+0x3dc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a57      	ldr	r2, [pc, #348]	@ (8004d78 <HAL_DMA_Abort_IT+0x3e0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_DMA_Abort_IT+0x290>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a56      	ldr	r2, [pc, #344]	@ (8004d7c <HAL_DMA_Abort_IT+0x3e4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d108      	bne.n	8004c3a <HAL_DMA_Abort_IT+0x2a2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e007      	b.n	8004c4a <HAL_DMA_Abort_IT+0x2b2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d40 <HAL_DMA_Abort_IT+0x3a8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d072      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3a      	ldr	r2, [pc, #232]	@ (8004d44 <HAL_DMA_Abort_IT+0x3ac>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d06d      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a39      	ldr	r2, [pc, #228]	@ (8004d48 <HAL_DMA_Abort_IT+0x3b0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d068      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a37      	ldr	r2, [pc, #220]	@ (8004d4c <HAL_DMA_Abort_IT+0x3b4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a36      	ldr	r2, [pc, #216]	@ (8004d50 <HAL_DMA_Abort_IT+0x3b8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d05e      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a34      	ldr	r2, [pc, #208]	@ (8004d54 <HAL_DMA_Abort_IT+0x3bc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d059      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a33      	ldr	r2, [pc, #204]	@ (8004d58 <HAL_DMA_Abort_IT+0x3c0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d054      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a31      	ldr	r2, [pc, #196]	@ (8004d5c <HAL_DMA_Abort_IT+0x3c4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04f      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a30      	ldr	r2, [pc, #192]	@ (8004d60 <HAL_DMA_Abort_IT+0x3c8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04a      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8004d64 <HAL_DMA_Abort_IT+0x3cc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d045      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004d68 <HAL_DMA_Abort_IT+0x3d0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8004d6c <HAL_DMA_Abort_IT+0x3d4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d70 <HAL_DMA_Abort_IT+0x3d8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d036      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a28      	ldr	r2, [pc, #160]	@ (8004d74 <HAL_DMA_Abort_IT+0x3dc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a27      	ldr	r2, [pc, #156]	@ (8004d78 <HAL_DMA_Abort_IT+0x3e0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a25      	ldr	r2, [pc, #148]	@ (8004d7c <HAL_DMA_Abort_IT+0x3e4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d027      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <HAL_DMA_Abort_IT+0x3e8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	@ (8004d84 <HAL_DMA_Abort_IT+0x3ec>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a21      	ldr	r2, [pc, #132]	@ (8004d88 <HAL_DMA_Abort_IT+0x3f0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d8c <HAL_DMA_Abort_IT+0x3f4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <HAL_DMA_Abort_IT+0x3f8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1c      	ldr	r2, [pc, #112]	@ (8004d94 <HAL_DMA_Abort_IT+0x3fc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <HAL_DMA_Abort_IT+0x400>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x3a2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <HAL_DMA_Abort_IT+0x404>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d132      	bne.n	8004da0 <HAL_DMA_Abort_IT+0x408>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e031      	b.n	8004da2 <HAL_DMA_Abort_IT+0x40a>
 8004d3e:	bf00      	nop
 8004d40:	40020010 	.word	0x40020010
 8004d44:	40020028 	.word	0x40020028
 8004d48:	40020040 	.word	0x40020040
 8004d4c:	40020058 	.word	0x40020058
 8004d50:	40020070 	.word	0x40020070
 8004d54:	40020088 	.word	0x40020088
 8004d58:	400200a0 	.word	0x400200a0
 8004d5c:	400200b8 	.word	0x400200b8
 8004d60:	40020410 	.word	0x40020410
 8004d64:	40020428 	.word	0x40020428
 8004d68:	40020440 	.word	0x40020440
 8004d6c:	40020458 	.word	0x40020458
 8004d70:	40020470 	.word	0x40020470
 8004d74:	40020488 	.word	0x40020488
 8004d78:	400204a0 	.word	0x400204a0
 8004d7c:	400204b8 	.word	0x400204b8
 8004d80:	58025408 	.word	0x58025408
 8004d84:	5802541c 	.word	0x5802541c
 8004d88:	58025430 	.word	0x58025430
 8004d8c:	58025444 	.word	0x58025444
 8004d90:	58025458 	.word	0x58025458
 8004d94:	5802546c 	.word	0x5802546c
 8004d98:	58025480 	.word	0x58025480
 8004d9c:	58025494 	.word	0x58025494
 8004da0:	2300      	movs	r3, #0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d028      	beq.n	8004df8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004db4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004dd4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004df6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop

08004e24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	@ 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e30:	4b67      	ldr	r3, [pc, #412]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1ac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a67      	ldr	r2, [pc, #412]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1b0>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0a9b      	lsrs	r3, r3, #10
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1b4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d04a      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a5d      	ldr	r2, [pc, #372]	@ (8004fdc <HAL_DMA_IRQHandler+0x1b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d045      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1bc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d040      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1c0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d03b      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a59      	ldr	r2, [pc, #356]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1c4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d036      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a57      	ldr	r2, [pc, #348]	@ (8004fec <HAL_DMA_IRQHandler+0x1c8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d031      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a56      	ldr	r2, [pc, #344]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1cc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d02c      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a54      	ldr	r2, [pc, #336]	@ (8004ff4 <HAL_DMA_IRQHandler+0x1d0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d027      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a53      	ldr	r2, [pc, #332]	@ (8004ff8 <HAL_DMA_IRQHandler+0x1d4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d022      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a51      	ldr	r2, [pc, #324]	@ (8004ffc <HAL_DMA_IRQHandler+0x1d8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01d      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a50      	ldr	r2, [pc, #320]	@ (8005000 <HAL_DMA_IRQHandler+0x1dc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d018      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a4e      	ldr	r2, [pc, #312]	@ (8005004 <HAL_DMA_IRQHandler+0x1e0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8005008 <HAL_DMA_IRQHandler+0x1e4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	@ (800500c <HAL_DMA_IRQHandler+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8005010 <HAL_DMA_IRQHandler+0x1ec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xd2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a48      	ldr	r2, [pc, #288]	@ (8005014 <HAL_DMA_IRQHandler+0x1f0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <HAL_DMA_IRQHandler+0xd6>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <HAL_DMA_IRQHandler+0xd8>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 842b 	beq.w	8005758 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80a2 	beq.w	800505c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1b4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d04a      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2d      	ldr	r2, [pc, #180]	@ (8004fdc <HAL_DMA_IRQHandler+0x1b8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d045      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1bc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d040      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1c0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d03b      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a28      	ldr	r2, [pc, #160]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1c4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d036      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a27      	ldr	r2, [pc, #156]	@ (8004fec <HAL_DMA_IRQHandler+0x1c8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d031      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a25      	ldr	r2, [pc, #148]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1cc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02c      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a24      	ldr	r2, [pc, #144]	@ (8004ff4 <HAL_DMA_IRQHandler+0x1d0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d027      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a22      	ldr	r2, [pc, #136]	@ (8004ff8 <HAL_DMA_IRQHandler+0x1d4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a21      	ldr	r2, [pc, #132]	@ (8004ffc <HAL_DMA_IRQHandler+0x1d8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	@ (8005000 <HAL_DMA_IRQHandler+0x1dc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005004 <HAL_DMA_IRQHandler+0x1e0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1c      	ldr	r2, [pc, #112]	@ (8005008 <HAL_DMA_IRQHandler+0x1e4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <HAL_DMA_IRQHandler+0x1e8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	@ (8005010 <HAL_DMA_IRQHandler+0x1ec>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x194>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a18      	ldr	r2, [pc, #96]	@ (8005014 <HAL_DMA_IRQHandler+0x1f0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d12f      	bne.n	8005018 <HAL_DMA_IRQHandler+0x1f4>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e02e      	b.n	800502c <HAL_DMA_IRQHandler+0x208>
 8004fce:	bf00      	nop
 8004fd0:	24000004 	.word	0x24000004
 8004fd4:	1b4e81b5 	.word	0x1b4e81b5
 8004fd8:	40020010 	.word	0x40020010
 8004fdc:	40020028 	.word	0x40020028
 8004fe0:	40020040 	.word	0x40020040
 8004fe4:	40020058 	.word	0x40020058
 8004fe8:	40020070 	.word	0x40020070
 8004fec:	40020088 	.word	0x40020088
 8004ff0:	400200a0 	.word	0x400200a0
 8004ff4:	400200b8 	.word	0x400200b8
 8004ff8:	40020410 	.word	0x40020410
 8004ffc:	40020428 	.word	0x40020428
 8005000:	40020440 	.word	0x40020440
 8005004:	40020458 	.word	0x40020458
 8005008:	40020470 	.word	0x40020470
 800500c:	40020488 	.word	0x40020488
 8005010:	400204a0 	.word	0x400204a0
 8005014:	400204b8 	.word	0x400204b8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d015      	beq.n	800505c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0204 	bic.w	r2, r2, #4
 800503e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2208      	movs	r2, #8
 800504a:	409a      	lsls	r2, r3
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005054:	f043 0201 	orr.w	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	fa22 f303 	lsr.w	r3, r2, r3
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d06e      	beq.n	8005150 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a69      	ldr	r2, [pc, #420]	@ (800521c <HAL_DMA_IRQHandler+0x3f8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d04a      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a67      	ldr	r2, [pc, #412]	@ (8005220 <HAL_DMA_IRQHandler+0x3fc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d045      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a66      	ldr	r2, [pc, #408]	@ (8005224 <HAL_DMA_IRQHandler+0x400>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d040      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a64      	ldr	r2, [pc, #400]	@ (8005228 <HAL_DMA_IRQHandler+0x404>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d03b      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a63      	ldr	r2, [pc, #396]	@ (800522c <HAL_DMA_IRQHandler+0x408>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d036      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a61      	ldr	r2, [pc, #388]	@ (8005230 <HAL_DMA_IRQHandler+0x40c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d031      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a60      	ldr	r2, [pc, #384]	@ (8005234 <HAL_DMA_IRQHandler+0x410>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d02c      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005238 <HAL_DMA_IRQHandler+0x414>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d027      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a5d      	ldr	r2, [pc, #372]	@ (800523c <HAL_DMA_IRQHandler+0x418>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a5b      	ldr	r2, [pc, #364]	@ (8005240 <HAL_DMA_IRQHandler+0x41c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01d      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a5a      	ldr	r2, [pc, #360]	@ (8005244 <HAL_DMA_IRQHandler+0x420>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a58      	ldr	r2, [pc, #352]	@ (8005248 <HAL_DMA_IRQHandler+0x424>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a57      	ldr	r2, [pc, #348]	@ (800524c <HAL_DMA_IRQHandler+0x428>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a55      	ldr	r2, [pc, #340]	@ (8005250 <HAL_DMA_IRQHandler+0x42c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a54      	ldr	r2, [pc, #336]	@ (8005254 <HAL_DMA_IRQHandler+0x430>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_DMA_IRQHandler+0x2ee>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a52      	ldr	r2, [pc, #328]	@ (8005258 <HAL_DMA_IRQHandler+0x434>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10a      	bne.n	8005128 <HAL_DMA_IRQHandler+0x304>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e003      	b.n	8005130 <HAL_DMA_IRQHandler+0x30c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	2201      	movs	r2, #1
 800513e:	409a      	lsls	r2, r3
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005148:	f043 0202 	orr.w	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	2204      	movs	r2, #4
 800515a:	409a      	lsls	r2, r3
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 808f 	beq.w	8005284 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2c      	ldr	r2, [pc, #176]	@ (800521c <HAL_DMA_IRQHandler+0x3f8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d04a      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2a      	ldr	r2, [pc, #168]	@ (8005220 <HAL_DMA_IRQHandler+0x3fc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d045      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a29      	ldr	r2, [pc, #164]	@ (8005224 <HAL_DMA_IRQHandler+0x400>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d040      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a27      	ldr	r2, [pc, #156]	@ (8005228 <HAL_DMA_IRQHandler+0x404>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d03b      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a26      	ldr	r2, [pc, #152]	@ (800522c <HAL_DMA_IRQHandler+0x408>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d036      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a24      	ldr	r2, [pc, #144]	@ (8005230 <HAL_DMA_IRQHandler+0x40c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d031      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a23      	ldr	r2, [pc, #140]	@ (8005234 <HAL_DMA_IRQHandler+0x410>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d02c      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <HAL_DMA_IRQHandler+0x414>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d027      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a20      	ldr	r2, [pc, #128]	@ (800523c <HAL_DMA_IRQHandler+0x418>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <HAL_DMA_IRQHandler+0x41c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d01d      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005244 <HAL_DMA_IRQHandler+0x420>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d018      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <HAL_DMA_IRQHandler+0x424>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1a      	ldr	r2, [pc, #104]	@ (800524c <HAL_DMA_IRQHandler+0x428>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a18      	ldr	r2, [pc, #96]	@ (8005250 <HAL_DMA_IRQHandler+0x42c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a17      	ldr	r2, [pc, #92]	@ (8005254 <HAL_DMA_IRQHandler+0x430>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_DMA_IRQHandler+0x3e2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <HAL_DMA_IRQHandler+0x434>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d12a      	bne.n	800525c <HAL_DMA_IRQHandler+0x438>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	e023      	b.n	8005264 <HAL_DMA_IRQHandler+0x440>
 800521c:	40020010 	.word	0x40020010
 8005220:	40020028 	.word	0x40020028
 8005224:	40020040 	.word	0x40020040
 8005228:	40020058 	.word	0x40020058
 800522c:	40020070 	.word	0x40020070
 8005230:	40020088 	.word	0x40020088
 8005234:	400200a0 	.word	0x400200a0
 8005238:	400200b8 	.word	0x400200b8
 800523c:	40020410 	.word	0x40020410
 8005240:	40020428 	.word	0x40020428
 8005244:	40020440 	.word	0x40020440
 8005248:	40020458 	.word	0x40020458
 800524c:	40020470 	.word	0x40020470
 8005250:	40020488 	.word	0x40020488
 8005254:	400204a0 	.word	0x400204a0
 8005258:	400204b8 	.word	0x400204b8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	2204      	movs	r2, #4
 8005272:	409a      	lsls	r2, r3
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527c:	f043 0204 	orr.w	r2, r3, #4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	2210      	movs	r2, #16
 800528e:	409a      	lsls	r2, r3
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a6 	beq.w	80053e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a85      	ldr	r2, [pc, #532]	@ (80054b4 <HAL_DMA_IRQHandler+0x690>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04a      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a83      	ldr	r2, [pc, #524]	@ (80054b8 <HAL_DMA_IRQHandler+0x694>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d045      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a82      	ldr	r2, [pc, #520]	@ (80054bc <HAL_DMA_IRQHandler+0x698>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d040      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a80      	ldr	r2, [pc, #512]	@ (80054c0 <HAL_DMA_IRQHandler+0x69c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d03b      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a7f      	ldr	r2, [pc, #508]	@ (80054c4 <HAL_DMA_IRQHandler+0x6a0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d036      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a7d      	ldr	r2, [pc, #500]	@ (80054c8 <HAL_DMA_IRQHandler+0x6a4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d031      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7c      	ldr	r2, [pc, #496]	@ (80054cc <HAL_DMA_IRQHandler+0x6a8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d02c      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a7a      	ldr	r2, [pc, #488]	@ (80054d0 <HAL_DMA_IRQHandler+0x6ac>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a79      	ldr	r2, [pc, #484]	@ (80054d4 <HAL_DMA_IRQHandler+0x6b0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a77      	ldr	r2, [pc, #476]	@ (80054d8 <HAL_DMA_IRQHandler+0x6b4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a76      	ldr	r2, [pc, #472]	@ (80054dc <HAL_DMA_IRQHandler+0x6b8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a74      	ldr	r2, [pc, #464]	@ (80054e0 <HAL_DMA_IRQHandler+0x6bc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a73      	ldr	r2, [pc, #460]	@ (80054e4 <HAL_DMA_IRQHandler+0x6c0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a71      	ldr	r2, [pc, #452]	@ (80054e8 <HAL_DMA_IRQHandler+0x6c4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a70      	ldr	r2, [pc, #448]	@ (80054ec <HAL_DMA_IRQHandler+0x6c8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_DMA_IRQHandler+0x516>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6e      	ldr	r2, [pc, #440]	@ (80054f0 <HAL_DMA_IRQHandler+0x6cc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10a      	bne.n	8005350 <HAL_DMA_IRQHandler+0x52c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e009      	b.n	8005364 <HAL_DMA_IRQHandler+0x540>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d03e      	beq.n	80053e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2210      	movs	r2, #16
 8005372:	409a      	lsls	r2, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d108      	bne.n	80053a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d024      	beq.n	80053e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
 80053a4:	e01f      	b.n	80053e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01b      	beq.n	80053e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
 80053b6:	e016      	b.n	80053e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0208 	bic.w	r2, r2, #8
 80053d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2220      	movs	r2, #32
 80053f0:	409a      	lsls	r2, r3
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8110 	beq.w	800561c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2c      	ldr	r2, [pc, #176]	@ (80054b4 <HAL_DMA_IRQHandler+0x690>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04a      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2b      	ldr	r2, [pc, #172]	@ (80054b8 <HAL_DMA_IRQHandler+0x694>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d045      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a29      	ldr	r2, [pc, #164]	@ (80054bc <HAL_DMA_IRQHandler+0x698>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d040      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a28      	ldr	r2, [pc, #160]	@ (80054c0 <HAL_DMA_IRQHandler+0x69c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d03b      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <HAL_DMA_IRQHandler+0x6a0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d036      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a25      	ldr	r2, [pc, #148]	@ (80054c8 <HAL_DMA_IRQHandler+0x6a4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d031      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a23      	ldr	r2, [pc, #140]	@ (80054cc <HAL_DMA_IRQHandler+0x6a8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d02c      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a22      	ldr	r2, [pc, #136]	@ (80054d0 <HAL_DMA_IRQHandler+0x6ac>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d027      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a20      	ldr	r2, [pc, #128]	@ (80054d4 <HAL_DMA_IRQHandler+0x6b0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1f      	ldr	r2, [pc, #124]	@ (80054d8 <HAL_DMA_IRQHandler+0x6b4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d01d      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1d      	ldr	r2, [pc, #116]	@ (80054dc <HAL_DMA_IRQHandler+0x6b8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1c      	ldr	r2, [pc, #112]	@ (80054e0 <HAL_DMA_IRQHandler+0x6bc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1a      	ldr	r2, [pc, #104]	@ (80054e4 <HAL_DMA_IRQHandler+0x6c0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a19      	ldr	r2, [pc, #100]	@ (80054e8 <HAL_DMA_IRQHandler+0x6c4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a17      	ldr	r2, [pc, #92]	@ (80054ec <HAL_DMA_IRQHandler+0x6c8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_DMA_IRQHandler+0x678>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <HAL_DMA_IRQHandler+0x6cc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d12b      	bne.n	80054f4 <HAL_DMA_IRQHandler+0x6d0>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf14      	ite	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	2300      	moveq	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	e02a      	b.n	8005508 <HAL_DMA_IRQHandler+0x6e4>
 80054b2:	bf00      	nop
 80054b4:	40020010 	.word	0x40020010
 80054b8:	40020028 	.word	0x40020028
 80054bc:	40020040 	.word	0x40020040
 80054c0:	40020058 	.word	0x40020058
 80054c4:	40020070 	.word	0x40020070
 80054c8:	40020088 	.word	0x40020088
 80054cc:	400200a0 	.word	0x400200a0
 80054d0:	400200b8 	.word	0x400200b8
 80054d4:	40020410 	.word	0x40020410
 80054d8:	40020428 	.word	0x40020428
 80054dc:	40020440 	.word	0x40020440
 80054e0:	40020458 	.word	0x40020458
 80054e4:	40020470 	.word	0x40020470
 80054e8:	40020488 	.word	0x40020488
 80054ec:	400204a0 	.word	0x400204a0
 80054f0:	400204b8 	.word	0x400204b8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf14      	ite	ne
 8005502:	2301      	movne	r3, #1
 8005504:	2300      	moveq	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8087 	beq.w	800561c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2220      	movs	r2, #32
 8005518:	409a      	lsls	r2, r3
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b04      	cmp	r3, #4
 8005528:	d139      	bne.n	800559e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0216 	bic.w	r2, r2, #22
 8005538:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695a      	ldr	r2, [r3, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005548:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <HAL_DMA_IRQHandler+0x736>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0208 	bic.w	r2, r2, #8
 8005568:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	223f      	movs	r2, #63	@ 0x3f
 8005574:	409a      	lsls	r2, r3
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 834a 	beq.w	8005c28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
          }
          return;
 800559c:	e344      	b.n	8005c28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d018      	beq.n	80055de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d108      	bne.n	80055cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d02c      	beq.n	800561c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
 80055ca:	e027      	b.n	800561c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d023      	beq.n	800561c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
 80055dc:	e01e      	b.n	800561c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10f      	bne.n	800560c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0210 	bic.w	r2, r2, #16
 80055fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8306 	beq.w	8005c32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8088 	beq.w	8005744 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2204      	movs	r2, #4
 8005638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a7a      	ldr	r2, [pc, #488]	@ (800582c <HAL_DMA_IRQHandler+0xa08>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d04a      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a79      	ldr	r2, [pc, #484]	@ (8005830 <HAL_DMA_IRQHandler+0xa0c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d045      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a77      	ldr	r2, [pc, #476]	@ (8005834 <HAL_DMA_IRQHandler+0xa10>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d040      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a76      	ldr	r2, [pc, #472]	@ (8005838 <HAL_DMA_IRQHandler+0xa14>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d03b      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a74      	ldr	r2, [pc, #464]	@ (800583c <HAL_DMA_IRQHandler+0xa18>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d036      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a73      	ldr	r2, [pc, #460]	@ (8005840 <HAL_DMA_IRQHandler+0xa1c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d031      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a71      	ldr	r2, [pc, #452]	@ (8005844 <HAL_DMA_IRQHandler+0xa20>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d02c      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a70      	ldr	r2, [pc, #448]	@ (8005848 <HAL_DMA_IRQHandler+0xa24>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d027      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6e      	ldr	r2, [pc, #440]	@ (800584c <HAL_DMA_IRQHandler+0xa28>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d022      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a6d      	ldr	r2, [pc, #436]	@ (8005850 <HAL_DMA_IRQHandler+0xa2c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d01d      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a6b      	ldr	r2, [pc, #428]	@ (8005854 <HAL_DMA_IRQHandler+0xa30>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6a      	ldr	r2, [pc, #424]	@ (8005858 <HAL_DMA_IRQHandler+0xa34>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a68      	ldr	r2, [pc, #416]	@ (800585c <HAL_DMA_IRQHandler+0xa38>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a67      	ldr	r2, [pc, #412]	@ (8005860 <HAL_DMA_IRQHandler+0xa3c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a65      	ldr	r2, [pc, #404]	@ (8005864 <HAL_DMA_IRQHandler+0xa40>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_DMA_IRQHandler+0x8b8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a64      	ldr	r2, [pc, #400]	@ (8005868 <HAL_DMA_IRQHandler+0xa44>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <HAL_DMA_IRQHandler+0x8ca>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e007      	b.n	80056fe <HAL_DMA_IRQHandler+0x8da>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0201 	bic.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005706:	429a      	cmp	r2, r3
 8005708:	d307      	bcc.n	800571a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f2      	bne.n	80056fe <HAL_DMA_IRQHandler+0x8da>
 8005718:	e000      	b.n	800571c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800571a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2203      	movs	r2, #3
 800572e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005732:	e003      	b.n	800573c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8272 	beq.w	8005c32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
 8005756:	e26c      	b.n	8005c32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a43      	ldr	r2, [pc, #268]	@ (800586c <HAL_DMA_IRQHandler+0xa48>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d022      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x984>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a42      	ldr	r2, [pc, #264]	@ (8005870 <HAL_DMA_IRQHandler+0xa4c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d01d      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x984>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a40      	ldr	r2, [pc, #256]	@ (8005874 <HAL_DMA_IRQHandler+0xa50>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x984>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a3f      	ldr	r2, [pc, #252]	@ (8005878 <HAL_DMA_IRQHandler+0xa54>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x984>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a3d      	ldr	r2, [pc, #244]	@ (800587c <HAL_DMA_IRQHandler+0xa58>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x984>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a3c      	ldr	r2, [pc, #240]	@ (8005880 <HAL_DMA_IRQHandler+0xa5c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x984>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a3a      	ldr	r2, [pc, #232]	@ (8005884 <HAL_DMA_IRQHandler+0xa60>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x984>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a39      	ldr	r2, [pc, #228]	@ (8005888 <HAL_DMA_IRQHandler+0xa64>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d101      	bne.n	80057ac <HAL_DMA_IRQHandler+0x988>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <HAL_DMA_IRQHandler+0x98a>
 80057ac:	2300      	movs	r3, #0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 823f 	beq.w	8005c32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	2204      	movs	r2, #4
 80057c6:	409a      	lsls	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80cd 	beq.w	800596c <HAL_DMA_IRQHandler+0xb48>
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80c7 	beq.w	800596c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2204      	movs	r2, #4
 80057e8:	409a      	lsls	r2, r3
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d049      	beq.n	800588c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8210 	beq.w	8005c2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005814:	e20a      	b.n	8005c2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8206 	beq.w	8005c2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005828:	e200      	b.n	8005c2c <HAL_DMA_IRQHandler+0xe08>
 800582a:	bf00      	nop
 800582c:	40020010 	.word	0x40020010
 8005830:	40020028 	.word	0x40020028
 8005834:	40020040 	.word	0x40020040
 8005838:	40020058 	.word	0x40020058
 800583c:	40020070 	.word	0x40020070
 8005840:	40020088 	.word	0x40020088
 8005844:	400200a0 	.word	0x400200a0
 8005848:	400200b8 	.word	0x400200b8
 800584c:	40020410 	.word	0x40020410
 8005850:	40020428 	.word	0x40020428
 8005854:	40020440 	.word	0x40020440
 8005858:	40020458 	.word	0x40020458
 800585c:	40020470 	.word	0x40020470
 8005860:	40020488 	.word	0x40020488
 8005864:	400204a0 	.word	0x400204a0
 8005868:	400204b8 	.word	0x400204b8
 800586c:	58025408 	.word	0x58025408
 8005870:	5802541c 	.word	0x5802541c
 8005874:	58025430 	.word	0x58025430
 8005878:	58025444 	.word	0x58025444
 800587c:	58025458 	.word	0x58025458
 8005880:	5802546c 	.word	0x5802546c
 8005884:	58025480 	.word	0x58025480
 8005888:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d160      	bne.n	8005958 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a98 <HAL_DMA_IRQHandler+0xc74>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d04a      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a7d      	ldr	r2, [pc, #500]	@ (8005a9c <HAL_DMA_IRQHandler+0xc78>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d045      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a7c      	ldr	r2, [pc, #496]	@ (8005aa0 <HAL_DMA_IRQHandler+0xc7c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d040      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a7a      	ldr	r2, [pc, #488]	@ (8005aa4 <HAL_DMA_IRQHandler+0xc80>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d03b      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a79      	ldr	r2, [pc, #484]	@ (8005aa8 <HAL_DMA_IRQHandler+0xc84>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d036      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a77      	ldr	r2, [pc, #476]	@ (8005aac <HAL_DMA_IRQHandler+0xc88>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d031      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a76      	ldr	r2, [pc, #472]	@ (8005ab0 <HAL_DMA_IRQHandler+0xc8c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d02c      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a74      	ldr	r2, [pc, #464]	@ (8005ab4 <HAL_DMA_IRQHandler+0xc90>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d027      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a73      	ldr	r2, [pc, #460]	@ (8005ab8 <HAL_DMA_IRQHandler+0xc94>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d022      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a71      	ldr	r2, [pc, #452]	@ (8005abc <HAL_DMA_IRQHandler+0xc98>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01d      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a70      	ldr	r2, [pc, #448]	@ (8005ac0 <HAL_DMA_IRQHandler+0xc9c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d018      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a6e      	ldr	r2, [pc, #440]	@ (8005ac4 <HAL_DMA_IRQHandler+0xca0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a6d      	ldr	r2, [pc, #436]	@ (8005ac8 <HAL_DMA_IRQHandler+0xca4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00e      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a6b      	ldr	r2, [pc, #428]	@ (8005acc <HAL_DMA_IRQHandler+0xca8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a6a      	ldr	r2, [pc, #424]	@ (8005ad0 <HAL_DMA_IRQHandler+0xcac>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <HAL_DMA_IRQHandler+0xb12>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a68      	ldr	r2, [pc, #416]	@ (8005ad4 <HAL_DMA_IRQHandler+0xcb0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d108      	bne.n	8005948 <HAL_DMA_IRQHandler+0xb24>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0208 	bic.w	r2, r2, #8
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e007      	b.n	8005958 <HAL_DMA_IRQHandler+0xb34>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0204 	bic.w	r2, r2, #4
 8005956:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8165 	beq.w	8005c2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800596a:	e15f      	b.n	8005c2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2202      	movs	r2, #2
 8005976:	409a      	lsls	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80c5 	beq.w	8005b0c <HAL_DMA_IRQHandler+0xce8>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80bf 	beq.w	8005b0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2202      	movs	r2, #2
 8005998:	409a      	lsls	r2, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d018      	beq.n	80059da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 813a 	beq.w	8005c30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059c4:	e134      	b.n	8005c30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8130 	beq.w	8005c30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059d8:	e12a      	b.n	8005c30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f040 8089 	bne.w	8005af8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005a98 <HAL_DMA_IRQHandler+0xc74>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d04a      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a29      	ldr	r2, [pc, #164]	@ (8005a9c <HAL_DMA_IRQHandler+0xc78>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d045      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a28      	ldr	r2, [pc, #160]	@ (8005aa0 <HAL_DMA_IRQHandler+0xc7c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d040      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a26      	ldr	r2, [pc, #152]	@ (8005aa4 <HAL_DMA_IRQHandler+0xc80>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d03b      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a25      	ldr	r2, [pc, #148]	@ (8005aa8 <HAL_DMA_IRQHandler+0xc84>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d036      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a23      	ldr	r2, [pc, #140]	@ (8005aac <HAL_DMA_IRQHandler+0xc88>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d031      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a22      	ldr	r2, [pc, #136]	@ (8005ab0 <HAL_DMA_IRQHandler+0xc8c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d02c      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <HAL_DMA_IRQHandler+0xc90>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d027      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab8 <HAL_DMA_IRQHandler+0xc94>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <HAL_DMA_IRQHandler+0xc98>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01d      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac0 <HAL_DMA_IRQHandler+0xc9c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac4 <HAL_DMA_IRQHandler+0xca0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a19      	ldr	r2, [pc, #100]	@ (8005ac8 <HAL_DMA_IRQHandler+0xca4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <HAL_DMA_IRQHandler+0xca8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a16      	ldr	r2, [pc, #88]	@ (8005ad0 <HAL_DMA_IRQHandler+0xcac>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_DMA_IRQHandler+0xc62>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a14      	ldr	r2, [pc, #80]	@ (8005ad4 <HAL_DMA_IRQHandler+0xcb0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d128      	bne.n	8005ad8 <HAL_DMA_IRQHandler+0xcb4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0214 	bic.w	r2, r2, #20
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e027      	b.n	8005ae8 <HAL_DMA_IRQHandler+0xcc4>
 8005a98:	40020010 	.word	0x40020010
 8005a9c:	40020028 	.word	0x40020028
 8005aa0:	40020040 	.word	0x40020040
 8005aa4:	40020058 	.word	0x40020058
 8005aa8:	40020070 	.word	0x40020070
 8005aac:	40020088 	.word	0x40020088
 8005ab0:	400200a0 	.word	0x400200a0
 8005ab4:	400200b8 	.word	0x400200b8
 8005ab8:	40020410 	.word	0x40020410
 8005abc:	40020428 	.word	0x40020428
 8005ac0:	40020440 	.word	0x40020440
 8005ac4:	40020458 	.word	0x40020458
 8005ac8:	40020470 	.word	0x40020470
 8005acc:	40020488 	.word	0x40020488
 8005ad0:	400204a0 	.word	0x400204a0
 8005ad4:	400204b8 	.word	0x400204b8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 020a 	bic.w	r2, r2, #10
 8005ae6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8097 	beq.w	8005c30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b0a:	e091      	b.n	8005c30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2208      	movs	r2, #8
 8005b16:	409a      	lsls	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8088 	beq.w	8005c32 <HAL_DMA_IRQHandler+0xe0e>
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8082 	beq.w	8005c32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a41      	ldr	r2, [pc, #260]	@ (8005c38 <HAL_DMA_IRQHandler+0xe14>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d04a      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c3c <HAL_DMA_IRQHandler+0xe18>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d045      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a3e      	ldr	r2, [pc, #248]	@ (8005c40 <HAL_DMA_IRQHandler+0xe1c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d040      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a3c      	ldr	r2, [pc, #240]	@ (8005c44 <HAL_DMA_IRQHandler+0xe20>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d03b      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c48 <HAL_DMA_IRQHandler+0xe24>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d036      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a39      	ldr	r2, [pc, #228]	@ (8005c4c <HAL_DMA_IRQHandler+0xe28>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d031      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a38      	ldr	r2, [pc, #224]	@ (8005c50 <HAL_DMA_IRQHandler+0xe2c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d02c      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a36      	ldr	r2, [pc, #216]	@ (8005c54 <HAL_DMA_IRQHandler+0xe30>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d027      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a35      	ldr	r2, [pc, #212]	@ (8005c58 <HAL_DMA_IRQHandler+0xe34>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	@ (8005c5c <HAL_DMA_IRQHandler+0xe38>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <HAL_DMA_IRQHandler+0xe3c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a30      	ldr	r2, [pc, #192]	@ (8005c64 <HAL_DMA_IRQHandler+0xe40>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	@ (8005c68 <HAL_DMA_IRQHandler+0xe44>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c6c <HAL_DMA_IRQHandler+0xe48>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005c70 <HAL_DMA_IRQHandler+0xe4c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_DMA_IRQHandler+0xdaa>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c74 <HAL_DMA_IRQHandler+0xe50>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d108      	bne.n	8005be0 <HAL_DMA_IRQHandler+0xdbc>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 021c 	bic.w	r2, r2, #28
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e007      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xdcc>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 020e 	bic.w	r2, r2, #14
 8005bee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
 8005c26:	e004      	b.n	8005c32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005c28:	bf00      	nop
 8005c2a:	e002      	b.n	8005c32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c2c:	bf00      	nop
 8005c2e:	e000      	b.n	8005c32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c32:	3728      	adds	r7, #40	@ 0x28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40020010 	.word	0x40020010
 8005c3c:	40020028 	.word	0x40020028
 8005c40:	40020040 	.word	0x40020040
 8005c44:	40020058 	.word	0x40020058
 8005c48:	40020070 	.word	0x40020070
 8005c4c:	40020088 	.word	0x40020088
 8005c50:	400200a0 	.word	0x400200a0
 8005c54:	400200b8 	.word	0x400200b8
 8005c58:	40020410 	.word	0x40020410
 8005c5c:	40020428 	.word	0x40020428
 8005c60:	40020440 	.word	0x40020440
 8005c64:	40020458 	.word	0x40020458
 8005c68:	40020470 	.word	0x40020470
 8005c6c:	40020488 	.word	0x40020488
 8005c70:	400204a0 	.word	0x400204a0
 8005c74:	400204b8 	.word	0x400204b8

08005c78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a7f      	ldr	r2, [pc, #508]	@ (8005e94 <DMA_SetConfig+0x21c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d072      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a7d      	ldr	r2, [pc, #500]	@ (8005e98 <DMA_SetConfig+0x220>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d06d      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a7c      	ldr	r2, [pc, #496]	@ (8005e9c <DMA_SetConfig+0x224>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d068      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ea0 <DMA_SetConfig+0x228>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d063      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a79      	ldr	r2, [pc, #484]	@ (8005ea4 <DMA_SetConfig+0x22c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d05e      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a77      	ldr	r2, [pc, #476]	@ (8005ea8 <DMA_SetConfig+0x230>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d059      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a76      	ldr	r2, [pc, #472]	@ (8005eac <DMA_SetConfig+0x234>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d054      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a74      	ldr	r2, [pc, #464]	@ (8005eb0 <DMA_SetConfig+0x238>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04f      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a73      	ldr	r2, [pc, #460]	@ (8005eb4 <DMA_SetConfig+0x23c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d04a      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a71      	ldr	r2, [pc, #452]	@ (8005eb8 <DMA_SetConfig+0x240>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d045      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a70      	ldr	r2, [pc, #448]	@ (8005ebc <DMA_SetConfig+0x244>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d040      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec0 <DMA_SetConfig+0x248>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d03b      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a6d      	ldr	r2, [pc, #436]	@ (8005ec4 <DMA_SetConfig+0x24c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d036      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a6b      	ldr	r2, [pc, #428]	@ (8005ec8 <DMA_SetConfig+0x250>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a6a      	ldr	r2, [pc, #424]	@ (8005ecc <DMA_SetConfig+0x254>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d02c      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a68      	ldr	r2, [pc, #416]	@ (8005ed0 <DMA_SetConfig+0x258>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d027      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a67      	ldr	r2, [pc, #412]	@ (8005ed4 <DMA_SetConfig+0x25c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a65      	ldr	r2, [pc, #404]	@ (8005ed8 <DMA_SetConfig+0x260>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01d      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a64      	ldr	r2, [pc, #400]	@ (8005edc <DMA_SetConfig+0x264>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a62      	ldr	r2, [pc, #392]	@ (8005ee0 <DMA_SetConfig+0x268>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a61      	ldr	r2, [pc, #388]	@ (8005ee4 <DMA_SetConfig+0x26c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a5f      	ldr	r2, [pc, #380]	@ (8005ee8 <DMA_SetConfig+0x270>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a5e      	ldr	r2, [pc, #376]	@ (8005eec <DMA_SetConfig+0x274>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <DMA_SetConfig+0x10a>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ef0 <DMA_SetConfig+0x278>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <DMA_SetConfig+0x10e>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <DMA_SetConfig+0x110>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00d      	beq.n	8005da8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005da6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a39      	ldr	r2, [pc, #228]	@ (8005e94 <DMA_SetConfig+0x21c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d04a      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a38      	ldr	r2, [pc, #224]	@ (8005e98 <DMA_SetConfig+0x220>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d045      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a36      	ldr	r2, [pc, #216]	@ (8005e9c <DMA_SetConfig+0x224>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d040      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a35      	ldr	r2, [pc, #212]	@ (8005ea0 <DMA_SetConfig+0x228>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d03b      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a33      	ldr	r2, [pc, #204]	@ (8005ea4 <DMA_SetConfig+0x22c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d036      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a32      	ldr	r2, [pc, #200]	@ (8005ea8 <DMA_SetConfig+0x230>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d031      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a30      	ldr	r2, [pc, #192]	@ (8005eac <DMA_SetConfig+0x234>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d02c      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2f      	ldr	r2, [pc, #188]	@ (8005eb0 <DMA_SetConfig+0x238>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d027      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb4 <DMA_SetConfig+0x23c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d022      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb8 <DMA_SetConfig+0x240>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d01d      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2a      	ldr	r2, [pc, #168]	@ (8005ebc <DMA_SetConfig+0x244>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d018      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a29      	ldr	r2, [pc, #164]	@ (8005ec0 <DMA_SetConfig+0x248>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d013      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a27      	ldr	r2, [pc, #156]	@ (8005ec4 <DMA_SetConfig+0x24c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00e      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a26      	ldr	r2, [pc, #152]	@ (8005ec8 <DMA_SetConfig+0x250>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d009      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a24      	ldr	r2, [pc, #144]	@ (8005ecc <DMA_SetConfig+0x254>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <DMA_SetConfig+0x1d0>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a23      	ldr	r2, [pc, #140]	@ (8005ed0 <DMA_SetConfig+0x258>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d101      	bne.n	8005e4c <DMA_SetConfig+0x1d4>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <DMA_SetConfig+0x1d6>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d059      	beq.n	8005f06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	223f      	movs	r2, #63	@ 0x3f
 8005e5c:	409a      	lsls	r2, r3
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b40      	cmp	r3, #64	@ 0x40
 8005e80:	d138      	bne.n	8005ef4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e92:	e086      	b.n	8005fa2 <DMA_SetConfig+0x32a>
 8005e94:	40020010 	.word	0x40020010
 8005e98:	40020028 	.word	0x40020028
 8005e9c:	40020040 	.word	0x40020040
 8005ea0:	40020058 	.word	0x40020058
 8005ea4:	40020070 	.word	0x40020070
 8005ea8:	40020088 	.word	0x40020088
 8005eac:	400200a0 	.word	0x400200a0
 8005eb0:	400200b8 	.word	0x400200b8
 8005eb4:	40020410 	.word	0x40020410
 8005eb8:	40020428 	.word	0x40020428
 8005ebc:	40020440 	.word	0x40020440
 8005ec0:	40020458 	.word	0x40020458
 8005ec4:	40020470 	.word	0x40020470
 8005ec8:	40020488 	.word	0x40020488
 8005ecc:	400204a0 	.word	0x400204a0
 8005ed0:	400204b8 	.word	0x400204b8
 8005ed4:	58025408 	.word	0x58025408
 8005ed8:	5802541c 	.word	0x5802541c
 8005edc:	58025430 	.word	0x58025430
 8005ee0:	58025444 	.word	0x58025444
 8005ee4:	58025458 	.word	0x58025458
 8005ee8:	5802546c 	.word	0x5802546c
 8005eec:	58025480 	.word	0x58025480
 8005ef0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]
}
 8005f04:	e04d      	b.n	8005fa2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a29      	ldr	r2, [pc, #164]	@ (8005fb0 <DMA_SetConfig+0x338>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d022      	beq.n	8005f56 <DMA_SetConfig+0x2de>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a27      	ldr	r2, [pc, #156]	@ (8005fb4 <DMA_SetConfig+0x33c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d01d      	beq.n	8005f56 <DMA_SetConfig+0x2de>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a26      	ldr	r2, [pc, #152]	@ (8005fb8 <DMA_SetConfig+0x340>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d018      	beq.n	8005f56 <DMA_SetConfig+0x2de>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a24      	ldr	r2, [pc, #144]	@ (8005fbc <DMA_SetConfig+0x344>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <DMA_SetConfig+0x2de>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a23      	ldr	r2, [pc, #140]	@ (8005fc0 <DMA_SetConfig+0x348>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00e      	beq.n	8005f56 <DMA_SetConfig+0x2de>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a21      	ldr	r2, [pc, #132]	@ (8005fc4 <DMA_SetConfig+0x34c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d009      	beq.n	8005f56 <DMA_SetConfig+0x2de>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a20      	ldr	r2, [pc, #128]	@ (8005fc8 <DMA_SetConfig+0x350>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <DMA_SetConfig+0x2de>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1e      	ldr	r2, [pc, #120]	@ (8005fcc <DMA_SetConfig+0x354>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d101      	bne.n	8005f5a <DMA_SetConfig+0x2e2>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <DMA_SetConfig+0x2e4>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d020      	beq.n	8005fa2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2201      	movs	r2, #1
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d108      	bne.n	8005f92 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	60da      	str	r2, [r3, #12]
}
 8005f90:	e007      	b.n	8005fa2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	60da      	str	r2, [r3, #12]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	58025408 	.word	0x58025408
 8005fb4:	5802541c 	.word	0x5802541c
 8005fb8:	58025430 	.word	0x58025430
 8005fbc:	58025444 	.word	0x58025444
 8005fc0:	58025458 	.word	0x58025458
 8005fc4:	5802546c 	.word	0x5802546c
 8005fc8:	58025480 	.word	0x58025480
 8005fcc:	58025494 	.word	0x58025494

08005fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a42      	ldr	r2, [pc, #264]	@ (80060e8 <DMA_CalcBaseAndBitshift+0x118>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d04a      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a41      	ldr	r2, [pc, #260]	@ (80060ec <DMA_CalcBaseAndBitshift+0x11c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d045      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a3f      	ldr	r2, [pc, #252]	@ (80060f0 <DMA_CalcBaseAndBitshift+0x120>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d040      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80060f4 <DMA_CalcBaseAndBitshift+0x124>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d03b      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a3c      	ldr	r2, [pc, #240]	@ (80060f8 <DMA_CalcBaseAndBitshift+0x128>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d036      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a3b      	ldr	r2, [pc, #236]	@ (80060fc <DMA_CalcBaseAndBitshift+0x12c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d031      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a39      	ldr	r2, [pc, #228]	@ (8006100 <DMA_CalcBaseAndBitshift+0x130>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d02c      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a38      	ldr	r2, [pc, #224]	@ (8006104 <DMA_CalcBaseAndBitshift+0x134>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d027      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a36      	ldr	r2, [pc, #216]	@ (8006108 <DMA_CalcBaseAndBitshift+0x138>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a35      	ldr	r2, [pc, #212]	@ (800610c <DMA_CalcBaseAndBitshift+0x13c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d01d      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a33      	ldr	r2, [pc, #204]	@ (8006110 <DMA_CalcBaseAndBitshift+0x140>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a32      	ldr	r2, [pc, #200]	@ (8006114 <DMA_CalcBaseAndBitshift+0x144>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a30      	ldr	r2, [pc, #192]	@ (8006118 <DMA_CalcBaseAndBitshift+0x148>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2f      	ldr	r2, [pc, #188]	@ (800611c <DMA_CalcBaseAndBitshift+0x14c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2d      	ldr	r2, [pc, #180]	@ (8006120 <DMA_CalcBaseAndBitshift+0x150>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <DMA_CalcBaseAndBitshift+0xa8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2c      	ldr	r2, [pc, #176]	@ (8006124 <DMA_CalcBaseAndBitshift+0x154>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d101      	bne.n	800607c <DMA_CalcBaseAndBitshift+0xac>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <DMA_CalcBaseAndBitshift+0xae>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d024      	beq.n	80060cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	3b10      	subs	r3, #16
 800608a:	4a27      	ldr	r2, [pc, #156]	@ (8006128 <DMA_CalcBaseAndBitshift+0x158>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	4a24      	ldr	r2, [pc, #144]	@ (800612c <DMA_CalcBaseAndBitshift+0x15c>)
 800609c:	5cd3      	ldrb	r3, [r2, r3]
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d908      	bls.n	80060bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006130 <DMA_CalcBaseAndBitshift+0x160>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80060ba:	e00d      	b.n	80060d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <DMA_CalcBaseAndBitshift+0x160>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ca:	e005      	b.n	80060d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40020010 	.word	0x40020010
 80060ec:	40020028 	.word	0x40020028
 80060f0:	40020040 	.word	0x40020040
 80060f4:	40020058 	.word	0x40020058
 80060f8:	40020070 	.word	0x40020070
 80060fc:	40020088 	.word	0x40020088
 8006100:	400200a0 	.word	0x400200a0
 8006104:	400200b8 	.word	0x400200b8
 8006108:	40020410 	.word	0x40020410
 800610c:	40020428 	.word	0x40020428
 8006110:	40020440 	.word	0x40020440
 8006114:	40020458 	.word	0x40020458
 8006118:	40020470 	.word	0x40020470
 800611c:	40020488 	.word	0x40020488
 8006120:	400204a0 	.word	0x400204a0
 8006124:	400204b8 	.word	0x400204b8
 8006128:	aaaaaaab 	.word	0xaaaaaaab
 800612c:	0800feb4 	.word	0x0800feb4
 8006130:	fffffc00 	.word	0xfffffc00

08006134 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d120      	bne.n	800618a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	2b03      	cmp	r3, #3
 800614e:	d858      	bhi.n	8006202 <DMA_CheckFifoParam+0xce>
 8006150:	a201      	add	r2, pc, #4	@ (adr r2, 8006158 <DMA_CheckFifoParam+0x24>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	08006169 	.word	0x08006169
 800615c:	0800617b 	.word	0x0800617b
 8006160:	08006169 	.word	0x08006169
 8006164:	08006203 	.word	0x08006203
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d048      	beq.n	8006206 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006178:	e045      	b.n	8006206 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006182:	d142      	bne.n	800620a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006188:	e03f      	b.n	800620a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006192:	d123      	bne.n	80061dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	2b03      	cmp	r3, #3
 800619a:	d838      	bhi.n	800620e <DMA_CheckFifoParam+0xda>
 800619c:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <DMA_CheckFifoParam+0x70>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061bb 	.word	0x080061bb
 80061ac:	080061b5 	.word	0x080061b5
 80061b0:	080061cd 	.word	0x080061cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
        break;
 80061b8:	e030      	b.n	800621c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d025      	beq.n	8006212 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061ca:	e022      	b.n	8006212 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061d4:	d11f      	bne.n	8006216 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061da:	e01c      	b.n	8006216 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d902      	bls.n	80061ea <DMA_CheckFifoParam+0xb6>
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d003      	beq.n	80061f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061e8:	e018      	b.n	800621c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
        break;
 80061ee:	e015      	b.n	800621c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006200:	e00b      	b.n	800621a <DMA_CheckFifoParam+0xe6>
        break;
 8006202:	bf00      	nop
 8006204:	e00a      	b.n	800621c <DMA_CheckFifoParam+0xe8>
        break;
 8006206:	bf00      	nop
 8006208:	e008      	b.n	800621c <DMA_CheckFifoParam+0xe8>
        break;
 800620a:	bf00      	nop
 800620c:	e006      	b.n	800621c <DMA_CheckFifoParam+0xe8>
        break;
 800620e:	bf00      	nop
 8006210:	e004      	b.n	800621c <DMA_CheckFifoParam+0xe8>
        break;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <DMA_CheckFifoParam+0xe8>
        break;
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <DMA_CheckFifoParam+0xe8>
    break;
 800621a:	bf00      	nop
    }
  }

  return status;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a38      	ldr	r2, [pc, #224]	@ (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d022      	beq.n	800628a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a36      	ldr	r2, [pc, #216]	@ (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01d      	beq.n	800628a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a35      	ldr	r2, [pc, #212]	@ (8006328 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d018      	beq.n	800628a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a33      	ldr	r2, [pc, #204]	@ (800632c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a32      	ldr	r2, [pc, #200]	@ (8006330 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00e      	beq.n	800628a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a30      	ldr	r2, [pc, #192]	@ (8006334 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2f      	ldr	r2, [pc, #188]	@ (8006338 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2d      	ldr	r2, [pc, #180]	@ (800633c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01a      	beq.n	80062ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	3b08      	subs	r3, #8
 800629c:	4a28      	ldr	r2, [pc, #160]	@ (8006340 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4b26      	ldr	r3, [pc, #152]	@ (8006344 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a24      	ldr	r2, [pc, #144]	@ (8006348 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80062b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	2201      	movs	r2, #1
 80062c2:	409a      	lsls	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80062c8:	e024      	b.n	8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	3b10      	subs	r3, #16
 80062d2:	4a1e      	ldr	r2, [pc, #120]	@ (800634c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062d4:	fba2 2303 	umull	r2, r3, r2, r3
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a1c      	ldr	r2, [pc, #112]	@ (8006350 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d806      	bhi.n	80062f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006354 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d902      	bls.n	80062f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3308      	adds	r3, #8
 80062f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4b18      	ldr	r3, [pc, #96]	@ (8006358 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a16      	ldr	r2, [pc, #88]	@ (800635c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006304:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	2201      	movs	r2, #1
 800630e:	409a      	lsls	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	58025408 	.word	0x58025408
 8006324:	5802541c 	.word	0x5802541c
 8006328:	58025430 	.word	0x58025430
 800632c:	58025444 	.word	0x58025444
 8006330:	58025458 	.word	0x58025458
 8006334:	5802546c 	.word	0x5802546c
 8006338:	58025480 	.word	0x58025480
 800633c:	58025494 	.word	0x58025494
 8006340:	cccccccd 	.word	0xcccccccd
 8006344:	16009600 	.word	0x16009600
 8006348:	58025880 	.word	0x58025880
 800634c:	aaaaaaab 	.word	0xaaaaaaab
 8006350:	400204b8 	.word	0x400204b8
 8006354:	4002040f 	.word	0x4002040f
 8006358:	10008200 	.word	0x10008200
 800635c:	40020880 	.word	0x40020880

08006360 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d04a      	beq.n	800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d847      	bhi.n	800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d022      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a24      	ldr	r2, [pc, #144]	@ (800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d01d      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a22      	ldr	r2, [pc, #136]	@ (8006420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a21      	ldr	r2, [pc, #132]	@ (8006424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1e      	ldr	r2, [pc, #120]	@ (800642c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d101      	bne.n	80063d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4b17      	ldr	r3, [pc, #92]	@ (8006438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a15      	ldr	r2, [pc, #84]	@ (800643c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80063ea:	e009      	b.n	8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4b14      	ldr	r3, [pc, #80]	@ (8006440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	461a      	mov	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a11      	ldr	r2, [pc, #68]	@ (8006444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3b01      	subs	r3, #1
 8006404:	2201      	movs	r2, #1
 8006406:	409a      	lsls	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	58025408 	.word	0x58025408
 800641c:	5802541c 	.word	0x5802541c
 8006420:	58025430 	.word	0x58025430
 8006424:	58025444 	.word	0x58025444
 8006428:	58025458 	.word	0x58025458
 800642c:	5802546c 	.word	0x5802546c
 8006430:	58025480 	.word	0x58025480
 8006434:	58025494 	.word	0x58025494
 8006438:	1600963f 	.word	0x1600963f
 800643c:	58025940 	.word	0x58025940
 8006440:	1000823f 	.word	0x1000823f
 8006444:	40020940 	.word	0x40020940

08006448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006448:	b480      	push	{r7}
 800644a:	b089      	sub	sp, #36	@ 0x24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006456:	4b89      	ldr	r3, [pc, #548]	@ (800667c <HAL_GPIO_Init+0x234>)
 8006458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800645a:	e194      	b.n	8006786 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2101      	movs	r1, #1
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	fa01 f303 	lsl.w	r3, r1, r3
 8006468:	4013      	ands	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8186 	beq.w	8006780 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	2b01      	cmp	r3, #1
 800647e:	d005      	beq.n	800648c <HAL_GPIO_Init+0x44>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d130      	bne.n	80064ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	2203      	movs	r2, #3
 8006498:	fa02 f303 	lsl.w	r3, r2, r3
 800649c:	43db      	mvns	r3, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064c2:	2201      	movs	r2, #1
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	f003 0201 	and.w	r2, r3, #1
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d017      	beq.n	800652a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	2203      	movs	r2, #3
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4313      	orrs	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d123      	bne.n	800657e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	08da      	lsrs	r2, r3, #3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3208      	adds	r2, #8
 800653e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	220f      	movs	r2, #15
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	43db      	mvns	r3, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4013      	ands	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	08da      	lsrs	r2, r3, #3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3208      	adds	r2, #8
 8006578:	69b9      	ldr	r1, [r7, #24]
 800657a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	2203      	movs	r2, #3
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	43db      	mvns	r3, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	4013      	ands	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f003 0203 	and.w	r2, r3, #3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 80e0 	beq.w	8006780 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006680 <HAL_GPIO_Init+0x238>)
 80065c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006680 <HAL_GPIO_Init+0x238>)
 80065c8:	f043 0302 	orr.w	r3, r3, #2
 80065cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80065d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006680 <HAL_GPIO_Init+0x238>)
 80065d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065de:	4a29      	ldr	r2, [pc, #164]	@ (8006684 <HAL_GPIO_Init+0x23c>)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	3302      	adds	r3, #2
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	220f      	movs	r2, #15
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43db      	mvns	r3, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4013      	ands	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a20      	ldr	r2, [pc, #128]	@ (8006688 <HAL_GPIO_Init+0x240>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d052      	beq.n	80066b0 <HAL_GPIO_Init+0x268>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1f      	ldr	r2, [pc, #124]	@ (800668c <HAL_GPIO_Init+0x244>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d031      	beq.n	8006676 <HAL_GPIO_Init+0x22e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1e      	ldr	r2, [pc, #120]	@ (8006690 <HAL_GPIO_Init+0x248>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d02b      	beq.n	8006672 <HAL_GPIO_Init+0x22a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a1d      	ldr	r2, [pc, #116]	@ (8006694 <HAL_GPIO_Init+0x24c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d025      	beq.n	800666e <HAL_GPIO_Init+0x226>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1c      	ldr	r2, [pc, #112]	@ (8006698 <HAL_GPIO_Init+0x250>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01f      	beq.n	800666a <HAL_GPIO_Init+0x222>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1b      	ldr	r2, [pc, #108]	@ (800669c <HAL_GPIO_Init+0x254>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d019      	beq.n	8006666 <HAL_GPIO_Init+0x21e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a1a      	ldr	r2, [pc, #104]	@ (80066a0 <HAL_GPIO_Init+0x258>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_GPIO_Init+0x21a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a19      	ldr	r2, [pc, #100]	@ (80066a4 <HAL_GPIO_Init+0x25c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00d      	beq.n	800665e <HAL_GPIO_Init+0x216>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a18      	ldr	r2, [pc, #96]	@ (80066a8 <HAL_GPIO_Init+0x260>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d007      	beq.n	800665a <HAL_GPIO_Init+0x212>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a17      	ldr	r2, [pc, #92]	@ (80066ac <HAL_GPIO_Init+0x264>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d101      	bne.n	8006656 <HAL_GPIO_Init+0x20e>
 8006652:	2309      	movs	r3, #9
 8006654:	e02d      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 8006656:	230a      	movs	r3, #10
 8006658:	e02b      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 800665a:	2308      	movs	r3, #8
 800665c:	e029      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 800665e:	2307      	movs	r3, #7
 8006660:	e027      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 8006662:	2306      	movs	r3, #6
 8006664:	e025      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 8006666:	2305      	movs	r3, #5
 8006668:	e023      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 800666a:	2304      	movs	r3, #4
 800666c:	e021      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 800666e:	2303      	movs	r3, #3
 8006670:	e01f      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 8006672:	2302      	movs	r3, #2
 8006674:	e01d      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 8006676:	2301      	movs	r3, #1
 8006678:	e01b      	b.n	80066b2 <HAL_GPIO_Init+0x26a>
 800667a:	bf00      	nop
 800667c:	58000080 	.word	0x58000080
 8006680:	58024400 	.word	0x58024400
 8006684:	58000400 	.word	0x58000400
 8006688:	58020000 	.word	0x58020000
 800668c:	58020400 	.word	0x58020400
 8006690:	58020800 	.word	0x58020800
 8006694:	58020c00 	.word	0x58020c00
 8006698:	58021000 	.word	0x58021000
 800669c:	58021400 	.word	0x58021400
 80066a0:	58021800 	.word	0x58021800
 80066a4:	58021c00 	.word	0x58021c00
 80066a8:	58022000 	.word	0x58022000
 80066ac:	58022400 	.word	0x58022400
 80066b0:	2300      	movs	r3, #0
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	f002 0203 	and.w	r2, r2, #3
 80066b8:	0092      	lsls	r2, r2, #2
 80066ba:	4093      	lsls	r3, r2
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4313      	orrs	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066c2:	4938      	ldr	r1, [pc, #224]	@ (80067a4 <HAL_GPIO_Init+0x35c>)
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	3302      	adds	r3, #2
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	43db      	mvns	r3, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4013      	ands	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	43db      	mvns	r3, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4013      	ands	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	43db      	mvns	r3, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4013      	ands	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	3301      	adds	r3, #1
 8006784:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	f47f ae63 	bne.w	800645c <HAL_GPIO_Init+0x14>
  }
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	3724      	adds	r7, #36	@ 0x24
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	58000400 	.word	0x58000400

080067a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
 80067b4:	4613      	mov	r3, r2
 80067b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067b8:	787b      	ldrb	r3, [r7, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067c4:	e003      	b.n	80067ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067c6:	887b      	ldrh	r3, [r7, #2]
 80067c8:	041a      	lsls	r2, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	619a      	str	r2, [r3, #24]
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067ec:	887a      	ldrh	r2, [r7, #2]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4013      	ands	r3, r2
 80067f2:	041a      	lsls	r2, r3, #16
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	43d9      	mvns	r1, r3
 80067f8:	887b      	ldrh	r3, [r7, #2]
 80067fa:	400b      	ands	r3, r1
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	619a      	str	r2, [r3, #24]
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af02      	add	r7, sp, #8
 8006814:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0fe      	b.n	8006a1e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7fa ff0f 	bl	8001658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2203      	movs	r2, #3
 800683e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f006 fde6 	bl	800d418 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7c1a      	ldrb	r2, [r3, #16]
 8006854:	f88d 2000 	strb.w	r2, [sp]
 8006858:	3304      	adds	r3, #4
 800685a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800685c:	f006 fd6a 	bl	800d334 <USB_CoreInit>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e0d5      	b.n	8006a1e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2100      	movs	r1, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f006 fdde 	bl	800d43a <USB_SetCurrentMode>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e0c6      	b.n	8006a1e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]
 8006894:	e04a      	b.n	800692c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3315      	adds	r3, #21
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068aa:	7bfa      	ldrb	r2, [r7, #15]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	3314      	adds	r3, #20
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	b298      	uxth	r0, r3
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	332e      	adds	r3, #46	@ 0x2e
 80068d2:	4602      	mov	r2, r0
 80068d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	3318      	adds	r3, #24
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	331c      	adds	r3, #28
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068fe:	7bfa      	ldrb	r2, [r7, #15]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	3320      	adds	r3, #32
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006912:	7bfa      	ldrb	r2, [r7, #15]
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	3324      	adds	r3, #36	@ 0x24
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	3301      	adds	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	791b      	ldrb	r3, [r3, #4]
 8006930:	7bfa      	ldrb	r2, [r7, #15]
 8006932:	429a      	cmp	r2, r3
 8006934:	d3af      	bcc.n	8006896 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
 800693a:	e044      	b.n	80069c6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006952:	7bfa      	ldrb	r2, [r7, #15]
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006964:	7bfa      	ldrb	r2, [r7, #15]
 8006966:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006968:	7bfa      	ldrb	r2, [r7, #15]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800697e:	7bfa      	ldrb	r2, [r7, #15]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006994:	7bfa      	ldrb	r2, [r7, #15]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069aa:	7bfa      	ldrb	r2, [r7, #15]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	3301      	adds	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	791b      	ldrb	r3, [r3, #4]
 80069ca:	7bfa      	ldrb	r2, [r7, #15]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d3b5      	bcc.n	800693c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7c1a      	ldrb	r2, [r3, #16]
 80069d8:	f88d 2000 	strb.w	r2, [sp]
 80069dc:	3304      	adds	r3, #4
 80069de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069e0:	f006 fd78 	bl	800d4d4 <USB_DevInit>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e013      	b.n	8006a1e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7b1b      	ldrb	r3, [r3, #12]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d102      	bne.n	8006a12 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f80b 	bl	8006a28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f006 ff33 	bl	800d882 <USB_DevDisconnect>

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a56:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_PCDEx_ActivateLPM+0x44>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	10000003 	.word	0x10000003

08006a70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006a78:	4b19      	ldr	r3, [pc, #100]	@ (8006ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d00a      	beq.n	8006a9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a84:	4b16      	ldr	r3, [pc, #88]	@ (8006ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d001      	beq.n	8006a96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e01f      	b.n	8006ad6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e01d      	b.n	8006ad6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a9a:	4b11      	ldr	r3, [pc, #68]	@ (8006ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f023 0207 	bic.w	r2, r3, #7
 8006aa2:	490f      	ldr	r1, [pc, #60]	@ (8006ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006aaa:	f7fa fecb 	bl	8001844 <HAL_GetTick>
 8006aae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ab0:	e009      	b.n	8006ac6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ab2:	f7fa fec7 	bl	8001844 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ac0:	d901      	bls.n	8006ac6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e007      	b.n	8006ad6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ac6:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad2:	d1ee      	bne.n	8006ab2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	58024800 	.word	0x58024800

08006ae4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006ae8:	4b05      	ldr	r3, [pc, #20]	@ (8006b00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	4a04      	ldr	r2, [pc, #16]	@ (8006b00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006af2:	60d3      	str	r3, [r2, #12]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	58024800 	.word	0x58024800

08006b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	@ 0x30
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f000 bc48 	b.w	80073a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8088 	beq.w	8006c36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b26:	4b99      	ldr	r3, [pc, #612]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b30:	4b96      	ldr	r3, [pc, #600]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d007      	beq.n	8006b4c <HAL_RCC_OscConfig+0x48>
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	2b18      	cmp	r3, #24
 8006b40:	d111      	bne.n	8006b66 <HAL_RCC_OscConfig+0x62>
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d10c      	bne.n	8006b66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d06d      	beq.n	8006c34 <HAL_RCC_OscConfig+0x130>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d169      	bne.n	8006c34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f000 bc21 	b.w	80073a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x7a>
 8006b70:	4b86      	ldr	r3, [pc, #536]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a85      	ldr	r2, [pc, #532]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	e02e      	b.n	8006bdc <HAL_RCC_OscConfig+0xd8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x9c>
 8006b86:	4b81      	ldr	r3, [pc, #516]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a80      	ldr	r2, [pc, #512]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	4b7e      	ldr	r3, [pc, #504]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a7d      	ldr	r2, [pc, #500]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006b98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	e01d      	b.n	8006bdc <HAL_RCC_OscConfig+0xd8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0xc0>
 8006baa:	4b78      	ldr	r3, [pc, #480]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a77      	ldr	r2, [pc, #476]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	4b75      	ldr	r3, [pc, #468]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a74      	ldr	r2, [pc, #464]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e00b      	b.n	8006bdc <HAL_RCC_OscConfig+0xd8>
 8006bc4:	4b71      	ldr	r3, [pc, #452]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a70      	ldr	r2, [pc, #448]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	4b6e      	ldr	r3, [pc, #440]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a6d      	ldr	r2, [pc, #436]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d013      	beq.n	8006c0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fa fe2e 	bl	8001844 <HAL_GetTick>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bec:	f7fa fe2a 	bl	8001844 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b64      	cmp	r3, #100	@ 0x64
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e3d4      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bfe:	4b63      	ldr	r3, [pc, #396]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0xe8>
 8006c0a:	e014      	b.n	8006c36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fa fe1a 	bl	8001844 <HAL_GetTick>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c14:	f7fa fe16 	bl	8001844 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b64      	cmp	r3, #100	@ 0x64
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e3c0      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c26:	4b59      	ldr	r3, [pc, #356]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x110>
 8006c32:	e000      	b.n	8006c36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80ca 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c44:	4b51      	ldr	r3, [pc, #324]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_RCC_OscConfig+0x166>
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	2b18      	cmp	r3, #24
 8006c5e:	d156      	bne.n	8006d0e <HAL_RCC_OscConfig+0x20a>
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d151      	bne.n	8006d0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c6a:	4b48      	ldr	r3, [pc, #288]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_RCC_OscConfig+0x17e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e392      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c82:	4b42      	ldr	r3, [pc, #264]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f023 0219 	bic.w	r2, r3, #25
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	493f      	ldr	r1, [pc, #252]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fa fdd6 	bl	8001844 <HAL_GetTick>
 8006c98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9c:	f7fa fdd2 	bl	8001844 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e37c      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cae:	4b37      	ldr	r3, [pc, #220]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cba:	f7fa fdf3 	bl	80018a4 <HAL_GetREVID>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d817      	bhi.n	8006cf8 <HAL_RCC_OscConfig+0x1f4>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b40      	cmp	r3, #64	@ 0x40
 8006cce:	d108      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x1de>
 8006cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ce0:	e07a      	b.n	8006dd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	031b      	lsls	r3, r3, #12
 8006cf0:	4926      	ldr	r1, [pc, #152]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cf6:	e06f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf8:	4b24      	ldr	r3, [pc, #144]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	061b      	lsls	r3, r3, #24
 8006d06:	4921      	ldr	r1, [pc, #132]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d0c:	e064      	b.n	8006dd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d047      	beq.n	8006da6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d16:	4b1d      	ldr	r3, [pc, #116]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f023 0219 	bic.w	r2, r3, #25
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	491a      	ldr	r1, [pc, #104]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fa fd8c 	bl	8001844 <HAL_GetTick>
 8006d2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d30:	f7fa fd88 	bl	8001844 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e332      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d42:	4b12      	ldr	r3, [pc, #72]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4e:	f7fa fda9 	bl	80018a4 <HAL_GetREVID>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d819      	bhi.n	8006d90 <HAL_RCC_OscConfig+0x28c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	d108      	bne.n	8006d76 <HAL_RCC_OscConfig+0x272>
 8006d64:	4b09      	ldr	r3, [pc, #36]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d6c:	4a07      	ldr	r2, [pc, #28]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d72:	6053      	str	r3, [r2, #4]
 8006d74:	e030      	b.n	8006dd8 <HAL_RCC_OscConfig+0x2d4>
 8006d76:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	031b      	lsls	r3, r3, #12
 8006d84:	4901      	ldr	r1, [pc, #4]	@ (8006d8c <HAL_RCC_OscConfig+0x288>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	604b      	str	r3, [r1, #4]
 8006d8a:	e025      	b.n	8006dd8 <HAL_RCC_OscConfig+0x2d4>
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	4b9a      	ldr	r3, [pc, #616]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	4997      	ldr	r1, [pc, #604]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	604b      	str	r3, [r1, #4]
 8006da4:	e018      	b.n	8006dd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da6:	4b95      	ldr	r3, [pc, #596]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a94      	ldr	r2, [pc, #592]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fa fd47 	bl	8001844 <HAL_GetTick>
 8006db6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dba:	f7fa fd43 	bl	8001844 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e2ed      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dcc:	4b8b      	ldr	r3, [pc, #556]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f0      	bne.n	8006dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80a9 	beq.w	8006f38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de6:	4b85      	ldr	r3, [pc, #532]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006df0:	4b82      	ldr	r3, [pc, #520]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d007      	beq.n	8006e0c <HAL_RCC_OscConfig+0x308>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b18      	cmp	r3, #24
 8006e00:	d13a      	bne.n	8006e78 <HAL_RCC_OscConfig+0x374>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d135      	bne.n	8006e78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e0c:	4b7b      	ldr	r3, [pc, #492]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_OscConfig+0x320>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	2b80      	cmp	r3, #128	@ 0x80
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e2c1      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e24:	f7fa fd3e 	bl	80018a4 <HAL_GetREVID>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d817      	bhi.n	8006e62 <HAL_RCC_OscConfig+0x35e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d108      	bne.n	8006e4c <HAL_RCC_OscConfig+0x348>
 8006e3a:	4b70      	ldr	r3, [pc, #448]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006e42:	4a6e      	ldr	r2, [pc, #440]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e4a:	e075      	b.n	8006f38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e4c:	4b6b      	ldr	r3, [pc, #428]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	069b      	lsls	r3, r3, #26
 8006e5a:	4968      	ldr	r1, [pc, #416]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e60:	e06a      	b.n	8006f38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e62:	4b66      	ldr	r3, [pc, #408]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	061b      	lsls	r3, r3, #24
 8006e70:	4962      	ldr	r1, [pc, #392]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e76:	e05f      	b.n	8006f38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d042      	beq.n	8006f06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e80:	4b5e      	ldr	r3, [pc, #376]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a5d      	ldr	r2, [pc, #372]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fa fcda 	bl	8001844 <HAL_GetTick>
 8006e90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e94:	f7fa fcd6 	bl	8001844 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e280      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ea6:	4b55      	ldr	r3, [pc, #340]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f0      	beq.n	8006e94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006eb2:	f7fa fcf7 	bl	80018a4 <HAL_GetREVID>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d817      	bhi.n	8006ef0 <HAL_RCC_OscConfig+0x3ec>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d108      	bne.n	8006eda <HAL_RCC_OscConfig+0x3d6>
 8006ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ed0:	4a4a      	ldr	r2, [pc, #296]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006ed2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ed6:	6053      	str	r3, [r2, #4]
 8006ed8:	e02e      	b.n	8006f38 <HAL_RCC_OscConfig+0x434>
 8006eda:	4b48      	ldr	r3, [pc, #288]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	069b      	lsls	r3, r3, #26
 8006ee8:	4944      	ldr	r1, [pc, #272]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	604b      	str	r3, [r1, #4]
 8006eee:	e023      	b.n	8006f38 <HAL_RCC_OscConfig+0x434>
 8006ef0:	4b42      	ldr	r3, [pc, #264]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	061b      	lsls	r3, r3, #24
 8006efe:	493f      	ldr	r1, [pc, #252]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60cb      	str	r3, [r1, #12]
 8006f04:	e018      	b.n	8006f38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f06:	4b3d      	ldr	r3, [pc, #244]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f12:	f7fa fc97 	bl	8001844 <HAL_GetTick>
 8006f16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f1a:	f7fa fc93 	bl	8001844 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e23d      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f2c:	4b33      	ldr	r3, [pc, #204]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d036      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d019      	beq.n	8006f80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f50:	4a2a      	ldr	r2, [pc, #168]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fa fc74 	bl	8001844 <HAL_GetTick>
 8006f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f60:	f7fa fc70 	bl	8001844 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e21a      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f72:	4b22      	ldr	r3, [pc, #136]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x45c>
 8006f7e:	e018      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f80:	4b1e      	ldr	r3, [pc, #120]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f84:	4a1d      	ldr	r2, [pc, #116]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8c:	f7fa fc5a 	bl	8001844 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f94:	f7fa fc56 	bl	8001844 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e200      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fa6:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d039      	beq.n	8007032 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01c      	beq.n	8007000 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a0c      	ldr	r2, [pc, #48]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006fcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fd2:	f7fa fc37 	bl	8001844 <HAL_GetTick>
 8006fd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fda:	f7fa fc33 	bl	8001844 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e1dd      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fec:	4b03      	ldr	r3, [pc, #12]	@ (8006ffc <HAL_RCC_OscConfig+0x4f8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f0      	beq.n	8006fda <HAL_RCC_OscConfig+0x4d6>
 8006ff8:	e01b      	b.n	8007032 <HAL_RCC_OscConfig+0x52e>
 8006ffa:	bf00      	nop
 8006ffc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007000:	4b9b      	ldr	r3, [pc, #620]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a9a      	ldr	r2, [pc, #616]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800700a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800700c:	f7fa fc1a 	bl	8001844 <HAL_GetTick>
 8007010:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007014:	f7fa fc16 	bl	8001844 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e1c0      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007026:	4b92      	ldr	r3, [pc, #584]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 8081 	beq.w	8007142 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007040:	4b8c      	ldr	r3, [pc, #560]	@ (8007274 <HAL_RCC_OscConfig+0x770>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a8b      	ldr	r2, [pc, #556]	@ (8007274 <HAL_RCC_OscConfig+0x770>)
 8007046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800704a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800704c:	f7fa fbfa 	bl	8001844 <HAL_GetTick>
 8007050:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007054:	f7fa fbf6 	bl	8001844 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b64      	cmp	r3, #100	@ 0x64
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e1a0      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007066:	4b83      	ldr	r3, [pc, #524]	@ (8007274 <HAL_RCC_OscConfig+0x770>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d106      	bne.n	8007088 <HAL_RCC_OscConfig+0x584>
 800707a:	4b7d      	ldr	r3, [pc, #500]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707e:	4a7c      	ldr	r2, [pc, #496]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	6713      	str	r3, [r2, #112]	@ 0x70
 8007086:	e02d      	b.n	80070e4 <HAL_RCC_OscConfig+0x5e0>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10c      	bne.n	80070aa <HAL_RCC_OscConfig+0x5a6>
 8007090:	4b77      	ldr	r3, [pc, #476]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007094:	4a76      	ldr	r2, [pc, #472]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	6713      	str	r3, [r2, #112]	@ 0x70
 800709c:	4b74      	ldr	r3, [pc, #464]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a0:	4a73      	ldr	r2, [pc, #460]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070a2:	f023 0304 	bic.w	r3, r3, #4
 80070a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a8:	e01c      	b.n	80070e4 <HAL_RCC_OscConfig+0x5e0>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d10c      	bne.n	80070cc <HAL_RCC_OscConfig+0x5c8>
 80070b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b6:	4a6e      	ldr	r2, [pc, #440]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070b8:	f043 0304 	orr.w	r3, r3, #4
 80070bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80070be:	4b6c      	ldr	r3, [pc, #432]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c2:	4a6b      	ldr	r2, [pc, #428]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ca:	e00b      	b.n	80070e4 <HAL_RCC_OscConfig+0x5e0>
 80070cc:	4b68      	ldr	r3, [pc, #416]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d0:	4a67      	ldr	r2, [pc, #412]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d8:	4b65      	ldr	r3, [pc, #404]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070dc:	4a64      	ldr	r2, [pc, #400]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80070de:	f023 0304 	bic.w	r3, r3, #4
 80070e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d015      	beq.n	8007118 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ec:	f7fa fbaa 	bl	8001844 <HAL_GetTick>
 80070f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070f2:	e00a      	b.n	800710a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f4:	f7fa fba6 	bl	8001844 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e14e      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800710a:	4b59      	ldr	r3, [pc, #356]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0ee      	beq.n	80070f4 <HAL_RCC_OscConfig+0x5f0>
 8007116:	e014      	b.n	8007142 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007118:	f7fa fb94 	bl	8001844 <HAL_GetTick>
 800711c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800711e:	e00a      	b.n	8007136 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007120:	f7fa fb90 	bl	8001844 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e138      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007136:	4b4e      	ldr	r3, [pc, #312]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ee      	bne.n	8007120 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 812d 	beq.w	80073a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800714c:	4b48      	ldr	r3, [pc, #288]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007154:	2b18      	cmp	r3, #24
 8007156:	f000 80bd 	beq.w	80072d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	2b02      	cmp	r3, #2
 8007160:	f040 809e 	bne.w	80072a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007164:	4b42      	ldr	r3, [pc, #264]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a41      	ldr	r2, [pc, #260]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800716a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800716e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7fa fb68 	bl	8001844 <HAL_GetTick>
 8007174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007178:	f7fa fb64 	bl	8001844 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e10e      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800718a:	4b39      	ldr	r3, [pc, #228]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007196:	4b36      	ldr	r3, [pc, #216]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007198:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800719a:	4b37      	ldr	r3, [pc, #220]	@ (8007278 <HAL_RCC_OscConfig+0x774>)
 800719c:	4013      	ands	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071a6:	0112      	lsls	r2, r2, #4
 80071a8:	430a      	orrs	r2, r1
 80071aa:	4931      	ldr	r1, [pc, #196]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b4:	3b01      	subs	r3, #1
 80071b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071be:	3b01      	subs	r3, #1
 80071c0:	025b      	lsls	r3, r3, #9
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ca:	3b01      	subs	r3, #1
 80071cc:	041b      	lsls	r3, r3, #16
 80071ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	3b01      	subs	r3, #1
 80071da:	061b      	lsls	r3, r3, #24
 80071dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071e0:	4923      	ldr	r1, [pc, #140]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80071e6:	4b22      	ldr	r3, [pc, #136]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	4a21      	ldr	r2, [pc, #132]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 80071f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071f6:	4b21      	ldr	r3, [pc, #132]	@ (800727c <HAL_RCC_OscConfig+0x778>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80071fe:	00d2      	lsls	r2, r2, #3
 8007200:	491b      	ldr	r1, [pc, #108]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007202:	4313      	orrs	r3, r2
 8007204:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007206:	4b1a      	ldr	r3, [pc, #104]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	f023 020c 	bic.w	r2, r3, #12
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	4917      	ldr	r1, [pc, #92]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007214:	4313      	orrs	r3, r2
 8007216:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007218:	4b15      	ldr	r3, [pc, #84]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	f023 0202 	bic.w	r2, r3, #2
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007224:	4912      	ldr	r1, [pc, #72]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007226:	4313      	orrs	r3, r2
 8007228:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800722a:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	4a10      	ldr	r2, [pc, #64]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007234:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007236:	4b0e      	ldr	r3, [pc, #56]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723a:	4a0d      	ldr	r2, [pc, #52]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800723c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007242:	4b0b      	ldr	r3, [pc, #44]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	4a0a      	ldr	r2, [pc, #40]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800724c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800724e:	4b08      	ldr	r3, [pc, #32]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	4a07      	ldr	r2, [pc, #28]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007254:	f043 0301 	orr.w	r3, r3, #1
 8007258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800725a:	4b05      	ldr	r3, [pc, #20]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a04      	ldr	r2, [pc, #16]	@ (8007270 <HAL_RCC_OscConfig+0x76c>)
 8007260:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007266:	f7fa faed 	bl	8001844 <HAL_GetTick>
 800726a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800726c:	e011      	b.n	8007292 <HAL_RCC_OscConfig+0x78e>
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
 8007274:	58024800 	.word	0x58024800
 8007278:	fffffc0c 	.word	0xfffffc0c
 800727c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007280:	f7fa fae0 	bl	8001844 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e08a      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007292:	4b47      	ldr	r3, [pc, #284]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <HAL_RCC_OscConfig+0x77c>
 800729e:	e082      	b.n	80073a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a0:	4b43      	ldr	r3, [pc, #268]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a42      	ldr	r2, [pc, #264]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 80072a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fa faca 	bl	8001844 <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072b4:	f7fa fac6 	bl	8001844 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e070      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072c6:	4b3a      	ldr	r3, [pc, #232]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x7b0>
 80072d2:	e068      	b.n	80073a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072d4:	4b36      	ldr	r3, [pc, #216]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072da:	4b35      	ldr	r3, [pc, #212]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d031      	beq.n	800734c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f003 0203 	and.w	r2, r3, #3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d12a      	bne.n	800734c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	091b      	lsrs	r3, r3, #4
 80072fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007302:	429a      	cmp	r2, r3
 8007304:	d122      	bne.n	800734c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007312:	429a      	cmp	r2, r3
 8007314:	d11a      	bne.n	800734c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	0a5b      	lsrs	r3, r3, #9
 800731a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007322:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007324:	429a      	cmp	r2, r3
 8007326:	d111      	bne.n	800734c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007336:	429a      	cmp	r2, r3
 8007338:	d108      	bne.n	800734c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007346:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e02b      	b.n	80073a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007350:	4b17      	ldr	r3, [pc, #92]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 8007352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007354:	08db      	lsrs	r3, r3, #3
 8007356:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800735a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	429a      	cmp	r2, r3
 8007364:	d01f      	beq.n	80073a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007366:	4b12      	ldr	r3, [pc, #72]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	4a11      	ldr	r2, [pc, #68]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007372:	f7fa fa67 	bl	8001844 <HAL_GetTick>
 8007376:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007378:	bf00      	nop
 800737a:	f7fa fa63 	bl	8001844 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	4293      	cmp	r3, r2
 8007384:	d0f9      	beq.n	800737a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007386:	4b0a      	ldr	r3, [pc, #40]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 8007388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800738a:	4b0a      	ldr	r3, [pc, #40]	@ (80073b4 <HAL_RCC_OscConfig+0x8b0>)
 800738c:	4013      	ands	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007392:	00d2      	lsls	r2, r2, #3
 8007394:	4906      	ldr	r1, [pc, #24]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 8007396:	4313      	orrs	r3, r2
 8007398:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800739a:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 800739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739e:	4a04      	ldr	r2, [pc, #16]	@ (80073b0 <HAL_RCC_OscConfig+0x8ac>)
 80073a0:	f043 0301 	orr.w	r3, r3, #1
 80073a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3730      	adds	r7, #48	@ 0x30
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	58024400 	.word	0x58024400
 80073b4:	ffff0007 	.word	0xffff0007

080073b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e19c      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073cc:	4b8a      	ldr	r3, [pc, #552]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d910      	bls.n	80073fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073da:	4b87      	ldr	r3, [pc, #540]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f023 020f 	bic.w	r2, r3, #15
 80073e2:	4985      	ldr	r1, [pc, #532]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ea:	4b83      	ldr	r3, [pc, #524]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d001      	beq.n	80073fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e184      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	4b7b      	ldr	r3, [pc, #492]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007414:	429a      	cmp	r2, r3
 8007416:	d908      	bls.n	800742a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007418:	4b78      	ldr	r3, [pc, #480]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	4975      	ldr	r1, [pc, #468]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007426:	4313      	orrs	r3, r2
 8007428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d010      	beq.n	8007458 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695a      	ldr	r2, [r3, #20]
 800743a:	4b70      	ldr	r3, [pc, #448]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007442:	429a      	cmp	r2, r3
 8007444:	d908      	bls.n	8007458 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007446:	4b6d      	ldr	r3, [pc, #436]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	496a      	ldr	r1, [pc, #424]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007454:	4313      	orrs	r3, r2
 8007456:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	2b00      	cmp	r3, #0
 8007462:	d010      	beq.n	8007486 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	4b64      	ldr	r3, [pc, #400]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007470:	429a      	cmp	r2, r3
 8007472:	d908      	bls.n	8007486 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007474:	4b61      	ldr	r3, [pc, #388]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	495e      	ldr	r1, [pc, #376]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007482:	4313      	orrs	r3, r2
 8007484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d010      	beq.n	80074b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69da      	ldr	r2, [r3, #28]
 8007496:	4b59      	ldr	r3, [pc, #356]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800749e:	429a      	cmp	r2, r3
 80074a0:	d908      	bls.n	80074b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80074a2:	4b56      	ldr	r3, [pc, #344]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	4953      	ldr	r1, [pc, #332]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d010      	beq.n	80074e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	4b4d      	ldr	r3, [pc, #308]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d908      	bls.n	80074e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d0:	4b4a      	ldr	r3, [pc, #296]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f023 020f 	bic.w	r2, r3, #15
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4947      	ldr	r1, [pc, #284]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d055      	beq.n	800759a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074ee:	4b43      	ldr	r3, [pc, #268]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	4940      	ldr	r1, [pc, #256]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d107      	bne.n	8007518 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007508:	4b3c      	ldr	r3, [pc, #240]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d121      	bne.n	8007558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0f6      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b03      	cmp	r3, #3
 800751e:	d107      	bne.n	8007530 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007520:	4b36      	ldr	r3, [pc, #216]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d115      	bne.n	8007558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0ea      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d107      	bne.n	8007548 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007538:	4b30      	ldr	r3, [pc, #192]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e0de      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007548:	4b2c      	ldr	r3, [pc, #176]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e0d6      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007558:	4b28      	ldr	r3, [pc, #160]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f023 0207 	bic.w	r2, r3, #7
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4925      	ldr	r1, [pc, #148]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 8007566:	4313      	orrs	r3, r2
 8007568:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756a:	f7fa f96b 	bl	8001844 <HAL_GetTick>
 800756e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007570:	e00a      	b.n	8007588 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007572:	f7fa f967 	bl	8001844 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007580:	4293      	cmp	r3, r2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0be      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007588:	4b1c      	ldr	r3, [pc, #112]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	429a      	cmp	r2, r3
 8007598:	d1eb      	bne.n	8007572 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d010      	beq.n	80075c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	4b14      	ldr	r3, [pc, #80]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d208      	bcs.n	80075c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075b6:	4b11      	ldr	r3, [pc, #68]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f023 020f 	bic.w	r2, r3, #15
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	490e      	ldr	r1, [pc, #56]	@ (80075fc <HAL_RCC_ClockConfig+0x244>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075c8:	4b0b      	ldr	r3, [pc, #44]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d214      	bcs.n	8007600 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075d6:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f023 020f 	bic.w	r2, r3, #15
 80075de:	4906      	ldr	r1, [pc, #24]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e6:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <HAL_RCC_ClockConfig+0x240>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e086      	b.n	8007706 <HAL_RCC_ClockConfig+0x34e>
 80075f8:	52002000 	.word	0x52002000
 80075fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d010      	beq.n	800762e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	4b3f      	ldr	r3, [pc, #252]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007618:	429a      	cmp	r2, r3
 800761a:	d208      	bcs.n	800762e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800761c:	4b3c      	ldr	r3, [pc, #240]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	4939      	ldr	r1, [pc, #228]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 800762a:	4313      	orrs	r3, r2
 800762c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0308 	and.w	r3, r3, #8
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	4b34      	ldr	r3, [pc, #208]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007646:	429a      	cmp	r2, r3
 8007648:	d208      	bcs.n	800765c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800764a:	4b31      	ldr	r3, [pc, #196]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	492e      	ldr	r1, [pc, #184]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 8007658:	4313      	orrs	r3, r2
 800765a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	d010      	beq.n	800768a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	4b28      	ldr	r3, [pc, #160]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007674:	429a      	cmp	r2, r3
 8007676:	d208      	bcs.n	800768a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007678:	4b25      	ldr	r3, [pc, #148]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	4922      	ldr	r1, [pc, #136]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 8007686:	4313      	orrs	r3, r2
 8007688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d010      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d208      	bcs.n	80076b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	4917      	ldr	r1, [pc, #92]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076b8:	f000 f834 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 80076bc:	4602      	mov	r2, r0
 80076be:	4b14      	ldr	r3, [pc, #80]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	4912      	ldr	r1, [pc, #72]	@ (8007714 <HAL_RCC_ClockConfig+0x35c>)
 80076ca:	5ccb      	ldrb	r3, [r1, r3]
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
 80076d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007710 <HAL_RCC_ClockConfig+0x358>)
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	4a0d      	ldr	r2, [pc, #52]	@ (8007714 <HAL_RCC_ClockConfig+0x35c>)
 80076e0:	5cd3      	ldrb	r3, [r2, r3]
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007718 <HAL_RCC_ClockConfig+0x360>)
 80076ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076f0:	4a0a      	ldr	r2, [pc, #40]	@ (800771c <HAL_RCC_ClockConfig+0x364>)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80076f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <HAL_RCC_ClockConfig+0x368>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7f9 fd58 	bl	80011b0 <HAL_InitTick>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	58024400 	.word	0x58024400
 8007714:	0800fea4 	.word	0x0800fea4
 8007718:	24000008 	.word	0x24000008
 800771c:	24000004 	.word	0x24000004
 8007720:	2400000c 	.word	0x2400000c

08007724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007724:	b480      	push	{r7}
 8007726:	b089      	sub	sp, #36	@ 0x24
 8007728:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800772a:	4bb3      	ldr	r3, [pc, #716]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007732:	2b18      	cmp	r3, #24
 8007734:	f200 8155 	bhi.w	80079e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <HAL_RCC_GetSysClockFreq+0x1c>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	080077a5 	.word	0x080077a5
 8007744:	080079e3 	.word	0x080079e3
 8007748:	080079e3 	.word	0x080079e3
 800774c:	080079e3 	.word	0x080079e3
 8007750:	080079e3 	.word	0x080079e3
 8007754:	080079e3 	.word	0x080079e3
 8007758:	080079e3 	.word	0x080079e3
 800775c:	080079e3 	.word	0x080079e3
 8007760:	080077cb 	.word	0x080077cb
 8007764:	080079e3 	.word	0x080079e3
 8007768:	080079e3 	.word	0x080079e3
 800776c:	080079e3 	.word	0x080079e3
 8007770:	080079e3 	.word	0x080079e3
 8007774:	080079e3 	.word	0x080079e3
 8007778:	080079e3 	.word	0x080079e3
 800777c:	080079e3 	.word	0x080079e3
 8007780:	080077d1 	.word	0x080077d1
 8007784:	080079e3 	.word	0x080079e3
 8007788:	080079e3 	.word	0x080079e3
 800778c:	080079e3 	.word	0x080079e3
 8007790:	080079e3 	.word	0x080079e3
 8007794:	080079e3 	.word	0x080079e3
 8007798:	080079e3 	.word	0x080079e3
 800779c:	080079e3 	.word	0x080079e3
 80077a0:	080077d7 	.word	0x080077d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077a4:	4b94      	ldr	r3, [pc, #592]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077b0:	4b91      	ldr	r3, [pc, #580]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	08db      	lsrs	r3, r3, #3
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	4a90      	ldr	r2, [pc, #576]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077bc:	fa22 f303 	lsr.w	r3, r2, r3
 80077c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80077c2:	e111      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80077c4:	4b8d      	ldr	r3, [pc, #564]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077c6:	61bb      	str	r3, [r7, #24]
      break;
 80077c8:	e10e      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80077ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077cc:	61bb      	str	r3, [r7, #24]
      break;
 80077ce:	e10b      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80077d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077d2:	61bb      	str	r3, [r7, #24]
      break;
 80077d4:	e108      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077d6:	4b88      	ldr	r3, [pc, #544]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80077e0:	4b85      	ldr	r3, [pc, #532]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077ec:	4b82      	ldr	r3, [pc, #520]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077f6:	4b80      	ldr	r3, [pc, #512]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077fa:	08db      	lsrs	r3, r3, #3
 80077fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80e1 	beq.w	80079dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b02      	cmp	r3, #2
 800781e:	f000 8083 	beq.w	8007928 <HAL_RCC_GetSysClockFreq+0x204>
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b02      	cmp	r3, #2
 8007826:	f200 80a1 	bhi.w	800796c <HAL_RCC_GetSysClockFreq+0x248>
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0x114>
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d056      	beq.n	80078e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007836:	e099      	b.n	800796c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007838:	4b6f      	ldr	r3, [pc, #444]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d02d      	beq.n	80078a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007844:	4b6c      	ldr	r3, [pc, #432]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	08db      	lsrs	r3, r3, #3
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	4a6b      	ldr	r2, [pc, #428]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	ee07 3a90 	vmov	s15, r3
 800785c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786e:	4b62      	ldr	r3, [pc, #392]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007882:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800789e:	e087      	b.n	80079b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007a0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80078ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b2:	4b51      	ldr	r3, [pc, #324]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078e2:	e065      	b.n	80079b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f6:	4b40      	ldr	r3, [pc, #256]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007906:	ed97 6a02 	vldr	s12, [r7, #8]
 800790a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800790e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800791a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007926:	e043      	b.n	80079b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007a14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793a:	4b2f      	ldr	r3, [pc, #188]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800793c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794a:	ed97 6a02 	vldr	s12, [r7, #8]
 800794e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800795e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007966:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800796a:	e021      	b.n	80079b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007976:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800797a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800797e:	4b1e      	ldr	r3, [pc, #120]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007986:	ee07 3a90 	vmov	s15, r3
 800798a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007992:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800799e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80079b0:	4b11      	ldr	r3, [pc, #68]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b4:	0a5b      	lsrs	r3, r3, #9
 80079b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ba:	3301      	adds	r3, #1
 80079bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079d4:	ee17 3a90 	vmov	r3, s15
 80079d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80079da:	e005      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	61bb      	str	r3, [r7, #24]
      break;
 80079e0:	e002      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80079e2:	4b07      	ldr	r3, [pc, #28]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079e4:	61bb      	str	r3, [r7, #24]
      break;
 80079e6:	bf00      	nop
  }

  return sysclockfreq;
 80079e8:	69bb      	ldr	r3, [r7, #24]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3724      	adds	r7, #36	@ 0x24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	58024400 	.word	0x58024400
 80079fc:	03d09000 	.word	0x03d09000
 8007a00:	003d0900 	.word	0x003d0900
 8007a04:	007a1200 	.word	0x007a1200
 8007a08:	46000000 	.word	0x46000000
 8007a0c:	4c742400 	.word	0x4c742400
 8007a10:	4a742400 	.word	0x4a742400
 8007a14:	4af42400 	.word	0x4af42400

08007a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a1e:	f7ff fe81 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 8007a22:	4602      	mov	r2, r0
 8007a24:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	0a1b      	lsrs	r3, r3, #8
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	490f      	ldr	r1, [pc, #60]	@ (8007a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a30:	5ccb      	ldrb	r3, [r1, r3]
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	4a09      	ldr	r2, [pc, #36]	@ (8007a6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a46:	5cd3      	ldrb	r3, [r2, r3]
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a52:	4a07      	ldr	r2, [pc, #28]	@ (8007a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a56:	4a07      	ldr	r2, [pc, #28]	@ (8007a74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	58024400 	.word	0x58024400
 8007a6c:	0800fea4 	.word	0x0800fea4
 8007a70:	24000008 	.word	0x24000008
 8007a74:	24000004 	.word	0x24000004

08007a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a7c:	f7ff ffcc 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8007a80:	4602      	mov	r2, r0
 8007a82:	4b06      	ldr	r3, [pc, #24]	@ (8007a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	091b      	lsrs	r3, r3, #4
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	4904      	ldr	r1, [pc, #16]	@ (8007aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a8e:	5ccb      	ldrb	r3, [r1, r3]
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	0800fea4 	.word	0x0800fea4

08007aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007aa8:	f7ff ffb6 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	4904      	ldr	r1, [pc, #16]	@ (8007acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aba:	5ccb      	ldrb	r3, [r1, r3]
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	58024400 	.word	0x58024400
 8007acc:	0800fea4 	.word	0x0800fea4

08007ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	223f      	movs	r2, #63	@ 0x3f
 8007ade:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b4c <HAL_RCC_GetClockConfig+0x7c>)
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	f003 0207 	and.w	r2, r3, #7
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007aec:	4b17      	ldr	r3, [pc, #92]	@ (8007b4c <HAL_RCC_GetClockConfig+0x7c>)
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007af8:	4b14      	ldr	r3, [pc, #80]	@ (8007b4c <HAL_RCC_GetClockConfig+0x7c>)
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007b04:	4b11      	ldr	r3, [pc, #68]	@ (8007b4c <HAL_RCC_GetClockConfig+0x7c>)
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007b10:	4b0e      	ldr	r3, [pc, #56]	@ (8007b4c <HAL_RCC_GetClockConfig+0x7c>)
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b4c <HAL_RCC_GetClockConfig+0x7c>)
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007b28:	4b08      	ldr	r3, [pc, #32]	@ (8007b4c <HAL_RCC_GetClockConfig+0x7c>)
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b34:	4b06      	ldr	r3, [pc, #24]	@ (8007b50 <HAL_RCC_GetClockConfig+0x80>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 020f 	and.w	r2, r3, #15
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	601a      	str	r2, [r3, #0]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	52002000 	.word	0x52002000

08007b54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b58:	b0ca      	sub	sp, #296	@ 0x128
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b66:	2300      	movs	r3, #0
 8007b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007b78:	2500      	movs	r5, #0
 8007b7a:	ea54 0305 	orrs.w	r3, r4, r5
 8007b7e:	d049      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b8a:	d02f      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007b8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b90:	d828      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b96:	d01a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b9c:	d822      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ba6:	d007      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ba8:	e01c      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007baa:	4bb8      	ldr	r3, [pc, #736]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	4ab7      	ldr	r2, [pc, #732]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bb6:	e01a      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	2102      	movs	r1, #2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f002 fb61 	bl	800a288 <RCCEx_PLL2_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bcc:	e00f      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	3328      	adds	r3, #40	@ 0x28
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f002 fc08 	bl	800a3ec <RCCEx_PLL3_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007be2:	e004      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007bf6:	4ba5      	ldr	r3, [pc, #660]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c04:	4aa1      	ldr	r2, [pc, #644]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c06:	430b      	orrs	r3, r1
 8007c08:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c0a:	e003      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007c20:	f04f 0900 	mov.w	r9, #0
 8007c24:	ea58 0309 	orrs.w	r3, r8, r9
 8007c28:	d047      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d82a      	bhi.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007c34:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c51 	.word	0x08007c51
 8007c40:	08007c5f 	.word	0x08007c5f
 8007c44:	08007c75 	.word	0x08007c75
 8007c48:	08007c93 	.word	0x08007c93
 8007c4c:	08007c93 	.word	0x08007c93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c50:	4b8e      	ldr	r3, [pc, #568]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	4a8d      	ldr	r2, [pc, #564]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c5c:	e01a      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c62:	3308      	adds	r3, #8
 8007c64:	2100      	movs	r1, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f002 fb0e 	bl	800a288 <RCCEx_PLL2_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c72:	e00f      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c78:	3328      	adds	r3, #40	@ 0x28
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f002 fbb5 	bl	800a3ec <RCCEx_PLL3_Config>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c88:	e004      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c90:	e000      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10a      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca0:	f023 0107 	bic.w	r1, r3, #7
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007caa:	4a78      	ldr	r2, [pc, #480]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cac:	430b      	orrs	r3, r1
 8007cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cb0:	e003      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007cc6:	f04f 0b00 	mov.w	fp, #0
 8007cca:	ea5a 030b 	orrs.w	r3, sl, fp
 8007cce:	d04c      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cda:	d030      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ce0:	d829      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce4:	d02d      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ce8:	d825      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cea:	2b80      	cmp	r3, #128	@ 0x80
 8007cec:	d018      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007cee:	2b80      	cmp	r3, #128	@ 0x80
 8007cf0:	d821      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007cf6:	2b40      	cmp	r3, #64	@ 0x40
 8007cf8:	d007      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007cfa:	e01c      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfc:	4b63      	ldr	r3, [pc, #396]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	4a62      	ldr	r2, [pc, #392]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d08:	e01c      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0e:	3308      	adds	r3, #8
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f002 fab8 	bl	800a288 <RCCEx_PLL2_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d1e:	e011      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d24:	3328      	adds	r3, #40	@ 0x28
 8007d26:	2100      	movs	r1, #0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f002 fb5f 	bl	800a3ec <RCCEx_PLL3_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d34:	e006      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d3c:	e002      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d3e:	bf00      	nop
 8007d40:	e000      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d5a:	4a4c      	ldr	r2, [pc, #304]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d60:	e003      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007d76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007d80:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007d84:	460b      	mov	r3, r1
 8007d86:	4313      	orrs	r3, r2
 8007d88:	d053      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d96:	d035      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007d98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d9c:	d82e      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007da2:	d031      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007da4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007da8:	d828      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dae:	d01a      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007db0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007db4:	d822      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dbe:	d007      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007dc0:	e01c      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc2:	4b32      	ldr	r3, [pc, #200]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	4a31      	ldr	r2, [pc, #196]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dce:	e01c      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f002 fa55 	bl	800a288 <RCCEx_PLL2_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007de4:	e011      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	3328      	adds	r3, #40	@ 0x28
 8007dec:	2100      	movs	r1, #0
 8007dee:	4618      	mov	r0, r3
 8007df0:	f002 fafc 	bl	800a3ec <RCCEx_PLL3_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dfa:	e006      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e02:	e002      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007e04:	bf00      	nop
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007e12:	4b1e      	ldr	r3, [pc, #120]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e16:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e22:	4a1a      	ldr	r2, [pc, #104]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e28:	e003      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007e3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e42:	2300      	movs	r3, #0
 8007e44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	d056      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e5e:	d038      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e64:	d831      	bhi.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e6a:	d034      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007e6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e70:	d82b      	bhi.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e76:	d01d      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e7c:	d825      	bhi.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d006      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e88:	e01f      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e8a:	bf00      	nop
 8007e8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e90:	4ba2      	ldr	r3, [pc, #648]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	4aa1      	ldr	r2, [pc, #644]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e9c:	e01c      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f002 f9ee 	bl	800a288 <RCCEx_PLL2_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007eb2:	e011      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	3328      	adds	r3, #40	@ 0x28
 8007eba:	2100      	movs	r1, #0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f002 fa95 	bl	800a3ec <RCCEx_PLL3_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ec8:	e006      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ef0:	4a8a      	ldr	r2, [pc, #552]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ef6:	e003      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	d03a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f26:	2b30      	cmp	r3, #48	@ 0x30
 8007f28:	d01f      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007f2a:	2b30      	cmp	r3, #48	@ 0x30
 8007f2c:	d819      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d00c      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d815      	bhi.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d019      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d111      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f3e:	4b77      	ldr	r3, [pc, #476]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	4a76      	ldr	r2, [pc, #472]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f4a:	e011      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f50:	3308      	adds	r3, #8
 8007f52:	2102      	movs	r1, #2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 f997 	bl	800a288 <RCCEx_PLL2_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f60:	e006      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f68:	e002      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f6a:	bf00      	nop
 8007f6c:	e000      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f78:	4b68      	ldr	r3, [pc, #416]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f86:	4a65      	ldr	r2, [pc, #404]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f8c:	e003      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	d051      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fc0:	d035      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fc6:	d82e      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fcc:	d031      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007fce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fd2:	d828      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd8:	d01a      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fde:	d822      	bhi.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe8:	d007      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007fea:	e01c      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fec:	4b4b      	ldr	r3, [pc, #300]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	4a4a      	ldr	r2, [pc, #296]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ff8:	e01c      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	3308      	adds	r3, #8
 8008000:	2100      	movs	r1, #0
 8008002:	4618      	mov	r0, r3
 8008004:	f002 f940 	bl	800a288 <RCCEx_PLL2_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800800e:	e011      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008014:	3328      	adds	r3, #40	@ 0x28
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f002 f9e7 	bl	800a3ec <RCCEx_PLL3_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008024:	e006      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800802c:	e002      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800803c:	4b37      	ldr	r3, [pc, #220]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800803e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008040:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800804a:	4a34      	ldr	r2, [pc, #208]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800804c:	430b      	orrs	r3, r1
 800804e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008050:	e003      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008066:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800806a:	2300      	movs	r3, #0
 800806c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008070:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008074:	460b      	mov	r3, r1
 8008076:	4313      	orrs	r3, r2
 8008078:	d056      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008084:	d033      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008086:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800808a:	d82c      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800808c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008090:	d02f      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008092:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008096:	d826      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800809c:	d02b      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800809e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080a2:	d820      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80080a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080a8:	d012      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80080aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ae:	d81a      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d022      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80080b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b8:	d115      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	3308      	adds	r3, #8
 80080c0:	2101      	movs	r1, #1
 80080c2:	4618      	mov	r0, r3
 80080c4:	f002 f8e0 	bl	800a288 <RCCEx_PLL2_Config>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080ce:	e015      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d4:	3328      	adds	r3, #40	@ 0x28
 80080d6:	2101      	movs	r1, #1
 80080d8:	4618      	mov	r0, r3
 80080da:	f002 f987 	bl	800a3ec <RCCEx_PLL3_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080e4:	e00a      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080ee:	bf00      	nop
 80080f0:	e004      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008104:	4b05      	ldr	r3, [pc, #20]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008108:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008112:	4a02      	ldr	r2, [pc, #8]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008114:	430b      	orrs	r3, r1
 8008116:	6513      	str	r3, [r2, #80]	@ 0x50
 8008118:	e006      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800811a:	bf00      	nop
 800811c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008138:	2300      	movs	r3, #0
 800813a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800813e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008142:	460b      	mov	r3, r1
 8008144:	4313      	orrs	r3, r2
 8008146:	d055      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008154:	d033      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800815a:	d82c      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800815c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008160:	d02f      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008166:	d826      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800816c:	d02b      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800816e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008172:	d820      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008178:	d012      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800817a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800817e:	d81a      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d022      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008188:	d115      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	3308      	adds	r3, #8
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f002 f878 	bl	800a288 <RCCEx_PLL2_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800819e:	e015      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a4:	3328      	adds	r3, #40	@ 0x28
 80081a6:	2101      	movs	r1, #1
 80081a8:	4618      	mov	r0, r3
 80081aa:	f002 f91f 	bl	800a3ec <RCCEx_PLL3_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80081b4:	e00a      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081bc:	e006      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081be:	bf00      	nop
 80081c0:	e004      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081c2:	bf00      	nop
 80081c4:	e002      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081c6:	bf00      	nop
 80081c8:	e000      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10b      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081d4:	4ba3      	ldr	r3, [pc, #652]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081e4:	4a9f      	ldr	r2, [pc, #636]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e6:	430b      	orrs	r3, r1
 80081e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800820a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800820e:	460b      	mov	r3, r1
 8008210:	4313      	orrs	r3, r2
 8008212:	d037      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800821e:	d00e      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008224:	d816      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800822a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800822e:	d111      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008230:	4b8c      	ldr	r3, [pc, #560]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	4a8b      	ldr	r2, [pc, #556]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800823a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800823c:	e00f      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	3308      	adds	r3, #8
 8008244:	2101      	movs	r1, #1
 8008246:	4618      	mov	r0, r3
 8008248:	f002 f81e 	bl	800a288 <RCCEx_PLL2_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008252:	e004      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800825a:	e000      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800825c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800825e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008266:	4b7f      	ldr	r3, [pc, #508]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800826e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008274:	4a7b      	ldr	r2, [pc, #492]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008276:	430b      	orrs	r3, r1
 8008278:	6513      	str	r3, [r2, #80]	@ 0x50
 800827a:	e003      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008294:	2300      	movs	r3, #0
 8008296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800829a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800829e:	460b      	mov	r3, r1
 80082a0:	4313      	orrs	r3, r2
 80082a2:	d039      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d81c      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082f1 	.word	0x080082f1
 80082b8:	080082c5 	.word	0x080082c5
 80082bc:	080082d3 	.word	0x080082d3
 80082c0:	080082f1 	.word	0x080082f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082c4:	4b67      	ldr	r3, [pc, #412]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	4a66      	ldr	r2, [pc, #408]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082d0:	e00f      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	3308      	adds	r3, #8
 80082d8:	2102      	movs	r1, #2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 ffd4 	bl	800a288 <RCCEx_PLL2_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082e6:	e004      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ee:	e000      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80082f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082fa:	4b5a      	ldr	r3, [pc, #360]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082fe:	f023 0103 	bic.w	r1, r3, #3
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008308:	4a56      	ldr	r2, [pc, #344]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800830a:	430b      	orrs	r3, r1
 800830c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800830e:	e003      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008324:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008328:	2300      	movs	r3, #0
 800832a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800832e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008332:	460b      	mov	r3, r1
 8008334:	4313      	orrs	r3, r2
 8008336:	f000 809f 	beq.w	8008478 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800833a:	4b4b      	ldr	r3, [pc, #300]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a4a      	ldr	r2, [pc, #296]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008346:	f7f9 fa7d 	bl	8001844 <HAL_GetTick>
 800834a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800834e:	e00b      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008350:	f7f9 fa78 	bl	8001844 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b64      	cmp	r3, #100	@ 0x64
 800835e:	d903      	bls.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008366:	e005      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008368:	4b3f      	ldr	r3, [pc, #252]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0ed      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008378:	2b00      	cmp	r3, #0
 800837a:	d179      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800837c:	4b39      	ldr	r3, [pc, #228]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008388:	4053      	eors	r3, r2
 800838a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800838e:	2b00      	cmp	r3, #0
 8008390:	d015      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008392:	4b34      	ldr	r3, [pc, #208]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800839a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800839e:	4b31      	ldr	r3, [pc, #196]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a2:	4a30      	ldr	r2, [pc, #192]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ae:	4a2d      	ldr	r2, [pc, #180]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80083bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ca:	d118      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083cc:	f7f9 fa3a 	bl	8001844 <HAL_GetTick>
 80083d0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083d4:	e00d      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083d6:	f7f9 fa35 	bl	8001844 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80083e0:	1ad2      	subs	r2, r2, r3
 80083e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d903      	bls.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80083f0:	e005      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0eb      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80083fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008402:	2b00      	cmp	r3, #0
 8008404:	d129      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800840e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008416:	d10e      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008418:	4b12      	ldr	r3, [pc, #72]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008424:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008428:	091a      	lsrs	r2, r3, #4
 800842a:	4b10      	ldr	r3, [pc, #64]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800842c:	4013      	ands	r3, r2
 800842e:	4a0d      	ldr	r2, [pc, #52]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008430:	430b      	orrs	r3, r1
 8008432:	6113      	str	r3, [r2, #16]
 8008434:	e005      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008436:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	4a0a      	ldr	r2, [pc, #40]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800843c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008440:	6113      	str	r3, [r2, #16]
 8008442:	4b08      	ldr	r3, [pc, #32]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008444:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800844e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008452:	4a04      	ldr	r2, [pc, #16]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008454:	430b      	orrs	r3, r1
 8008456:	6713      	str	r3, [r2, #112]	@ 0x70
 8008458:	e00e      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800845a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008462:	e009      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008464:	58024400 	.word	0x58024400
 8008468:	58024800 	.word	0x58024800
 800846c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f002 0301 	and.w	r3, r2, #1
 8008484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008488:	2300      	movs	r3, #0
 800848a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800848e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008492:	460b      	mov	r3, r1
 8008494:	4313      	orrs	r3, r2
 8008496:	f000 8089 	beq.w	80085ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084a0:	2b28      	cmp	r3, #40	@ 0x28
 80084a2:	d86b      	bhi.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80084a4:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	08008585 	.word	0x08008585
 80084b0:	0800857d 	.word	0x0800857d
 80084b4:	0800857d 	.word	0x0800857d
 80084b8:	0800857d 	.word	0x0800857d
 80084bc:	0800857d 	.word	0x0800857d
 80084c0:	0800857d 	.word	0x0800857d
 80084c4:	0800857d 	.word	0x0800857d
 80084c8:	0800857d 	.word	0x0800857d
 80084cc:	08008551 	.word	0x08008551
 80084d0:	0800857d 	.word	0x0800857d
 80084d4:	0800857d 	.word	0x0800857d
 80084d8:	0800857d 	.word	0x0800857d
 80084dc:	0800857d 	.word	0x0800857d
 80084e0:	0800857d 	.word	0x0800857d
 80084e4:	0800857d 	.word	0x0800857d
 80084e8:	0800857d 	.word	0x0800857d
 80084ec:	08008567 	.word	0x08008567
 80084f0:	0800857d 	.word	0x0800857d
 80084f4:	0800857d 	.word	0x0800857d
 80084f8:	0800857d 	.word	0x0800857d
 80084fc:	0800857d 	.word	0x0800857d
 8008500:	0800857d 	.word	0x0800857d
 8008504:	0800857d 	.word	0x0800857d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	08008585 	.word	0x08008585
 8008510:	0800857d 	.word	0x0800857d
 8008514:	0800857d 	.word	0x0800857d
 8008518:	0800857d 	.word	0x0800857d
 800851c:	0800857d 	.word	0x0800857d
 8008520:	0800857d 	.word	0x0800857d
 8008524:	0800857d 	.word	0x0800857d
 8008528:	0800857d 	.word	0x0800857d
 800852c:	08008585 	.word	0x08008585
 8008530:	0800857d 	.word	0x0800857d
 8008534:	0800857d 	.word	0x0800857d
 8008538:	0800857d 	.word	0x0800857d
 800853c:	0800857d 	.word	0x0800857d
 8008540:	0800857d 	.word	0x0800857d
 8008544:	0800857d 	.word	0x0800857d
 8008548:	0800857d 	.word	0x0800857d
 800854c:	08008585 	.word	0x08008585
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008554:	3308      	adds	r3, #8
 8008556:	2101      	movs	r1, #1
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fe95 	bl	800a288 <RCCEx_PLL2_Config>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008564:	e00f      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856a:	3328      	adds	r3, #40	@ 0x28
 800856c:	2101      	movs	r1, #1
 800856e:	4618      	mov	r0, r3
 8008570:	f001 ff3c 	bl	800a3ec <RCCEx_PLL3_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800857a:	e004      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008582:	e000      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800858e:	4bbf      	ldr	r3, [pc, #764]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008592:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800859c:	4abb      	ldr	r2, [pc, #748]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800859e:	430b      	orrs	r3, r1
 80085a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80085a2:	e003      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f002 0302 	and.w	r3, r2, #2
 80085b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085bc:	2300      	movs	r3, #0
 80085be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80085c6:	460b      	mov	r3, r1
 80085c8:	4313      	orrs	r3, r2
 80085ca:	d041      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d824      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	08008629 	.word	0x08008629
 80085e0:	080085f5 	.word	0x080085f5
 80085e4:	0800860b 	.word	0x0800860b
 80085e8:	08008629 	.word	0x08008629
 80085ec:	08008629 	.word	0x08008629
 80085f0:	08008629 	.word	0x08008629
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f8:	3308      	adds	r3, #8
 80085fa:	2101      	movs	r1, #1
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fe43 	bl	800a288 <RCCEx_PLL2_Config>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008608:	e00f      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860e:	3328      	adds	r3, #40	@ 0x28
 8008610:	2101      	movs	r1, #1
 8008612:	4618      	mov	r0, r3
 8008614:	f001 feea 	bl	800a3ec <RCCEx_PLL3_Config>
 8008618:	4603      	mov	r3, r0
 800861a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800861e:	e004      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008626:	e000      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10a      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008632:	4b96      	ldr	r3, [pc, #600]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008636:	f023 0107 	bic.w	r1, r3, #7
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008640:	4a92      	ldr	r2, [pc, #584]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008642:	430b      	orrs	r3, r1
 8008644:	6553      	str	r3, [r2, #84]	@ 0x54
 8008646:	e003      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800864c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f002 0304 	and.w	r3, r2, #4
 800865c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008660:	2300      	movs	r3, #0
 8008662:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008666:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800866a:	460b      	mov	r3, r1
 800866c:	4313      	orrs	r3, r2
 800866e:	d044      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008678:	2b05      	cmp	r3, #5
 800867a:	d825      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800867c:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	080086d1 	.word	0x080086d1
 8008688:	0800869d 	.word	0x0800869d
 800868c:	080086b3 	.word	0x080086b3
 8008690:	080086d1 	.word	0x080086d1
 8008694:	080086d1 	.word	0x080086d1
 8008698:	080086d1 	.word	0x080086d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800869c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a0:	3308      	adds	r3, #8
 80086a2:	2101      	movs	r1, #1
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fdef 	bl	800a288 <RCCEx_PLL2_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80086b0:	e00f      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b6:	3328      	adds	r3, #40	@ 0x28
 80086b8:	2101      	movs	r1, #1
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fe96 	bl	800a3ec <RCCEx_PLL3_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80086c6:	e004      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086ce:	e000      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80086d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086da:	4b6c      	ldr	r3, [pc, #432]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086de:	f023 0107 	bic.w	r1, r3, #7
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ea:	4a68      	ldr	r2, [pc, #416]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086ec:	430b      	orrs	r3, r1
 80086ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80086f0:	e003      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	f002 0320 	and.w	r3, r2, #32
 8008706:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800870a:	2300      	movs	r3, #0
 800870c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008714:	460b      	mov	r3, r1
 8008716:	4313      	orrs	r3, r2
 8008718:	d055      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008726:	d033      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008728:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800872c:	d82c      	bhi.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800872e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008732:	d02f      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008738:	d826      	bhi.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800873a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800873e:	d02b      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008740:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008744:	d820      	bhi.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874a:	d012      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800874c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008750:	d81a      	bhi.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d022      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800875a:	d115      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008760:	3308      	adds	r3, #8
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fd8f 	bl	800a288 <RCCEx_PLL2_Config>
 800876a:	4603      	mov	r3, r0
 800876c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008770:	e015      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008776:	3328      	adds	r3, #40	@ 0x28
 8008778:	2102      	movs	r1, #2
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fe36 	bl	800a3ec <RCCEx_PLL3_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008786:	e00a      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800878e:	e006      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008790:	bf00      	nop
 8008792:	e004      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008794:	bf00      	nop
 8008796:	e002      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008798:	bf00      	nop
 800879a:	e000      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800879c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800879e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10b      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087a6:	4b39      	ldr	r3, [pc, #228]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b6:	4a35      	ldr	r2, [pc, #212]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087b8:	430b      	orrs	r3, r1
 80087ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80087bc:	e003      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80087d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d058      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087f2:	d033      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80087f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087f8:	d82c      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087fe:	d02f      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008804:	d826      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800880a:	d02b      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800880c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008810:	d820      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008816:	d012      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800881c:	d81a      	bhi.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d022      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008826:	d115      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882c:	3308      	adds	r3, #8
 800882e:	2100      	movs	r1, #0
 8008830:	4618      	mov	r0, r3
 8008832:	f001 fd29 	bl	800a288 <RCCEx_PLL2_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800883c:	e015      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008842:	3328      	adds	r3, #40	@ 0x28
 8008844:	2102      	movs	r1, #2
 8008846:	4618      	mov	r0, r3
 8008848:	f001 fdd0 	bl	800a3ec <RCCEx_PLL3_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008852:	e00a      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800885a:	e006      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800885c:	bf00      	nop
 800885e:	e004      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008860:	bf00      	nop
 8008862:	e002      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008864:	bf00      	nop
 8008866:	e000      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800886a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10e      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008872:	4b06      	ldr	r3, [pc, #24]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008876:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008882:	4a02      	ldr	r2, [pc, #8]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008884:	430b      	orrs	r3, r1
 8008886:	6593      	str	r3, [r2, #88]	@ 0x58
 8008888:	e006      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800888a:	bf00      	nop
 800888c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80088a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088a8:	2300      	movs	r3, #0
 80088aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80088b2:	460b      	mov	r3, r1
 80088b4:	4313      	orrs	r3, r2
 80088b6:	d055      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80088c4:	d033      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80088c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80088ca:	d82c      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088d0:	d02f      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80088d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088d6:	d826      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088dc:	d02b      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80088de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088e2:	d820      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088e8:	d012      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80088ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088ee:	d81a      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d022      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80088f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f8:	d115      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fe:	3308      	adds	r3, #8
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f001 fcc0 	bl	800a288 <RCCEx_PLL2_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800890e:	e015      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008914:	3328      	adds	r3, #40	@ 0x28
 8008916:	2102      	movs	r1, #2
 8008918:	4618      	mov	r0, r3
 800891a:	f001 fd67 	bl	800a3ec <RCCEx_PLL3_Config>
 800891e:	4603      	mov	r3, r0
 8008920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008924:	e00a      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800892c:	e006      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800892e:	bf00      	nop
 8008930:	e004      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008932:	bf00      	nop
 8008934:	e002      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008936:	bf00      	nop
 8008938:	e000      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800893a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800893c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10b      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008944:	4ba1      	ldr	r3, [pc, #644]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008948:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800894c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008950:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008954:	4a9d      	ldr	r2, [pc, #628]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008956:	430b      	orrs	r3, r1
 8008958:	6593      	str	r3, [r2, #88]	@ 0x58
 800895a:	e003      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f002 0308 	and.w	r3, r2, #8
 8008970:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008974:	2300      	movs	r3, #0
 8008976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800897a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800897e:	460b      	mov	r3, r1
 8008980:	4313      	orrs	r3, r2
 8008982:	d01e      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800898c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008990:	d10c      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008996:	3328      	adds	r3, #40	@ 0x28
 8008998:	2102      	movs	r1, #2
 800899a:	4618      	mov	r0, r3
 800899c:	f001 fd26 	bl	800a3ec <RCCEx_PLL3_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80089ac:	4b87      	ldr	r3, [pc, #540]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089bc:	4a83      	ldr	r2, [pc, #524]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089be:	430b      	orrs	r3, r1
 80089c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	f002 0310 	and.w	r3, r2, #16
 80089ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089d2:	2300      	movs	r3, #0
 80089d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80089dc:	460b      	mov	r3, r1
 80089de:	4313      	orrs	r3, r2
 80089e0:	d01e      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ee:	d10c      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f4:	3328      	adds	r3, #40	@ 0x28
 80089f6:	2102      	movs	r1, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 fcf7 	bl	800a3ec <RCCEx_PLL3_Config>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a0a:	4b70      	ldr	r3, [pc, #448]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a1a:	4a6c      	ldr	r2, [pc, #432]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a30:	2300      	movs	r3, #0
 8008a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a36:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	d03e      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a4c:	d022      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a52:	d81b      	bhi.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a5c:	d00b      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008a5e:	e015      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a64:	3308      	adds	r3, #8
 8008a66:	2100      	movs	r1, #0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 fc0d 	bl	800a288 <RCCEx_PLL2_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a74:	e00f      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7a:	3328      	adds	r3, #40	@ 0x28
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 fcb4 	bl	800a3ec <RCCEx_PLL3_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a8a:	e004      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008aae:	4a47      	ldr	r2, [pc, #284]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ab4:	e003      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008aca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008acc:	2300      	movs	r3, #0
 8008ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ad0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	d03b      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae6:	d01f      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ae8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008aec:	d818      	bhi.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008af2:	d003      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008af4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008af8:	d007      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008afa:	e011      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008afc:	4b33      	ldr	r3, [pc, #204]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b00:	4a32      	ldr	r2, [pc, #200]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b08:	e00f      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0e:	3328      	adds	r3, #40	@ 0x28
 8008b10:	2101      	movs	r1, #1
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 fc6a 	bl	800a3ec <RCCEx_PLL3_Config>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008b1e:	e004      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b26:	e000      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b32:	4b26      	ldr	r3, [pc, #152]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b42:	4a22      	ldr	r2, [pc, #136]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b44:	430b      	orrs	r3, r1
 8008b46:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b48:	e003      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b60:	2300      	movs	r3, #0
 8008b62:	677b      	str	r3, [r7, #116]	@ 0x74
 8008b64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	d034      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b7c:	d007      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008b7e:	e011      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b80:	4b12      	ldr	r3, [pc, #72]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	4a11      	ldr	r2, [pc, #68]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b8c:	e00e      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b92:	3308      	adds	r3, #8
 8008b94:	2102      	movs	r1, #2
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 fb76 	bl	800a288 <RCCEx_PLL2_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ba2:	e003      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10d      	bne.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc2:	4a02      	ldr	r2, [pc, #8]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008bc8:	e006      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008bca:	bf00      	nop
 8008bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008be6:	2300      	movs	r3, #0
 8008be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	d00c      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf8:	3328      	adds	r3, #40	@ 0x28
 8008bfa:	2102      	movs	r1, #2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 fbf5 	bl	800a3ec <RCCEx_PLL3_Config>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008c1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008c24:	460b      	mov	r3, r1
 8008c26:	4313      	orrs	r3, r2
 8008c28:	d038      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c36:	d018      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008c38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c3c:	d811      	bhi.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c42:	d014      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c48:	d80b      	bhi.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d011      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c52:	d106      	bne.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c54:	4bc3      	ldr	r3, [pc, #780]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c58:	4ac2      	ldr	r2, [pc, #776]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c60:	e008      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c68:	e004      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c6a:	bf00      	nop
 8008c6c:	e002      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c6e:	bf00      	nop
 8008c70:	e000      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10b      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c7c:	4bb9      	ldr	r3, [pc, #740]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c8c:	4ab5      	ldr	r2, [pc, #724]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c92:	e003      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008caa:	2300      	movs	r3, #0
 8008cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d009      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008cb8:	4baa      	ldr	r3, [pc, #680]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc6:	4aa7      	ldr	r2, [pc, #668]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008cd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cda:	2300      	movs	r3, #0
 8008cdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cde:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	d00a      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ce8:	4b9e      	ldr	r3, [pc, #632]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008cf8:	4a9a      	ldr	r2, [pc, #616]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008d14:	460b      	mov	r3, r1
 8008d16:	4313      	orrs	r3, r2
 8008d18:	d009      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d1a:	4b92      	ldr	r3, [pc, #584]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d28:	4a8e      	ldr	r2, [pc, #568]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d44:	460b      	mov	r3, r1
 8008d46:	4313      	orrs	r3, r2
 8008d48:	d00e      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d4a:	4b86      	ldr	r3, [pc, #536]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	4a85      	ldr	r2, [pc, #532]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d54:	6113      	str	r3, [r2, #16]
 8008d56:	4b83      	ldr	r3, [pc, #524]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d58:	6919      	ldr	r1, [r3, #16]
 8008d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d62:	4a80      	ldr	r2, [pc, #512]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d76:	2300      	movs	r3, #0
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d009      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d84:	4b77      	ldr	r3, [pc, #476]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d92:	4a74      	ldr	r2, [pc, #464]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d94:	430b      	orrs	r3, r1
 8008d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008da6:	2300      	movs	r3, #0
 8008da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008daa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008dae:	460b      	mov	r3, r1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	d00a      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008db4:	4b6b      	ldr	r3, [pc, #428]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dc4:	4a67      	ldr	r2, [pc, #412]	@ (8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ddc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008de0:	460b      	mov	r3, r1
 8008de2:	4313      	orrs	r3, r2
 8008de4:	d011      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dea:	3308      	adds	r3, #8
 8008dec:	2100      	movs	r1, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 fa4a 	bl	800a288 <RCCEx_PLL2_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	2100      	movs	r1, #0
 8008e14:	6239      	str	r1, [r7, #32]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008e20:	460b      	mov	r3, r1
 8008e22:	4313      	orrs	r3, r2
 8008e24:	d011      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 fa2a 	bl	800a288 <RCCEx_PLL2_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	2100      	movs	r1, #0
 8008e54:	61b9      	str	r1, [r7, #24]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008e60:	460b      	mov	r3, r1
 8008e62:	4313      	orrs	r3, r2
 8008e64:	d011      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fa0a 	bl	800a288 <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	2100      	movs	r1, #0
 8008e94:	6139      	str	r1, [r7, #16]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	617b      	str	r3, [r7, #20]
 8008e9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	d011      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eaa:	3328      	adds	r3, #40	@ 0x28
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 fa9c 	bl	800a3ec <RCCEx_PLL3_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	f003 0310 	and.w	r3, r3, #16
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	d011      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eea:	3328      	adds	r3, #40	@ 0x28
 8008eec:	2101      	movs	r1, #1
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 fa7c 	bl	800a3ec <RCCEx_PLL3_Config>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	2100      	movs	r1, #0
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	607b      	str	r3, [r7, #4]
 8008f1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d011      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2a:	3328      	adds	r3, #40	@ 0x28
 8008f2c:	2102      	movs	r1, #2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 fa5c 	bl	800a3ec <RCCEx_PLL3_Config>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008f4a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e000      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f64:	58024400 	.word	0x58024400

08008f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b090      	sub	sp, #64	@ 0x40
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f76:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008f7a:	430b      	orrs	r3, r1
 8008f7c:	f040 8094 	bne.w	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008f80:	4b9e      	ldr	r3, [pc, #632]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	f200 8087 	bhi.w	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008f92:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fad 	.word	0x08008fad
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008ffd 	.word	0x08008ffd
 8008fa4:	08009099 	.word	0x08009099
 8008fa8:	08009025 	.word	0x08009025
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fac:	4b93      	ldr	r3, [pc, #588]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fb8:	d108      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f001 f810 	bl	8009fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc8:	f000 bd45 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd0:	f000 bd41 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fd4:	4b89      	ldr	r3, [pc, #548]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fe0:	d108      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe2:	f107 0318 	add.w	r3, r7, #24
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fd54 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff0:	f000 bd31 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff8:	f000 bd2d 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ffc:	4b7f      	ldr	r3, [pc, #508]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009008:	d108      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800900a:	f107 030c 	add.w	r3, r7, #12
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fe94 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009018:	f000 bd1d 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009020:	f000 bd19 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009024:	4b75      	ldr	r3, [pc, #468]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009028:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800902e:	4b73      	ldr	r3, [pc, #460]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	2b04      	cmp	r3, #4
 8009038:	d10c      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800903a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903c:	2b00      	cmp	r3, #0
 800903e:	d109      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009040:	4b6e      	ldr	r3, [pc, #440]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	08db      	lsrs	r3, r3, #3
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	4a6d      	ldr	r2, [pc, #436]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800904c:	fa22 f303 	lsr.w	r3, r2, r3
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009052:	e01f      	b.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009054:	4b69      	ldr	r3, [pc, #420]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800905c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009060:	d106      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009068:	d102      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800906a:	4b66      	ldr	r3, [pc, #408]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800906c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800906e:	e011      	b.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009070:	4b62      	ldr	r3, [pc, #392]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800907c:	d106      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800907e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009084:	d102      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009086:	4b60      	ldr	r3, [pc, #384]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800908a:	e003      	b.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009090:	f000 bce1 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009094:	f000 bcdf 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009098:	4b5c      	ldr	r3, [pc, #368]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909c:	f000 bcdb 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a4:	f000 bcd7 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80090a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80090b0:	430b      	orrs	r3, r1
 80090b2:	f040 80ad 	bne.w	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80090b6:	4b51      	ldr	r3, [pc, #324]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80090be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80090c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090c6:	d056      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ce:	f200 8090 	bhi.w	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80090d6:	f000 8088 	beq.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80090de:	f200 8088 	bhi.w	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	2b80      	cmp	r3, #128	@ 0x80
 80090e6:	d032      	beq.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	2b80      	cmp	r3, #128	@ 0x80
 80090ec:	f200 8081 	bhi.w	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80090f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f8:	2b40      	cmp	r3, #64	@ 0x40
 80090fa:	d014      	beq.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80090fc:	e079      	b.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090fe:	4b3f      	ldr	r3, [pc, #252]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800910a:	d108      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800910c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009110:	4618      	mov	r0, r3
 8009112:	f000 ff67 	bl	8009fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800911a:	f000 bc9c 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009122:	f000 bc98 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009126:	4b35      	ldr	r3, [pc, #212]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800912e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009132:	d108      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009134:	f107 0318 	add.w	r3, r7, #24
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fcab 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009142:	f000 bc88 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800914a:	f000 bc84 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800914e:	4b2b      	ldr	r3, [pc, #172]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800915a:	d108      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800915c:	f107 030c 	add.w	r3, r7, #12
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fdeb 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800916a:	f000 bc74 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009172:	f000 bc70 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009176:	4b21      	ldr	r3, [pc, #132]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800917a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800917e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009180:	4b1e      	ldr	r3, [pc, #120]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b04      	cmp	r3, #4
 800918a:	d10c      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800918c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009192:	4b1a      	ldr	r3, [pc, #104]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	08db      	lsrs	r3, r3, #3
 8009198:	f003 0303 	and.w	r3, r3, #3
 800919c:	4a18      	ldr	r2, [pc, #96]	@ (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800919e:	fa22 f303 	lsr.w	r3, r2, r3
 80091a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091a4:	e01f      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091a6:	4b15      	ldr	r3, [pc, #84]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091b2:	d106      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80091b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ba:	d102      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091bc:	4b11      	ldr	r3, [pc, #68]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80091be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091c0:	e011      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091c2:	4b0e      	ldr	r3, [pc, #56]	@ (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ce:	d106      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80091d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091d6:	d102      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091dc:	e003      	b.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091e2:	f000 bc38 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091e6:	f000 bc36 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091ea:	4b08      	ldr	r3, [pc, #32]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ee:	f000 bc32 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f6:	f000 bc2e 	b.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091fa:	bf00      	nop
 80091fc:	58024400 	.word	0x58024400
 8009200:	03d09000 	.word	0x03d09000
 8009204:	003d0900 	.word	0x003d0900
 8009208:	007a1200 	.word	0x007a1200
 800920c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009214:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009218:	430b      	orrs	r3, r1
 800921a:	f040 809c 	bne.w	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800921e:	4b9e      	ldr	r3, [pc, #632]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009222:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009226:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800922e:	d054      	beq.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009236:	f200 808b 	bhi.w	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009240:	f000 8083 	beq.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800924a:	f200 8081 	bhi.w	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009254:	d02f      	beq.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800925c:	d878      	bhi.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800926a:	d012      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800926c:	e070      	b.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800926e:	4b8a      	ldr	r3, [pc, #552]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009276:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800927a:	d107      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800927c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009280:	4618      	mov	r0, r3
 8009282:	f000 feaf 	bl	8009fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800928a:	e3e4      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009290:	e3e1      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009292:	4b81      	ldr	r3, [pc, #516]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800929a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800929e:	d107      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a0:	f107 0318 	add.w	r3, r7, #24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fbf5 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092ae:	e3d2      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b4:	e3cf      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092b6:	4b78      	ldr	r3, [pc, #480]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092c2:	d107      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c4:	f107 030c 	add.w	r3, r7, #12
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fd37 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d2:	e3c0      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d8:	e3bd      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092da:	4b6f      	ldr	r3, [pc, #444]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092e4:	4b6c      	ldr	r3, [pc, #432]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d10c      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80092f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092f6:	4b68      	ldr	r3, [pc, #416]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	08db      	lsrs	r3, r3, #3
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	4a66      	ldr	r2, [pc, #408]	@ (800949c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009302:	fa22 f303 	lsr.w	r3, r2, r3
 8009306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009308:	e01e      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800930a:	4b63      	ldr	r3, [pc, #396]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009316:	d106      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800931e:	d102      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009320:	4b5f      	ldr	r3, [pc, #380]	@ (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009324:	e010      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009326:	4b5c      	ldr	r3, [pc, #368]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800932e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009332:	d106      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800933a:	d102      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800933c:	4b59      	ldr	r3, [pc, #356]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800933e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009340:	e002      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009346:	e386      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009348:	e385      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800934a:	4b57      	ldr	r3, [pc, #348]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800934c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800934e:	e382      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009354:	e37f      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800935e:	430b      	orrs	r3, r1
 8009360:	f040 80a7 	bne.w	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009364:	4b4c      	ldr	r3, [pc, #304]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009368:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800936c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009374:	d055      	beq.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800937c:	f200 8096 	bhi.w	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009386:	f000 8084 	beq.w	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009390:	f200 808c 	bhi.w	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800939a:	d030      	beq.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093a2:	f200 8083 	bhi.w	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093b2:	d012      	beq.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80093b4:	e07a      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093b6:	4b38      	ldr	r3, [pc, #224]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093c2:	d107      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fe0b 	bl	8009fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d2:	e340      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d8:	e33d      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093da:	4b2f      	ldr	r3, [pc, #188]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093e6:	d107      	bne.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e8:	f107 0318 	add.w	r3, r7, #24
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fb51 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f6:	e32e      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fc:	e32b      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093fe:	4b26      	ldr	r3, [pc, #152]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800940a:	d107      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800940c:	f107 030c 	add.w	r3, r7, #12
 8009410:	4618      	mov	r0, r3
 8009412:	f000 fc93 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941a:	e31c      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e319      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009422:	4b1d      	ldr	r3, [pc, #116]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009426:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800942a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800942c:	4b1a      	ldr	r3, [pc, #104]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b04      	cmp	r3, #4
 8009436:	d10c      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800943e:	4b16      	ldr	r3, [pc, #88]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	08db      	lsrs	r3, r3, #3
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	4a14      	ldr	r2, [pc, #80]	@ (800949c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800944a:	fa22 f303 	lsr.w	r3, r2, r3
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009450:	e01e      	b.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009452:	4b11      	ldr	r3, [pc, #68]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800945a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800945e:	d106      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009466:	d102      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009468:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800946a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800946c:	e010      	b.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800946e:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800947a:	d106      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800947c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009482:	d102      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009484:	4b07      	ldr	r3, [pc, #28]	@ (80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009488:	e002      	b.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800948e:	e2e2      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009490:	e2e1      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009492:	4b05      	ldr	r3, [pc, #20]	@ (80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009496:	e2de      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009498:	58024400 	.word	0x58024400
 800949c:	03d09000 	.word	0x03d09000
 80094a0:	003d0900 	.word	0x003d0900
 80094a4:	007a1200 	.word	0x007a1200
 80094a8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b0:	e2d1      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80094b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80094ba:	430b      	orrs	r3, r1
 80094bc:	f040 809c 	bne.w	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80094c0:	4b93      	ldr	r3, [pc, #588]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094d0:	d054      	beq.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80094d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094d8:	f200 808b 	bhi.w	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094e2:	f000 8083 	beq.w	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094ec:	f200 8081 	bhi.w	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094f6:	d02f      	beq.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80094f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094fe:	d878      	bhi.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800950c:	d012      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800950e:	e070      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009510:	4b7f      	ldr	r3, [pc, #508]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800951c:	d107      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800951e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fd5e 	bl	8009fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800952c:	e293      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009532:	e290      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009534:	4b76      	ldr	r3, [pc, #472]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800953c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009540:	d107      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009542:	f107 0318 	add.w	r3, r7, #24
 8009546:	4618      	mov	r0, r3
 8009548:	f000 faa4 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009550:	e281      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009556:	e27e      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009558:	4b6d      	ldr	r3, [pc, #436]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009564:	d107      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009566:	f107 030c 	add.w	r3, r7, #12
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fbe6 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009574:	e26f      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957a:	e26c      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800957c:	4b64      	ldr	r3, [pc, #400]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800957e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009580:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009586:	4b62      	ldr	r3, [pc, #392]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b04      	cmp	r3, #4
 8009590:	d10c      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009594:	2b00      	cmp	r3, #0
 8009596:	d109      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009598:	4b5d      	ldr	r3, [pc, #372]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	08db      	lsrs	r3, r3, #3
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	4a5c      	ldr	r2, [pc, #368]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
 80095a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095aa:	e01e      	b.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095ac:	4b58      	ldr	r3, [pc, #352]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095b8:	d106      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80095ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095c0:	d102      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095c2:	4b55      	ldr	r3, [pc, #340]	@ (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80095c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095c6:	e010      	b.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095c8:	4b51      	ldr	r3, [pc, #324]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095d4:	d106      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80095d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095dc:	d102      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095de:	4b4f      	ldr	r3, [pc, #316]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095e2:	e002      	b.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095e8:	e235      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095ea:	e234      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095ec:	4b4c      	ldr	r3, [pc, #304]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f0:	e231      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f6:	e22e      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80095f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095fc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009600:	430b      	orrs	r3, r1
 8009602:	f040 808f 	bne.w	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009606:	4b42      	ldr	r3, [pc, #264]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800960a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800960e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009612:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009616:	d06b      	beq.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800961e:	d874      	bhi.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009626:	d056      	beq.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800962e:	d86c      	bhi.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009636:	d03b      	beq.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800963e:	d864      	bhi.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009646:	d021      	beq.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800964e:	d85c      	bhi.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800965c:	d004      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800965e:	e054      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009660:	f7fe fa0a 	bl	8007a78 <HAL_RCC_GetPCLK1Freq>
 8009664:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009666:	e1f6      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009668:	4b29      	ldr	r3, [pc, #164]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009674:	d107      	bne.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009676:	f107 0318 	add.w	r3, r7, #24
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fa0a 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009684:	e1e7      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800968a:	e1e4      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800968c:	4b20      	ldr	r3, [pc, #128]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009698:	d107      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800969a:	f107 030c 	add.w	r3, r7, #12
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fb4c 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a8:	e1d5      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ae:	e1d2      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096b0:	4b17      	ldr	r3, [pc, #92]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d109      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096bc:	4b14      	ldr	r3, [pc, #80]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	08db      	lsrs	r3, r3, #3
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	4a13      	ldr	r2, [pc, #76]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80096c8:	fa22 f303 	lsr.w	r3, r2, r3
 80096cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ce:	e1c2      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d4:	e1bf      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096e2:	d102      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80096e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e8:	e1b5      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ee:	e1b2      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096f0:	4b07      	ldr	r3, [pc, #28]	@ (8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096fc:	d102      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80096fe:	4b07      	ldr	r3, [pc, #28]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009702:	e1a8      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e1a5      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970e:	e1a2      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009710:	58024400 	.word	0x58024400
 8009714:	03d09000 	.word	0x03d09000
 8009718:	003d0900 	.word	0x003d0900
 800971c:	007a1200 	.word	0x007a1200
 8009720:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009728:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800972c:	430b      	orrs	r3, r1
 800972e:	d173      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009730:	4b9c      	ldr	r3, [pc, #624]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009734:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009738:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009740:	d02f      	beq.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009748:	d863      	bhi.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009756:	d012      	beq.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009758:	e05b      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800975a:	4b92      	ldr	r3, [pc, #584]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009766:	d107      	bne.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009768:	f107 0318 	add.w	r3, r7, #24
 800976c:	4618      	mov	r0, r3
 800976e:	f000 f991 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009776:	e16e      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977c:	e16b      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800977e:	4b89      	ldr	r3, [pc, #548]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800978a:	d107      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800978c:	f107 030c 	add.w	r3, r7, #12
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fad3 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800979a:	e15c      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a0:	e159      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097a2:	4b80      	ldr	r3, [pc, #512]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097ac:	4b7d      	ldr	r3, [pc, #500]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0304 	and.w	r3, r3, #4
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d10c      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80097b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097be:	4b79      	ldr	r3, [pc, #484]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	08db      	lsrs	r3, r3, #3
 80097c4:	f003 0303 	and.w	r3, r3, #3
 80097c8:	4a77      	ldr	r2, [pc, #476]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80097ca:	fa22 f303 	lsr.w	r3, r2, r3
 80097ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d0:	e01e      	b.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097d2:	4b74      	ldr	r3, [pc, #464]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097de:	d106      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80097e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e6:	d102      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097e8:	4b70      	ldr	r3, [pc, #448]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80097ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097ec:	e010      	b.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097ee:	4b6d      	ldr	r3, [pc, #436]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097fa:	d106      	bne.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80097fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009802:	d102      	bne.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009804:	4b6a      	ldr	r3, [pc, #424]	@ (80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009808:	e002      	b.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800980e:	e122      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009810:	e121      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009816:	e11e      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800981c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009820:	430b      	orrs	r3, r1
 8009822:	d133      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009824:	4b5f      	ldr	r3, [pc, #380]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800982c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009830:	2b00      	cmp	r3, #0
 8009832:	d004      	beq.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800983a:	d012      	beq.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800983c:	e023      	b.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800983e:	4b59      	ldr	r3, [pc, #356]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800984a:	d107      	bne.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800984c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fbc7 	bl	8009fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800985a:	e0fc      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009860:	e0f9      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009862:	4b50      	ldr	r3, [pc, #320]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800986a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800986e:	d107      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009870:	f107 0318 	add.w	r3, r7, #24
 8009874:	4618      	mov	r0, r3
 8009876:	f000 f90d 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800987e:	e0ea      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009884:	e0e7      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988a:	e0e4      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800988c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009890:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009894:	430b      	orrs	r3, r1
 8009896:	f040 808d 	bne.w	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800989a:	4b42      	ldr	r3, [pc, #264]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800989c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800989e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80098a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098aa:	d06b      	beq.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098b2:	d874      	bhi.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ba:	d056      	beq.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c2:	d86c      	bhi.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098ca:	d03b      	beq.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098d2:	d864      	bhi.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098da:	d021      	beq.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098e2:	d85c      	bhi.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d004      	beq.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098f0:	d004      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80098f2:	e054      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80098f4:	f000 f8b8 	bl	8009a68 <HAL_RCCEx_GetD3PCLK1Freq>
 80098f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098fa:	e0ac      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098fc:	4b29      	ldr	r3, [pc, #164]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009908:	d107      	bne.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990a:	f107 0318 	add.w	r3, r7, #24
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f8c0 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009918:	e09d      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991e:	e09a      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009920:	4b20      	ldr	r3, [pc, #128]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800992c:	d107      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800992e:	f107 030c 	add.w	r3, r7, #12
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fa02 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800993c:	e08b      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009942:	e088      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009944:	4b17      	ldr	r3, [pc, #92]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0304 	and.w	r3, r3, #4
 800994c:	2b04      	cmp	r3, #4
 800994e:	d109      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009950:	4b14      	ldr	r3, [pc, #80]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	08db      	lsrs	r3, r3, #3
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	4a13      	ldr	r2, [pc, #76]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800995c:	fa22 f303 	lsr.w	r3, r2, r3
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009962:	e078      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009968:	e075      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800996a:	4b0e      	ldr	r3, [pc, #56]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009976:	d102      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009978:	4b0c      	ldr	r3, [pc, #48]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800997c:	e06b      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009982:	e068      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009984:	4b07      	ldr	r3, [pc, #28]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800998c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009990:	d102      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009992:	4b07      	ldr	r3, [pc, #28]	@ (80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009996:	e05e      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009998:	2300      	movs	r3, #0
 800999a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800999c:	e05b      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a2:	e058      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099a4:	58024400 	.word	0x58024400
 80099a8:	03d09000 	.word	0x03d09000
 80099ac:	003d0900 	.word	0x003d0900
 80099b0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80099b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099b8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80099bc:	430b      	orrs	r3, r1
 80099be:	d148      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80099c0:	4b27      	ldr	r3, [pc, #156]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d0:	d02a      	beq.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80099d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d8:	d838      	bhi.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80099e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e6:	d00d      	beq.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80099e8:	e030      	b.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099f6:	d102      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80099f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80099fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099fc:	e02b      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a02:	e028      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a04:	4b16      	ldr	r3, [pc, #88]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a10:	d107      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 fae4 	bl	8009fe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a20:	e019      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a26:	e016      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a28:	4b0d      	ldr	r3, [pc, #52]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a34:	d107      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a36:	f107 0318 	add.w	r3, r7, #24
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f82a 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a44:	e007      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4a:	e004      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a50:	e001      	b.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3740      	adds	r7, #64	@ 0x40
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	58024400 	.word	0x58024400
 8009a64:	007a1200 	.word	0x007a1200

08009a68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a6c:	f7fd ffd4 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8009a70:	4602      	mov	r2, r0
 8009a72:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	091b      	lsrs	r3, r3, #4
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	4904      	ldr	r1, [pc, #16]	@ (8009a90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a7e:	5ccb      	ldrb	r3, [r1, r3]
 8009a80:	f003 031f 	and.w	r3, r3, #31
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	0800fea4 	.word	0x0800fea4

08009a94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b089      	sub	sp, #36	@ 0x24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009aa6:	4b9f      	ldr	r3, [pc, #636]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aaa:	0b1b      	lsrs	r3, r3, #12
 8009aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ab0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	091b      	lsrs	r3, r3, #4
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009abe:	4b99      	ldr	r3, [pc, #612]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac2:	08db      	lsrs	r3, r3, #3
 8009ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	fb02 f303 	mul.w	r3, r2, r3
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8111 	beq.w	8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	f000 8083 	beq.w	8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	f200 80a1 	bhi.w	8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d056      	beq.n	8009bac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009afe:	e099      	b.n	8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b00:	4b88      	ldr	r3, [pc, #544]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d02d      	beq.n	8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b0c:	4b85      	ldr	r3, [pc, #532]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	08db      	lsrs	r3, r3, #3
 8009b12:	f003 0303 	and.w	r3, r3, #3
 8009b16:	4a84      	ldr	r2, [pc, #528]	@ (8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b18:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b36:	4b7b      	ldr	r3, [pc, #492]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b66:	e087      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009baa:	e065      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bbe:	4b59      	ldr	r3, [pc, #356]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bee:	e043      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c02:	4b48      	ldr	r3, [pc, #288]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c32:	e021      	b.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c46:	4b37      	ldr	r3, [pc, #220]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009c78:	4b2a      	ldr	r3, [pc, #168]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c7c:	0a5b      	lsrs	r3, r3, #9
 8009c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9e:	ee17 2a90 	vmov	r2, s15
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009caa:	0c1b      	lsrs	r3, r3, #16
 8009cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ccc:	ee17 2a90 	vmov	r2, s15
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009cd4:	4b13      	ldr	r3, [pc, #76]	@ (8009d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd8:	0e1b      	lsrs	r3, r3, #24
 8009cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfa:	ee17 2a90 	vmov	r2, s15
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d02:	e008      	b.n	8009d16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	609a      	str	r2, [r3, #8]
}
 8009d16:	bf00      	nop
 8009d18:	3724      	adds	r7, #36	@ 0x24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	58024400 	.word	0x58024400
 8009d28:	03d09000 	.word	0x03d09000
 8009d2c:	46000000 	.word	0x46000000
 8009d30:	4c742400 	.word	0x4c742400
 8009d34:	4a742400 	.word	0x4a742400
 8009d38:	4af42400 	.word	0x4af42400

08009d3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b089      	sub	sp, #36	@ 0x24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d44:	4ba1      	ldr	r3, [pc, #644]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d48:	f003 0303 	and.w	r3, r3, #3
 8009d4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009d4e:	4b9f      	ldr	r3, [pc, #636]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	0d1b      	lsrs	r3, r3, #20
 8009d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009d66:	4b99      	ldr	r3, [pc, #612]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d6a:	08db      	lsrs	r3, r3, #3
 8009d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	fb02 f303 	mul.w	r3, r2, r3
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8111 	beq.w	8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	f000 8083 	beq.w	8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	f200 80a1 	bhi.w	8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d056      	beq.n	8009e54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009da6:	e099      	b.n	8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da8:	4b88      	ldr	r3, [pc, #544]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d02d      	beq.n	8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009db4:	4b85      	ldr	r3, [pc, #532]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	08db      	lsrs	r3, r3, #3
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	4a84      	ldr	r2, [pc, #528]	@ (8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	ee07 3a90 	vmov	s15, r3
 8009dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dde:	4b7b      	ldr	r3, [pc, #492]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de6:	ee07 3a90 	vmov	s15, r3
 8009dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e0e:	e087      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e22:	4b6a      	ldr	r3, [pc, #424]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e52:	e065      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e66:	4b59      	ldr	r3, [pc, #356]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e96:	e043      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eaa:	4b48      	ldr	r3, [pc, #288]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ebe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eda:	e021      	b.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b37      	ldr	r3, [pc, #220]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009f20:	4b2a      	ldr	r3, [pc, #168]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f24:	0a5b      	lsrs	r3, r3, #9
 8009f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f46:	ee17 2a90 	vmov	r2, s15
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f52:	0c1b      	lsrs	r3, r3, #16
 8009f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f74:	ee17 2a90 	vmov	r2, s15
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009f7c:	4b13      	ldr	r3, [pc, #76]	@ (8009fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f80:	0e1b      	lsrs	r3, r3, #24
 8009f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa2:	ee17 2a90 	vmov	r2, s15
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009faa:	e008      	b.n	8009fbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	609a      	str	r2, [r3, #8]
}
 8009fbe:	bf00      	nop
 8009fc0:	3724      	adds	r7, #36	@ 0x24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	58024400 	.word	0x58024400
 8009fd0:	03d09000 	.word	0x03d09000
 8009fd4:	46000000 	.word	0x46000000
 8009fd8:	4c742400 	.word	0x4c742400
 8009fdc:	4a742400 	.word	0x4a742400
 8009fe0:	4af42400 	.word	0x4af42400

08009fe4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b089      	sub	sp, #36	@ 0x24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fec:	4ba0      	ldr	r3, [pc, #640]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009ff6:	4b9e      	ldr	r3, [pc, #632]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffa:	091b      	lsrs	r3, r3, #4
 8009ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a000:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a002:	4b9b      	ldr	r3, [pc, #620]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a00c:	4b98      	ldr	r3, [pc, #608]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a010:	08db      	lsrs	r3, r3, #3
 800a012:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	fb02 f303 	mul.w	r3, r2, r3
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a024:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 8111 	beq.w	800a252 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	2b02      	cmp	r3, #2
 800a034:	f000 8083 	beq.w	800a13e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	f200 80a1 	bhi.w	800a182 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d056      	beq.n	800a0fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a04c:	e099      	b.n	800a182 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a04e:	4b88      	ldr	r3, [pc, #544]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d02d      	beq.n	800a0b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a05a:	4b85      	ldr	r3, [pc, #532]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	08db      	lsrs	r3, r3, #3
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	4a83      	ldr	r2, [pc, #524]	@ (800a274 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a066:	fa22 f303 	lsr.w	r3, r2, r3
 800a06a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	ee07 3a90 	vmov	s15, r3
 800a072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a084:	4b7a      	ldr	r3, [pc, #488]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08c:	ee07 3a90 	vmov	s15, r3
 800a090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a094:	ed97 6a03 	vldr	s12, [r7, #12]
 800a098:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a09c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0b4:	e087      	b.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	ee07 3a90 	vmov	s15, r3
 800a0bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a27c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c8:	4b69      	ldr	r3, [pc, #420]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d0:	ee07 3a90 	vmov	s15, r3
 800a0d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0dc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0f8:	e065      	b.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	ee07 3a90 	vmov	s15, r3
 800a100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a104:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a280 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10c:	4b58      	ldr	r3, [pc, #352]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a10e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a114:	ee07 3a90 	vmov	s15, r3
 800a118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a120:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a13c:	e043      	b.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	ee07 3a90 	vmov	s15, r3
 800a144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a148:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a284 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a14c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a150:	4b47      	ldr	r3, [pc, #284]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a160:	ed97 6a03 	vldr	s12, [r7, #12]
 800a164:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a180:	e021      	b.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a27c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a194:	4b36      	ldr	r3, [pc, #216]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a278 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a1c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ca:	0a5b      	lsrs	r3, r3, #9
 800a1cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1d0:	ee07 3a90 	vmov	s15, r3
 800a1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ec:	ee17 2a90 	vmov	r2, s15
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a1f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f8:	0c1b      	lsrs	r3, r3, #16
 800a1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a20a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a20e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21a:	ee17 2a90 	vmov	r2, s15
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a222:	4b13      	ldr	r3, [pc, #76]	@ (800a270 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a226:	0e1b      	lsrs	r3, r3, #24
 800a228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a234:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a23c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a248:	ee17 2a90 	vmov	r2, s15
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a250:	e008      	b.n	800a264 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	609a      	str	r2, [r3, #8]
}
 800a264:	bf00      	nop
 800a266:	3724      	adds	r7, #36	@ 0x24
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	58024400 	.word	0x58024400
 800a274:	03d09000 	.word	0x03d09000
 800a278:	46000000 	.word	0x46000000
 800a27c:	4c742400 	.word	0x4c742400
 800a280:	4a742400 	.word	0x4a742400
 800a284:	4af42400 	.word	0x4af42400

0800a288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a296:	4b53      	ldr	r3, [pc, #332]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d101      	bne.n	800a2a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e099      	b.n	800a3da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a4e      	ldr	r2, [pc, #312]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2b2:	f7f7 fac7 	bl	8001844 <HAL_GetTick>
 800a2b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2b8:	e008      	b.n	800a2cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2ba:	f7f7 fac3 	bl	8001844 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e086      	b.n	800a3da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2cc:	4b45      	ldr	r3, [pc, #276]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1f0      	bne.n	800a2ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2d8:	4b42      	ldr	r3, [pc, #264]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	031b      	lsls	r3, r3, #12
 800a2e6:	493f      	ldr	r1, [pc, #252]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	025b      	lsls	r3, r3, #9
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	3b01      	subs	r3, #1
 800a308:	041b      	lsls	r3, r3, #16
 800a30a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	3b01      	subs	r3, #1
 800a316:	061b      	lsls	r3, r3, #24
 800a318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a31c:	4931      	ldr	r1, [pc, #196]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a322:	4b30      	ldr	r3, [pc, #192]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	492d      	ldr	r1, [pc, #180]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a330:	4313      	orrs	r3, r2
 800a332:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a334:	4b2b      	ldr	r3, [pc, #172]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a338:	f023 0220 	bic.w	r2, r3, #32
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	4928      	ldr	r1, [pc, #160]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a342:	4313      	orrs	r3, r2
 800a344:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a346:	4b27      	ldr	r3, [pc, #156]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a34a:	4a26      	ldr	r2, [pc, #152]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a34c:	f023 0310 	bic.w	r3, r3, #16
 800a350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a352:	4b24      	ldr	r3, [pc, #144]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a356:	4b24      	ldr	r3, [pc, #144]	@ (800a3e8 <RCCEx_PLL2_Config+0x160>)
 800a358:	4013      	ands	r3, r2
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	69d2      	ldr	r2, [r2, #28]
 800a35e:	00d2      	lsls	r2, r2, #3
 800a360:	4920      	ldr	r1, [pc, #128]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a362:	4313      	orrs	r3, r2
 800a364:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a366:	4b1f      	ldr	r3, [pc, #124]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	4a1e      	ldr	r2, [pc, #120]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a36c:	f043 0310 	orr.w	r3, r3, #16
 800a370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d106      	bne.n	800a386 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a378:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	4a19      	ldr	r2, [pc, #100]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a37e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a384:	e00f      	b.n	800a3a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d106      	bne.n	800a39a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a38c:	4b15      	ldr	r3, [pc, #84]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a390:	4a14      	ldr	r2, [pc, #80]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a398:	e005      	b.n	800a3a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a39a:	4b12      	ldr	r3, [pc, #72]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a39e:	4a11      	ldr	r2, [pc, #68]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3b2:	f7f7 fa47 	bl	8001844 <HAL_GetTick>
 800a3b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3b8:	e008      	b.n	800a3cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3ba:	f7f7 fa43 	bl	8001844 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d901      	bls.n	800a3cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e006      	b.n	800a3da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3cc:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0f0      	beq.n	800a3ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	58024400 	.word	0x58024400
 800a3e8:	ffff0007 	.word	0xffff0007

0800a3ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3fa:	4b53      	ldr	r3, [pc, #332]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fe:	f003 0303 	and.w	r3, r3, #3
 800a402:	2b03      	cmp	r3, #3
 800a404:	d101      	bne.n	800a40a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e099      	b.n	800a53e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a40a:	4b4f      	ldr	r3, [pc, #316]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a4e      	ldr	r2, [pc, #312]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a416:	f7f7 fa15 	bl	8001844 <HAL_GetTick>
 800a41a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a41c:	e008      	b.n	800a430 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a41e:	f7f7 fa11 	bl	8001844 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d901      	bls.n	800a430 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e086      	b.n	800a53e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a430:	4b45      	ldr	r3, [pc, #276]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f0      	bne.n	800a41e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a43c:	4b42      	ldr	r3, [pc, #264]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a440:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	051b      	lsls	r3, r3, #20
 800a44a:	493f      	ldr	r1, [pc, #252]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	3b01      	subs	r3, #1
 800a456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	3b01      	subs	r3, #1
 800a460:	025b      	lsls	r3, r3, #9
 800a462:	b29b      	uxth	r3, r3
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	041b      	lsls	r3, r3, #16
 800a46e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	3b01      	subs	r3, #1
 800a47a:	061b      	lsls	r3, r3, #24
 800a47c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a480:	4931      	ldr	r1, [pc, #196]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a482:	4313      	orrs	r3, r2
 800a484:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a486:	4b30      	ldr	r3, [pc, #192]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	492d      	ldr	r1, [pc, #180]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a494:	4313      	orrs	r3, r2
 800a496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a498:	4b2b      	ldr	r3, [pc, #172]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	4928      	ldr	r1, [pc, #160]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4aa:	4b27      	ldr	r3, [pc, #156]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ae:	4a26      	ldr	r2, [pc, #152]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4b6:	4b24      	ldr	r3, [pc, #144]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ba:	4b24      	ldr	r3, [pc, #144]	@ (800a54c <RCCEx_PLL3_Config+0x160>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	69d2      	ldr	r2, [r2, #28]
 800a4c2:	00d2      	lsls	r2, r2, #3
 800a4c4:	4920      	ldr	r1, [pc, #128]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4ca:	4b1f      	ldr	r3, [pc, #124]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e0:	4a19      	ldr	r2, [pc, #100]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a4e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4e8:	e00f      	b.n	800a50a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d106      	bne.n	800a4fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4f0:	4b15      	ldr	r3, [pc, #84]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f4:	4a14      	ldr	r2, [pc, #80]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4fc:	e005      	b.n	800a50a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4fe:	4b12      	ldr	r3, [pc, #72]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a502:	4a11      	ldr	r2, [pc, #68]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a508:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a50a:	4b0f      	ldr	r3, [pc, #60]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a0e      	ldr	r2, [pc, #56]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a516:	f7f7 f995 	bl	8001844 <HAL_GetTick>
 800a51a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a51c:	e008      	b.n	800a530 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a51e:	f7f7 f991 	bl	8001844 <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d901      	bls.n	800a530 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e006      	b.n	800a53e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a530:	4b05      	ldr	r3, [pc, #20]	@ (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0f0      	beq.n	800a51e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	58024400 	.word	0x58024400
 800a54c:	ffff0007 	.word	0xffff0007

0800a550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e049      	b.n	800a5f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d106      	bne.n	800a57c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f841 	bl	800a5fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4619      	mov	r1, r3
 800a58e:	4610      	mov	r0, r2
 800a590:	f000 f9e8 	bl	800a964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b01      	cmp	r3, #1
 800a626:	d001      	beq.n	800a62c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e054      	b.n	800a6d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a26      	ldr	r2, [pc, #152]	@ (800a6e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d022      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x80>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a656:	d01d      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x80>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a22      	ldr	r2, [pc, #136]	@ (800a6e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d018      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x80>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a21      	ldr	r2, [pc, #132]	@ (800a6ec <HAL_TIM_Base_Start_IT+0xd8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d013      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x80>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a1f      	ldr	r2, [pc, #124]	@ (800a6f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00e      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x80>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a1e      	ldr	r2, [pc, #120]	@ (800a6f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d009      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x80>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d004      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x80>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a1b      	ldr	r2, [pc, #108]	@ (800a6fc <HAL_TIM_Base_Start_IT+0xe8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d115      	bne.n	800a6c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	4b19      	ldr	r3, [pc, #100]	@ (800a700 <HAL_TIM_Base_Start_IT+0xec>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b06      	cmp	r3, #6
 800a6a4:	d015      	beq.n	800a6d2 <HAL_TIM_Base_Start_IT+0xbe>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ac:	d011      	beq.n	800a6d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f042 0201 	orr.w	r2, r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6be:	e008      	b.n	800a6d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0201 	orr.w	r2, r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	e000      	b.n	800a6d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	40010000 	.word	0x40010000
 800a6e8:	40000400 	.word	0x40000400
 800a6ec:	40000800 	.word	0x40000800
 800a6f0:	40000c00 	.word	0x40000c00
 800a6f4:	40010400 	.word	0x40010400
 800a6f8:	40001800 	.word	0x40001800
 800a6fc:	40014000 	.word	0x40014000
 800a700:	00010007 	.word	0x00010007

0800a704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d020      	beq.n	800a768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01b      	beq.n	800a768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f06f 0202 	mvn.w	r2, #2
 800a738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f8e9 	bl	800a926 <HAL_TIM_IC_CaptureCallback>
 800a754:	e005      	b.n	800a762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f8db 	bl	800a912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f8ec 	bl	800a93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d020      	beq.n	800a7b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01b      	beq.n	800a7b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f06f 0204 	mvn.w	r2, #4
 800a784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2202      	movs	r2, #2
 800a78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f8c3 	bl	800a926 <HAL_TIM_IC_CaptureCallback>
 800a7a0:	e005      	b.n	800a7ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f8b5 	bl	800a912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f8c6 	bl	800a93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d020      	beq.n	800a800 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f003 0308 	and.w	r3, r3, #8
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01b      	beq.n	800a800 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f06f 0208 	mvn.w	r2, #8
 800a7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	f003 0303 	and.w	r3, r3, #3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f89d 	bl	800a926 <HAL_TIM_IC_CaptureCallback>
 800a7ec:	e005      	b.n	800a7fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f88f 	bl	800a912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f8a0 	bl	800a93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f003 0310 	and.w	r3, r3, #16
 800a806:	2b00      	cmp	r3, #0
 800a808:	d020      	beq.n	800a84c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f003 0310 	and.w	r3, r3, #16
 800a810:	2b00      	cmp	r3, #0
 800a812:	d01b      	beq.n	800a84c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f06f 0210 	mvn.w	r2, #16
 800a81c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2208      	movs	r2, #8
 800a822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f877 	bl	800a926 <HAL_TIM_IC_CaptureCallback>
 800a838:	e005      	b.n	800a846 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f869 	bl	800a912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f87a 	bl	800a93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00c      	beq.n	800a870 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d007      	beq.n	800a870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f06f 0201 	mvn.w	r2, #1
 800a868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7f6 fc6a 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a876:	2b00      	cmp	r3, #0
 800a878:	d104      	bne.n	800a884 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00c      	beq.n	800a89e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d007      	beq.n	800a89e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f913 	bl	800aac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00c      	beq.n	800a8c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d007      	beq.n	800a8c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a8ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f90b 	bl	800aad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00c      	beq.n	800a8e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d007      	beq.n	800a8e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f834 	bl	800a94e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f003 0320 	and.w	r3, r3, #32
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00c      	beq.n	800a90a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d007      	beq.n	800a90a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f06f 0220 	mvn.w	r2, #32
 800a902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f8d3 	bl	800aab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a90a:	bf00      	nop
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a92e:	bf00      	nop
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b083      	sub	sp, #12
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a942:	bf00      	nop
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a94e:	b480      	push	{r7}
 800a950:	b083      	sub	sp, #12
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
	...

0800a964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a46      	ldr	r2, [pc, #280]	@ (800aa90 <TIM_Base_SetConfig+0x12c>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d013      	beq.n	800a9a4 <TIM_Base_SetConfig+0x40>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a982:	d00f      	beq.n	800a9a4 <TIM_Base_SetConfig+0x40>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a43      	ldr	r2, [pc, #268]	@ (800aa94 <TIM_Base_SetConfig+0x130>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00b      	beq.n	800a9a4 <TIM_Base_SetConfig+0x40>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a42      	ldr	r2, [pc, #264]	@ (800aa98 <TIM_Base_SetConfig+0x134>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d007      	beq.n	800a9a4 <TIM_Base_SetConfig+0x40>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a41      	ldr	r2, [pc, #260]	@ (800aa9c <TIM_Base_SetConfig+0x138>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d003      	beq.n	800a9a4 <TIM_Base_SetConfig+0x40>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a40      	ldr	r2, [pc, #256]	@ (800aaa0 <TIM_Base_SetConfig+0x13c>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d108      	bne.n	800a9b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a35      	ldr	r2, [pc, #212]	@ (800aa90 <TIM_Base_SetConfig+0x12c>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d01f      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9c4:	d01b      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a32      	ldr	r2, [pc, #200]	@ (800aa94 <TIM_Base_SetConfig+0x130>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d017      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a31      	ldr	r2, [pc, #196]	@ (800aa98 <TIM_Base_SetConfig+0x134>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d013      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a30      	ldr	r2, [pc, #192]	@ (800aa9c <TIM_Base_SetConfig+0x138>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00f      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a2f      	ldr	r2, [pc, #188]	@ (800aaa0 <TIM_Base_SetConfig+0x13c>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d00b      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a2e      	ldr	r2, [pc, #184]	@ (800aaa4 <TIM_Base_SetConfig+0x140>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d007      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a2d      	ldr	r2, [pc, #180]	@ (800aaa8 <TIM_Base_SetConfig+0x144>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d003      	beq.n	800a9fe <TIM_Base_SetConfig+0x9a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a2c      	ldr	r2, [pc, #176]	@ (800aaac <TIM_Base_SetConfig+0x148>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d108      	bne.n	800aa10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a16      	ldr	r2, [pc, #88]	@ (800aa90 <TIM_Base_SetConfig+0x12c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d00f      	beq.n	800aa5c <TIM_Base_SetConfig+0xf8>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a18      	ldr	r2, [pc, #96]	@ (800aaa0 <TIM_Base_SetConfig+0x13c>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d00b      	beq.n	800aa5c <TIM_Base_SetConfig+0xf8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a17      	ldr	r2, [pc, #92]	@ (800aaa4 <TIM_Base_SetConfig+0x140>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d007      	beq.n	800aa5c <TIM_Base_SetConfig+0xf8>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a16      	ldr	r2, [pc, #88]	@ (800aaa8 <TIM_Base_SetConfig+0x144>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d003      	beq.n	800aa5c <TIM_Base_SetConfig+0xf8>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a15      	ldr	r2, [pc, #84]	@ (800aaac <TIM_Base_SetConfig+0x148>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d103      	bne.n	800aa64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	691a      	ldr	r2, [r3, #16]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d105      	bne.n	800aa82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f023 0201 	bic.w	r2, r3, #1
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	611a      	str	r2, [r3, #16]
  }
}
 800aa82:	bf00      	nop
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	40010000 	.word	0x40010000
 800aa94:	40000400 	.word	0x40000400
 800aa98:	40000800 	.word	0x40000800
 800aa9c:	40000c00 	.word	0x40000c00
 800aaa0:	40010400 	.word	0x40010400
 800aaa4:	40014000 	.word	0x40014000
 800aaa8:	40014400 	.word	0x40014400
 800aaac:	40014800 	.word	0x40014800

0800aab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e042      	b.n	800ab84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d106      	bne.n	800ab16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7f6 fcfd 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2224      	movs	r2, #36	@ 0x24
 800ab1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f022 0201 	bic.w	r2, r2, #1
 800ab2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f001 fa3a 	bl	800bfb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fccf 	bl	800b4e0 <UART_SetConfig>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d101      	bne.n	800ab4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e01b      	b.n	800ab84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	689a      	ldr	r2, [r3, #8]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f001 fab9 	bl	800c0f4 <UART_CheckIdleState>
 800ab82:	4603      	mov	r3, r0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	@ 0x28
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d17b      	bne.n	800ac9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <HAL_UART_Transmit+0x26>
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e074      	b.n	800aca0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2221      	movs	r2, #33	@ 0x21
 800abc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abc6:	f7f6 fe3d 	bl	8001844 <HAL_GetTick>
 800abca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	88fa      	ldrh	r2, [r7, #6]
 800abd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	88fa      	ldrh	r2, [r7, #6]
 800abd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abe4:	d108      	bne.n	800abf8 <HAL_UART_Transmit+0x6c>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d104      	bne.n	800abf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	e003      	b.n	800ac00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac00:	e030      	b.n	800ac64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2180      	movs	r1, #128	@ 0x80
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f001 fb1b 	bl	800c248 <UART_WaitOnFlagUntilTimeout>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e03d      	b.n	800aca0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	3302      	adds	r3, #2
 800ac3e:	61bb      	str	r3, [r7, #24]
 800ac40:	e007      	b.n	800ac52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1c8      	bne.n	800ac02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2200      	movs	r2, #0
 800ac78:	2140      	movs	r1, #64	@ 0x40
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f001 fae4 	bl	800c248 <UART_WaitOnFlagUntilTimeout>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e006      	b.n	800aca0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2220      	movs	r2, #32
 800ac96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e000      	b.n	800aca0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ac9e:	2302      	movs	r3, #2
  }
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3720      	adds	r7, #32
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	@ 0x28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	4613      	mov	r3, r2
 800acb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acbc:	2b20      	cmp	r3, #32
 800acbe:	d137      	bne.n	800ad30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <HAL_UART_Receive_IT+0x24>
 800acc6:	88fb      	ldrh	r3, [r7, #6]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e030      	b.n	800ad32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a18      	ldr	r2, [pc, #96]	@ (800ad3c <HAL_UART_Receive_IT+0x94>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d01f      	beq.n	800ad20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d018      	beq.n	800ad20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	e853 3f00 	ldrex	r3, [r3]
 800acfa:	613b      	str	r3, [r7, #16]
   return(result);
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad02:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0c:	623b      	str	r3, [r7, #32]
 800ad0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad10:	69f9      	ldr	r1, [r7, #28]
 800ad12:	6a3a      	ldr	r2, [r7, #32]
 800ad14:	e841 2300 	strex	r3, r2, [r1]
 800ad18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e6      	bne.n	800acee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad20:	88fb      	ldrh	r3, [r7, #6]
 800ad22:	461a      	mov	r2, r3
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f001 fafc 	bl	800c324 <UART_Start_Receive_IT>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	e000      	b.n	800ad32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ad30:	2302      	movs	r3, #2
  }
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3728      	adds	r7, #40	@ 0x28
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	58000c00 	.word	0x58000c00

0800ad40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b0ba      	sub	sp, #232	@ 0xe8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ad6e:	4013      	ands	r3, r2
 800ad70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ad74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d11b      	bne.n	800adb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad80:	f003 0320 	and.w	r3, r3, #32
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d015      	beq.n	800adb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad8c:	f003 0320 	and.w	r3, r3, #32
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d105      	bne.n	800ada0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d009      	beq.n	800adb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 8377 	beq.w	800b498 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	4798      	blx	r3
      }
      return;
 800adb2:	e371      	b.n	800b498 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800adb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 8123 	beq.w	800b004 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800adbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800adc2:	4b8d      	ldr	r3, [pc, #564]	@ (800aff8 <HAL_UART_IRQHandler+0x2b8>)
 800adc4:	4013      	ands	r3, r2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d106      	bne.n	800add8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800adce:	4b8b      	ldr	r3, [pc, #556]	@ (800affc <HAL_UART_IRQHandler+0x2bc>)
 800add0:	4013      	ands	r3, r2
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 8116 	beq.w	800b004 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800add8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d011      	beq.n	800ae08 <HAL_UART_IRQHandler+0xc8>
 800ade4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ade8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2201      	movs	r2, #1
 800adf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adfe:	f043 0201 	orr.w	r2, r3, #1
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d011      	beq.n	800ae38 <HAL_UART_IRQHandler+0xf8>
 800ae14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2202      	movs	r2, #2
 800ae26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae2e:	f043 0204 	orr.w	r2, r3, #4
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae3c:	f003 0304 	and.w	r3, r3, #4
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d011      	beq.n	800ae68 <HAL_UART_IRQHandler+0x128>
 800ae44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2204      	movs	r2, #4
 800ae56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae5e:	f043 0202 	orr.w	r2, r3, #2
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae6c:	f003 0308 	and.w	r3, r3, #8
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d017      	beq.n	800aea4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae78:	f003 0320 	and.w	r3, r3, #32
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d105      	bne.n	800ae8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae84:	4b5c      	ldr	r3, [pc, #368]	@ (800aff8 <HAL_UART_IRQHandler+0x2b8>)
 800ae86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00b      	beq.n	800aea4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2208      	movs	r2, #8
 800ae92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae9a:	f043 0208 	orr.w	r2, r3, #8
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d012      	beq.n	800aed6 <HAL_UART_IRQHandler+0x196>
 800aeb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00c      	beq.n	800aed6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aecc:	f043 0220 	orr.w	r2, r3, #32
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 82dd 	beq.w	800b49c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aee6:	f003 0320 	and.w	r3, r3, #32
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d013      	beq.n	800af16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aeee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef2:	f003 0320 	and.w	r3, r3, #32
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d105      	bne.n	800af06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aefa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aefe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af2a:	2b40      	cmp	r3, #64	@ 0x40
 800af2c:	d005      	beq.n	800af3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af36:	2b00      	cmp	r3, #0
 800af38:	d054      	beq.n	800afe4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 fb14 	bl	800c568 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4a:	2b40      	cmp	r3, #64	@ 0x40
 800af4c:	d146      	bne.n	800afdc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3308      	adds	r3, #8
 800af54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800af64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3308      	adds	r3, #8
 800af76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800af7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800af7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800af86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1d9      	bne.n	800af4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d017      	beq.n	800afd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afaa:	4a15      	ldr	r2, [pc, #84]	@ (800b000 <HAL_UART_IRQHandler+0x2c0>)
 800afac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7f9 fcef 	bl	8004998 <HAL_DMA_Abort_IT>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d019      	beq.n	800aff4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800afce:	4610      	mov	r0, r2
 800afd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd2:	e00f      	b.n	800aff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fa6d 	bl	800b4b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afda:	e00b      	b.n	800aff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fa69 	bl	800b4b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe2:	e007      	b.n	800aff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fa65 	bl	800b4b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aff2:	e253      	b.n	800b49c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff4:	bf00      	nop
    return;
 800aff6:	e251      	b.n	800b49c <HAL_UART_IRQHandler+0x75c>
 800aff8:	10000001 	.word	0x10000001
 800affc:	04000120 	.word	0x04000120
 800b000:	0800c635 	.word	0x0800c635

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b008:	2b01      	cmp	r3, #1
 800b00a:	f040 81e7 	bne.w	800b3dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b012:	f003 0310 	and.w	r3, r3, #16
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 81e0 	beq.w	800b3dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b020:	f003 0310 	and.w	r3, r3, #16
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 81d9 	beq.w	800b3dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2210      	movs	r2, #16
 800b030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b03c:	2b40      	cmp	r3, #64	@ 0x40
 800b03e:	f040 8151 	bne.w	800b2e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a96      	ldr	r2, [pc, #600]	@ (800b2a4 <HAL_UART_IRQHandler+0x564>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d068      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a93      	ldr	r2, [pc, #588]	@ (800b2a8 <HAL_UART_IRQHandler+0x568>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d061      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a91      	ldr	r2, [pc, #580]	@ (800b2ac <HAL_UART_IRQHandler+0x56c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d05a      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a8e      	ldr	r2, [pc, #568]	@ (800b2b0 <HAL_UART_IRQHandler+0x570>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d053      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a8c      	ldr	r2, [pc, #560]	@ (800b2b4 <HAL_UART_IRQHandler+0x574>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d04c      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a89      	ldr	r2, [pc, #548]	@ (800b2b8 <HAL_UART_IRQHandler+0x578>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d045      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a87      	ldr	r2, [pc, #540]	@ (800b2bc <HAL_UART_IRQHandler+0x57c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d03e      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a84      	ldr	r2, [pc, #528]	@ (800b2c0 <HAL_UART_IRQHandler+0x580>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d037      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a82      	ldr	r2, [pc, #520]	@ (800b2c4 <HAL_UART_IRQHandler+0x584>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d030      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a7f      	ldr	r2, [pc, #508]	@ (800b2c8 <HAL_UART_IRQHandler+0x588>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d029      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a7d      	ldr	r2, [pc, #500]	@ (800b2cc <HAL_UART_IRQHandler+0x58c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d022      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a7a      	ldr	r2, [pc, #488]	@ (800b2d0 <HAL_UART_IRQHandler+0x590>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d01b      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a78      	ldr	r2, [pc, #480]	@ (800b2d4 <HAL_UART_IRQHandler+0x594>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d014      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a75      	ldr	r2, [pc, #468]	@ (800b2d8 <HAL_UART_IRQHandler+0x598>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d00d      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a73      	ldr	r2, [pc, #460]	@ (800b2dc <HAL_UART_IRQHandler+0x59c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d006      	beq.n	800b122 <HAL_UART_IRQHandler+0x3e2>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a70      	ldr	r2, [pc, #448]	@ (800b2e0 <HAL_UART_IRQHandler+0x5a0>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d106      	bne.n	800b130 <HAL_UART_IRQHandler+0x3f0>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	e005      	b.n	800b13c <HAL_UART_IRQHandler+0x3fc>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 81ab 	beq.w	800b4a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b154:	429a      	cmp	r2, r3
 800b156:	f080 81a3 	bcs.w	800b4a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b160:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b170:	f000 8087 	beq.w	800b282 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b188:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b18c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b19e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b1a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b1aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1da      	bne.n	800b174 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b1ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1d0:	f023 0301 	bic.w	r3, r3, #1
 800b1d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b1e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b1e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b1ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b1f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e1      	bne.n	800b1be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3308      	adds	r3, #8
 800b200:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b20a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b20c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3308      	adds	r3, #8
 800b21a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b21e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b220:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b224:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b22c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e3      	bne.n	800b1fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b248:	e853 3f00 	ldrex	r3, [r3]
 800b24c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b250:	f023 0310 	bic.w	r3, r3, #16
 800b254:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	461a      	mov	r2, r3
 800b25e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b262:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b264:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e4      	bne.n	800b240 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7f9 f86d 	bl	800435c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2202      	movs	r2, #2
 800b286:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b294:	b29b      	uxth	r3, r3
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f913 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2a2:	e0fd      	b.n	800b4a0 <HAL_UART_IRQHandler+0x760>
 800b2a4:	40020010 	.word	0x40020010
 800b2a8:	40020028 	.word	0x40020028
 800b2ac:	40020040 	.word	0x40020040
 800b2b0:	40020058 	.word	0x40020058
 800b2b4:	40020070 	.word	0x40020070
 800b2b8:	40020088 	.word	0x40020088
 800b2bc:	400200a0 	.word	0x400200a0
 800b2c0:	400200b8 	.word	0x400200b8
 800b2c4:	40020410 	.word	0x40020410
 800b2c8:	40020428 	.word	0x40020428
 800b2cc:	40020440 	.word	0x40020440
 800b2d0:	40020458 	.word	0x40020458
 800b2d4:	40020470 	.word	0x40020470
 800b2d8:	40020488 	.word	0x40020488
 800b2dc:	400204a0 	.word	0x400204a0
 800b2e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 80cf 	beq.w	800b4a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 80ca 	beq.w	800b4a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b324:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b332:	647b      	str	r3, [r7, #68]	@ 0x44
 800b334:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b336:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b338:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e4      	bne.n	800b310 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3308      	adds	r3, #8
 800b34c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b350:	e853 3f00 	ldrex	r3, [r3]
 800b354:	623b      	str	r3, [r7, #32]
   return(result);
 800b356:	6a3a      	ldr	r2, [r7, #32]
 800b358:	4b55      	ldr	r3, [pc, #340]	@ (800b4b0 <HAL_UART_IRQHandler+0x770>)
 800b35a:	4013      	ands	r3, r2
 800b35c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3308      	adds	r3, #8
 800b366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b36a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e3      	bne.n	800b346 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2220      	movs	r2, #32
 800b382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	e853 3f00 	ldrex	r3, [r3]
 800b39e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f023 0310 	bic.w	r3, r3, #16
 800b3a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b3b4:	61fb      	str	r3, [r7, #28]
 800b3b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b8:	69b9      	ldr	r1, [r7, #24]
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	e841 2300 	strex	r3, r2, [r1]
 800b3c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e4      	bne.n	800b392 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f877 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3da:	e063      	b.n	800b4a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00e      	beq.n	800b406 <HAL_UART_IRQHandler+0x6c6>
 800b3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d008      	beq.n	800b406 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b3fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 fe76 	bl	800d0f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b404:	e051      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b40a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d014      	beq.n	800b43c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d105      	bne.n	800b42a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b41e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d008      	beq.n	800b43c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d03a      	beq.n	800b4a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	4798      	blx	r3
    }
    return;
 800b43a:	e035      	b.n	800b4a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b444:	2b00      	cmp	r3, #0
 800b446:	d009      	beq.n	800b45c <HAL_UART_IRQHandler+0x71c>
 800b448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 f903 	bl	800c660 <UART_EndTransmit_IT>
    return;
 800b45a:	e026      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d009      	beq.n	800b47c <HAL_UART_IRQHandler+0x73c>
 800b468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b46c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 fe4f 	bl	800d118 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b47a:	e016      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d010      	beq.n	800b4aa <HAL_UART_IRQHandler+0x76a>
 800b488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	da0c      	bge.n	800b4aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f001 fe37 	bl	800d104 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b496:	e008      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
      return;
 800b498:	bf00      	nop
 800b49a:	e006      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
    return;
 800b49c:	bf00      	nop
 800b49e:	e004      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
      return;
 800b4a0:	bf00      	nop
 800b4a2:	e002      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
      return;
 800b4a4:	bf00      	nop
 800b4a6:	e000      	b.n	800b4aa <HAL_UART_IRQHandler+0x76a>
    return;
 800b4a8:	bf00      	nop
  }
}
 800b4aa:	37e8      	adds	r7, #232	@ 0xe8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	effffffe 	.word	0xeffffffe

0800b4b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4e4:	b092      	sub	sp, #72	@ 0x48
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	689a      	ldr	r2, [r3, #8]
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	69db      	ldr	r3, [r3, #28]
 800b504:	4313      	orrs	r3, r2
 800b506:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	4bbe      	ldr	r3, [pc, #760]	@ (800b808 <UART_SetConfig+0x328>)
 800b510:	4013      	ands	r3, r2
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	6812      	ldr	r2, [r2, #0]
 800b516:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b518:	430b      	orrs	r3, r1
 800b51a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	430a      	orrs	r2, r1
 800b530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4ab3      	ldr	r2, [pc, #716]	@ (800b80c <UART_SetConfig+0x32c>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d004      	beq.n	800b54c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b548:	4313      	orrs	r3, r2
 800b54a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	4baf      	ldr	r3, [pc, #700]	@ (800b810 <UART_SetConfig+0x330>)
 800b554:	4013      	ands	r3, r2
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	6812      	ldr	r2, [r2, #0]
 800b55a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b55c:	430b      	orrs	r3, r1
 800b55e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b566:	f023 010f 	bic.w	r1, r3, #15
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	430a      	orrs	r2, r1
 800b574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4aa6      	ldr	r2, [pc, #664]	@ (800b814 <UART_SetConfig+0x334>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d177      	bne.n	800b670 <UART_SetConfig+0x190>
 800b580:	4ba5      	ldr	r3, [pc, #660]	@ (800b818 <UART_SetConfig+0x338>)
 800b582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b584:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b588:	2b28      	cmp	r3, #40	@ 0x28
 800b58a:	d86d      	bhi.n	800b668 <UART_SetConfig+0x188>
 800b58c:	a201      	add	r2, pc, #4	@ (adr r2, 800b594 <UART_SetConfig+0xb4>)
 800b58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b592:	bf00      	nop
 800b594:	0800b639 	.word	0x0800b639
 800b598:	0800b669 	.word	0x0800b669
 800b59c:	0800b669 	.word	0x0800b669
 800b5a0:	0800b669 	.word	0x0800b669
 800b5a4:	0800b669 	.word	0x0800b669
 800b5a8:	0800b669 	.word	0x0800b669
 800b5ac:	0800b669 	.word	0x0800b669
 800b5b0:	0800b669 	.word	0x0800b669
 800b5b4:	0800b641 	.word	0x0800b641
 800b5b8:	0800b669 	.word	0x0800b669
 800b5bc:	0800b669 	.word	0x0800b669
 800b5c0:	0800b669 	.word	0x0800b669
 800b5c4:	0800b669 	.word	0x0800b669
 800b5c8:	0800b669 	.word	0x0800b669
 800b5cc:	0800b669 	.word	0x0800b669
 800b5d0:	0800b669 	.word	0x0800b669
 800b5d4:	0800b649 	.word	0x0800b649
 800b5d8:	0800b669 	.word	0x0800b669
 800b5dc:	0800b669 	.word	0x0800b669
 800b5e0:	0800b669 	.word	0x0800b669
 800b5e4:	0800b669 	.word	0x0800b669
 800b5e8:	0800b669 	.word	0x0800b669
 800b5ec:	0800b669 	.word	0x0800b669
 800b5f0:	0800b669 	.word	0x0800b669
 800b5f4:	0800b651 	.word	0x0800b651
 800b5f8:	0800b669 	.word	0x0800b669
 800b5fc:	0800b669 	.word	0x0800b669
 800b600:	0800b669 	.word	0x0800b669
 800b604:	0800b669 	.word	0x0800b669
 800b608:	0800b669 	.word	0x0800b669
 800b60c:	0800b669 	.word	0x0800b669
 800b610:	0800b669 	.word	0x0800b669
 800b614:	0800b659 	.word	0x0800b659
 800b618:	0800b669 	.word	0x0800b669
 800b61c:	0800b669 	.word	0x0800b669
 800b620:	0800b669 	.word	0x0800b669
 800b624:	0800b669 	.word	0x0800b669
 800b628:	0800b669 	.word	0x0800b669
 800b62c:	0800b669 	.word	0x0800b669
 800b630:	0800b669 	.word	0x0800b669
 800b634:	0800b661 	.word	0x0800b661
 800b638:	2301      	movs	r3, #1
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63e:	e222      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b640:	2304      	movs	r3, #4
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b646:	e21e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b648:	2308      	movs	r3, #8
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b64e:	e21a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b650:	2310      	movs	r3, #16
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b656:	e216      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b658:	2320      	movs	r3, #32
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65e:	e212      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b660:	2340      	movs	r3, #64	@ 0x40
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b666:	e20e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b668:	2380      	movs	r3, #128	@ 0x80
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66e:	e20a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a69      	ldr	r2, [pc, #420]	@ (800b81c <UART_SetConfig+0x33c>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d130      	bne.n	800b6dc <UART_SetConfig+0x1fc>
 800b67a:	4b67      	ldr	r3, [pc, #412]	@ (800b818 <UART_SetConfig+0x338>)
 800b67c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b67e:	f003 0307 	and.w	r3, r3, #7
 800b682:	2b05      	cmp	r3, #5
 800b684:	d826      	bhi.n	800b6d4 <UART_SetConfig+0x1f4>
 800b686:	a201      	add	r2, pc, #4	@ (adr r2, 800b68c <UART_SetConfig+0x1ac>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6a5 	.word	0x0800b6a5
 800b690:	0800b6ad 	.word	0x0800b6ad
 800b694:	0800b6b5 	.word	0x0800b6b5
 800b698:	0800b6bd 	.word	0x0800b6bd
 800b69c:	0800b6c5 	.word	0x0800b6c5
 800b6a0:	0800b6cd 	.word	0x0800b6cd
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6aa:	e1ec      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6ac:	2304      	movs	r3, #4
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b2:	e1e8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6b4:	2308      	movs	r3, #8
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ba:	e1e4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6bc:	2310      	movs	r3, #16
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6c2:	e1e0      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ca:	e1dc      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6cc:	2340      	movs	r3, #64	@ 0x40
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e1d8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6d4:	2380      	movs	r3, #128	@ 0x80
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6da:	e1d4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a4f      	ldr	r2, [pc, #316]	@ (800b820 <UART_SetConfig+0x340>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d130      	bne.n	800b748 <UART_SetConfig+0x268>
 800b6e6:	4b4c      	ldr	r3, [pc, #304]	@ (800b818 <UART_SetConfig+0x338>)
 800b6e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ea:	f003 0307 	and.w	r3, r3, #7
 800b6ee:	2b05      	cmp	r3, #5
 800b6f0:	d826      	bhi.n	800b740 <UART_SetConfig+0x260>
 800b6f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f8 <UART_SetConfig+0x218>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b711 	.word	0x0800b711
 800b6fc:	0800b719 	.word	0x0800b719
 800b700:	0800b721 	.word	0x0800b721
 800b704:	0800b729 	.word	0x0800b729
 800b708:	0800b731 	.word	0x0800b731
 800b70c:	0800b739 	.word	0x0800b739
 800b710:	2300      	movs	r3, #0
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e1b6      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b718:	2304      	movs	r3, #4
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e1b2      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b720:	2308      	movs	r3, #8
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b726:	e1ae      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b728:	2310      	movs	r3, #16
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72e:	e1aa      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b730:	2320      	movs	r3, #32
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b736:	e1a6      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b738:	2340      	movs	r3, #64	@ 0x40
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73e:	e1a2      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b740:	2380      	movs	r3, #128	@ 0x80
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b746:	e19e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a35      	ldr	r2, [pc, #212]	@ (800b824 <UART_SetConfig+0x344>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d130      	bne.n	800b7b4 <UART_SetConfig+0x2d4>
 800b752:	4b31      	ldr	r3, [pc, #196]	@ (800b818 <UART_SetConfig+0x338>)
 800b754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d826      	bhi.n	800b7ac <UART_SetConfig+0x2cc>
 800b75e:	a201      	add	r2, pc, #4	@ (adr r2, 800b764 <UART_SetConfig+0x284>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b77d 	.word	0x0800b77d
 800b768:	0800b785 	.word	0x0800b785
 800b76c:	0800b78d 	.word	0x0800b78d
 800b770:	0800b795 	.word	0x0800b795
 800b774:	0800b79d 	.word	0x0800b79d
 800b778:	0800b7a5 	.word	0x0800b7a5
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e180      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b784:	2304      	movs	r3, #4
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78a:	e17c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b78c:	2308      	movs	r3, #8
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b792:	e178      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b794:	2310      	movs	r3, #16
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79a:	e174      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b79c:	2320      	movs	r3, #32
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a2:	e170      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7a4:	2340      	movs	r3, #64	@ 0x40
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7aa:	e16c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7ac:	2380      	movs	r3, #128	@ 0x80
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b2:	e168      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b828 <UART_SetConfig+0x348>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d142      	bne.n	800b844 <UART_SetConfig+0x364>
 800b7be:	4b16      	ldr	r3, [pc, #88]	@ (800b818 <UART_SetConfig+0x338>)
 800b7c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7c2:	f003 0307 	and.w	r3, r3, #7
 800b7c6:	2b05      	cmp	r3, #5
 800b7c8:	d838      	bhi.n	800b83c <UART_SetConfig+0x35c>
 800b7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d0 <UART_SetConfig+0x2f0>)
 800b7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d0:	0800b7e9 	.word	0x0800b7e9
 800b7d4:	0800b7f1 	.word	0x0800b7f1
 800b7d8:	0800b7f9 	.word	0x0800b7f9
 800b7dc:	0800b801 	.word	0x0800b801
 800b7e0:	0800b82d 	.word	0x0800b82d
 800b7e4:	0800b835 	.word	0x0800b835
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ee:	e14a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7f0:	2304      	movs	r3, #4
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f6:	e146      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7f8:	2308      	movs	r3, #8
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e142      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b800:	2310      	movs	r3, #16
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e13e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b808:	cfff69f3 	.word	0xcfff69f3
 800b80c:	58000c00 	.word	0x58000c00
 800b810:	11fff4ff 	.word	0x11fff4ff
 800b814:	40011000 	.word	0x40011000
 800b818:	58024400 	.word	0x58024400
 800b81c:	40004400 	.word	0x40004400
 800b820:	40004800 	.word	0x40004800
 800b824:	40004c00 	.word	0x40004c00
 800b828:	40005000 	.word	0x40005000
 800b82c:	2320      	movs	r3, #32
 800b82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b832:	e128      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b834:	2340      	movs	r3, #64	@ 0x40
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83a:	e124      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b83c:	2380      	movs	r3, #128	@ 0x80
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b842:	e120      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4acb      	ldr	r2, [pc, #812]	@ (800bb78 <UART_SetConfig+0x698>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d176      	bne.n	800b93c <UART_SetConfig+0x45c>
 800b84e:	4bcb      	ldr	r3, [pc, #812]	@ (800bb7c <UART_SetConfig+0x69c>)
 800b850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b852:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b856:	2b28      	cmp	r3, #40	@ 0x28
 800b858:	d86c      	bhi.n	800b934 <UART_SetConfig+0x454>
 800b85a:	a201      	add	r2, pc, #4	@ (adr r2, 800b860 <UART_SetConfig+0x380>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b905 	.word	0x0800b905
 800b864:	0800b935 	.word	0x0800b935
 800b868:	0800b935 	.word	0x0800b935
 800b86c:	0800b935 	.word	0x0800b935
 800b870:	0800b935 	.word	0x0800b935
 800b874:	0800b935 	.word	0x0800b935
 800b878:	0800b935 	.word	0x0800b935
 800b87c:	0800b935 	.word	0x0800b935
 800b880:	0800b90d 	.word	0x0800b90d
 800b884:	0800b935 	.word	0x0800b935
 800b888:	0800b935 	.word	0x0800b935
 800b88c:	0800b935 	.word	0x0800b935
 800b890:	0800b935 	.word	0x0800b935
 800b894:	0800b935 	.word	0x0800b935
 800b898:	0800b935 	.word	0x0800b935
 800b89c:	0800b935 	.word	0x0800b935
 800b8a0:	0800b915 	.word	0x0800b915
 800b8a4:	0800b935 	.word	0x0800b935
 800b8a8:	0800b935 	.word	0x0800b935
 800b8ac:	0800b935 	.word	0x0800b935
 800b8b0:	0800b935 	.word	0x0800b935
 800b8b4:	0800b935 	.word	0x0800b935
 800b8b8:	0800b935 	.word	0x0800b935
 800b8bc:	0800b935 	.word	0x0800b935
 800b8c0:	0800b91d 	.word	0x0800b91d
 800b8c4:	0800b935 	.word	0x0800b935
 800b8c8:	0800b935 	.word	0x0800b935
 800b8cc:	0800b935 	.word	0x0800b935
 800b8d0:	0800b935 	.word	0x0800b935
 800b8d4:	0800b935 	.word	0x0800b935
 800b8d8:	0800b935 	.word	0x0800b935
 800b8dc:	0800b935 	.word	0x0800b935
 800b8e0:	0800b925 	.word	0x0800b925
 800b8e4:	0800b935 	.word	0x0800b935
 800b8e8:	0800b935 	.word	0x0800b935
 800b8ec:	0800b935 	.word	0x0800b935
 800b8f0:	0800b935 	.word	0x0800b935
 800b8f4:	0800b935 	.word	0x0800b935
 800b8f8:	0800b935 	.word	0x0800b935
 800b8fc:	0800b935 	.word	0x0800b935
 800b900:	0800b92d 	.word	0x0800b92d
 800b904:	2301      	movs	r3, #1
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90a:	e0bc      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b90c:	2304      	movs	r3, #4
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b912:	e0b8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b914:	2308      	movs	r3, #8
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91a:	e0b4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b91c:	2310      	movs	r3, #16
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b922:	e0b0      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b924:	2320      	movs	r3, #32
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92a:	e0ac      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b92c:	2340      	movs	r3, #64	@ 0x40
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b932:	e0a8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b934:	2380      	movs	r3, #128	@ 0x80
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93a:	e0a4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a8f      	ldr	r2, [pc, #572]	@ (800bb80 <UART_SetConfig+0x6a0>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d130      	bne.n	800b9a8 <UART_SetConfig+0x4c8>
 800b946:	4b8d      	ldr	r3, [pc, #564]	@ (800bb7c <UART_SetConfig+0x69c>)
 800b948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	2b05      	cmp	r3, #5
 800b950:	d826      	bhi.n	800b9a0 <UART_SetConfig+0x4c0>
 800b952:	a201      	add	r2, pc, #4	@ (adr r2, 800b958 <UART_SetConfig+0x478>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b971 	.word	0x0800b971
 800b95c:	0800b979 	.word	0x0800b979
 800b960:	0800b981 	.word	0x0800b981
 800b964:	0800b989 	.word	0x0800b989
 800b968:	0800b991 	.word	0x0800b991
 800b96c:	0800b999 	.word	0x0800b999
 800b970:	2300      	movs	r3, #0
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e086      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b978:	2304      	movs	r3, #4
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e082      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b980:	2308      	movs	r3, #8
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b986:	e07e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b988:	2310      	movs	r3, #16
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e07a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b990:	2320      	movs	r3, #32
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b996:	e076      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b998:	2340      	movs	r3, #64	@ 0x40
 800b99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99e:	e072      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9a0:	2380      	movs	r3, #128	@ 0x80
 800b9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9a6:	e06e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a75      	ldr	r2, [pc, #468]	@ (800bb84 <UART_SetConfig+0x6a4>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d130      	bne.n	800ba14 <UART_SetConfig+0x534>
 800b9b2:	4b72      	ldr	r3, [pc, #456]	@ (800bb7c <UART_SetConfig+0x69c>)
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b05      	cmp	r3, #5
 800b9bc:	d826      	bhi.n	800ba0c <UART_SetConfig+0x52c>
 800b9be:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c4 <UART_SetConfig+0x4e4>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800b9dd 	.word	0x0800b9dd
 800b9c8:	0800b9e5 	.word	0x0800b9e5
 800b9cc:	0800b9ed 	.word	0x0800b9ed
 800b9d0:	0800b9f5 	.word	0x0800b9f5
 800b9d4:	0800b9fd 	.word	0x0800b9fd
 800b9d8:	0800ba05 	.word	0x0800ba05
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e050      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9e4:	2304      	movs	r3, #4
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ea:	e04c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9ec:	2308      	movs	r3, #8
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f2:	e048      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9f4:	2310      	movs	r3, #16
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e044      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9fc:	2320      	movs	r3, #32
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e040      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba04:	2340      	movs	r3, #64	@ 0x40
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0a:	e03c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba0c:	2380      	movs	r3, #128	@ 0x80
 800ba0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba12:	e038      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a5b      	ldr	r2, [pc, #364]	@ (800bb88 <UART_SetConfig+0x6a8>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d130      	bne.n	800ba80 <UART_SetConfig+0x5a0>
 800ba1e:	4b57      	ldr	r3, [pc, #348]	@ (800bb7c <UART_SetConfig+0x69c>)
 800ba20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba22:	f003 0307 	and.w	r3, r3, #7
 800ba26:	2b05      	cmp	r3, #5
 800ba28:	d826      	bhi.n	800ba78 <UART_SetConfig+0x598>
 800ba2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba30 <UART_SetConfig+0x550>)
 800ba2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba30:	0800ba49 	.word	0x0800ba49
 800ba34:	0800ba51 	.word	0x0800ba51
 800ba38:	0800ba59 	.word	0x0800ba59
 800ba3c:	0800ba61 	.word	0x0800ba61
 800ba40:	0800ba69 	.word	0x0800ba69
 800ba44:	0800ba71 	.word	0x0800ba71
 800ba48:	2302      	movs	r3, #2
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4e:	e01a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba50:	2304      	movs	r3, #4
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba56:	e016      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba58:	2308      	movs	r3, #8
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5e:	e012      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba60:	2310      	movs	r3, #16
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e00e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba68:	2320      	movs	r3, #32
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e00a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba70:	2340      	movs	r3, #64	@ 0x40
 800ba72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba76:	e006      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba78:	2380      	movs	r3, #128	@ 0x80
 800ba7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba7e:	e002      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba80:	2380      	movs	r3, #128	@ 0x80
 800ba82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a3f      	ldr	r2, [pc, #252]	@ (800bb88 <UART_SetConfig+0x6a8>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	f040 80f8 	bne.w	800bc82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ba92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	dc46      	bgt.n	800bb28 <UART_SetConfig+0x648>
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	f2c0 8082 	blt.w	800bba4 <UART_SetConfig+0x6c4>
 800baa0:	3b02      	subs	r3, #2
 800baa2:	2b1e      	cmp	r3, #30
 800baa4:	d87e      	bhi.n	800bba4 <UART_SetConfig+0x6c4>
 800baa6:	a201      	add	r2, pc, #4	@ (adr r2, 800baac <UART_SetConfig+0x5cc>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb2f 	.word	0x0800bb2f
 800bab0:	0800bba5 	.word	0x0800bba5
 800bab4:	0800bb37 	.word	0x0800bb37
 800bab8:	0800bba5 	.word	0x0800bba5
 800babc:	0800bba5 	.word	0x0800bba5
 800bac0:	0800bba5 	.word	0x0800bba5
 800bac4:	0800bb47 	.word	0x0800bb47
 800bac8:	0800bba5 	.word	0x0800bba5
 800bacc:	0800bba5 	.word	0x0800bba5
 800bad0:	0800bba5 	.word	0x0800bba5
 800bad4:	0800bba5 	.word	0x0800bba5
 800bad8:	0800bba5 	.word	0x0800bba5
 800badc:	0800bba5 	.word	0x0800bba5
 800bae0:	0800bba5 	.word	0x0800bba5
 800bae4:	0800bb57 	.word	0x0800bb57
 800bae8:	0800bba5 	.word	0x0800bba5
 800baec:	0800bba5 	.word	0x0800bba5
 800baf0:	0800bba5 	.word	0x0800bba5
 800baf4:	0800bba5 	.word	0x0800bba5
 800baf8:	0800bba5 	.word	0x0800bba5
 800bafc:	0800bba5 	.word	0x0800bba5
 800bb00:	0800bba5 	.word	0x0800bba5
 800bb04:	0800bba5 	.word	0x0800bba5
 800bb08:	0800bba5 	.word	0x0800bba5
 800bb0c:	0800bba5 	.word	0x0800bba5
 800bb10:	0800bba5 	.word	0x0800bba5
 800bb14:	0800bba5 	.word	0x0800bba5
 800bb18:	0800bba5 	.word	0x0800bba5
 800bb1c:	0800bba5 	.word	0x0800bba5
 800bb20:	0800bba5 	.word	0x0800bba5
 800bb24:	0800bb97 	.word	0x0800bb97
 800bb28:	2b40      	cmp	r3, #64	@ 0x40
 800bb2a:	d037      	beq.n	800bb9c <UART_SetConfig+0x6bc>
 800bb2c:	e03a      	b.n	800bba4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bb2e:	f7fd ff9b 	bl	8009a68 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb34:	e03c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fd ffaa 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb44:	e034      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb46:	f107 0318 	add.w	r3, r7, #24
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe f8f6 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb54:	e02c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb56:	4b09      	ldr	r3, [pc, #36]	@ (800bb7c <UART_SetConfig+0x69c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d016      	beq.n	800bb90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb62:	4b06      	ldr	r3, [pc, #24]	@ (800bb7c <UART_SetConfig+0x69c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	08db      	lsrs	r3, r3, #3
 800bb68:	f003 0303 	and.w	r3, r3, #3
 800bb6c:	4a07      	ldr	r2, [pc, #28]	@ (800bb8c <UART_SetConfig+0x6ac>)
 800bb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb74:	e01c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
 800bb76:	bf00      	nop
 800bb78:	40011400 	.word	0x40011400
 800bb7c:	58024400 	.word	0x58024400
 800bb80:	40007800 	.word	0x40007800
 800bb84:	40007c00 	.word	0x40007c00
 800bb88:	58000c00 	.word	0x58000c00
 800bb8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bb90:	4b9d      	ldr	r3, [pc, #628]	@ (800be08 <UART_SetConfig+0x928>)
 800bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb94:	e00c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb96:	4b9d      	ldr	r3, [pc, #628]	@ (800be0c <UART_SetConfig+0x92c>)
 800bb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb9a:	e009      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bba2:	e005      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bba4:	2300      	movs	r3, #0
 800bba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bbae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 81de 	beq.w	800bf74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbbc:	4a94      	ldr	r2, [pc, #592]	@ (800be10 <UART_SetConfig+0x930>)
 800bbbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	4413      	add	r3, r2
 800bbd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d305      	bcc.n	800bbe8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d903      	bls.n	800bbf0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbee:	e1c1      	b.n	800bf74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	60bb      	str	r3, [r7, #8]
 800bbf6:	60fa      	str	r2, [r7, #12]
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbfc:	4a84      	ldr	r2, [pc, #528]	@ (800be10 <UART_SetConfig+0x930>)
 800bbfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	2200      	movs	r2, #0
 800bc06:	603b      	str	r3, [r7, #0]
 800bc08:	607a      	str	r2, [r7, #4]
 800bc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc12:	f7f4 fbbd 	bl	8000390 <__aeabi_uldivmod>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f04f 0200 	mov.w	r2, #0
 800bc22:	f04f 0300 	mov.w	r3, #0
 800bc26:	020b      	lsls	r3, r1, #8
 800bc28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc2c:	0202      	lsls	r2, r0, #8
 800bc2e:	6979      	ldr	r1, [r7, #20]
 800bc30:	6849      	ldr	r1, [r1, #4]
 800bc32:	0849      	lsrs	r1, r1, #1
 800bc34:	2000      	movs	r0, #0
 800bc36:	460c      	mov	r4, r1
 800bc38:	4605      	mov	r5, r0
 800bc3a:	eb12 0804 	adds.w	r8, r2, r4
 800bc3e:	eb43 0905 	adc.w	r9, r3, r5
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	469a      	mov	sl, r3
 800bc4a:	4693      	mov	fp, r2
 800bc4c:	4652      	mov	r2, sl
 800bc4e:	465b      	mov	r3, fp
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fb9c 	bl	8000390 <__aeabi_uldivmod>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc66:	d308      	bcc.n	800bc7a <UART_SetConfig+0x79a>
 800bc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc6e:	d204      	bcs.n	800bc7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc76:	60da      	str	r2, [r3, #12]
 800bc78:	e17c      	b.n	800bf74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bc80:	e178      	b.n	800bf74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc8a:	f040 80c5 	bne.w	800be18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bc8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc92:	2b20      	cmp	r3, #32
 800bc94:	dc48      	bgt.n	800bd28 <UART_SetConfig+0x848>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	db7b      	blt.n	800bd92 <UART_SetConfig+0x8b2>
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	d879      	bhi.n	800bd92 <UART_SetConfig+0x8b2>
 800bc9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bca4 <UART_SetConfig+0x7c4>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bd2f 	.word	0x0800bd2f
 800bca8:	0800bd37 	.word	0x0800bd37
 800bcac:	0800bd93 	.word	0x0800bd93
 800bcb0:	0800bd93 	.word	0x0800bd93
 800bcb4:	0800bd3f 	.word	0x0800bd3f
 800bcb8:	0800bd93 	.word	0x0800bd93
 800bcbc:	0800bd93 	.word	0x0800bd93
 800bcc0:	0800bd93 	.word	0x0800bd93
 800bcc4:	0800bd4f 	.word	0x0800bd4f
 800bcc8:	0800bd93 	.word	0x0800bd93
 800bccc:	0800bd93 	.word	0x0800bd93
 800bcd0:	0800bd93 	.word	0x0800bd93
 800bcd4:	0800bd93 	.word	0x0800bd93
 800bcd8:	0800bd93 	.word	0x0800bd93
 800bcdc:	0800bd93 	.word	0x0800bd93
 800bce0:	0800bd93 	.word	0x0800bd93
 800bce4:	0800bd5f 	.word	0x0800bd5f
 800bce8:	0800bd93 	.word	0x0800bd93
 800bcec:	0800bd93 	.word	0x0800bd93
 800bcf0:	0800bd93 	.word	0x0800bd93
 800bcf4:	0800bd93 	.word	0x0800bd93
 800bcf8:	0800bd93 	.word	0x0800bd93
 800bcfc:	0800bd93 	.word	0x0800bd93
 800bd00:	0800bd93 	.word	0x0800bd93
 800bd04:	0800bd93 	.word	0x0800bd93
 800bd08:	0800bd93 	.word	0x0800bd93
 800bd0c:	0800bd93 	.word	0x0800bd93
 800bd10:	0800bd93 	.word	0x0800bd93
 800bd14:	0800bd93 	.word	0x0800bd93
 800bd18:	0800bd93 	.word	0x0800bd93
 800bd1c:	0800bd93 	.word	0x0800bd93
 800bd20:	0800bd93 	.word	0x0800bd93
 800bd24:	0800bd85 	.word	0x0800bd85
 800bd28:	2b40      	cmp	r3, #64	@ 0x40
 800bd2a:	d02e      	beq.n	800bd8a <UART_SetConfig+0x8aa>
 800bd2c:	e031      	b.n	800bd92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd2e:	f7fb fea3 	bl	8007a78 <HAL_RCC_GetPCLK1Freq>
 800bd32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd34:	e033      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd36:	f7fb feb5 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 800bd3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd3c:	e02f      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd fea6 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4c:	e027      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd4e:	f107 0318 	add.w	r3, r7, #24
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd fff2 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd5c:	e01f      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd5e:	4b2d      	ldr	r3, [pc, #180]	@ (800be14 <UART_SetConfig+0x934>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d009      	beq.n	800bd7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd6a:	4b2a      	ldr	r3, [pc, #168]	@ (800be14 <UART_SetConfig+0x934>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	08db      	lsrs	r3, r3, #3
 800bd70:	f003 0303 	and.w	r3, r3, #3
 800bd74:	4a24      	ldr	r2, [pc, #144]	@ (800be08 <UART_SetConfig+0x928>)
 800bd76:	fa22 f303 	lsr.w	r3, r2, r3
 800bd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd7c:	e00f      	b.n	800bd9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bd7e:	4b22      	ldr	r3, [pc, #136]	@ (800be08 <UART_SetConfig+0x928>)
 800bd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd82:	e00c      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd84:	4b21      	ldr	r3, [pc, #132]	@ (800be0c <UART_SetConfig+0x92c>)
 800bd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd88:	e009      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd90:	e005      	b.n	800bd9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80e7 	beq.w	800bf74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdaa:	4a19      	ldr	r2, [pc, #100]	@ (800be10 <UART_SetConfig+0x930>)
 800bdac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb8:	005a      	lsls	r2, r3, #1
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	441a      	add	r2, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdce:	2b0f      	cmp	r3, #15
 800bdd0:	d916      	bls.n	800be00 <UART_SetConfig+0x920>
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdd8:	d212      	bcs.n	800be00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	f023 030f 	bic.w	r3, r3, #15
 800bde2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	f003 0307 	and.w	r3, r3, #7
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bdfc:	60da      	str	r2, [r3, #12]
 800bdfe:	e0b9      	b.n	800bf74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800be06:	e0b5      	b.n	800bf74 <UART_SetConfig+0xa94>
 800be08:	03d09000 	.word	0x03d09000
 800be0c:	003d0900 	.word	0x003d0900
 800be10:	0800febc 	.word	0x0800febc
 800be14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800be18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be1c:	2b20      	cmp	r3, #32
 800be1e:	dc49      	bgt.n	800beb4 <UART_SetConfig+0x9d4>
 800be20:	2b00      	cmp	r3, #0
 800be22:	db7c      	blt.n	800bf1e <UART_SetConfig+0xa3e>
 800be24:	2b20      	cmp	r3, #32
 800be26:	d87a      	bhi.n	800bf1e <UART_SetConfig+0xa3e>
 800be28:	a201      	add	r2, pc, #4	@ (adr r2, 800be30 <UART_SetConfig+0x950>)
 800be2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2e:	bf00      	nop
 800be30:	0800bebb 	.word	0x0800bebb
 800be34:	0800bec3 	.word	0x0800bec3
 800be38:	0800bf1f 	.word	0x0800bf1f
 800be3c:	0800bf1f 	.word	0x0800bf1f
 800be40:	0800becb 	.word	0x0800becb
 800be44:	0800bf1f 	.word	0x0800bf1f
 800be48:	0800bf1f 	.word	0x0800bf1f
 800be4c:	0800bf1f 	.word	0x0800bf1f
 800be50:	0800bedb 	.word	0x0800bedb
 800be54:	0800bf1f 	.word	0x0800bf1f
 800be58:	0800bf1f 	.word	0x0800bf1f
 800be5c:	0800bf1f 	.word	0x0800bf1f
 800be60:	0800bf1f 	.word	0x0800bf1f
 800be64:	0800bf1f 	.word	0x0800bf1f
 800be68:	0800bf1f 	.word	0x0800bf1f
 800be6c:	0800bf1f 	.word	0x0800bf1f
 800be70:	0800beeb 	.word	0x0800beeb
 800be74:	0800bf1f 	.word	0x0800bf1f
 800be78:	0800bf1f 	.word	0x0800bf1f
 800be7c:	0800bf1f 	.word	0x0800bf1f
 800be80:	0800bf1f 	.word	0x0800bf1f
 800be84:	0800bf1f 	.word	0x0800bf1f
 800be88:	0800bf1f 	.word	0x0800bf1f
 800be8c:	0800bf1f 	.word	0x0800bf1f
 800be90:	0800bf1f 	.word	0x0800bf1f
 800be94:	0800bf1f 	.word	0x0800bf1f
 800be98:	0800bf1f 	.word	0x0800bf1f
 800be9c:	0800bf1f 	.word	0x0800bf1f
 800bea0:	0800bf1f 	.word	0x0800bf1f
 800bea4:	0800bf1f 	.word	0x0800bf1f
 800bea8:	0800bf1f 	.word	0x0800bf1f
 800beac:	0800bf1f 	.word	0x0800bf1f
 800beb0:	0800bf11 	.word	0x0800bf11
 800beb4:	2b40      	cmp	r3, #64	@ 0x40
 800beb6:	d02e      	beq.n	800bf16 <UART_SetConfig+0xa36>
 800beb8:	e031      	b.n	800bf1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800beba:	f7fb fddd 	bl	8007a78 <HAL_RCC_GetPCLK1Freq>
 800bebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bec0:	e033      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bec2:	f7fb fdef 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 800bec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bec8:	e02f      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fd fde0 	bl	8009a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bed8:	e027      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beda:	f107 0318 	add.w	r3, r7, #24
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fd ff2c 	bl	8009d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bee8:	e01f      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beea:	4b2d      	ldr	r3, [pc, #180]	@ (800bfa0 <UART_SetConfig+0xac0>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d009      	beq.n	800bf0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bef6:	4b2a      	ldr	r3, [pc, #168]	@ (800bfa0 <UART_SetConfig+0xac0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	08db      	lsrs	r3, r3, #3
 800befc:	f003 0303 	and.w	r3, r3, #3
 800bf00:	4a28      	ldr	r2, [pc, #160]	@ (800bfa4 <UART_SetConfig+0xac4>)
 800bf02:	fa22 f303 	lsr.w	r3, r2, r3
 800bf06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf08:	e00f      	b.n	800bf2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bf0a:	4b26      	ldr	r3, [pc, #152]	@ (800bfa4 <UART_SetConfig+0xac4>)
 800bf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf0e:	e00c      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf10:	4b25      	ldr	r3, [pc, #148]	@ (800bfa8 <UART_SetConfig+0xac8>)
 800bf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf14:	e009      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf1c:	e005      	b.n	800bf2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bf28:	bf00      	nop
    }

    if (pclk != 0U)
 800bf2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d021      	beq.n	800bf74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf34:	4a1d      	ldr	r2, [pc, #116]	@ (800bfac <UART_SetConfig+0xacc>)
 800bf36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	085b      	lsrs	r3, r3, #1
 800bf48:	441a      	add	r2, r3
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf56:	2b0f      	cmp	r3, #15
 800bf58:	d909      	bls.n	800bf6e <UART_SetConfig+0xa8e>
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf60:	d205      	bcs.n	800bf6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60da      	str	r2, [r3, #12]
 800bf6c:	e002      	b.n	800bf74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2200      	movs	r2, #0
 800bf88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bf90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3748      	adds	r7, #72	@ 0x48
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf9e:	bf00      	nop
 800bfa0:	58024400 	.word	0x58024400
 800bfa4:	03d09000 	.word	0x03d09000
 800bfa8:	003d0900 	.word	0x003d0900
 800bfac:	0800febc 	.word	0x0800febc

0800bfb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbc:	f003 0308 	and.w	r3, r3, #8
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00a      	beq.n	800bfda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00a      	beq.n	800bffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	430a      	orrs	r2, r1
 800bffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c000:	f003 0302 	and.w	r3, r3, #2
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00a      	beq.n	800c01e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c022:	f003 0304 	and.w	r3, r3, #4
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	430a      	orrs	r2, r1
 800c03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c044:	f003 0310 	and.w	r3, r3, #16
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00a      	beq.n	800c062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c066:	f003 0320 	and.w	r3, r3, #32
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	430a      	orrs	r2, r1
 800c082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d01a      	beq.n	800c0c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	430a      	orrs	r2, r1
 800c0a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0ae:	d10a      	bne.n	800c0c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00a      	beq.n	800c0e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	605a      	str	r2, [r3, #4]
  }
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b098      	sub	sp, #96	@ 0x60
 800c0f8:	af02      	add	r7, sp, #8
 800c0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c104:	f7f5 fb9e 	bl	8001844 <HAL_GetTick>
 800c108:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0308 	and.w	r3, r3, #8
 800c114:	2b08      	cmp	r3, #8
 800c116:	d12f      	bne.n	800c178 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c120:	2200      	movs	r2, #0
 800c122:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f88e 	bl	800c248 <UART_WaitOnFlagUntilTimeout>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d022      	beq.n	800c178 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13a:	e853 3f00 	ldrex	r3, [r3]
 800c13e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c146:	653b      	str	r3, [r7, #80]	@ 0x50
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	461a      	mov	r2, r3
 800c14e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c150:	647b      	str	r3, [r7, #68]	@ 0x44
 800c152:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c158:	e841 2300 	strex	r3, r2, [r1]
 800c15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1e6      	bne.n	800c132 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2220      	movs	r2, #32
 800c168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c174:	2303      	movs	r3, #3
 800c176:	e063      	b.n	800c240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b04      	cmp	r3, #4
 800c184:	d149      	bne.n	800c21a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c186:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c18e:	2200      	movs	r2, #0
 800c190:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f857 	bl	800c248 <UART_WaitOnFlagUntilTimeout>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d03c      	beq.n	800c21a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a8:	e853 3f00 	ldrex	r3, [r3]
 800c1ac:	623b      	str	r3, [r7, #32]
   return(result);
 800c1ae:	6a3b      	ldr	r3, [r7, #32]
 800c1b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1be:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1c6:	e841 2300 	strex	r3, r2, [r1]
 800c1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1e6      	bne.n	800c1a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f023 0301 	bic.w	r3, r3, #1
 800c1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1f2:	61fa      	str	r2, [r7, #28]
 800c1f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f6:	69b9      	ldr	r1, [r7, #24]
 800c1f8:	69fa      	ldr	r2, [r7, #28]
 800c1fa:	e841 2300 	strex	r3, r2, [r1]
 800c1fe:	617b      	str	r3, [r7, #20]
   return(result);
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1e5      	bne.n	800c1d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2220      	movs	r2, #32
 800c20a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e012      	b.n	800c240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2220      	movs	r2, #32
 800c21e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2220      	movs	r2, #32
 800c226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3758      	adds	r7, #88	@ 0x58
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	603b      	str	r3, [r7, #0]
 800c254:	4613      	mov	r3, r2
 800c256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c258:	e04f      	b.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d04b      	beq.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c262:	f7f5 faef 	bl	8001844 <HAL_GetTick>
 800c266:	4602      	mov	r2, r0
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	69ba      	ldr	r2, [r7, #24]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d302      	bcc.n	800c278 <UART_WaitOnFlagUntilTimeout+0x30>
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c278:	2303      	movs	r3, #3
 800c27a:	e04e      	b.n	800c31a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 0304 	and.w	r3, r3, #4
 800c286:	2b00      	cmp	r3, #0
 800c288:	d037      	beq.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b80      	cmp	r3, #128	@ 0x80
 800c28e:	d034      	beq.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2b40      	cmp	r3, #64	@ 0x40
 800c294:	d031      	beq.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	69db      	ldr	r3, [r3, #28]
 800c29c:	f003 0308 	and.w	r3, r3, #8
 800c2a0:	2b08      	cmp	r3, #8
 800c2a2:	d110      	bne.n	800c2c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2208      	movs	r2, #8
 800c2aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 f95b 	bl	800c568 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2208      	movs	r2, #8
 800c2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e029      	b.n	800c31a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	69db      	ldr	r3, [r3, #28]
 800c2cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2d4:	d111      	bne.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 f941 	bl	800c568 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e00f      	b.n	800c31a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	69da      	ldr	r2, [r3, #28]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	4013      	ands	r3, r2
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	429a      	cmp	r2, r3
 800c308:	bf0c      	ite	eq
 800c30a:	2301      	moveq	r3, #1
 800c30c:	2300      	movne	r3, #0
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	461a      	mov	r2, r3
 800c312:	79fb      	ldrb	r3, [r7, #7]
 800c314:	429a      	cmp	r2, r3
 800c316:	d0a0      	beq.n	800c25a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c324:	b480      	push	{r7}
 800c326:	b0a3      	sub	sp, #140	@ 0x8c
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	4613      	mov	r3, r2
 800c330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	88fa      	ldrh	r2, [r7, #6]
 800c33c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	88fa      	ldrh	r2, [r7, #6]
 800c344:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c356:	d10e      	bne.n	800c376 <UART_Start_Receive_IT+0x52>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d105      	bne.n	800c36c <UART_Start_Receive_IT+0x48>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c366:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c36a:	e02d      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	22ff      	movs	r2, #255	@ 0xff
 800c370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c374:	e028      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10d      	bne.n	800c39a <UART_Start_Receive_IT+0x76>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d104      	bne.n	800c390 <UART_Start_Receive_IT+0x6c>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	22ff      	movs	r2, #255	@ 0xff
 800c38a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c38e:	e01b      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	227f      	movs	r2, #127	@ 0x7f
 800c394:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c398:	e016      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3a2:	d10d      	bne.n	800c3c0 <UART_Start_Receive_IT+0x9c>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d104      	bne.n	800c3b6 <UART_Start_Receive_IT+0x92>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	227f      	movs	r2, #127	@ 0x7f
 800c3b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c3b4:	e008      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	223f      	movs	r2, #63	@ 0x3f
 800c3ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c3be:	e003      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2222      	movs	r2, #34	@ 0x22
 800c3d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c3e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c3fc:	673a      	str	r2, [r7, #112]	@ 0x70
 800c3fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c402:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c40a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e3      	bne.n	800c3d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c418:	d14f      	bne.n	800c4ba <UART_Start_Receive_IT+0x196>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c420:	88fa      	ldrh	r2, [r7, #6]
 800c422:	429a      	cmp	r2, r3
 800c424:	d349      	bcc.n	800c4ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c42e:	d107      	bne.n	800c440 <UART_Start_Receive_IT+0x11c>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d103      	bne.n	800c440 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4a47      	ldr	r2, [pc, #284]	@ (800c558 <UART_Start_Receive_IT+0x234>)
 800c43c:	675a      	str	r2, [r3, #116]	@ 0x74
 800c43e:	e002      	b.n	800c446 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	4a46      	ldr	r2, [pc, #280]	@ (800c55c <UART_Start_Receive_IT+0x238>)
 800c444:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d01a      	beq.n	800c484 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c456:	e853 3f00 	ldrex	r3, [r3]
 800c45a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c45c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c45e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c462:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	461a      	mov	r2, r3
 800c46c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c472:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c476:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c47e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e4      	bne.n	800c44e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3308      	adds	r3, #8
 800c48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c49a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c4a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c4a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c4aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c4b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e5      	bne.n	800c484 <UART_Start_Receive_IT+0x160>
 800c4b8:	e046      	b.n	800c548 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4c2:	d107      	bne.n	800c4d4 <UART_Start_Receive_IT+0x1b0>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4a24      	ldr	r2, [pc, #144]	@ (800c560 <UART_Start_Receive_IT+0x23c>)
 800c4d0:	675a      	str	r2, [r3, #116]	@ 0x74
 800c4d2:	e002      	b.n	800c4da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	4a23      	ldr	r2, [pc, #140]	@ (800c564 <UART_Start_Receive_IT+0x240>)
 800c4d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d019      	beq.n	800c516 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ea:	e853 3f00 	ldrex	r3, [r3]
 800c4ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c4f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c500:	637b      	str	r3, [r7, #52]	@ 0x34
 800c502:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c504:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c508:	e841 2300 	strex	r3, r2, [r1]
 800c50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e6      	bne.n	800c4e2 <UART_Start_Receive_IT+0x1be>
 800c514:	e018      	b.n	800c548 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	613b      	str	r3, [r7, #16]
   return(result);
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f043 0320 	orr.w	r3, r3, #32
 800c52a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c534:	623b      	str	r3, [r7, #32]
 800c536:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	69f9      	ldr	r1, [r7, #28]
 800c53a:	6a3a      	ldr	r2, [r7, #32]
 800c53c:	e841 2300 	strex	r3, r2, [r1]
 800c540:	61bb      	str	r3, [r7, #24]
   return(result);
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e6      	bne.n	800c516 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	378c      	adds	r7, #140	@ 0x8c
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	0800cd89 	.word	0x0800cd89
 800c55c:	0800ca29 	.word	0x0800ca29
 800c560:	0800c871 	.word	0x0800c871
 800c564:	0800c6b9 	.word	0x0800c6b9

0800c568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c568:	b480      	push	{r7}
 800c56a:	b095      	sub	sp, #84	@ 0x54
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c58e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c590:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e6      	bne.n	800c570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	e853 3f00 	ldrex	r3, [r3]
 800c5b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5b2:	69fa      	ldr	r2, [r7, #28]
 800c5b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c630 <UART_EndRxTransfer+0xc8>)
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c5c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5ca:	e841 2300 	strex	r3, r2, [r1]
 800c5ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e5      	bne.n	800c5a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d118      	bne.n	800c610 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	e853 3f00 	ldrex	r3, [r3]
 800c5ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	f023 0310 	bic.w	r3, r3, #16
 800c5f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5fc:	61bb      	str	r3, [r7, #24]
 800c5fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c600:	6979      	ldr	r1, [r7, #20]
 800c602:	69ba      	ldr	r2, [r7, #24]
 800c604:	e841 2300 	strex	r3, r2, [r1]
 800c608:	613b      	str	r3, [r7, #16]
   return(result);
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1e6      	bne.n	800c5de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2220      	movs	r2, #32
 800c614:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c624:	bf00      	nop
 800c626:	3754      	adds	r7, #84	@ 0x54
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	effffffe 	.word	0xeffffffe

0800c634 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c640:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f7fe ff2e 	bl	800b4b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c658:	bf00      	nop
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	e853 3f00 	ldrex	r3, [r3]
 800c674:	60bb      	str	r3, [r7, #8]
   return(result);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c67c:	61fb      	str	r3, [r7, #28]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	61bb      	str	r3, [r7, #24]
 800c688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	6979      	ldr	r1, [r7, #20]
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	613b      	str	r3, [r7, #16]
   return(result);
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e6      	bne.n	800c668 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2220      	movs	r2, #32
 800c69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7f4 fb6f 	bl	8000d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ae:	bf00      	nop
 800c6b0:	3720      	adds	r7, #32
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b09c      	sub	sp, #112	@ 0x70
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6d0:	2b22      	cmp	r3, #34	@ 0x22
 800c6d2:	f040 80be 	bne.w	800c852 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6e4:	b2d9      	uxtb	r1, r3
 800c6e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6f0:	400a      	ands	r2, r1
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6fa:	1c5a      	adds	r2, r3, #1
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c706:	b29b      	uxth	r3, r3
 800c708:	3b01      	subs	r3, #1
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c718:	b29b      	uxth	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f040 80a1 	bne.w	800c862 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c728:	e853 3f00 	ldrex	r3, [r3]
 800c72c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c72e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c734:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c73e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c740:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c74c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1e6      	bne.n	800c720 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3308      	adds	r3, #8
 800c758:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c764:	f023 0301 	bic.w	r3, r3, #1
 800c768:	667b      	str	r3, [r7, #100]	@ 0x64
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3308      	adds	r3, #8
 800c770:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c772:	647a      	str	r2, [r7, #68]	@ 0x44
 800c774:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e5      	bne.n	800c752 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2220      	movs	r2, #32
 800c78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a33      	ldr	r2, [pc, #204]	@ (800c86c <UART_RxISR_8BIT+0x1b4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d01f      	beq.n	800c7e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d018      	beq.n	800c7e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ba:	e853 3f00 	ldrex	r3, [r3]
 800c7be:	623b      	str	r3, [r7, #32]
   return(result);
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c7c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7d8:	e841 2300 	strex	r3, r2, [r1]
 800c7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1e6      	bne.n	800c7b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d12e      	bne.n	800c84a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	e853 3f00 	ldrex	r3, [r3]
 800c7fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f023 0310 	bic.w	r3, r3, #16
 800c806:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c810:	61fb      	str	r3, [r7, #28]
 800c812:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c814:	69b9      	ldr	r1, [r7, #24]
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	e841 2300 	strex	r3, r2, [r1]
 800c81c:	617b      	str	r3, [r7, #20]
   return(result);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1e6      	bne.n	800c7f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	f003 0310 	and.w	r3, r3, #16
 800c82e:	2b10      	cmp	r3, #16
 800c830:	d103      	bne.n	800c83a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2210      	movs	r2, #16
 800c838:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7fe fe40 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c848:	e00b      	b.n	800c862 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7f4 faae 	bl	8000dac <HAL_UART_RxCpltCallback>
}
 800c850:	e007      	b.n	800c862 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	699a      	ldr	r2, [r3, #24]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0208 	orr.w	r2, r2, #8
 800c860:	619a      	str	r2, [r3, #24]
}
 800c862:	bf00      	nop
 800c864:	3770      	adds	r7, #112	@ 0x70
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	58000c00 	.word	0x58000c00

0800c870 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b09c      	sub	sp, #112	@ 0x70
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c87e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c888:	2b22      	cmp	r3, #34	@ 0x22
 800c88a:	f040 80be 	bne.w	800ca0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c894:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c89c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c89e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c8a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b2:	1c9a      	adds	r2, r3, #2
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f040 80a1 	bne.w	800ca1a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8e0:	e853 3f00 	ldrex	r3, [r3]
 800c8e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c8fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c8fe:	e841 2300 	strex	r3, r2, [r1]
 800c902:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1e6      	bne.n	800c8d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3308      	adds	r3, #8
 800c910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c914:	e853 3f00 	ldrex	r3, [r3]
 800c918:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91c:	f023 0301 	bic.w	r3, r3, #1
 800c920:	663b      	str	r3, [r7, #96]	@ 0x60
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3308      	adds	r3, #8
 800c928:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c92a:	643a      	str	r2, [r7, #64]	@ 0x40
 800c92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c932:	e841 2300 	strex	r3, r2, [r1]
 800c936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1e5      	bne.n	800c90a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2220      	movs	r2, #32
 800c942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a33      	ldr	r2, [pc, #204]	@ (800ca24 <UART_RxISR_16BIT+0x1b4>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d01f      	beq.n	800c99c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c966:	2b00      	cmp	r3, #0
 800c968:	d018      	beq.n	800c99c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c970:	6a3b      	ldr	r3, [r7, #32]
 800c972:	e853 3f00 	ldrex	r3, [r3]
 800c976:	61fb      	str	r3, [r7, #28]
   return(result);
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c97e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	461a      	mov	r2, r3
 800c986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c98a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c98e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c990:	e841 2300 	strex	r3, r2, [r1]
 800c994:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1e6      	bne.n	800c96a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d12e      	bne.n	800ca02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	e853 3f00 	ldrex	r3, [r3]
 800c9b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f023 0310 	bic.w	r3, r3, #16
 800c9be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9c8:	61bb      	str	r3, [r7, #24]
 800c9ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9cc:	6979      	ldr	r1, [r7, #20]
 800c9ce:	69ba      	ldr	r2, [r7, #24]
 800c9d0:	e841 2300 	strex	r3, r2, [r1]
 800c9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e6      	bne.n	800c9aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	69db      	ldr	r3, [r3, #28]
 800c9e2:	f003 0310 	and.w	r3, r3, #16
 800c9e6:	2b10      	cmp	r3, #16
 800c9e8:	d103      	bne.n	800c9f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2210      	movs	r2, #16
 800c9f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7fe fd64 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca00:	e00b      	b.n	800ca1a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7f4 f9d2 	bl	8000dac <HAL_UART_RxCpltCallback>
}
 800ca08:	e007      	b.n	800ca1a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	699a      	ldr	r2, [r3, #24]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f042 0208 	orr.w	r2, r2, #8
 800ca18:	619a      	str	r2, [r3, #24]
}
 800ca1a:	bf00      	nop
 800ca1c:	3770      	adds	r7, #112	@ 0x70
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	58000c00 	.word	0x58000c00

0800ca28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b0ac      	sub	sp, #176	@ 0xb0
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ca36:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69db      	ldr	r3, [r3, #28]
 800ca40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca5e:	2b22      	cmp	r3, #34	@ 0x22
 800ca60:	f040 8180 	bne.w	800cd64 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ca6a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca6e:	e123      	b.n	800ccb8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca76:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ca7e:	b2d9      	uxtb	r1, r3
 800ca80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca8a:	400a      	ands	r2, r1
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	3b01      	subs	r3, #1
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	69db      	ldr	r3, [r3, #28]
 800cab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caba:	f003 0307 	and.w	r3, r3, #7
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d053      	beq.n	800cb6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d011      	beq.n	800caf2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00b      	beq.n	800caf2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2201      	movs	r2, #1
 800cae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cae8:	f043 0201 	orr.w	r2, r3, #1
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d011      	beq.n	800cb22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cafe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00b      	beq.n	800cb22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb18:	f043 0204 	orr.w	r2, r3, #4
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb26:	f003 0304 	and.w	r3, r3, #4
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d011      	beq.n	800cb52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cb2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb32:	f003 0301 	and.w	r3, r3, #1
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00b      	beq.n	800cb52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2204      	movs	r2, #4
 800cb40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb48:	f043 0202 	orr.w	r2, r3, #2
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d006      	beq.n	800cb6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7fe fca9 	bl	800b4b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f040 80a0 	bne.w	800ccb8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb80:	e853 3f00 	ldrex	r3, [r3]
 800cb84:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cb86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb9c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cba0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cba2:	e841 2300 	strex	r3, r2, [r1]
 800cba6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cba8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1e4      	bne.n	800cb78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbb8:	e853 3f00 	ldrex	r3, [r3]
 800cbbc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cbbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbc0:	4b6e      	ldr	r3, [pc, #440]	@ (800cd7c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3308      	adds	r3, #8
 800cbce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cbd2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cbd4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cbd8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbda:	e841 2300 	strex	r3, r2, [r1]
 800cbde:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cbe0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1e3      	bne.n	800cbae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a60      	ldr	r2, [pc, #384]	@ (800cd80 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d021      	beq.n	800cc48 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01a      	beq.n	800cc48 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc1a:	e853 3f00 	ldrex	r3, [r3]
 800cc1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cc20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cc26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cc34:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc36:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc3c:	e841 2300 	strex	r3, r2, [r1]
 800cc40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cc42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1e4      	bne.n	800cc12 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d130      	bne.n	800ccb2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc66:	f023 0310 	bic.w	r3, r3, #16
 800cc6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	461a      	mov	r2, r3
 800cc74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc78:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e4      	bne.n	800cc56 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	f003 0310 	and.w	r3, r3, #16
 800cc96:	2b10      	cmp	r3, #16
 800cc98:	d103      	bne.n	800cca2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2210      	movs	r2, #16
 800cca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7fe fc0c 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
 800ccb0:	e002      	b.n	800ccb8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7f4 f87a 	bl	8000dac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ccb8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d006      	beq.n	800ccce <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ccc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f47f aed1 	bne.w	800ca70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ccd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d049      	beq.n	800cd74 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cce6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d242      	bcs.n	800cd74 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf6:	6a3b      	ldr	r3, [r7, #32]
 800ccf8:	e853 3f00 	ldrex	r3, [r3]
 800ccfc:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3308      	adds	r3, #8
 800cd0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cd12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd1a:	e841 2300 	strex	r3, r2, [r1]
 800cd1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1e3      	bne.n	800ccee <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a16      	ldr	r2, [pc, #88]	@ (800cd84 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cd2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	e853 3f00 	ldrex	r3, [r3]
 800cd38:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	f043 0320 	orr.w	r3, r3, #32
 800cd40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd4e:	61bb      	str	r3, [r7, #24]
 800cd50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd52:	6979      	ldr	r1, [r7, #20]
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	e841 2300 	strex	r3, r2, [r1]
 800cd5a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1e4      	bne.n	800cd2c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd62:	e007      	b.n	800cd74 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	699a      	ldr	r2, [r3, #24]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f042 0208 	orr.w	r2, r2, #8
 800cd72:	619a      	str	r2, [r3, #24]
}
 800cd74:	bf00      	nop
 800cd76:	37b0      	adds	r7, #176	@ 0xb0
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	effffffe 	.word	0xeffffffe
 800cd80:	58000c00 	.word	0x58000c00
 800cd84:	0800c6b9 	.word	0x0800c6b9

0800cd88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b0ae      	sub	sp, #184	@ 0xb8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd96:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	69db      	ldr	r3, [r3, #28]
 800cda0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdbe:	2b22      	cmp	r3, #34	@ 0x22
 800cdc0:	f040 8184 	bne.w	800d0cc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cdca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cdce:	e127      	b.n	800d020 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cde2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cde6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cdea:	4013      	ands	r3, r2
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdf8:	1c9a      	adds	r2, r3, #2
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	3b01      	subs	r3, #1
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce1e:	f003 0307 	and.w	r3, r3, #7
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d053      	beq.n	800cece <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d011      	beq.n	800ce56 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ce32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00b      	beq.n	800ce56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2201      	movs	r2, #1
 800ce44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce4c:	f043 0201 	orr.w	r2, r3, #1
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce5a:	f003 0302 	and.w	r3, r3, #2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d011      	beq.n	800ce86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ce62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce66:	f003 0301 	and.w	r3, r3, #1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00b      	beq.n	800ce86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2202      	movs	r2, #2
 800ce74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce7c:	f043 0204 	orr.w	r2, r3, #4
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce8a:	f003 0304 	and.w	r3, r3, #4
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d011      	beq.n	800ceb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ce92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00b      	beq.n	800ceb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2204      	movs	r2, #4
 800cea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceac:	f043 0202 	orr.w	r2, r3, #2
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d006      	beq.n	800cece <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7fe faf7 	bl	800b4b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f040 80a2 	bne.w	800d020 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cee4:	e853 3f00 	ldrex	r3, [r3]
 800cee8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ceea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ceec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cef0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	461a      	mov	r2, r3
 800cefa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cefe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf02:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1e2      	bne.n	800cedc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	3308      	adds	r3, #8
 800cf1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf20:	e853 3f00 	ldrex	r3, [r3]
 800cf24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cf28:	4b6e      	ldr	r3, [pc, #440]	@ (800d0e4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3308      	adds	r3, #8
 800cf36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cf3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf42:	e841 2300 	strex	r3, r2, [r1]
 800cf46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1e3      	bne.n	800cf16 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2220      	movs	r2, #32
 800cf52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a60      	ldr	r2, [pc, #384]	@ (800d0e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d021      	beq.n	800cfb0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d01a      	beq.n	800cfb0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf82:	e853 3f00 	ldrex	r3, [r3]
 800cf86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cf9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfa4:	e841 2300 	strex	r3, r2, [r1]
 800cfa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1e4      	bne.n	800cf7a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d130      	bne.n	800d01a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc6:	e853 3f00 	ldrex	r3, [r3]
 800cfca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cfcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfce:	f023 0310 	bic.w	r3, r3, #16
 800cfd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfe2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfe8:	e841 2300 	strex	r3, r2, [r1]
 800cfec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1e4      	bne.n	800cfbe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	f003 0310 	and.w	r3, r3, #16
 800cffe:	2b10      	cmp	r3, #16
 800d000:	d103      	bne.n	800d00a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2210      	movs	r2, #16
 800d008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d010:	4619      	mov	r1, r3
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7fe fa58 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
 800d018:	e002      	b.n	800d020 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7f3 fec6 	bl	8000dac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d020:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d024:	2b00      	cmp	r3, #0
 800d026:	d006      	beq.n	800d036 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d02c:	f003 0320 	and.w	r3, r3, #32
 800d030:	2b00      	cmp	r3, #0
 800d032:	f47f aecd 	bne.w	800cdd0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d03c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d040:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d044:	2b00      	cmp	r3, #0
 800d046:	d049      	beq.n	800d0dc <UART_RxISR_16BIT_FIFOEN+0x354>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d04e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d052:	429a      	cmp	r2, r3
 800d054:	d242      	bcs.n	800d0dc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d060:	e853 3f00 	ldrex	r3, [r3]
 800d064:	623b      	str	r3, [r7, #32]
   return(result);
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d06c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3308      	adds	r3, #8
 800d076:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d07a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d07c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1e3      	bne.n	800d056 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4a16      	ldr	r2, [pc, #88]	@ (800d0ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d092:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	e853 3f00 	ldrex	r3, [r3]
 800d0a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f043 0320 	orr.w	r3, r3, #32
 800d0a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ba:	69b9      	ldr	r1, [r7, #24]
 800d0bc:	69fa      	ldr	r2, [r7, #28]
 800d0be:	e841 2300 	strex	r3, r2, [r1]
 800d0c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1e4      	bne.n	800d094 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0ca:	e007      	b.n	800d0dc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	699a      	ldr	r2, [r3, #24]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f042 0208 	orr.w	r2, r2, #8
 800d0da:	619a      	str	r2, [r3, #24]
}
 800d0dc:	bf00      	nop
 800d0de:	37b8      	adds	r7, #184	@ 0xb8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	effffffe 	.word	0xeffffffe
 800d0e8:	58000c00 	.word	0x58000c00
 800d0ec:	0800c871 	.word	0x0800c871

0800d0f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d120:	bf00      	nop
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d101      	bne.n	800d142 <HAL_UARTEx_DisableFifoMode+0x16>
 800d13e:	2302      	movs	r3, #2
 800d140:	e027      	b.n	800d192 <HAL_UARTEx_DisableFifoMode+0x66>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2224      	movs	r2, #36	@ 0x24
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f022 0201 	bic.w	r2, r2, #1
 800d168:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d170:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2220      	movs	r2, #32
 800d184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3714      	adds	r7, #20
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
 800d1a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d101      	bne.n	800d1b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	e02d      	b.n	800d212 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2224      	movs	r2, #36	@ 0x24
 800d1c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f022 0201 	bic.w	r2, r2, #1
 800d1dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	430a      	orrs	r2, r1
 800d1f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 f850 	bl	800d298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2220      	movs	r2, #32
 800d204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b084      	sub	sp, #16
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d101      	bne.n	800d232 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d22e:	2302      	movs	r3, #2
 800d230:	e02d      	b.n	800d28e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2224      	movs	r2, #36	@ 0x24
 800d23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f022 0201 	bic.w	r2, r2, #1
 800d258:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	430a      	orrs	r2, r1
 800d26c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f812 	bl	800d298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2220      	movs	r2, #32
 800d280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d108      	bne.n	800d2ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2b8:	e031      	b.n	800d31e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2ba:	2310      	movs	r3, #16
 800d2bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2be:	2310      	movs	r3, #16
 800d2c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	0e5b      	lsrs	r3, r3, #25
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f003 0307 	and.w	r3, r3, #7
 800d2d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	0f5b      	lsrs	r3, r3, #29
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	f003 0307 	and.w	r3, r3, #7
 800d2e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2e2:	7bbb      	ldrb	r3, [r7, #14]
 800d2e4:	7b3a      	ldrb	r2, [r7, #12]
 800d2e6:	4911      	ldr	r1, [pc, #68]	@ (800d32c <UARTEx_SetNbDataToProcess+0x94>)
 800d2e8:	5c8a      	ldrb	r2, [r1, r2]
 800d2ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2ee:	7b3a      	ldrb	r2, [r7, #12]
 800d2f0:	490f      	ldr	r1, [pc, #60]	@ (800d330 <UARTEx_SetNbDataToProcess+0x98>)
 800d2f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d300:	7bfb      	ldrb	r3, [r7, #15]
 800d302:	7b7a      	ldrb	r2, [r7, #13]
 800d304:	4909      	ldr	r1, [pc, #36]	@ (800d32c <UARTEx_SetNbDataToProcess+0x94>)
 800d306:	5c8a      	ldrb	r2, [r1, r2]
 800d308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d30c:	7b7a      	ldrb	r2, [r7, #13]
 800d30e:	4908      	ldr	r1, [pc, #32]	@ (800d330 <UARTEx_SetNbDataToProcess+0x98>)
 800d310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d312:	fb93 f3f2 	sdiv	r3, r3, r2
 800d316:	b29a      	uxth	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d31e:	bf00      	nop
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	0800fed4 	.word	0x0800fed4
 800d330:	0800fedc 	.word	0x0800fedc

0800d334 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d334:	b084      	sub	sp, #16
 800d336:	b580      	push	{r7, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	f107 001c 	add.w	r0, r7, #28
 800d342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d346:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d121      	bne.n	800d392 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d352:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	68da      	ldr	r2, [r3, #12]
 800d35e:	4b2c      	ldr	r3, [pc, #176]	@ (800d410 <USB_CoreInit+0xdc>)
 800d360:	4013      	ands	r3, r2
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d372:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d376:	2b01      	cmp	r3, #1
 800d378:	d105      	bne.n	800d386 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 faaa 	bl	800d8e0 <USB_CoreReset>
 800d38c:	4603      	mov	r3, r0
 800d38e:	73fb      	strb	r3, [r7, #15]
 800d390:	e01b      	b.n	800d3ca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fa9e 	bl	800d8e0 <USB_CoreReset>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d3a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d106      	bne.n	800d3be <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	639a      	str	r2, [r3, #56]	@ 0x38
 800d3bc:	e005      	b.n	800d3ca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d3ca:	7fbb      	ldrb	r3, [r7, #30]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d116      	bne.n	800d3fe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3de:	4b0d      	ldr	r3, [pc, #52]	@ (800d414 <USB_CoreInit+0xe0>)
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f043 0206 	orr.w	r2, r3, #6
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f043 0220 	orr.w	r2, r3, #32
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d40a:	b004      	add	sp, #16
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	ffbdffbf 	.word	0xffbdffbf
 800d414:	03ee0000 	.word	0x03ee0000

0800d418 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	f023 0201 	bic.w	r2, r3, #1
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	460b      	mov	r3, r1
 800d444:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d456:	78fb      	ldrb	r3, [r7, #3]
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d115      	bne.n	800d488 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d468:	200a      	movs	r0, #10
 800d46a:	f7f4 f9f7 	bl	800185c <HAL_Delay>
      ms += 10U;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	330a      	adds	r3, #10
 800d472:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fa25 	bl	800d8c4 <USB_GetMode>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d01e      	beq.n	800d4be <USB_SetCurrentMode+0x84>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2bc7      	cmp	r3, #199	@ 0xc7
 800d484:	d9f0      	bls.n	800d468 <USB_SetCurrentMode+0x2e>
 800d486:	e01a      	b.n	800d4be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d488:	78fb      	ldrb	r3, [r7, #3]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d115      	bne.n	800d4ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d49a:	200a      	movs	r0, #10
 800d49c:	f7f4 f9de 	bl	800185c <HAL_Delay>
      ms += 10U;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	330a      	adds	r3, #10
 800d4a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fa0c 	bl	800d8c4 <USB_GetMode>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d005      	beq.n	800d4be <USB_SetCurrentMode+0x84>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d4b6:	d9f0      	bls.n	800d49a <USB_SetCurrentMode+0x60>
 800d4b8:	e001      	b.n	800d4be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e005      	b.n	800d4ca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2bc8      	cmp	r3, #200	@ 0xc8
 800d4c2:	d101      	bne.n	800d4c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e000      	b.n	800d4ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
	...

0800d4d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b086      	sub	sp, #24
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d4e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	613b      	str	r3, [r7, #16]
 800d4f2:	e009      	b.n	800d508 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	3340      	adds	r3, #64	@ 0x40
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	2200      	movs	r2, #0
 800d500:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	3301      	adds	r3, #1
 800d506:	613b      	str	r3, [r7, #16]
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	2b0e      	cmp	r3, #14
 800d50c:	d9f2      	bls.n	800d4f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d50e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d512:	2b00      	cmp	r3, #0
 800d514:	d11c      	bne.n	800d550 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d524:	f043 0302 	orr.w	r3, r3, #2
 800d528:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d52e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e005      	b.n	800d55c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d554:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d562:	461a      	mov	r2, r3
 800d564:	2300      	movs	r3, #0
 800d566:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d568:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d10d      	bne.n	800d58c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d574:	2b00      	cmp	r3, #0
 800d576:	d104      	bne.n	800d582 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d578:	2100      	movs	r1, #0
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f968 	bl	800d850 <USB_SetDevSpeed>
 800d580:	e008      	b.n	800d594 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d582:	2101      	movs	r1, #1
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f963 	bl	800d850 <USB_SetDevSpeed>
 800d58a:	e003      	b.n	800d594 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d58c:	2103      	movs	r1, #3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f95e 	bl	800d850 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d594:	2110      	movs	r1, #16
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f8fa 	bl	800d790 <USB_FlushTxFifo>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 f924 	bl	800d7f4 <USB_FlushRxFifo>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5bc:	461a      	mov	r2, r3
 800d5be:	2300      	movs	r3, #0
 800d5c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5da:	2300      	movs	r3, #0
 800d5dc:	613b      	str	r3, [r7, #16]
 800d5de:	e043      	b.n	800d668 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d5f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5f6:	d118      	bne.n	800d62a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10a      	bne.n	800d614 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	015a      	lsls	r2, r3, #5
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	4413      	add	r3, r2
 800d606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d60a:	461a      	mov	r2, r3
 800d60c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d610:	6013      	str	r3, [r2, #0]
 800d612:	e013      	b.n	800d63c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	015a      	lsls	r2, r3, #5
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	4413      	add	r3, r2
 800d61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d620:	461a      	mov	r2, r3
 800d622:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	e008      	b.n	800d63c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	015a      	lsls	r2, r3, #5
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	4413      	add	r3, r2
 800d632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d636:	461a      	mov	r2, r3
 800d638:	2300      	movs	r3, #0
 800d63a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d648:	461a      	mov	r2, r3
 800d64a:	2300      	movs	r3, #0
 800d64c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	015a      	lsls	r2, r3, #5
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	4413      	add	r3, r2
 800d656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d65a:	461a      	mov	r2, r3
 800d65c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d660:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	3301      	adds	r3, #1
 800d666:	613b      	str	r3, [r7, #16]
 800d668:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d66c:	461a      	mov	r2, r3
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	4293      	cmp	r3, r2
 800d672:	d3b5      	bcc.n	800d5e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d674:	2300      	movs	r3, #0
 800d676:	613b      	str	r3, [r7, #16]
 800d678:	e043      	b.n	800d702 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	015a      	lsls	r2, r3, #5
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	4413      	add	r3, r2
 800d682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d68c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d690:	d118      	bne.n	800d6c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10a      	bne.n	800d6ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	015a      	lsls	r2, r3, #5
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4413      	add	r3, r2
 800d6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d6aa:	6013      	str	r3, [r2, #0]
 800d6ac:	e013      	b.n	800d6d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d6c0:	6013      	str	r3, [r2, #0]
 800d6c2:	e008      	b.n	800d6d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	015a      	lsls	r2, r3, #5
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	015a      	lsls	r2, r3, #5
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	4413      	add	r3, r2
 800d6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	015a      	lsls	r2, r3, #5
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d6fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	3301      	adds	r3, #1
 800d700:	613b      	str	r3, [r7, #16]
 800d702:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d706:	461a      	mov	r2, r3
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d3b5      	bcc.n	800d67a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d71c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d720:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d72e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d730:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d734:	2b00      	cmp	r3, #0
 800d736:	d105      	bne.n	800d744 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	f043 0210 	orr.w	r2, r3, #16
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	699a      	ldr	r2, [r3, #24]
 800d748:	4b0f      	ldr	r3, [pc, #60]	@ (800d788 <USB_DevInit+0x2b4>)
 800d74a:	4313      	orrs	r3, r2
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d750:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d754:	2b00      	cmp	r3, #0
 800d756:	d005      	beq.n	800d764 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	f043 0208 	orr.w	r2, r3, #8
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d105      	bne.n	800d778 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	699a      	ldr	r2, [r3, #24]
 800d770:	4b06      	ldr	r3, [pc, #24]	@ (800d78c <USB_DevInit+0x2b8>)
 800d772:	4313      	orrs	r3, r2
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d778:	7dfb      	ldrb	r3, [r7, #23]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3718      	adds	r7, #24
 800d77e:	46bd      	mov	sp, r7
 800d780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d784:	b004      	add	sp, #16
 800d786:	4770      	bx	lr
 800d788:	803c3800 	.word	0x803c3800
 800d78c:	40000004 	.word	0x40000004

0800d790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d79a:	2300      	movs	r3, #0
 800d79c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7aa:	d901      	bls.n	800d7b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	e01b      	b.n	800d7e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	daf2      	bge.n	800d79e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	019b      	lsls	r3, r3, #6
 800d7c0:	f043 0220 	orr.w	r2, r3, #32
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7d4:	d901      	bls.n	800d7da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e006      	b.n	800d7e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	f003 0320 	and.w	r3, r3, #32
 800d7e2:	2b20      	cmp	r3, #32
 800d7e4:	d0f0      	beq.n	800d7c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3714      	adds	r7, #20
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	3301      	adds	r3, #1
 800d804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d80c:	d901      	bls.n	800d812 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d80e:	2303      	movs	r3, #3
 800d810:	e018      	b.n	800d844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	2b00      	cmp	r3, #0
 800d818:	daf2      	bge.n	800d800 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d81a:	2300      	movs	r3, #0
 800d81c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2210      	movs	r2, #16
 800d822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	3301      	adds	r3, #1
 800d828:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d830:	d901      	bls.n	800d836 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e006      	b.n	800d844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	f003 0310 	and.w	r3, r3, #16
 800d83e:	2b10      	cmp	r3, #16
 800d840:	d0f0      	beq.n	800d824 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d842:	2300      	movs	r3, #0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	460b      	mov	r3, r1
 800d85a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	78fb      	ldrb	r3, [r7, #3]
 800d86a:	68f9      	ldr	r1, [r7, #12]
 800d86c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d870:	4313      	orrs	r3, r2
 800d872:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d882:	b480      	push	{r7}
 800d884:	b085      	sub	sp, #20
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d89c:	f023 0303 	bic.w	r3, r3, #3
 800d8a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d8b0:	f043 0302 	orr.w	r3, r3, #2
 800d8b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	f003 0301 	and.w	r3, r3, #1
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8f8:	d901      	bls.n	800d8fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	e01b      	b.n	800d936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	daf2      	bge.n	800d8ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d906:	2300      	movs	r3, #0
 800d908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	f043 0201 	orr.w	r2, r3, #1
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	3301      	adds	r3, #1
 800d91a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d922:	d901      	bls.n	800d928 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d924:	2303      	movs	r3, #3
 800d926:	e006      	b.n	800d936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	f003 0301 	and.w	r3, r3, #1
 800d930:	2b01      	cmp	r3, #1
 800d932:	d0f0      	beq.n	800d916 <USB_CoreReset+0x36>

  return HAL_OK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	3714      	adds	r7, #20
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d942:	b480      	push	{r7}
 800d944:	b085      	sub	sp, #20
 800d946:	af00      	add	r7, sp, #0
 800d948:	4603      	mov	r3, r0
 800d94a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d94c:	2300      	movs	r3, #0
 800d94e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d954:	2b84      	cmp	r3, #132	@ 0x84
 800d956:	d005      	beq.n	800d964 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d958:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	4413      	add	r3, r2
 800d960:	3303      	adds	r3, #3
 800d962:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d964:	68fb      	ldr	r3, [r7, #12]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d976:	f000 fafd 	bl	800df74 <vTaskStartScheduler>
  
  return osOK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d982:	b089      	sub	sp, #36	@ 0x24
 800d984:	af04      	add	r7, sp, #16
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d020      	beq.n	800d9d4 <osThreadCreate+0x54>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d01c      	beq.n	800d9d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685c      	ldr	r4, [r3, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	691e      	ldr	r6, [r3, #16]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff ffc8 	bl	800d942 <makeFreeRtosPriority>
 800d9b2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	695b      	ldr	r3, [r3, #20]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9bc:	9202      	str	r2, [sp, #8]
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	9100      	str	r1, [sp, #0]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 f8ed 	bl	800dba8 <xTaskCreateStatic>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	60fb      	str	r3, [r7, #12]
 800d9d2:	e01c      	b.n	800da0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685c      	ldr	r4, [r3, #4]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9e0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7ff ffaa 	bl	800d942 <makeFreeRtosPriority>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	f107 030c 	add.w	r3, r7, #12
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	9200      	str	r2, [sp, #0]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	4632      	mov	r2, r6
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4620      	mov	r0, r4
 800da00:	f000 f932 	bl	800dc68 <xTaskCreate>
 800da04:	4603      	mov	r3, r0
 800da06:	2b01      	cmp	r3, #1
 800da08:	d001      	beq.n	800da0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800da0a:	2300      	movs	r3, #0
 800da0c:	e000      	b.n	800da10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800da0e:	68fb      	ldr	r3, [r7, #12]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <osDelay+0x16>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	e000      	b.n	800da30 <osDelay+0x18>
 800da2e:	2301      	movs	r3, #1
 800da30:	4618      	mov	r0, r3
 800da32:	f000 fa69 	bl	800df08 <vTaskDelay>
  
  return osOK;
 800da36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f103 0208 	add.w	r2, r3, #8
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f04f 32ff 	mov.w	r2, #4294967295
 800da58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f103 0208 	add.w	r2, r3, #8
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f103 0208 	add.w	r2, r3, #8
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da74:	bf00      	nop
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800da8e:	bf00      	nop
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da9a:	b480      	push	{r7}
 800da9c:	b085      	sub	sp, #20
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	689a      	ldr	r2, [r3, #8]
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	601a      	str	r2, [r3, #0]
}
 800dad6:	bf00      	nop
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dae2:	b480      	push	{r7}
 800dae4:	b085      	sub	sp, #20
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf8:	d103      	bne.n	800db02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	60fb      	str	r3, [r7, #12]
 800db00:	e00c      	b.n	800db1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	3308      	adds	r3, #8
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	e002      	b.n	800db10 <vListInsert+0x2e>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d2f6      	bcs.n	800db0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	685a      	ldr	r2, [r3, #4]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	1c5a      	adds	r2, r3, #1
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	601a      	str	r2, [r3, #0]
}
 800db48:	bf00      	nop
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	6892      	ldr	r2, [r2, #8]
 800db6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	6852      	ldr	r2, [r2, #4]
 800db74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d103      	bne.n	800db88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	1e5a      	subs	r2, r3, #1
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3714      	adds	r7, #20
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b08e      	sub	sp, #56	@ 0x38
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10b      	bne.n	800dbd4 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dbce:	bf00      	nop
 800dbd0:	bf00      	nop
 800dbd2:	e7fd      	b.n	800dbd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10b      	bne.n	800dbf2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	61fb      	str	r3, [r7, #28]
}
 800dbec:	bf00      	nop
 800dbee:	bf00      	nop
 800dbf0:	e7fd      	b.n	800dbee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dbf2:	23a0      	movs	r3, #160	@ 0xa0
 800dbf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	2ba0      	cmp	r3, #160	@ 0xa0
 800dbfa:	d00b      	beq.n	800dc14 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	61bb      	str	r3, [r7, #24]
}
 800dc0e:	bf00      	nop
 800dc10:	bf00      	nop
 800dc12:	e7fd      	b.n	800dc10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d01e      	beq.n	800dc5a <xTaskCreateStatic+0xb2>
 800dc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d01b      	beq.n	800dc5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2e:	2202      	movs	r2, #2
 800dc30:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc34:	2300      	movs	r3, #0
 800dc36:	9303      	str	r3, [sp, #12]
 800dc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3a:	9302      	str	r3, [sp, #8]
 800dc3c:	f107 0314 	add.w	r3, r7, #20
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	68b9      	ldr	r1, [r7, #8]
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f000 f851 	bl	800dcf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc54:	f000 f8ee 	bl	800de34 <prvAddNewTaskToReadyList>
 800dc58:	e001      	b.n	800dc5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc5e:	697b      	ldr	r3, [r7, #20]
	}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3728      	adds	r7, #40	@ 0x28
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08c      	sub	sp, #48	@ 0x30
 800dc6c:	af04      	add	r7, sp, #16
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	603b      	str	r3, [r7, #0]
 800dc74:	4613      	mov	r3, r2
 800dc76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc78:	88fb      	ldrh	r3, [r7, #6]
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 ff03 	bl	800ea88 <pvPortMalloc>
 800dc82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00e      	beq.n	800dca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc8a:	20a0      	movs	r0, #160	@ 0xa0
 800dc8c:	f000 fefc 	bl	800ea88 <pvPortMalloc>
 800dc90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d003      	beq.n	800dca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc9e:	e005      	b.n	800dcac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dca0:	6978      	ldr	r0, [r7, #20]
 800dca2:	f000 ffbf 	bl	800ec24 <vPortFree>
 800dca6:	e001      	b.n	800dcac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d017      	beq.n	800dce2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dcba:	88fa      	ldrh	r2, [r7, #6]
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	9303      	str	r3, [sp, #12]
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	9302      	str	r3, [sp, #8]
 800dcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	68b9      	ldr	r1, [r7, #8]
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f000 f80f 	bl	800dcf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcd6:	69f8      	ldr	r0, [r7, #28]
 800dcd8:	f000 f8ac 	bl	800de34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	61bb      	str	r3, [r7, #24]
 800dce0:	e002      	b.n	800dce8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dce2:	f04f 33ff 	mov.w	r3, #4294967295
 800dce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dce8:	69bb      	ldr	r3, [r7, #24]
	}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3720      	adds	r7, #32
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800dd0c:	440b      	add	r3, r1
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	f023 0307 	bic.w	r3, r3, #7
 800dd1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	f003 0307 	and.w	r3, r3, #7
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00b      	beq.n	800dd3e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800dd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	617b      	str	r3, [r7, #20]
}
 800dd38:	bf00      	nop
 800dd3a:	bf00      	nop
 800dd3c:	e7fd      	b.n	800dd3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d01f      	beq.n	800dd84 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd44:	2300      	movs	r3, #0
 800dd46:	61fb      	str	r3, [r7, #28]
 800dd48:	e012      	b.n	800dd70 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	4413      	add	r3, r2
 800dd50:	7819      	ldrb	r1, [r3, #0]
 800dd52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	4413      	add	r3, r2
 800dd58:	3334      	adds	r3, #52	@ 0x34
 800dd5a:	460a      	mov	r2, r1
 800dd5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	4413      	add	r3, r2
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d006      	beq.n	800dd78 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	61fb      	str	r3, [r7, #28]
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	2b0f      	cmp	r3, #15
 800dd74:	d9e9      	bls.n	800dd4a <prvInitialiseNewTask+0x56>
 800dd76:	e000      	b.n	800dd7a <prvInitialiseNewTask+0x86>
			{
				break;
 800dd78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd82:	e003      	b.n	800dd8c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8e:	2b06      	cmp	r3, #6
 800dd90:	d901      	bls.n	800dd96 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd92:	2306      	movs	r3, #6
 800dd94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dda0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda4:	2200      	movs	r2, #0
 800dda6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddaa:	3304      	adds	r3, #4
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7ff fe67 	bl	800da80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb4:	3318      	adds	r3, #24
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7ff fe62 	bl	800da80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc4:	f1c3 0207 	rsb	r2, r3, #7
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddd0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ddda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dddc:	2200      	movs	r2, #0
 800ddde:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde4:	334c      	adds	r3, #76	@ 0x4c
 800dde6:	224c      	movs	r2, #76	@ 0x4c
 800dde8:	2100      	movs	r1, #0
 800ddea:	4618      	mov	r0, r3
 800ddec:	f001 faf0 	bl	800f3d0 <memset>
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf2:	4a0d      	ldr	r2, [pc, #52]	@ (800de28 <prvInitialiseNewTask+0x134>)
 800ddf4:	651a      	str	r2, [r3, #80]	@ 0x50
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf8:	4a0c      	ldr	r2, [pc, #48]	@ (800de2c <prvInitialiseNewTask+0x138>)
 800ddfa:	655a      	str	r2, [r3, #84]	@ 0x54
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfe:	4a0c      	ldr	r2, [pc, #48]	@ (800de30 <prvInitialiseNewTask+0x13c>)
 800de00:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	68f9      	ldr	r1, [r7, #12]
 800de06:	69b8      	ldr	r0, [r7, #24]
 800de08:	f000 fc2a 	bl	800e660 <pxPortInitialiseStack>
 800de0c:	4602      	mov	r2, r0
 800de0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de1e:	bf00      	nop
 800de20:	3720      	adds	r7, #32
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	24034814 	.word	0x24034814
 800de2c:	2403487c 	.word	0x2403487c
 800de30:	240348e4 	.word	0x240348e4

0800de34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de3c:	f000 fd44 	bl	800e8c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de40:	4b2a      	ldr	r3, [pc, #168]	@ (800deec <prvAddNewTaskToReadyList+0xb8>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3301      	adds	r3, #1
 800de46:	4a29      	ldr	r2, [pc, #164]	@ (800deec <prvAddNewTaskToReadyList+0xb8>)
 800de48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de4a:	4b29      	ldr	r3, [pc, #164]	@ (800def0 <prvAddNewTaskToReadyList+0xbc>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d109      	bne.n	800de66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de52:	4a27      	ldr	r2, [pc, #156]	@ (800def0 <prvAddNewTaskToReadyList+0xbc>)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de58:	4b24      	ldr	r3, [pc, #144]	@ (800deec <prvAddNewTaskToReadyList+0xb8>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d110      	bne.n	800de82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de60:	f000 fad4 	bl	800e40c <prvInitialiseTaskLists>
 800de64:	e00d      	b.n	800de82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de66:	4b23      	ldr	r3, [pc, #140]	@ (800def4 <prvAddNewTaskToReadyList+0xc0>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d109      	bne.n	800de82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de6e:	4b20      	ldr	r3, [pc, #128]	@ (800def0 <prvAddNewTaskToReadyList+0xbc>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de78:	429a      	cmp	r2, r3
 800de7a:	d802      	bhi.n	800de82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de7c:	4a1c      	ldr	r2, [pc, #112]	@ (800def0 <prvAddNewTaskToReadyList+0xbc>)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de82:	4b1d      	ldr	r3, [pc, #116]	@ (800def8 <prvAddNewTaskToReadyList+0xc4>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3301      	adds	r3, #1
 800de88:	4a1b      	ldr	r2, [pc, #108]	@ (800def8 <prvAddNewTaskToReadyList+0xc4>)
 800de8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de90:	2201      	movs	r2, #1
 800de92:	409a      	lsls	r2, r3
 800de94:	4b19      	ldr	r3, [pc, #100]	@ (800defc <prvAddNewTaskToReadyList+0xc8>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4313      	orrs	r3, r2
 800de9a:	4a18      	ldr	r2, [pc, #96]	@ (800defc <prvAddNewTaskToReadyList+0xc8>)
 800de9c:	6013      	str	r3, [r2, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dea2:	4613      	mov	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	4413      	add	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4a15      	ldr	r2, [pc, #84]	@ (800df00 <prvAddNewTaskToReadyList+0xcc>)
 800deac:	441a      	add	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3304      	adds	r3, #4
 800deb2:	4619      	mov	r1, r3
 800deb4:	4610      	mov	r0, r2
 800deb6:	f7ff fdf0 	bl	800da9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800deba:	f000 fd37 	bl	800e92c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800debe:	4b0d      	ldr	r3, [pc, #52]	@ (800def4 <prvAddNewTaskToReadyList+0xc0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00e      	beq.n	800dee4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dec6:	4b0a      	ldr	r3, [pc, #40]	@ (800def0 <prvAddNewTaskToReadyList+0xbc>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d207      	bcs.n	800dee4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ded4:	4b0b      	ldr	r3, [pc, #44]	@ (800df04 <prvAddNewTaskToReadyList+0xd0>)
 800ded6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dee4:	bf00      	nop
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	24030bc0 	.word	0x24030bc0
 800def0:	24030ac0 	.word	0x24030ac0
 800def4:	24030bcc 	.word	0x24030bcc
 800def8:	24030bdc 	.word	0x24030bdc
 800defc:	24030bc8 	.word	0x24030bc8
 800df00:	24030ac4 	.word	0x24030ac4
 800df04:	e000ed04 	.word	0xe000ed04

0800df08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d018      	beq.n	800df4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df1a:	4b14      	ldr	r3, [pc, #80]	@ (800df6c <vTaskDelay+0x64>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00b      	beq.n	800df3a <vTaskDelay+0x32>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	60bb      	str	r3, [r7, #8]
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop
 800df38:	e7fd      	b.n	800df36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800df3a:	f000 f885 	bl	800e048 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df3e:	2100      	movs	r1, #0
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fb27 	bl	800e594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df46:	f000 f88d 	bl	800e064 <xTaskResumeAll>
 800df4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d107      	bne.n	800df62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800df52:	4b07      	ldr	r3, [pc, #28]	@ (800df70 <vTaskDelay+0x68>)
 800df54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df62:	bf00      	nop
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	24030be8 	.word	0x24030be8
 800df70:	e000ed04 	.word	0xe000ed04

0800df74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08a      	sub	sp, #40	@ 0x28
 800df78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df82:	463a      	mov	r2, r7
 800df84:	1d39      	adds	r1, r7, #4
 800df86:	f107 0308 	add.w	r3, r7, #8
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7f2 fd36 	bl	80009fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68ba      	ldr	r2, [r7, #8]
 800df96:	9202      	str	r2, [sp, #8]
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	2300      	movs	r3, #0
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	460a      	mov	r2, r1
 800dfa2:	4921      	ldr	r1, [pc, #132]	@ (800e028 <vTaskStartScheduler+0xb4>)
 800dfa4:	4821      	ldr	r0, [pc, #132]	@ (800e02c <vTaskStartScheduler+0xb8>)
 800dfa6:	f7ff fdff 	bl	800dba8 <xTaskCreateStatic>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	4a20      	ldr	r2, [pc, #128]	@ (800e030 <vTaskStartScheduler+0xbc>)
 800dfae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dfb0:	4b1f      	ldr	r3, [pc, #124]	@ (800e030 <vTaskStartScheduler+0xbc>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	617b      	str	r3, [r7, #20]
 800dfbc:	e001      	b.n	800dfc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d11b      	bne.n	800e000 <vTaskStartScheduler+0x8c>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	613b      	str	r3, [r7, #16]
}
 800dfda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dfdc:	4b15      	ldr	r3, [pc, #84]	@ (800e034 <vTaskStartScheduler+0xc0>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	334c      	adds	r3, #76	@ 0x4c
 800dfe2:	4a15      	ldr	r2, [pc, #84]	@ (800e038 <vTaskStartScheduler+0xc4>)
 800dfe4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfe6:	4b15      	ldr	r3, [pc, #84]	@ (800e03c <vTaskStartScheduler+0xc8>)
 800dfe8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfee:	4b14      	ldr	r3, [pc, #80]	@ (800e040 <vTaskStartScheduler+0xcc>)
 800dff0:	2201      	movs	r2, #1
 800dff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dff4:	4b13      	ldr	r3, [pc, #76]	@ (800e044 <vTaskStartScheduler+0xd0>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dffa:	f000 fbc1 	bl	800e780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dffe:	e00f      	b.n	800e020 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e006:	d10b      	bne.n	800e020 <vTaskStartScheduler+0xac>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	60fb      	str	r3, [r7, #12]
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	e7fd      	b.n	800e01c <vTaskStartScheduler+0xa8>
}
 800e020:	bf00      	nop
 800e022:	3718      	adds	r7, #24
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	0800fe20 	.word	0x0800fe20
 800e02c:	0800e3dd 	.word	0x0800e3dd
 800e030:	24030be4 	.word	0x24030be4
 800e034:	24030ac0 	.word	0x24030ac0
 800e038:	24000018 	.word	0x24000018
 800e03c:	24030be0 	.word	0x24030be0
 800e040:	24030bcc 	.word	0x24030bcc
 800e044:	24030bc4 	.word	0x24030bc4

0800e048 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e048:	b480      	push	{r7}
 800e04a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e04c:	4b04      	ldr	r3, [pc, #16]	@ (800e060 <vTaskSuspendAll+0x18>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	4a03      	ldr	r2, [pc, #12]	@ (800e060 <vTaskSuspendAll+0x18>)
 800e054:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e056:	bf00      	nop
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	24030be8 	.word	0x24030be8

0800e064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e06a:	2300      	movs	r3, #0
 800e06c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e06e:	2300      	movs	r3, #0
 800e070:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e072:	4b42      	ldr	r3, [pc, #264]	@ (800e17c <xTaskResumeAll+0x118>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10b      	bne.n	800e092 <xTaskResumeAll+0x2e>
	__asm volatile
 800e07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	603b      	str	r3, [r7, #0]
}
 800e08c:	bf00      	nop
 800e08e:	bf00      	nop
 800e090:	e7fd      	b.n	800e08e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e092:	f000 fc19 	bl	800e8c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e096:	4b39      	ldr	r3, [pc, #228]	@ (800e17c <xTaskResumeAll+0x118>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	4a37      	ldr	r2, [pc, #220]	@ (800e17c <xTaskResumeAll+0x118>)
 800e09e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0a0:	4b36      	ldr	r3, [pc, #216]	@ (800e17c <xTaskResumeAll+0x118>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d161      	bne.n	800e16c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0a8:	4b35      	ldr	r3, [pc, #212]	@ (800e180 <xTaskResumeAll+0x11c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d05d      	beq.n	800e16c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0b0:	e02e      	b.n	800e110 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0b2:	4b34      	ldr	r3, [pc, #208]	@ (800e184 <xTaskResumeAll+0x120>)
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	3318      	adds	r3, #24
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7ff fd48 	bl	800db54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7ff fd43 	bl	800db54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	409a      	lsls	r2, r3
 800e0d6:	4b2c      	ldr	r3, [pc, #176]	@ (800e188 <xTaskResumeAll+0x124>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	4a2a      	ldr	r2, [pc, #168]	@ (800e188 <xTaskResumeAll+0x124>)
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4a27      	ldr	r2, [pc, #156]	@ (800e18c <xTaskResumeAll+0x128>)
 800e0ee:	441a      	add	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	f7ff fccf 	bl	800da9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e100:	4b23      	ldr	r3, [pc, #140]	@ (800e190 <xTaskResumeAll+0x12c>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e106:	429a      	cmp	r2, r3
 800e108:	d302      	bcc.n	800e110 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e10a:	4b22      	ldr	r3, [pc, #136]	@ (800e194 <xTaskResumeAll+0x130>)
 800e10c:	2201      	movs	r2, #1
 800e10e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e110:	4b1c      	ldr	r3, [pc, #112]	@ (800e184 <xTaskResumeAll+0x120>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1cc      	bne.n	800e0b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e11e:	f000 fa19 	bl	800e554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e122:	4b1d      	ldr	r3, [pc, #116]	@ (800e198 <xTaskResumeAll+0x134>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d010      	beq.n	800e150 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e12e:	f000 f837 	bl	800e1a0 <xTaskIncrementTick>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e138:	4b16      	ldr	r3, [pc, #88]	@ (800e194 <xTaskResumeAll+0x130>)
 800e13a:	2201      	movs	r2, #1
 800e13c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	3b01      	subs	r3, #1
 800e142:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1f1      	bne.n	800e12e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e14a:	4b13      	ldr	r3, [pc, #76]	@ (800e198 <xTaskResumeAll+0x134>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e150:	4b10      	ldr	r3, [pc, #64]	@ (800e194 <xTaskResumeAll+0x130>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d009      	beq.n	800e16c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e158:	2301      	movs	r3, #1
 800e15a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e15c:	4b0f      	ldr	r3, [pc, #60]	@ (800e19c <xTaskResumeAll+0x138>)
 800e15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e16c:	f000 fbde 	bl	800e92c <vPortExitCritical>

	return xAlreadyYielded;
 800e170:	68bb      	ldr	r3, [r7, #8]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	24030be8 	.word	0x24030be8
 800e180:	24030bc0 	.word	0x24030bc0
 800e184:	24030b80 	.word	0x24030b80
 800e188:	24030bc8 	.word	0x24030bc8
 800e18c:	24030ac4 	.word	0x24030ac4
 800e190:	24030ac0 	.word	0x24030ac0
 800e194:	24030bd4 	.word	0x24030bd4
 800e198:	24030bd0 	.word	0x24030bd0
 800e19c:	e000ed04 	.word	0xe000ed04

0800e1a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1aa:	4b4f      	ldr	r3, [pc, #316]	@ (800e2e8 <xTaskIncrementTick+0x148>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f040 808f 	bne.w	800e2d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e1b4:	4b4d      	ldr	r3, [pc, #308]	@ (800e2ec <xTaskIncrementTick+0x14c>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e1bc:	4a4b      	ldr	r2, [pc, #300]	@ (800e2ec <xTaskIncrementTick+0x14c>)
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d121      	bne.n	800e20c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1c8:	4b49      	ldr	r3, [pc, #292]	@ (800e2f0 <xTaskIncrementTick+0x150>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00b      	beq.n	800e1ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800e1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d6:	f383 8811 	msr	BASEPRI, r3
 800e1da:	f3bf 8f6f 	isb	sy
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	603b      	str	r3, [r7, #0]
}
 800e1e4:	bf00      	nop
 800e1e6:	bf00      	nop
 800e1e8:	e7fd      	b.n	800e1e6 <xTaskIncrementTick+0x46>
 800e1ea:	4b41      	ldr	r3, [pc, #260]	@ (800e2f0 <xTaskIncrementTick+0x150>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	60fb      	str	r3, [r7, #12]
 800e1f0:	4b40      	ldr	r3, [pc, #256]	@ (800e2f4 <xTaskIncrementTick+0x154>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a3e      	ldr	r2, [pc, #248]	@ (800e2f0 <xTaskIncrementTick+0x150>)
 800e1f6:	6013      	str	r3, [r2, #0]
 800e1f8:	4a3e      	ldr	r2, [pc, #248]	@ (800e2f4 <xTaskIncrementTick+0x154>)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	4b3e      	ldr	r3, [pc, #248]	@ (800e2f8 <xTaskIncrementTick+0x158>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3301      	adds	r3, #1
 800e204:	4a3c      	ldr	r2, [pc, #240]	@ (800e2f8 <xTaskIncrementTick+0x158>)
 800e206:	6013      	str	r3, [r2, #0]
 800e208:	f000 f9a4 	bl	800e554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e20c:	4b3b      	ldr	r3, [pc, #236]	@ (800e2fc <xTaskIncrementTick+0x15c>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	429a      	cmp	r2, r3
 800e214:	d348      	bcc.n	800e2a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e216:	4b36      	ldr	r3, [pc, #216]	@ (800e2f0 <xTaskIncrementTick+0x150>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d104      	bne.n	800e22a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e220:	4b36      	ldr	r3, [pc, #216]	@ (800e2fc <xTaskIncrementTick+0x15c>)
 800e222:	f04f 32ff 	mov.w	r2, #4294967295
 800e226:	601a      	str	r2, [r3, #0]
					break;
 800e228:	e03e      	b.n	800e2a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e22a:	4b31      	ldr	r3, [pc, #196]	@ (800e2f0 <xTaskIncrementTick+0x150>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e23a:	693a      	ldr	r2, [r7, #16]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d203      	bcs.n	800e24a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e242:	4a2e      	ldr	r2, [pc, #184]	@ (800e2fc <xTaskIncrementTick+0x15c>)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e248:	e02e      	b.n	800e2a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	3304      	adds	r3, #4
 800e24e:	4618      	mov	r0, r3
 800e250:	f7ff fc80 	bl	800db54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d004      	beq.n	800e266 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	3318      	adds	r3, #24
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff fc77 	bl	800db54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26a:	2201      	movs	r2, #1
 800e26c:	409a      	lsls	r2, r3
 800e26e:	4b24      	ldr	r3, [pc, #144]	@ (800e300 <xTaskIncrementTick+0x160>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4313      	orrs	r3, r2
 800e274:	4a22      	ldr	r2, [pc, #136]	@ (800e300 <xTaskIncrementTick+0x160>)
 800e276:	6013      	str	r3, [r2, #0]
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e27c:	4613      	mov	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4a1f      	ldr	r2, [pc, #124]	@ (800e304 <xTaskIncrementTick+0x164>)
 800e286:	441a      	add	r2, r3
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	3304      	adds	r3, #4
 800e28c:	4619      	mov	r1, r3
 800e28e:	4610      	mov	r0, r2
 800e290:	f7ff fc03 	bl	800da9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e298:	4b1b      	ldr	r3, [pc, #108]	@ (800e308 <xTaskIncrementTick+0x168>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d3b9      	bcc.n	800e216 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2a6:	e7b6      	b.n	800e216 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e2a8:	4b17      	ldr	r3, [pc, #92]	@ (800e308 <xTaskIncrementTick+0x168>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ae:	4915      	ldr	r1, [pc, #84]	@ (800e304 <xTaskIncrementTick+0x164>)
 800e2b0:	4613      	mov	r3, r2
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4413      	add	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	440b      	add	r3, r1
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d901      	bls.n	800e2c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e2c4:	4b11      	ldr	r3, [pc, #68]	@ (800e30c <xTaskIncrementTick+0x16c>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d007      	beq.n	800e2dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	617b      	str	r3, [r7, #20]
 800e2d0:	e004      	b.n	800e2dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e2d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e310 <xTaskIncrementTick+0x170>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	4a0d      	ldr	r2, [pc, #52]	@ (800e310 <xTaskIncrementTick+0x170>)
 800e2da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e2dc:	697b      	ldr	r3, [r7, #20]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	24030be8 	.word	0x24030be8
 800e2ec:	24030bc4 	.word	0x24030bc4
 800e2f0:	24030b78 	.word	0x24030b78
 800e2f4:	24030b7c 	.word	0x24030b7c
 800e2f8:	24030bd8 	.word	0x24030bd8
 800e2fc:	24030be0 	.word	0x24030be0
 800e300:	24030bc8 	.word	0x24030bc8
 800e304:	24030ac4 	.word	0x24030ac4
 800e308:	24030ac0 	.word	0x24030ac0
 800e30c:	24030bd4 	.word	0x24030bd4
 800e310:	24030bd0 	.word	0x24030bd0

0800e314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e314:	b480      	push	{r7}
 800e316:	b087      	sub	sp, #28
 800e318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e31a:	4b2a      	ldr	r3, [pc, #168]	@ (800e3c4 <vTaskSwitchContext+0xb0>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d003      	beq.n	800e32a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e322:	4b29      	ldr	r3, [pc, #164]	@ (800e3c8 <vTaskSwitchContext+0xb4>)
 800e324:	2201      	movs	r2, #1
 800e326:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e328:	e045      	b.n	800e3b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e32a:	4b27      	ldr	r3, [pc, #156]	@ (800e3c8 <vTaskSwitchContext+0xb4>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e330:	4b26      	ldr	r3, [pc, #152]	@ (800e3cc <vTaskSwitchContext+0xb8>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	fab3 f383 	clz	r3, r3
 800e33c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e33e:	7afb      	ldrb	r3, [r7, #11]
 800e340:	f1c3 031f 	rsb	r3, r3, #31
 800e344:	617b      	str	r3, [r7, #20]
 800e346:	4922      	ldr	r1, [pc, #136]	@ (800e3d0 <vTaskSwitchContext+0xbc>)
 800e348:	697a      	ldr	r2, [r7, #20]
 800e34a:	4613      	mov	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	4413      	add	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	440b      	add	r3, r1
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10b      	bne.n	800e372 <vTaskSwitchContext+0x5e>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	607b      	str	r3, [r7, #4]
}
 800e36c:	bf00      	nop
 800e36e:	bf00      	nop
 800e370:	e7fd      	b.n	800e36e <vTaskSwitchContext+0x5a>
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	4613      	mov	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	4413      	add	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4a14      	ldr	r2, [pc, #80]	@ (800e3d0 <vTaskSwitchContext+0xbc>)
 800e37e:	4413      	add	r3, r2
 800e380:	613b      	str	r3, [r7, #16]
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	605a      	str	r2, [r3, #4]
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	685a      	ldr	r2, [r3, #4]
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	3308      	adds	r3, #8
 800e394:	429a      	cmp	r2, r3
 800e396:	d104      	bne.n	800e3a2 <vTaskSwitchContext+0x8e>
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	685a      	ldr	r2, [r3, #4]
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	605a      	str	r2, [r3, #4]
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	4a0a      	ldr	r2, [pc, #40]	@ (800e3d4 <vTaskSwitchContext+0xc0>)
 800e3aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e3ac:	4b09      	ldr	r3, [pc, #36]	@ (800e3d4 <vTaskSwitchContext+0xc0>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	334c      	adds	r3, #76	@ 0x4c
 800e3b2:	4a09      	ldr	r2, [pc, #36]	@ (800e3d8 <vTaskSwitchContext+0xc4>)
 800e3b4:	6013      	str	r3, [r2, #0]
}
 800e3b6:	bf00      	nop
 800e3b8:	371c      	adds	r7, #28
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	24030be8 	.word	0x24030be8
 800e3c8:	24030bd4 	.word	0x24030bd4
 800e3cc:	24030bc8 	.word	0x24030bc8
 800e3d0:	24030ac4 	.word	0x24030ac4
 800e3d4:	24030ac0 	.word	0x24030ac0
 800e3d8:	24000018 	.word	0x24000018

0800e3dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3e4:	f000 f852 	bl	800e48c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3e8:	4b06      	ldr	r3, [pc, #24]	@ (800e404 <prvIdleTask+0x28>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d9f9      	bls.n	800e3e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3f0:	4b05      	ldr	r3, [pc, #20]	@ (800e408 <prvIdleTask+0x2c>)
 800e3f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e400:	e7f0      	b.n	800e3e4 <prvIdleTask+0x8>
 800e402:	bf00      	nop
 800e404:	24030ac4 	.word	0x24030ac4
 800e408:	e000ed04 	.word	0xe000ed04

0800e40c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e412:	2300      	movs	r3, #0
 800e414:	607b      	str	r3, [r7, #4]
 800e416:	e00c      	b.n	800e432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4413      	add	r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	4a12      	ldr	r2, [pc, #72]	@ (800e46c <prvInitialiseTaskLists+0x60>)
 800e424:	4413      	add	r3, r2
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff fb0a 	bl	800da40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3301      	adds	r3, #1
 800e430:	607b      	str	r3, [r7, #4]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b06      	cmp	r3, #6
 800e436:	d9ef      	bls.n	800e418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e438:	480d      	ldr	r0, [pc, #52]	@ (800e470 <prvInitialiseTaskLists+0x64>)
 800e43a:	f7ff fb01 	bl	800da40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e43e:	480d      	ldr	r0, [pc, #52]	@ (800e474 <prvInitialiseTaskLists+0x68>)
 800e440:	f7ff fafe 	bl	800da40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e444:	480c      	ldr	r0, [pc, #48]	@ (800e478 <prvInitialiseTaskLists+0x6c>)
 800e446:	f7ff fafb 	bl	800da40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e44a:	480c      	ldr	r0, [pc, #48]	@ (800e47c <prvInitialiseTaskLists+0x70>)
 800e44c:	f7ff faf8 	bl	800da40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e450:	480b      	ldr	r0, [pc, #44]	@ (800e480 <prvInitialiseTaskLists+0x74>)
 800e452:	f7ff faf5 	bl	800da40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e456:	4b0b      	ldr	r3, [pc, #44]	@ (800e484 <prvInitialiseTaskLists+0x78>)
 800e458:	4a05      	ldr	r2, [pc, #20]	@ (800e470 <prvInitialiseTaskLists+0x64>)
 800e45a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e45c:	4b0a      	ldr	r3, [pc, #40]	@ (800e488 <prvInitialiseTaskLists+0x7c>)
 800e45e:	4a05      	ldr	r2, [pc, #20]	@ (800e474 <prvInitialiseTaskLists+0x68>)
 800e460:	601a      	str	r2, [r3, #0]
}
 800e462:	bf00      	nop
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	24030ac4 	.word	0x24030ac4
 800e470:	24030b50 	.word	0x24030b50
 800e474:	24030b64 	.word	0x24030b64
 800e478:	24030b80 	.word	0x24030b80
 800e47c:	24030b94 	.word	0x24030b94
 800e480:	24030bac 	.word	0x24030bac
 800e484:	24030b78 	.word	0x24030b78
 800e488:	24030b7c 	.word	0x24030b7c

0800e48c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e492:	e019      	b.n	800e4c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e494:	f000 fa18 	bl	800e8c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e498:	4b10      	ldr	r3, [pc, #64]	@ (800e4dc <prvCheckTasksWaitingTermination+0x50>)
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff fb55 	bl	800db54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e4e0 <prvCheckTasksWaitingTermination+0x54>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	4a0b      	ldr	r2, [pc, #44]	@ (800e4e0 <prvCheckTasksWaitingTermination+0x54>)
 800e4b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e4b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e4 <prvCheckTasksWaitingTermination+0x58>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	4a0a      	ldr	r2, [pc, #40]	@ (800e4e4 <prvCheckTasksWaitingTermination+0x58>)
 800e4bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e4be:	f000 fa35 	bl	800e92c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f810 	bl	800e4e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4c8:	4b06      	ldr	r3, [pc, #24]	@ (800e4e4 <prvCheckTasksWaitingTermination+0x58>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d1e1      	bne.n	800e494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4d0:	bf00      	nop
 800e4d2:	bf00      	nop
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	24030b94 	.word	0x24030b94
 800e4e0:	24030bc0 	.word	0x24030bc0
 800e4e4:	24030ba8 	.word	0x24030ba8

0800e4e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	334c      	adds	r3, #76	@ 0x4c
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f000 ff73 	bl	800f3e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e500:	2b00      	cmp	r3, #0
 800e502:	d108      	bne.n	800e516 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e508:	4618      	mov	r0, r3
 800e50a:	f000 fb8b 	bl	800ec24 <vPortFree>
				vPortFree( pxTCB );
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fb88 	bl	800ec24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e514:	e019      	b.n	800e54a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d103      	bne.n	800e528 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 fb7f 	bl	800ec24 <vPortFree>
	}
 800e526:	e010      	b.n	800e54a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d00b      	beq.n	800e54a <prvDeleteTCB+0x62>
	__asm volatile
 800e532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	60fb      	str	r3, [r7, #12]
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop
 800e548:	e7fd      	b.n	800e546 <prvDeleteTCB+0x5e>
	}
 800e54a:	bf00      	nop
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
	...

0800e554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e55a:	4b0c      	ldr	r3, [pc, #48]	@ (800e58c <prvResetNextTaskUnblockTime+0x38>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d104      	bne.n	800e56e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e564:	4b0a      	ldr	r3, [pc, #40]	@ (800e590 <prvResetNextTaskUnblockTime+0x3c>)
 800e566:	f04f 32ff 	mov.w	r2, #4294967295
 800e56a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e56c:	e008      	b.n	800e580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e56e:	4b07      	ldr	r3, [pc, #28]	@ (800e58c <prvResetNextTaskUnblockTime+0x38>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	4a04      	ldr	r2, [pc, #16]	@ (800e590 <prvResetNextTaskUnblockTime+0x3c>)
 800e57e:	6013      	str	r3, [r2, #0]
}
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr
 800e58c:	24030b78 	.word	0x24030b78
 800e590:	24030be0 	.word	0x24030be0

0800e594 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e59e:	4b29      	ldr	r3, [pc, #164]	@ (800e644 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5a4:	4b28      	ldr	r3, [pc, #160]	@ (800e648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff fad2 	bl	800db54 <uxListRemove>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d10b      	bne.n	800e5ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e5b6:	4b24      	ldr	r3, [pc, #144]	@ (800e648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5bc:	2201      	movs	r2, #1
 800e5be:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c2:	43da      	mvns	r2, r3
 800e5c4:	4b21      	ldr	r3, [pc, #132]	@ (800e64c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	4a20      	ldr	r2, [pc, #128]	@ (800e64c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e5cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d4:	d10a      	bne.n	800e5ec <prvAddCurrentTaskToDelayedList+0x58>
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d007      	beq.n	800e5ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5dc:	4b1a      	ldr	r3, [pc, #104]	@ (800e648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	481a      	ldr	r0, [pc, #104]	@ (800e650 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e5e6:	f7ff fa58 	bl	800da9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5ea:	e026      	b.n	800e63a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5f4:	4b14      	ldr	r3, [pc, #80]	@ (800e648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	429a      	cmp	r2, r3
 800e602:	d209      	bcs.n	800e618 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e604:	4b13      	ldr	r3, [pc, #76]	@ (800e654 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	4b0f      	ldr	r3, [pc, #60]	@ (800e648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3304      	adds	r3, #4
 800e60e:	4619      	mov	r1, r3
 800e610:	4610      	mov	r0, r2
 800e612:	f7ff fa66 	bl	800dae2 <vListInsert>
}
 800e616:	e010      	b.n	800e63a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e618:	4b0f      	ldr	r3, [pc, #60]	@ (800e658 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	4b0a      	ldr	r3, [pc, #40]	@ (800e648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	3304      	adds	r3, #4
 800e622:	4619      	mov	r1, r3
 800e624:	4610      	mov	r0, r2
 800e626:	f7ff fa5c 	bl	800dae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e62a:	4b0c      	ldr	r3, [pc, #48]	@ (800e65c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	429a      	cmp	r2, r3
 800e632:	d202      	bcs.n	800e63a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e634:	4a09      	ldr	r2, [pc, #36]	@ (800e65c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	6013      	str	r3, [r2, #0]
}
 800e63a:	bf00      	nop
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	24030bc4 	.word	0x24030bc4
 800e648:	24030ac0 	.word	0x24030ac0
 800e64c:	24030bc8 	.word	0x24030bc8
 800e650:	24030bac 	.word	0x24030bac
 800e654:	24030b7c 	.word	0x24030b7c
 800e658:	24030b78 	.word	0x24030b78
 800e65c:	24030be0 	.word	0x24030be0

0800e660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	3b04      	subs	r3, #4
 800e670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3b04      	subs	r3, #4
 800e67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	f023 0201 	bic.w	r2, r3, #1
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	3b04      	subs	r3, #4
 800e68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e690:	4a0c      	ldr	r2, [pc, #48]	@ (800e6c4 <pxPortInitialiseStack+0x64>)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3b14      	subs	r3, #20
 800e69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3b04      	subs	r3, #4
 800e6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f06f 0202 	mvn.w	r2, #2
 800e6ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3b20      	subs	r3, #32
 800e6b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3714      	adds	r7, #20
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	0800e6c9 	.word	0x0800e6c9

0800e6c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6d2:	4b13      	ldr	r3, [pc, #76]	@ (800e720 <prvTaskExitError+0x58>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6da:	d00b      	beq.n	800e6f4 <prvTaskExitError+0x2c>
	__asm volatile
 800e6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	60fb      	str	r3, [r7, #12]
}
 800e6ee:	bf00      	nop
 800e6f0:	bf00      	nop
 800e6f2:	e7fd      	b.n	800e6f0 <prvTaskExitError+0x28>
	__asm volatile
 800e6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f8:	f383 8811 	msr	BASEPRI, r3
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	f3bf 8f4f 	dsb	sy
 800e704:	60bb      	str	r3, [r7, #8]
}
 800e706:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e708:	bf00      	nop
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d0fc      	beq.n	800e70a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e710:	bf00      	nop
 800e712:	bf00      	nop
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	24000014 	.word	0x24000014
	...

0800e730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e730:	4b07      	ldr	r3, [pc, #28]	@ (800e750 <pxCurrentTCBConst2>)
 800e732:	6819      	ldr	r1, [r3, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73a:	f380 8809 	msr	PSP, r0
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f04f 0000 	mov.w	r0, #0
 800e746:	f380 8811 	msr	BASEPRI, r0
 800e74a:	4770      	bx	lr
 800e74c:	f3af 8000 	nop.w

0800e750 <pxCurrentTCBConst2>:
 800e750:	24030ac0 	.word	0x24030ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop

0800e758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e758:	4808      	ldr	r0, [pc, #32]	@ (800e77c <prvPortStartFirstTask+0x24>)
 800e75a:	6800      	ldr	r0, [r0, #0]
 800e75c:	6800      	ldr	r0, [r0, #0]
 800e75e:	f380 8808 	msr	MSP, r0
 800e762:	f04f 0000 	mov.w	r0, #0
 800e766:	f380 8814 	msr	CONTROL, r0
 800e76a:	b662      	cpsie	i
 800e76c:	b661      	cpsie	f
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	df00      	svc	0
 800e778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e77a:	bf00      	nop
 800e77c:	e000ed08 	.word	0xe000ed08

0800e780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e786:	4b47      	ldr	r3, [pc, #284]	@ (800e8a4 <xPortStartScheduler+0x124>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a47      	ldr	r2, [pc, #284]	@ (800e8a8 <xPortStartScheduler+0x128>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d10b      	bne.n	800e7a8 <xPortStartScheduler+0x28>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	613b      	str	r3, [r7, #16]
}
 800e7a2:	bf00      	nop
 800e7a4:	bf00      	nop
 800e7a6:	e7fd      	b.n	800e7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7a8:	4b3e      	ldr	r3, [pc, #248]	@ (800e8a4 <xPortStartScheduler+0x124>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a3f      	ldr	r2, [pc, #252]	@ (800e8ac <xPortStartScheduler+0x12c>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d10b      	bne.n	800e7ca <xPortStartScheduler+0x4a>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	60fb      	str	r3, [r7, #12]
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop
 800e7c8:	e7fd      	b.n	800e7c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7ca:	4b39      	ldr	r3, [pc, #228]	@ (800e8b0 <xPortStartScheduler+0x130>)
 800e7cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	22ff      	movs	r2, #255	@ 0xff
 800e7da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	4b31      	ldr	r3, [pc, #196]	@ (800e8b4 <xPortStartScheduler+0x134>)
 800e7f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7f2:	4b31      	ldr	r3, [pc, #196]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e7f4:	2207      	movs	r2, #7
 800e7f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7f8:	e009      	b.n	800e80e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	4a2d      	ldr	r2, [pc, #180]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e804:	78fb      	ldrb	r3, [r7, #3]
 800e806:	b2db      	uxtb	r3, r3
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e80e:	78fb      	ldrb	r3, [r7, #3]
 800e810:	b2db      	uxtb	r3, r3
 800e812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e816:	2b80      	cmp	r3, #128	@ 0x80
 800e818:	d0ef      	beq.n	800e7fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e81a:	4b27      	ldr	r3, [pc, #156]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f1c3 0307 	rsb	r3, r3, #7
 800e822:	2b04      	cmp	r3, #4
 800e824:	d00b      	beq.n	800e83e <xPortStartScheduler+0xbe>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	60bb      	str	r3, [r7, #8]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e83e:	4b1e      	ldr	r3, [pc, #120]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	021b      	lsls	r3, r3, #8
 800e844:	4a1c      	ldr	r2, [pc, #112]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e848:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e850:	4a19      	ldr	r2, [pc, #100]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	b2da      	uxtb	r2, r3
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e85c:	4b17      	ldr	r3, [pc, #92]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a16      	ldr	r2, [pc, #88]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e868:	4b14      	ldr	r3, [pc, #80]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a13      	ldr	r2, [pc, #76]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e86e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e874:	f000 f8da 	bl	800ea2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e878:	4b11      	ldr	r3, [pc, #68]	@ (800e8c0 <xPortStartScheduler+0x140>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e87e:	f000 f8f9 	bl	800ea74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e882:	4b10      	ldr	r3, [pc, #64]	@ (800e8c4 <xPortStartScheduler+0x144>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a0f      	ldr	r2, [pc, #60]	@ (800e8c4 <xPortStartScheduler+0x144>)
 800e888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e88c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e88e:	f7ff ff63 	bl	800e758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e892:	f7ff fd3f 	bl	800e314 <vTaskSwitchContext>
	prvTaskExitError();
 800e896:	f7ff ff17 	bl	800e6c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3718      	adds	r7, #24
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	e000ed00 	.word	0xe000ed00
 800e8a8:	410fc271 	.word	0x410fc271
 800e8ac:	410fc270 	.word	0x410fc270
 800e8b0:	e000e400 	.word	0xe000e400
 800e8b4:	24030bec 	.word	0x24030bec
 800e8b8:	24030bf0 	.word	0x24030bf0
 800e8bc:	e000ed20 	.word	0xe000ed20
 800e8c0:	24000014 	.word	0x24000014
 800e8c4:	e000ef34 	.word	0xe000ef34

0800e8c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	607b      	str	r3, [r7, #4]
}
 800e8e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e8e2:	4b10      	ldr	r3, [pc, #64]	@ (800e924 <vPortEnterCritical+0x5c>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800e924 <vPortEnterCritical+0x5c>)
 800e8ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e924 <vPortEnterCritical+0x5c>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d110      	bne.n	800e916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e928 <vPortEnterCritical+0x60>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00b      	beq.n	800e916 <vPortEnterCritical+0x4e>
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	603b      	str	r3, [r7, #0]
}
 800e910:	bf00      	nop
 800e912:	bf00      	nop
 800e914:	e7fd      	b.n	800e912 <vPortEnterCritical+0x4a>
	}
}
 800e916:	bf00      	nop
 800e918:	370c      	adds	r7, #12
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	24000014 	.word	0x24000014
 800e928:	e000ed04 	.word	0xe000ed04

0800e92c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e932:	4b12      	ldr	r3, [pc, #72]	@ (800e97c <vPortExitCritical+0x50>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10b      	bne.n	800e952 <vPortExitCritical+0x26>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	607b      	str	r3, [r7, #4]
}
 800e94c:	bf00      	nop
 800e94e:	bf00      	nop
 800e950:	e7fd      	b.n	800e94e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e952:	4b0a      	ldr	r3, [pc, #40]	@ (800e97c <vPortExitCritical+0x50>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3b01      	subs	r3, #1
 800e958:	4a08      	ldr	r2, [pc, #32]	@ (800e97c <vPortExitCritical+0x50>)
 800e95a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e95c:	4b07      	ldr	r3, [pc, #28]	@ (800e97c <vPortExitCritical+0x50>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d105      	bne.n	800e970 <vPortExitCritical+0x44>
 800e964:	2300      	movs	r3, #0
 800e966:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e96e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	24000014 	.word	0x24000014

0800e980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e980:	f3ef 8009 	mrs	r0, PSP
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4b15      	ldr	r3, [pc, #84]	@ (800e9e0 <pxCurrentTCBConst>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	f01e 0f10 	tst.w	lr, #16
 800e990:	bf08      	it	eq
 800e992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99a:	6010      	str	r0, [r2, #0]
 800e99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e9a4:	f380 8811 	msr	BASEPRI, r0
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f7ff fcb0 	bl	800e314 <vTaskSwitchContext>
 800e9b4:	f04f 0000 	mov.w	r0, #0
 800e9b8:	f380 8811 	msr	BASEPRI, r0
 800e9bc:	bc09      	pop	{r0, r3}
 800e9be:	6819      	ldr	r1, [r3, #0]
 800e9c0:	6808      	ldr	r0, [r1, #0]
 800e9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c6:	f01e 0f10 	tst.w	lr, #16
 800e9ca:	bf08      	it	eq
 800e9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e9d0:	f380 8809 	msr	PSP, r0
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	f3af 8000 	nop.w

0800e9e0 <pxCurrentTCBConst>:
 800e9e0:	24030ac0 	.word	0x24030ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop

0800e9e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	607b      	str	r3, [r7, #4]
}
 800ea00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea02:	f7ff fbcd 	bl	800e1a0 <xTaskIncrementTick>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea0c:	4b06      	ldr	r3, [pc, #24]	@ (800ea28 <SysTick_Handler+0x40>)
 800ea0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	2300      	movs	r3, #0
 800ea16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f383 8811 	msr	BASEPRI, r3
}
 800ea1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea30:	4b0b      	ldr	r3, [pc, #44]	@ (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea36:	4b0b      	ldr	r3, [pc, #44]	@ (800ea64 <vPortSetupTimerInterrupt+0x38>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea68 <vPortSetupTimerInterrupt+0x3c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a0a      	ldr	r2, [pc, #40]	@ (800ea6c <vPortSetupTimerInterrupt+0x40>)
 800ea42:	fba2 2303 	umull	r2, r3, r2, r3
 800ea46:	099b      	lsrs	r3, r3, #6
 800ea48:	4a09      	ldr	r2, [pc, #36]	@ (800ea70 <vPortSetupTimerInterrupt+0x44>)
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea4e:	4b04      	ldr	r3, [pc, #16]	@ (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea50:	2207      	movs	r2, #7
 800ea52:	601a      	str	r2, [r3, #0]
}
 800ea54:	bf00      	nop
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	e000e010 	.word	0xe000e010
 800ea64:	e000e018 	.word	0xe000e018
 800ea68:	24000004 	.word	0x24000004
 800ea6c:	10624dd3 	.word	0x10624dd3
 800ea70:	e000e014 	.word	0xe000e014

0800ea74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ea84 <vPortEnableVFP+0x10>
 800ea78:	6801      	ldr	r1, [r0, #0]
 800ea7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea7e:	6001      	str	r1, [r0, #0]
 800ea80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea82:	bf00      	nop
 800ea84:	e000ed88 	.word	0xe000ed88

0800ea88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b08a      	sub	sp, #40	@ 0x28
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea90:	2300      	movs	r3, #0
 800ea92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea94:	f7ff fad8 	bl	800e048 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea98:	4b5c      	ldr	r3, [pc, #368]	@ (800ec0c <pvPortMalloc+0x184>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d101      	bne.n	800eaa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eaa0:	f000 f924 	bl	800ecec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eaa4:	4b5a      	ldr	r3, [pc, #360]	@ (800ec10 <pvPortMalloc+0x188>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4013      	ands	r3, r2
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f040 8095 	bne.w	800ebdc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d01e      	beq.n	800eaf6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800eab8:	2208      	movs	r2, #8
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4413      	add	r3, r2
 800eabe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f003 0307 	and.w	r3, r3, #7
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d015      	beq.n	800eaf6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f023 0307 	bic.w	r3, r3, #7
 800ead0:	3308      	adds	r3, #8
 800ead2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f003 0307 	and.w	r3, r3, #7
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00b      	beq.n	800eaf6 <pvPortMalloc+0x6e>
	__asm volatile
 800eade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	617b      	str	r3, [r7, #20]
}
 800eaf0:	bf00      	nop
 800eaf2:	bf00      	nop
 800eaf4:	e7fd      	b.n	800eaf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d06f      	beq.n	800ebdc <pvPortMalloc+0x154>
 800eafc:	4b45      	ldr	r3, [pc, #276]	@ (800ec14 <pvPortMalloc+0x18c>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d86a      	bhi.n	800ebdc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb06:	4b44      	ldr	r3, [pc, #272]	@ (800ec18 <pvPortMalloc+0x190>)
 800eb08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb0a:	4b43      	ldr	r3, [pc, #268]	@ (800ec18 <pvPortMalloc+0x190>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb10:	e004      	b.n	800eb1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d903      	bls.n	800eb2e <pvPortMalloc+0xa6>
 800eb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1f1      	bne.n	800eb12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb2e:	4b37      	ldr	r3, [pc, #220]	@ (800ec0c <pvPortMalloc+0x184>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d051      	beq.n	800ebdc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb38:	6a3b      	ldr	r3, [r7, #32]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2208      	movs	r2, #8
 800eb3e:	4413      	add	r3, r2
 800eb40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	6a3b      	ldr	r3, [r7, #32]
 800eb48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4c:	685a      	ldr	r2, [r3, #4]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	1ad2      	subs	r2, r2, r3
 800eb52:	2308      	movs	r3, #8
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d920      	bls.n	800eb9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4413      	add	r3, r2
 800eb60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	f003 0307 	and.w	r3, r3, #7
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <pvPortMalloc+0xfc>
	__asm volatile
 800eb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb70:	f383 8811 	msr	BASEPRI, r3
 800eb74:	f3bf 8f6f 	isb	sy
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	613b      	str	r3, [r7, #16]
}
 800eb7e:	bf00      	nop
 800eb80:	bf00      	nop
 800eb82:	e7fd      	b.n	800eb80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	1ad2      	subs	r2, r2, r3
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb96:	69b8      	ldr	r0, [r7, #24]
 800eb98:	f000 f90a 	bl	800edb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ec14 <pvPortMalloc+0x18c>)
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	4a1b      	ldr	r2, [pc, #108]	@ (800ec14 <pvPortMalloc+0x18c>)
 800eba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ebaa:	4b1a      	ldr	r3, [pc, #104]	@ (800ec14 <pvPortMalloc+0x18c>)
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	4b1b      	ldr	r3, [pc, #108]	@ (800ec1c <pvPortMalloc+0x194>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d203      	bcs.n	800ebbe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ebb6:	4b17      	ldr	r3, [pc, #92]	@ (800ec14 <pvPortMalloc+0x18c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a18      	ldr	r2, [pc, #96]	@ (800ec1c <pvPortMalloc+0x194>)
 800ebbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ebbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc0:	685a      	ldr	r2, [r3, #4]
 800ebc2:	4b13      	ldr	r3, [pc, #76]	@ (800ec10 <pvPortMalloc+0x188>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebce:	2200      	movs	r2, #0
 800ebd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ebd2:	4b13      	ldr	r3, [pc, #76]	@ (800ec20 <pvPortMalloc+0x198>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	4a11      	ldr	r2, [pc, #68]	@ (800ec20 <pvPortMalloc+0x198>)
 800ebda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ebdc:	f7ff fa42 	bl	800e064 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00b      	beq.n	800ec02 <pvPortMalloc+0x17a>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	60fb      	str	r3, [r7, #12]
}
 800ebfc:	bf00      	nop
 800ebfe:	bf00      	nop
 800ec00:	e7fd      	b.n	800ebfe <pvPortMalloc+0x176>
	return pvReturn;
 800ec02:	69fb      	ldr	r3, [r7, #28]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3728      	adds	r7, #40	@ 0x28
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	240347fc 	.word	0x240347fc
 800ec10:	24034810 	.word	0x24034810
 800ec14:	24034800 	.word	0x24034800
 800ec18:	240347f4 	.word	0x240347f4
 800ec1c:	24034804 	.word	0x24034804
 800ec20:	24034808 	.word	0x24034808

0800ec24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b086      	sub	sp, #24
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d04f      	beq.n	800ecd6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec36:	2308      	movs	r3, #8
 800ec38:	425b      	negs	r3, r3
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	685a      	ldr	r2, [r3, #4]
 800ec48:	4b25      	ldr	r3, [pc, #148]	@ (800ece0 <vPortFree+0xbc>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4013      	ands	r3, r2
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d10b      	bne.n	800ec6a <vPortFree+0x46>
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec56:	f383 8811 	msr	BASEPRI, r3
 800ec5a:	f3bf 8f6f 	isb	sy
 800ec5e:	f3bf 8f4f 	dsb	sy
 800ec62:	60fb      	str	r3, [r7, #12]
}
 800ec64:	bf00      	nop
 800ec66:	bf00      	nop
 800ec68:	e7fd      	b.n	800ec66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00b      	beq.n	800ec8a <vPortFree+0x66>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	60bb      	str	r3, [r7, #8]
}
 800ec84:	bf00      	nop
 800ec86:	bf00      	nop
 800ec88:	e7fd      	b.n	800ec86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	685a      	ldr	r2, [r3, #4]
 800ec8e:	4b14      	ldr	r3, [pc, #80]	@ (800ece0 <vPortFree+0xbc>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4013      	ands	r3, r2
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d01e      	beq.n	800ecd6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d11a      	bne.n	800ecd6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	4b0e      	ldr	r3, [pc, #56]	@ (800ece0 <vPortFree+0xbc>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	43db      	mvns	r3, r3
 800ecaa:	401a      	ands	r2, r3
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ecb0:	f7ff f9ca 	bl	800e048 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	685a      	ldr	r2, [r3, #4]
 800ecb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ece4 <vPortFree+0xc0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	4a09      	ldr	r2, [pc, #36]	@ (800ece4 <vPortFree+0xc0>)
 800ecc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ecc2:	6938      	ldr	r0, [r7, #16]
 800ecc4:	f000 f874 	bl	800edb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ecc8:	4b07      	ldr	r3, [pc, #28]	@ (800ece8 <vPortFree+0xc4>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3301      	adds	r3, #1
 800ecce:	4a06      	ldr	r2, [pc, #24]	@ (800ece8 <vPortFree+0xc4>)
 800ecd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ecd2:	f7ff f9c7 	bl	800e064 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ecd6:	bf00      	nop
 800ecd8:	3718      	adds	r7, #24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	24034810 	.word	0x24034810
 800ece4:	24034800 	.word	0x24034800
 800ece8:	2403480c 	.word	0x2403480c

0800ecec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ecf2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ecf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ecf8:	4b27      	ldr	r3, [pc, #156]	@ (800ed98 <prvHeapInit+0xac>)
 800ecfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f003 0307 	and.w	r3, r3, #7
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00c      	beq.n	800ed20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	3307      	adds	r3, #7
 800ed0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f023 0307 	bic.w	r3, r3, #7
 800ed12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	4a1f      	ldr	r2, [pc, #124]	@ (800ed98 <prvHeapInit+0xac>)
 800ed1c:	4413      	add	r3, r2
 800ed1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed24:	4a1d      	ldr	r2, [pc, #116]	@ (800ed9c <prvHeapInit+0xb0>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed2a:	4b1c      	ldr	r3, [pc, #112]	@ (800ed9c <prvHeapInit+0xb0>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	4413      	add	r3, r2
 800ed36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed38:	2208      	movs	r2, #8
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	1a9b      	subs	r3, r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f023 0307 	bic.w	r3, r3, #7
 800ed46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	4a15      	ldr	r2, [pc, #84]	@ (800eda0 <prvHeapInit+0xb4>)
 800ed4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed4e:	4b14      	ldr	r3, [pc, #80]	@ (800eda0 <prvHeapInit+0xb4>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2200      	movs	r2, #0
 800ed54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed56:	4b12      	ldr	r3, [pc, #72]	@ (800eda0 <prvHeapInit+0xb4>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	1ad2      	subs	r2, r2, r3
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed6c:	4b0c      	ldr	r3, [pc, #48]	@ (800eda0 <prvHeapInit+0xb4>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	4a0a      	ldr	r2, [pc, #40]	@ (800eda4 <prvHeapInit+0xb8>)
 800ed7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	4a09      	ldr	r2, [pc, #36]	@ (800eda8 <prvHeapInit+0xbc>)
 800ed82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed84:	4b09      	ldr	r3, [pc, #36]	@ (800edac <prvHeapInit+0xc0>)
 800ed86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ed8a:	601a      	str	r2, [r3, #0]
}
 800ed8c:	bf00      	nop
 800ed8e:	3714      	adds	r7, #20
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr
 800ed98:	24030bf4 	.word	0x24030bf4
 800ed9c:	240347f4 	.word	0x240347f4
 800eda0:	240347fc 	.word	0x240347fc
 800eda4:	24034804 	.word	0x24034804
 800eda8:	24034800 	.word	0x24034800
 800edac:	24034810 	.word	0x24034810

0800edb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800edb8:	4b28      	ldr	r3, [pc, #160]	@ (800ee5c <prvInsertBlockIntoFreeList+0xac>)
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e002      	b.n	800edc4 <prvInsertBlockIntoFreeList+0x14>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d8f7      	bhi.n	800edbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	68ba      	ldr	r2, [r7, #8]
 800edd8:	4413      	add	r3, r2
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d108      	bne.n	800edf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	685a      	ldr	r2, [r3, #4]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	441a      	add	r2, r3
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	68ba      	ldr	r2, [r7, #8]
 800edfc:	441a      	add	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d118      	bne.n	800ee38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	4b15      	ldr	r3, [pc, #84]	@ (800ee60 <prvInsertBlockIntoFreeList+0xb0>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d00d      	beq.n	800ee2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	685a      	ldr	r2, [r3, #4]
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	441a      	add	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	601a      	str	r2, [r3, #0]
 800ee2c:	e008      	b.n	800ee40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ee60 <prvInsertBlockIntoFreeList+0xb0>)
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	e003      	b.n	800ee40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d002      	beq.n	800ee4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee4e:	bf00      	nop
 800ee50:	3714      	adds	r7, #20
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	240347f4 	.word	0x240347f4
 800ee60:	240347fc 	.word	0x240347fc

0800ee64 <arm_fir_init_f32>:
 800ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee66:	9f06      	ldr	r7, [sp, #24]
 800ee68:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 800ee6c:	460e      	mov	r6, r1
 800ee6e:	6082      	str	r2, [r0, #8]
 800ee70:	443c      	add	r4, r7
 800ee72:	4605      	mov	r5, r0
 800ee74:	8006      	strh	r6, [r0, #0]
 800ee76:	2100      	movs	r1, #0
 800ee78:	19a2      	adds	r2, r4, r6
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	0092      	lsls	r2, r2, #2
 800ee7e:	f000 faa7 	bl	800f3d0 <memset>
 800ee82:	6068      	str	r0, [r5, #4]
 800ee84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee86:	bf00      	nop

0800ee88 <arm_fir_f32>:
 800ee88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	ed2d 8b10 	vpush	{d8-d15}
 800ee92:	b08b      	sub	sp, #44	@ 0x2c
 800ee94:	f8b4 8000 	ldrh.w	r8, [r4]
 800ee98:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800ee9c:	9004      	str	r0, [sp, #16]
 800ee9e:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 800eea2:	9305      	str	r3, [sp, #20]
 800eea4:	08db      	lsrs	r3, r3, #3
 800eea6:	4440      	add	r0, r8
 800eea8:	68a4      	ldr	r4, [r4, #8]
 800eeaa:	9301      	str	r3, [sp, #4]
 800eeac:	eb0a 0580 	add.w	r5, sl, r0, lsl #2
 800eeb0:	9402      	str	r4, [sp, #8]
 800eeb2:	9500      	str	r5, [sp, #0]
 800eeb4:	f000 81f1 	beq.w	800f29a <arm_fir_f32+0x412>
 800eeb8:	4620      	mov	r0, r4
 800eeba:	ea4f 07d8 	mov.w	r7, r8, lsr #3
 800eebe:	469c      	mov	ip, r3
 800eec0:	4623      	mov	r3, r4
 800eec2:	3020      	adds	r0, #32
 800eec4:	f008 0907 	and.w	r9, r8, #7
 800eec8:	9706      	str	r7, [sp, #24]
 800eeca:	f10a 0b1c 	add.w	fp, sl, #28
 800eece:	9003      	str	r0, [sp, #12]
 800eed0:	0178      	lsls	r0, r7, #5
 800eed2:	9f03      	ldr	r7, [sp, #12]
 800eed4:	f101 0620 	add.w	r6, r1, #32
 800eed8:	4403      	add	r3, r0
 800eeda:	9007      	str	r0, [sp, #28]
 800eedc:	4407      	add	r7, r0
 800eede:	f8dd e018 	ldr.w	lr, [sp, #24]
 800eee2:	4648      	mov	r0, r9
 800eee4:	f8cd a018 	str.w	sl, [sp, #24]
 800eee8:	3520      	adds	r5, #32
 800eeea:	f102 0420 	add.w	r4, r2, #32
 800eeee:	4699      	mov	r9, r3
 800eef0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800eef4:	f8cd 8020 	str.w	r8, [sp, #32]
 800eef8:	9209      	str	r2, [sp, #36]	@ 0x24
 800eefa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800eefe:	9107      	str	r1, [sp, #28]
 800ef00:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800ef04:	465a      	mov	r2, fp
 800ef06:	f845 3c20 	str.w	r3, [r5, #-32]
 800ef0a:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800ef0e:	f845 3c1c 	str.w	r3, [r5, #-28]
 800ef12:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800ef16:	f845 3c18 	str.w	r3, [r5, #-24]
 800ef1a:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800ef1e:	f845 3c14 	str.w	r3, [r5, #-20]
 800ef22:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800ef26:	f845 3c10 	str.w	r3, [r5, #-16]
 800ef2a:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800ef2e:	f845 3c0c 	str.w	r3, [r5, #-12]
 800ef32:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800ef36:	f845 3c08 	str.w	r3, [r5, #-8]
 800ef3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef3e:	f845 3c04 	str.w	r3, [r5, #-4]
 800ef42:	ed1b 9a07 	vldr	s18, [fp, #-28]	@ 0xffffffe4
 800ef46:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800ef4a:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800ef4e:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800ef52:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800ef56:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800ef5a:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800ef5e:	f1be 0f00 	cmp.w	lr, #0
 800ef62:	f000 8200 	beq.w	800f366 <arm_fir_f32+0x4de>
 800ef66:	eddf 6af3 	vldr	s13, [pc, #972]	@ 800f334 <arm_fir_f32+0x4ac>
 800ef6a:	f10b 0120 	add.w	r1, fp, #32
 800ef6e:	4653      	mov	r3, sl
 800ef70:	eeb0 ca66 	vmov.f32	s24, s13
 800ef74:	460a      	mov	r2, r1
 800ef76:	eeb0 6a66 	vmov.f32	s12, s13
 800ef7a:	eef0 9a66 	vmov.f32	s19, s13
 800ef7e:	eeb0 aa66 	vmov.f32	s20, s13
 800ef82:	eef0 aa66 	vmov.f32	s21, s13
 800ef86:	eeb0 ba66 	vmov.f32	s22, s13
 800ef8a:	eef0 ba66 	vmov.f32	s23, s13
 800ef8e:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800ef92:	3320      	adds	r3, #32
 800ef94:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800ef98:	3220      	adds	r2, #32
 800ef9a:	ee67 fa09 	vmul.f32	s31, s14, s18
 800ef9e:	ed53 ea0f 	vldr	s29, [r3, #-60]	@ 0xffffffc4
 800efa2:	ee27 da21 	vmul.f32	s26, s14, s3
 800efa6:	ed12 9a0f 	vldr	s18, [r2, #-60]	@ 0xffffffc4
 800efaa:	ee27 2a01 	vmul.f32	s4, s14, s2
 800efae:	ed13 ea0e 	vldr	s28, [r3, #-56]	@ 0xffffffc8
 800efb2:	ee27 3a20 	vmul.f32	s6, s14, s1
 800efb6:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800efba:	ee67 3a00 	vmul.f32	s7, s14, s0
 800efbe:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800efc2:	ee67 5a08 	vmul.f32	s11, s14, s16
 800efc6:	ed53 2a0b 	vldr	s5, [r3, #-44]	@ 0xffffffd4
 800efca:	ee27 fa28 	vmul.f32	s30, s14, s17
 800efce:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
 800efd2:	ee67 7a24 	vmul.f32	s15, s14, s9
 800efd6:	ed13 5a09 	vldr	s10, [r3, #-36]	@ 0xffffffdc
 800efda:	ee7f baab 	vadd.f32	s23, s31, s23
 800efde:	429f      	cmp	r7, r3
 800efe0:	ee6e faa1 	vmul.f32	s31, s29, s3
 800efe4:	ed52 1a0e 	vldr	s3, [r2, #-56]	@ 0xffffffc8
 800efe8:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800efec:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800eff0:	ee2e da81 	vmul.f32	s26, s29, s2
 800eff4:	ee2e 2aa0 	vmul.f32	s4, s29, s1
 800eff8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800effc:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f000:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800f004:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800f008:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f00c:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f010:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800f014:	ee24 faae 	vmul.f32	s30, s9, s29
 800f018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f01c:	ee6e ea89 	vmul.f32	s29, s29, s18
 800f020:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800f024:	ed12 1a0d 	vldr	s2, [r2, #-52]	@ 0xffffffcc
 800f028:	ee7f baab 	vadd.f32	s23, s31, s23
 800f02c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f030:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f034:	ee2e da20 	vmul.f32	s26, s28, s1
 800f038:	ee2e 2a00 	vmul.f32	s4, s28, s0
 800f03c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f040:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f044:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800f048:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800f04c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f050:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f054:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800f058:	ee29 fa0e 	vmul.f32	s30, s18, s28
 800f05c:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800f060:	ee2e ea21 	vmul.f32	s28, s28, s3
 800f064:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800f068:	ed52 0a0c 	vldr	s1, [r2, #-48]	@ 0xffffffd0
 800f06c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f070:	ee77 ba2b 	vadd.f32	s23, s14, s23
 800f074:	ee2d da80 	vmul.f32	s26, s27, s0
 800f078:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f07c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f080:	ee2d 2a88 	vmul.f32	s4, s27, s16
 800f084:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800f088:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f08c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f090:	ee64 3aad 	vmul.f32	s7, s9, s27
 800f094:	ee69 5a2d 	vmul.f32	s11, s18, s27
 800f098:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f09c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800f0a0:	ee21 faad 	vmul.f32	s30, s3, s27
 800f0a4:	ee6d da81 	vmul.f32	s27, s27, s2
 800f0a8:	ee6c fa80 	vmul.f32	s31, s25, s0
 800f0ac:	ed12 0a0b 	vldr	s0, [r2, #-44]	@ 0xffffffd4
 800f0b0:	ee76 baab 	vadd.f32	s23, s13, s23
 800f0b4:	ee3d da0b 	vadd.f32	s26, s26, s22
 800f0b8:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f0bc:	ee2c ba88 	vmul.f32	s22, s25, s16
 800f0c0:	ee2c 2aa8 	vmul.f32	s4, s25, s17
 800f0c4:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f0c8:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f0cc:	ee24 3aac 	vmul.f32	s6, s9, s25
 800f0d0:	ee69 3a2c 	vmul.f32	s7, s18, s25
 800f0d4:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f0d8:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f0dc:	ee61 5aac 	vmul.f32	s11, s3, s25
 800f0e0:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800f0e4:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800f0e8:	ee6c caa0 	vmul.f32	s25, s25, s1
 800f0ec:	ee62 ea88 	vmul.f32	s29, s5, s16
 800f0f0:	ed12 8a0a 	vldr	s16, [r2, #-40]	@ 0xffffffd8
 800f0f4:	ee3b da0d 	vadd.f32	s26, s22, s26
 800f0f8:	ee7f baab 	vadd.f32	s23, s31, s23
 800f0fc:	ee22 baa8 	vmul.f32	s22, s5, s17
 800f100:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f104:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f108:	ee24 2aa2 	vmul.f32	s4, s9, s5
 800f10c:	ee29 3a22 	vmul.f32	s6, s18, s5
 800f110:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f114:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f118:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800f11c:	ee61 5a22 	vmul.f32	s11, s2, s5
 800f120:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f124:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800f128:	ee20 faa2 	vmul.f32	s30, s1, s5
 800f12c:	ee62 2a80 	vmul.f32	s5, s5, s0
 800f130:	ee7e faab 	vadd.f32	s31, s29, s23
 800f134:	ee3b ba0d 	vadd.f32	s22, s22, s26
 800f138:	ee64 ba28 	vmul.f32	s23, s8, s17
 800f13c:	ed52 8a09 	vldr	s17, [r2, #-36]	@ 0xffffffdc
 800f140:	ee24 da84 	vmul.f32	s26, s9, s8
 800f144:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800f148:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f14c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f150:	ee29 2a04 	vmul.f32	s4, s18, s8
 800f154:	ee21 3a84 	vmul.f32	s6, s3, s8
 800f158:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f15c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f160:	ee61 3a04 	vmul.f32	s7, s2, s8
 800f164:	ee60 5a84 	vmul.f32	s11, s1, s8
 800f168:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f16c:	ee20 7a04 	vmul.f32	s14, s0, s8
 800f170:	ee64 6a08 	vmul.f32	s13, s8, s16
 800f174:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f178:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f17c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f180:	ee37 7a0c 	vadd.f32	s14, s14, s24
 800f184:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f188:	ee7b baaf 	vadd.f32	s23, s23, s31
 800f18c:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f190:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f194:	ee29 4a05 	vmul.f32	s8, s18, s10
 800f198:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f19c:	ee61 2a85 	vmul.f32	s5, s3, s10
 800f1a0:	ee21 3a05 	vmul.f32	s6, s2, s10
 800f1a4:	ee60 3a85 	vmul.f32	s7, s1, s10
 800f1a8:	ee60 5a05 	vmul.f32	s11, s0, s10
 800f1ac:	ee28 ca05 	vmul.f32	s24, s16, s10
 800f1b0:	ee65 7a28 	vmul.f32	s15, s10, s17
 800f1b4:	ee74 baab 	vadd.f32	s23, s9, s23
 800f1b8:	ee34 ba0b 	vadd.f32	s22, s8, s22
 800f1bc:	ee72 aaaa 	vadd.f32	s21, s5, s21
 800f1c0:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f1c4:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f1c8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f1cc:	ee3c ca07 	vadd.f32	s24, s24, s14
 800f1d0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800f1d4:	f47f aedb 	bne.w	800ef8e <arm_fir_f32+0x106>
 800f1d8:	eb0b 0208 	add.w	r2, fp, r8
 800f1dc:	46cb      	mov	fp, r9
 800f1de:	b3a0      	cbz	r0, 800f24a <arm_fir_f32+0x3c2>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	ecfb 7a01 	vldmia	fp!, {s15}
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	ecf2 5a01 	vldmia	r2!, {s11}
 800f1ec:	ee27 2a89 	vmul.f32	s4, s15, s18
 800f1f0:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800f1f4:	ee27 3a81 	vmul.f32	s6, s15, s2
 800f1f8:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800f1fc:	ee27 4a80 	vmul.f32	s8, s15, s0
 800f200:	ee67 4a88 	vmul.f32	s9, s15, s16
 800f204:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800f208:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f20c:	eeb0 9a61 	vmov.f32	s18, s3
 800f210:	ee7b ba82 	vadd.f32	s23, s23, s4
 800f214:	eef0 1a41 	vmov.f32	s3, s2
 800f218:	ee3b ba22 	vadd.f32	s22, s22, s5
 800f21c:	eeb0 1a60 	vmov.f32	s2, s1
 800f220:	ee7a aa83 	vadd.f32	s21, s21, s6
 800f224:	eef0 0a40 	vmov.f32	s1, s0
 800f228:	ee3a aa23 	vadd.f32	s20, s20, s7
 800f22c:	eeb0 0a48 	vmov.f32	s0, s16
 800f230:	ee79 9a84 	vadd.f32	s19, s19, s8
 800f234:	eeb0 8a68 	vmov.f32	s16, s17
 800f238:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f23c:	eef0 8a65 	vmov.f32	s17, s11
 800f240:	ee3c ca05 	vadd.f32	s24, s24, s10
 800f244:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f248:	d1cb      	bne.n	800f1e2 <arm_fir_f32+0x35a>
 800f24a:	f1bc 0c01 	subs.w	ip, ip, #1
 800f24e:	ed44 ba08 	vstr	s23, [r4, #-32]	@ 0xffffffe0
 800f252:	ed04 ba07 	vstr	s22, [r4, #-28]	@ 0xffffffe4
 800f256:	f106 0620 	add.w	r6, r6, #32
 800f25a:	ed44 aa06 	vstr	s21, [r4, #-24]	@ 0xffffffe8
 800f25e:	f105 0520 	add.w	r5, r5, #32
 800f262:	ed04 aa05 	vstr	s20, [r4, #-20]	@ 0xffffffec
 800f266:	468b      	mov	fp, r1
 800f268:	ed44 9a04 	vstr	s19, [r4, #-16]
 800f26c:	f104 0420 	add.w	r4, r4, #32
 800f270:	ed04 6a0b 	vstr	s12, [r4, #-44]	@ 0xffffffd4
 800f274:	ed04 ca0a 	vstr	s24, [r4, #-40]	@ 0xffffffd8
 800f278:	ed44 6a09 	vstr	s13, [r4, #-36]	@ 0xffffffdc
 800f27c:	f47f ae40 	bne.w	800ef00 <arm_fir_f32+0x78>
 800f280:	9b01      	ldr	r3, [sp, #4]
 800f282:	9800      	ldr	r0, [sp, #0]
 800f284:	015b      	lsls	r3, r3, #5
 800f286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f28c:	4418      	add	r0, r3
 800f28e:	441a      	add	r2, r3
 800f290:	e9dd a106 	ldrd	sl, r1, [sp, #24]
 800f294:	9000      	str	r0, [sp, #0]
 800f296:	4419      	add	r1, r3
 800f298:	449a      	add	sl, r3
 800f29a:	9b05      	ldr	r3, [sp, #20]
 800f29c:	f013 0c07 	ands.w	ip, r3, #7
 800f2a0:	d021      	beq.n	800f2e6 <arm_fir_f32+0x45e>
 800f2a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f2a6:	9e00      	ldr	r6, [sp, #0]
 800f2a8:	4655      	mov	r5, sl
 800f2aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f2ae:	eb01 0e0c 	add.w	lr, r1, ip
 800f2b2:	f851 7b04 	ldr.w	r7, [r1], #4
 800f2b6:	4643      	mov	r3, r8
 800f2b8:	464c      	mov	r4, r9
 800f2ba:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800f334 <arm_fir_f32+0x4ac>
 800f2be:	4628      	mov	r0, r5
 800f2c0:	f846 7b04 	str.w	r7, [r6], #4
 800f2c4:	ecf0 7a01 	vldmia	r0!, {s15}
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	ecf4 6a01 	vldmia	r4!, {s13}
 800f2ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f2d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2d6:	d1f5      	bne.n	800f2c4 <arm_fir_f32+0x43c>
 800f2d8:	4571      	cmp	r1, lr
 800f2da:	eca2 7a01 	vstmia	r2!, {s14}
 800f2de:	f105 0504 	add.w	r5, r5, #4
 800f2e2:	d1e6      	bne.n	800f2b2 <arm_fir_f32+0x42a>
 800f2e4:	44e2      	add	sl, ip
 800f2e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f2ea:	9b04      	ldr	r3, [sp, #16]
 800f2ec:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800f2f0:	685d      	ldr	r5, [r3, #4]
 800f2f2:	d021      	beq.n	800f338 <arm_fir_f32+0x4b0>
 800f2f4:	f10a 0210 	add.w	r2, sl, #16
 800f2f8:	f105 0310 	add.w	r3, r5, #16
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f302:	3901      	subs	r1, #1
 800f304:	f102 0210 	add.w	r2, r2, #16
 800f308:	f103 0310 	add.w	r3, r3, #16
 800f30c:	f843 0c20 	str.w	r0, [r3, #-32]
 800f310:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800f314:	f843 0c1c 	str.w	r0, [r3, #-28]
 800f318:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800f31c:	f843 0c18 	str.w	r0, [r3, #-24]
 800f320:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800f324:	f843 0c14 	str.w	r0, [r3, #-20]
 800f328:	d1e9      	bne.n	800f2fe <arm_fir_f32+0x476>
 800f32a:	0124      	lsls	r4, r4, #4
 800f32c:	44a2      	add	sl, r4
 800f32e:	4425      	add	r5, r4
 800f330:	e002      	b.n	800f338 <arm_fir_f32+0x4b0>
 800f332:	bf00      	nop
 800f334:	00000000 	.word	0x00000000
 800f338:	f018 0803 	ands.w	r8, r8, #3
 800f33c:	d00e      	beq.n	800f35c <arm_fir_f32+0x4d4>
 800f33e:	f8da 3000 	ldr.w	r3, [sl]
 800f342:	f1b8 0801 	subs.w	r8, r8, #1
 800f346:	602b      	str	r3, [r5, #0]
 800f348:	d008      	beq.n	800f35c <arm_fir_f32+0x4d4>
 800f34a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f34e:	f1b8 0f01 	cmp.w	r8, #1
 800f352:	606b      	str	r3, [r5, #4]
 800f354:	d002      	beq.n	800f35c <arm_fir_f32+0x4d4>
 800f356:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f35a:	60ab      	str	r3, [r5, #8]
 800f35c:	b00b      	add	sp, #44	@ 0x2c
 800f35e:	ecbd 8b10 	vpop	{d8-d15}
 800f362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f366:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 800f334 <arm_fir_f32+0x4ac>
 800f36a:	f102 0120 	add.w	r1, r2, #32
 800f36e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f372:	eeb0 ca66 	vmov.f32	s24, s13
 800f376:	eeb0 6a66 	vmov.f32	s12, s13
 800f37a:	eef0 9a66 	vmov.f32	s19, s13
 800f37e:	eeb0 aa66 	vmov.f32	s20, s13
 800f382:	eef0 aa66 	vmov.f32	s21, s13
 800f386:	eeb0 ba66 	vmov.f32	s22, s13
 800f38a:	eef0 ba66 	vmov.f32	s23, s13
 800f38e:	e726      	b.n	800f1de <arm_fir_f32+0x356>

0800f390 <siprintf>:
 800f390:	b40e      	push	{r1, r2, r3}
 800f392:	b500      	push	{lr}
 800f394:	b09c      	sub	sp, #112	@ 0x70
 800f396:	ab1d      	add	r3, sp, #116	@ 0x74
 800f398:	9002      	str	r0, [sp, #8]
 800f39a:	9006      	str	r0, [sp, #24]
 800f39c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f3a0:	4809      	ldr	r0, [pc, #36]	@ (800f3c8 <siprintf+0x38>)
 800f3a2:	9107      	str	r1, [sp, #28]
 800f3a4:	9104      	str	r1, [sp, #16]
 800f3a6:	4909      	ldr	r1, [pc, #36]	@ (800f3cc <siprintf+0x3c>)
 800f3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ac:	9105      	str	r1, [sp, #20]
 800f3ae:	6800      	ldr	r0, [r0, #0]
 800f3b0:	9301      	str	r3, [sp, #4]
 800f3b2:	a902      	add	r1, sp, #8
 800f3b4:	f000 f9f8 	bl	800f7a8 <_svfiprintf_r>
 800f3b8:	9b02      	ldr	r3, [sp, #8]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	701a      	strb	r2, [r3, #0]
 800f3be:	b01c      	add	sp, #112	@ 0x70
 800f3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3c4:	b003      	add	sp, #12
 800f3c6:	4770      	bx	lr
 800f3c8:	24000018 	.word	0x24000018
 800f3cc:	ffff0208 	.word	0xffff0208

0800f3d0 <memset>:
 800f3d0:	4402      	add	r2, r0
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d100      	bne.n	800f3da <memset+0xa>
 800f3d8:	4770      	bx	lr
 800f3da:	f803 1b01 	strb.w	r1, [r3], #1
 800f3de:	e7f9      	b.n	800f3d4 <memset+0x4>

0800f3e0 <_reclaim_reent>:
 800f3e0:	4b29      	ldr	r3, [pc, #164]	@ (800f488 <_reclaim_reent+0xa8>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4283      	cmp	r3, r0
 800f3e6:	b570      	push	{r4, r5, r6, lr}
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	d04b      	beq.n	800f484 <_reclaim_reent+0xa4>
 800f3ec:	69c3      	ldr	r3, [r0, #28]
 800f3ee:	b1ab      	cbz	r3, 800f41c <_reclaim_reent+0x3c>
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	b16b      	cbz	r3, 800f410 <_reclaim_reent+0x30>
 800f3f4:	2500      	movs	r5, #0
 800f3f6:	69e3      	ldr	r3, [r4, #28]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	5959      	ldr	r1, [r3, r5]
 800f3fc:	2900      	cmp	r1, #0
 800f3fe:	d13b      	bne.n	800f478 <_reclaim_reent+0x98>
 800f400:	3504      	adds	r5, #4
 800f402:	2d80      	cmp	r5, #128	@ 0x80
 800f404:	d1f7      	bne.n	800f3f6 <_reclaim_reent+0x16>
 800f406:	69e3      	ldr	r3, [r4, #28]
 800f408:	4620      	mov	r0, r4
 800f40a:	68d9      	ldr	r1, [r3, #12]
 800f40c:	f000 f878 	bl	800f500 <_free_r>
 800f410:	69e3      	ldr	r3, [r4, #28]
 800f412:	6819      	ldr	r1, [r3, #0]
 800f414:	b111      	cbz	r1, 800f41c <_reclaim_reent+0x3c>
 800f416:	4620      	mov	r0, r4
 800f418:	f000 f872 	bl	800f500 <_free_r>
 800f41c:	6961      	ldr	r1, [r4, #20]
 800f41e:	b111      	cbz	r1, 800f426 <_reclaim_reent+0x46>
 800f420:	4620      	mov	r0, r4
 800f422:	f000 f86d 	bl	800f500 <_free_r>
 800f426:	69e1      	ldr	r1, [r4, #28]
 800f428:	b111      	cbz	r1, 800f430 <_reclaim_reent+0x50>
 800f42a:	4620      	mov	r0, r4
 800f42c:	f000 f868 	bl	800f500 <_free_r>
 800f430:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f432:	b111      	cbz	r1, 800f43a <_reclaim_reent+0x5a>
 800f434:	4620      	mov	r0, r4
 800f436:	f000 f863 	bl	800f500 <_free_r>
 800f43a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f43c:	b111      	cbz	r1, 800f444 <_reclaim_reent+0x64>
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 f85e 	bl	800f500 <_free_r>
 800f444:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f446:	b111      	cbz	r1, 800f44e <_reclaim_reent+0x6e>
 800f448:	4620      	mov	r0, r4
 800f44a:	f000 f859 	bl	800f500 <_free_r>
 800f44e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f450:	b111      	cbz	r1, 800f458 <_reclaim_reent+0x78>
 800f452:	4620      	mov	r0, r4
 800f454:	f000 f854 	bl	800f500 <_free_r>
 800f458:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f45a:	b111      	cbz	r1, 800f462 <_reclaim_reent+0x82>
 800f45c:	4620      	mov	r0, r4
 800f45e:	f000 f84f 	bl	800f500 <_free_r>
 800f462:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f464:	b111      	cbz	r1, 800f46c <_reclaim_reent+0x8c>
 800f466:	4620      	mov	r0, r4
 800f468:	f000 f84a 	bl	800f500 <_free_r>
 800f46c:	6a23      	ldr	r3, [r4, #32]
 800f46e:	b14b      	cbz	r3, 800f484 <_reclaim_reent+0xa4>
 800f470:	4620      	mov	r0, r4
 800f472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f476:	4718      	bx	r3
 800f478:	680e      	ldr	r6, [r1, #0]
 800f47a:	4620      	mov	r0, r4
 800f47c:	f000 f840 	bl	800f500 <_free_r>
 800f480:	4631      	mov	r1, r6
 800f482:	e7bb      	b.n	800f3fc <_reclaim_reent+0x1c>
 800f484:	bd70      	pop	{r4, r5, r6, pc}
 800f486:	bf00      	nop
 800f488:	24000018 	.word	0x24000018

0800f48c <__errno>:
 800f48c:	4b01      	ldr	r3, [pc, #4]	@ (800f494 <__errno+0x8>)
 800f48e:	6818      	ldr	r0, [r3, #0]
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	24000018 	.word	0x24000018

0800f498 <__libc_init_array>:
 800f498:	b570      	push	{r4, r5, r6, lr}
 800f49a:	4d0d      	ldr	r5, [pc, #52]	@ (800f4d0 <__libc_init_array+0x38>)
 800f49c:	4c0d      	ldr	r4, [pc, #52]	@ (800f4d4 <__libc_init_array+0x3c>)
 800f49e:	1b64      	subs	r4, r4, r5
 800f4a0:	10a4      	asrs	r4, r4, #2
 800f4a2:	2600      	movs	r6, #0
 800f4a4:	42a6      	cmp	r6, r4
 800f4a6:	d109      	bne.n	800f4bc <__libc_init_array+0x24>
 800f4a8:	4d0b      	ldr	r5, [pc, #44]	@ (800f4d8 <__libc_init_array+0x40>)
 800f4aa:	4c0c      	ldr	r4, [pc, #48]	@ (800f4dc <__libc_init_array+0x44>)
 800f4ac:	f000 fc66 	bl	800fd7c <_init>
 800f4b0:	1b64      	subs	r4, r4, r5
 800f4b2:	10a4      	asrs	r4, r4, #2
 800f4b4:	2600      	movs	r6, #0
 800f4b6:	42a6      	cmp	r6, r4
 800f4b8:	d105      	bne.n	800f4c6 <__libc_init_array+0x2e>
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4c0:	4798      	blx	r3
 800f4c2:	3601      	adds	r6, #1
 800f4c4:	e7ee      	b.n	800f4a4 <__libc_init_array+0xc>
 800f4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4ca:	4798      	blx	r3
 800f4cc:	3601      	adds	r6, #1
 800f4ce:	e7f2      	b.n	800f4b6 <__libc_init_array+0x1e>
 800f4d0:	0800ff20 	.word	0x0800ff20
 800f4d4:	0800ff20 	.word	0x0800ff20
 800f4d8:	0800ff20 	.word	0x0800ff20
 800f4dc:	0800ff24 	.word	0x0800ff24

0800f4e0 <__retarget_lock_acquire_recursive>:
 800f4e0:	4770      	bx	lr

0800f4e2 <__retarget_lock_release_recursive>:
 800f4e2:	4770      	bx	lr

0800f4e4 <memcpy>:
 800f4e4:	440a      	add	r2, r1
 800f4e6:	4291      	cmp	r1, r2
 800f4e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4ec:	d100      	bne.n	800f4f0 <memcpy+0xc>
 800f4ee:	4770      	bx	lr
 800f4f0:	b510      	push	{r4, lr}
 800f4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4fa:	4291      	cmp	r1, r2
 800f4fc:	d1f9      	bne.n	800f4f2 <memcpy+0xe>
 800f4fe:	bd10      	pop	{r4, pc}

0800f500 <_free_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4605      	mov	r5, r0
 800f504:	2900      	cmp	r1, #0
 800f506:	d041      	beq.n	800f58c <_free_r+0x8c>
 800f508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f50c:	1f0c      	subs	r4, r1, #4
 800f50e:	2b00      	cmp	r3, #0
 800f510:	bfb8      	it	lt
 800f512:	18e4      	addlt	r4, r4, r3
 800f514:	f000 f8e0 	bl	800f6d8 <__malloc_lock>
 800f518:	4a1d      	ldr	r2, [pc, #116]	@ (800f590 <_free_r+0x90>)
 800f51a:	6813      	ldr	r3, [r2, #0]
 800f51c:	b933      	cbnz	r3, 800f52c <_free_r+0x2c>
 800f51e:	6063      	str	r3, [r4, #4]
 800f520:	6014      	str	r4, [r2, #0]
 800f522:	4628      	mov	r0, r5
 800f524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f528:	f000 b8dc 	b.w	800f6e4 <__malloc_unlock>
 800f52c:	42a3      	cmp	r3, r4
 800f52e:	d908      	bls.n	800f542 <_free_r+0x42>
 800f530:	6820      	ldr	r0, [r4, #0]
 800f532:	1821      	adds	r1, r4, r0
 800f534:	428b      	cmp	r3, r1
 800f536:	bf01      	itttt	eq
 800f538:	6819      	ldreq	r1, [r3, #0]
 800f53a:	685b      	ldreq	r3, [r3, #4]
 800f53c:	1809      	addeq	r1, r1, r0
 800f53e:	6021      	streq	r1, [r4, #0]
 800f540:	e7ed      	b.n	800f51e <_free_r+0x1e>
 800f542:	461a      	mov	r2, r3
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	b10b      	cbz	r3, 800f54c <_free_r+0x4c>
 800f548:	42a3      	cmp	r3, r4
 800f54a:	d9fa      	bls.n	800f542 <_free_r+0x42>
 800f54c:	6811      	ldr	r1, [r2, #0]
 800f54e:	1850      	adds	r0, r2, r1
 800f550:	42a0      	cmp	r0, r4
 800f552:	d10b      	bne.n	800f56c <_free_r+0x6c>
 800f554:	6820      	ldr	r0, [r4, #0]
 800f556:	4401      	add	r1, r0
 800f558:	1850      	adds	r0, r2, r1
 800f55a:	4283      	cmp	r3, r0
 800f55c:	6011      	str	r1, [r2, #0]
 800f55e:	d1e0      	bne.n	800f522 <_free_r+0x22>
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	6053      	str	r3, [r2, #4]
 800f566:	4408      	add	r0, r1
 800f568:	6010      	str	r0, [r2, #0]
 800f56a:	e7da      	b.n	800f522 <_free_r+0x22>
 800f56c:	d902      	bls.n	800f574 <_free_r+0x74>
 800f56e:	230c      	movs	r3, #12
 800f570:	602b      	str	r3, [r5, #0]
 800f572:	e7d6      	b.n	800f522 <_free_r+0x22>
 800f574:	6820      	ldr	r0, [r4, #0]
 800f576:	1821      	adds	r1, r4, r0
 800f578:	428b      	cmp	r3, r1
 800f57a:	bf04      	itt	eq
 800f57c:	6819      	ldreq	r1, [r3, #0]
 800f57e:	685b      	ldreq	r3, [r3, #4]
 800f580:	6063      	str	r3, [r4, #4]
 800f582:	bf04      	itt	eq
 800f584:	1809      	addeq	r1, r1, r0
 800f586:	6021      	streq	r1, [r4, #0]
 800f588:	6054      	str	r4, [r2, #4]
 800f58a:	e7ca      	b.n	800f522 <_free_r+0x22>
 800f58c:	bd38      	pop	{r3, r4, r5, pc}
 800f58e:	bf00      	nop
 800f590:	24034958 	.word	0x24034958

0800f594 <sbrk_aligned>:
 800f594:	b570      	push	{r4, r5, r6, lr}
 800f596:	4e0f      	ldr	r6, [pc, #60]	@ (800f5d4 <sbrk_aligned+0x40>)
 800f598:	460c      	mov	r4, r1
 800f59a:	6831      	ldr	r1, [r6, #0]
 800f59c:	4605      	mov	r5, r0
 800f59e:	b911      	cbnz	r1, 800f5a6 <sbrk_aligned+0x12>
 800f5a0:	f000 fba6 	bl	800fcf0 <_sbrk_r>
 800f5a4:	6030      	str	r0, [r6, #0]
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	f000 fba1 	bl	800fcf0 <_sbrk_r>
 800f5ae:	1c43      	adds	r3, r0, #1
 800f5b0:	d103      	bne.n	800f5ba <sbrk_aligned+0x26>
 800f5b2:	f04f 34ff 	mov.w	r4, #4294967295
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ba:	1cc4      	adds	r4, r0, #3
 800f5bc:	f024 0403 	bic.w	r4, r4, #3
 800f5c0:	42a0      	cmp	r0, r4
 800f5c2:	d0f8      	beq.n	800f5b6 <sbrk_aligned+0x22>
 800f5c4:	1a21      	subs	r1, r4, r0
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f000 fb92 	bl	800fcf0 <_sbrk_r>
 800f5cc:	3001      	adds	r0, #1
 800f5ce:	d1f2      	bne.n	800f5b6 <sbrk_aligned+0x22>
 800f5d0:	e7ef      	b.n	800f5b2 <sbrk_aligned+0x1e>
 800f5d2:	bf00      	nop
 800f5d4:	24034954 	.word	0x24034954

0800f5d8 <_malloc_r>:
 800f5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5dc:	1ccd      	adds	r5, r1, #3
 800f5de:	f025 0503 	bic.w	r5, r5, #3
 800f5e2:	3508      	adds	r5, #8
 800f5e4:	2d0c      	cmp	r5, #12
 800f5e6:	bf38      	it	cc
 800f5e8:	250c      	movcc	r5, #12
 800f5ea:	2d00      	cmp	r5, #0
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	db01      	blt.n	800f5f4 <_malloc_r+0x1c>
 800f5f0:	42a9      	cmp	r1, r5
 800f5f2:	d904      	bls.n	800f5fe <_malloc_r+0x26>
 800f5f4:	230c      	movs	r3, #12
 800f5f6:	6033      	str	r3, [r6, #0]
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6d4 <_malloc_r+0xfc>
 800f602:	f000 f869 	bl	800f6d8 <__malloc_lock>
 800f606:	f8d8 3000 	ldr.w	r3, [r8]
 800f60a:	461c      	mov	r4, r3
 800f60c:	bb44      	cbnz	r4, 800f660 <_malloc_r+0x88>
 800f60e:	4629      	mov	r1, r5
 800f610:	4630      	mov	r0, r6
 800f612:	f7ff ffbf 	bl	800f594 <sbrk_aligned>
 800f616:	1c43      	adds	r3, r0, #1
 800f618:	4604      	mov	r4, r0
 800f61a:	d158      	bne.n	800f6ce <_malloc_r+0xf6>
 800f61c:	f8d8 4000 	ldr.w	r4, [r8]
 800f620:	4627      	mov	r7, r4
 800f622:	2f00      	cmp	r7, #0
 800f624:	d143      	bne.n	800f6ae <_malloc_r+0xd6>
 800f626:	2c00      	cmp	r4, #0
 800f628:	d04b      	beq.n	800f6c2 <_malloc_r+0xea>
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	4639      	mov	r1, r7
 800f62e:	4630      	mov	r0, r6
 800f630:	eb04 0903 	add.w	r9, r4, r3
 800f634:	f000 fb5c 	bl	800fcf0 <_sbrk_r>
 800f638:	4581      	cmp	r9, r0
 800f63a:	d142      	bne.n	800f6c2 <_malloc_r+0xea>
 800f63c:	6821      	ldr	r1, [r4, #0]
 800f63e:	1a6d      	subs	r5, r5, r1
 800f640:	4629      	mov	r1, r5
 800f642:	4630      	mov	r0, r6
 800f644:	f7ff ffa6 	bl	800f594 <sbrk_aligned>
 800f648:	3001      	adds	r0, #1
 800f64a:	d03a      	beq.n	800f6c2 <_malloc_r+0xea>
 800f64c:	6823      	ldr	r3, [r4, #0]
 800f64e:	442b      	add	r3, r5
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	f8d8 3000 	ldr.w	r3, [r8]
 800f656:	685a      	ldr	r2, [r3, #4]
 800f658:	bb62      	cbnz	r2, 800f6b4 <_malloc_r+0xdc>
 800f65a:	f8c8 7000 	str.w	r7, [r8]
 800f65e:	e00f      	b.n	800f680 <_malloc_r+0xa8>
 800f660:	6822      	ldr	r2, [r4, #0]
 800f662:	1b52      	subs	r2, r2, r5
 800f664:	d420      	bmi.n	800f6a8 <_malloc_r+0xd0>
 800f666:	2a0b      	cmp	r2, #11
 800f668:	d917      	bls.n	800f69a <_malloc_r+0xc2>
 800f66a:	1961      	adds	r1, r4, r5
 800f66c:	42a3      	cmp	r3, r4
 800f66e:	6025      	str	r5, [r4, #0]
 800f670:	bf18      	it	ne
 800f672:	6059      	strne	r1, [r3, #4]
 800f674:	6863      	ldr	r3, [r4, #4]
 800f676:	bf08      	it	eq
 800f678:	f8c8 1000 	streq.w	r1, [r8]
 800f67c:	5162      	str	r2, [r4, r5]
 800f67e:	604b      	str	r3, [r1, #4]
 800f680:	4630      	mov	r0, r6
 800f682:	f000 f82f 	bl	800f6e4 <__malloc_unlock>
 800f686:	f104 000b 	add.w	r0, r4, #11
 800f68a:	1d23      	adds	r3, r4, #4
 800f68c:	f020 0007 	bic.w	r0, r0, #7
 800f690:	1ac2      	subs	r2, r0, r3
 800f692:	bf1c      	itt	ne
 800f694:	1a1b      	subne	r3, r3, r0
 800f696:	50a3      	strne	r3, [r4, r2]
 800f698:	e7af      	b.n	800f5fa <_malloc_r+0x22>
 800f69a:	6862      	ldr	r2, [r4, #4]
 800f69c:	42a3      	cmp	r3, r4
 800f69e:	bf0c      	ite	eq
 800f6a0:	f8c8 2000 	streq.w	r2, [r8]
 800f6a4:	605a      	strne	r2, [r3, #4]
 800f6a6:	e7eb      	b.n	800f680 <_malloc_r+0xa8>
 800f6a8:	4623      	mov	r3, r4
 800f6aa:	6864      	ldr	r4, [r4, #4]
 800f6ac:	e7ae      	b.n	800f60c <_malloc_r+0x34>
 800f6ae:	463c      	mov	r4, r7
 800f6b0:	687f      	ldr	r7, [r7, #4]
 800f6b2:	e7b6      	b.n	800f622 <_malloc_r+0x4a>
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	42a3      	cmp	r3, r4
 800f6ba:	d1fb      	bne.n	800f6b4 <_malloc_r+0xdc>
 800f6bc:	2300      	movs	r3, #0
 800f6be:	6053      	str	r3, [r2, #4]
 800f6c0:	e7de      	b.n	800f680 <_malloc_r+0xa8>
 800f6c2:	230c      	movs	r3, #12
 800f6c4:	6033      	str	r3, [r6, #0]
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f000 f80c 	bl	800f6e4 <__malloc_unlock>
 800f6cc:	e794      	b.n	800f5f8 <_malloc_r+0x20>
 800f6ce:	6005      	str	r5, [r0, #0]
 800f6d0:	e7d6      	b.n	800f680 <_malloc_r+0xa8>
 800f6d2:	bf00      	nop
 800f6d4:	24034958 	.word	0x24034958

0800f6d8 <__malloc_lock>:
 800f6d8:	4801      	ldr	r0, [pc, #4]	@ (800f6e0 <__malloc_lock+0x8>)
 800f6da:	f7ff bf01 	b.w	800f4e0 <__retarget_lock_acquire_recursive>
 800f6de:	bf00      	nop
 800f6e0:	24034950 	.word	0x24034950

0800f6e4 <__malloc_unlock>:
 800f6e4:	4801      	ldr	r0, [pc, #4]	@ (800f6ec <__malloc_unlock+0x8>)
 800f6e6:	f7ff befc 	b.w	800f4e2 <__retarget_lock_release_recursive>
 800f6ea:	bf00      	nop
 800f6ec:	24034950 	.word	0x24034950

0800f6f0 <__ssputs_r>:
 800f6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6f4:	688e      	ldr	r6, [r1, #8]
 800f6f6:	461f      	mov	r7, r3
 800f6f8:	42be      	cmp	r6, r7
 800f6fa:	680b      	ldr	r3, [r1, #0]
 800f6fc:	4682      	mov	sl, r0
 800f6fe:	460c      	mov	r4, r1
 800f700:	4690      	mov	r8, r2
 800f702:	d82d      	bhi.n	800f760 <__ssputs_r+0x70>
 800f704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f708:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f70c:	d026      	beq.n	800f75c <__ssputs_r+0x6c>
 800f70e:	6965      	ldr	r5, [r4, #20]
 800f710:	6909      	ldr	r1, [r1, #16]
 800f712:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f716:	eba3 0901 	sub.w	r9, r3, r1
 800f71a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f71e:	1c7b      	adds	r3, r7, #1
 800f720:	444b      	add	r3, r9
 800f722:	106d      	asrs	r5, r5, #1
 800f724:	429d      	cmp	r5, r3
 800f726:	bf38      	it	cc
 800f728:	461d      	movcc	r5, r3
 800f72a:	0553      	lsls	r3, r2, #21
 800f72c:	d527      	bpl.n	800f77e <__ssputs_r+0x8e>
 800f72e:	4629      	mov	r1, r5
 800f730:	f7ff ff52 	bl	800f5d8 <_malloc_r>
 800f734:	4606      	mov	r6, r0
 800f736:	b360      	cbz	r0, 800f792 <__ssputs_r+0xa2>
 800f738:	6921      	ldr	r1, [r4, #16]
 800f73a:	464a      	mov	r2, r9
 800f73c:	f7ff fed2 	bl	800f4e4 <memcpy>
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f74a:	81a3      	strh	r3, [r4, #12]
 800f74c:	6126      	str	r6, [r4, #16]
 800f74e:	6165      	str	r5, [r4, #20]
 800f750:	444e      	add	r6, r9
 800f752:	eba5 0509 	sub.w	r5, r5, r9
 800f756:	6026      	str	r6, [r4, #0]
 800f758:	60a5      	str	r5, [r4, #8]
 800f75a:	463e      	mov	r6, r7
 800f75c:	42be      	cmp	r6, r7
 800f75e:	d900      	bls.n	800f762 <__ssputs_r+0x72>
 800f760:	463e      	mov	r6, r7
 800f762:	6820      	ldr	r0, [r4, #0]
 800f764:	4632      	mov	r2, r6
 800f766:	4641      	mov	r1, r8
 800f768:	f000 faa8 	bl	800fcbc <memmove>
 800f76c:	68a3      	ldr	r3, [r4, #8]
 800f76e:	1b9b      	subs	r3, r3, r6
 800f770:	60a3      	str	r3, [r4, #8]
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	4433      	add	r3, r6
 800f776:	6023      	str	r3, [r4, #0]
 800f778:	2000      	movs	r0, #0
 800f77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f77e:	462a      	mov	r2, r5
 800f780:	f000 fac6 	bl	800fd10 <_realloc_r>
 800f784:	4606      	mov	r6, r0
 800f786:	2800      	cmp	r0, #0
 800f788:	d1e0      	bne.n	800f74c <__ssputs_r+0x5c>
 800f78a:	6921      	ldr	r1, [r4, #16]
 800f78c:	4650      	mov	r0, sl
 800f78e:	f7ff feb7 	bl	800f500 <_free_r>
 800f792:	230c      	movs	r3, #12
 800f794:	f8ca 3000 	str.w	r3, [sl]
 800f798:	89a3      	ldrh	r3, [r4, #12]
 800f79a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a4:	e7e9      	b.n	800f77a <__ssputs_r+0x8a>
	...

0800f7a8 <_svfiprintf_r>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	4698      	mov	r8, r3
 800f7ae:	898b      	ldrh	r3, [r1, #12]
 800f7b0:	061b      	lsls	r3, r3, #24
 800f7b2:	b09d      	sub	sp, #116	@ 0x74
 800f7b4:	4607      	mov	r7, r0
 800f7b6:	460d      	mov	r5, r1
 800f7b8:	4614      	mov	r4, r2
 800f7ba:	d510      	bpl.n	800f7de <_svfiprintf_r+0x36>
 800f7bc:	690b      	ldr	r3, [r1, #16]
 800f7be:	b973      	cbnz	r3, 800f7de <_svfiprintf_r+0x36>
 800f7c0:	2140      	movs	r1, #64	@ 0x40
 800f7c2:	f7ff ff09 	bl	800f5d8 <_malloc_r>
 800f7c6:	6028      	str	r0, [r5, #0]
 800f7c8:	6128      	str	r0, [r5, #16]
 800f7ca:	b930      	cbnz	r0, 800f7da <_svfiprintf_r+0x32>
 800f7cc:	230c      	movs	r3, #12
 800f7ce:	603b      	str	r3, [r7, #0]
 800f7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d4:	b01d      	add	sp, #116	@ 0x74
 800f7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7da:	2340      	movs	r3, #64	@ 0x40
 800f7dc:	616b      	str	r3, [r5, #20]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7e2:	2320      	movs	r3, #32
 800f7e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ec:	2330      	movs	r3, #48	@ 0x30
 800f7ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f98c <_svfiprintf_r+0x1e4>
 800f7f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7f6:	f04f 0901 	mov.w	r9, #1
 800f7fa:	4623      	mov	r3, r4
 800f7fc:	469a      	mov	sl, r3
 800f7fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f802:	b10a      	cbz	r2, 800f808 <_svfiprintf_r+0x60>
 800f804:	2a25      	cmp	r2, #37	@ 0x25
 800f806:	d1f9      	bne.n	800f7fc <_svfiprintf_r+0x54>
 800f808:	ebba 0b04 	subs.w	fp, sl, r4
 800f80c:	d00b      	beq.n	800f826 <_svfiprintf_r+0x7e>
 800f80e:	465b      	mov	r3, fp
 800f810:	4622      	mov	r2, r4
 800f812:	4629      	mov	r1, r5
 800f814:	4638      	mov	r0, r7
 800f816:	f7ff ff6b 	bl	800f6f0 <__ssputs_r>
 800f81a:	3001      	adds	r0, #1
 800f81c:	f000 80a7 	beq.w	800f96e <_svfiprintf_r+0x1c6>
 800f820:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f822:	445a      	add	r2, fp
 800f824:	9209      	str	r2, [sp, #36]	@ 0x24
 800f826:	f89a 3000 	ldrb.w	r3, [sl]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 809f 	beq.w	800f96e <_svfiprintf_r+0x1c6>
 800f830:	2300      	movs	r3, #0
 800f832:	f04f 32ff 	mov.w	r2, #4294967295
 800f836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f83a:	f10a 0a01 	add.w	sl, sl, #1
 800f83e:	9304      	str	r3, [sp, #16]
 800f840:	9307      	str	r3, [sp, #28]
 800f842:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f846:	931a      	str	r3, [sp, #104]	@ 0x68
 800f848:	4654      	mov	r4, sl
 800f84a:	2205      	movs	r2, #5
 800f84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f850:	484e      	ldr	r0, [pc, #312]	@ (800f98c <_svfiprintf_r+0x1e4>)
 800f852:	f7f0 fd4d 	bl	80002f0 <memchr>
 800f856:	9a04      	ldr	r2, [sp, #16]
 800f858:	b9d8      	cbnz	r0, 800f892 <_svfiprintf_r+0xea>
 800f85a:	06d0      	lsls	r0, r2, #27
 800f85c:	bf44      	itt	mi
 800f85e:	2320      	movmi	r3, #32
 800f860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f864:	0711      	lsls	r1, r2, #28
 800f866:	bf44      	itt	mi
 800f868:	232b      	movmi	r3, #43	@ 0x2b
 800f86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f86e:	f89a 3000 	ldrb.w	r3, [sl]
 800f872:	2b2a      	cmp	r3, #42	@ 0x2a
 800f874:	d015      	beq.n	800f8a2 <_svfiprintf_r+0xfa>
 800f876:	9a07      	ldr	r2, [sp, #28]
 800f878:	4654      	mov	r4, sl
 800f87a:	2000      	movs	r0, #0
 800f87c:	f04f 0c0a 	mov.w	ip, #10
 800f880:	4621      	mov	r1, r4
 800f882:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f886:	3b30      	subs	r3, #48	@ 0x30
 800f888:	2b09      	cmp	r3, #9
 800f88a:	d94b      	bls.n	800f924 <_svfiprintf_r+0x17c>
 800f88c:	b1b0      	cbz	r0, 800f8bc <_svfiprintf_r+0x114>
 800f88e:	9207      	str	r2, [sp, #28]
 800f890:	e014      	b.n	800f8bc <_svfiprintf_r+0x114>
 800f892:	eba0 0308 	sub.w	r3, r0, r8
 800f896:	fa09 f303 	lsl.w	r3, r9, r3
 800f89a:	4313      	orrs	r3, r2
 800f89c:	9304      	str	r3, [sp, #16]
 800f89e:	46a2      	mov	sl, r4
 800f8a0:	e7d2      	b.n	800f848 <_svfiprintf_r+0xa0>
 800f8a2:	9b03      	ldr	r3, [sp, #12]
 800f8a4:	1d19      	adds	r1, r3, #4
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	9103      	str	r1, [sp, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	bfbb      	ittet	lt
 800f8ae:	425b      	neglt	r3, r3
 800f8b0:	f042 0202 	orrlt.w	r2, r2, #2
 800f8b4:	9307      	strge	r3, [sp, #28]
 800f8b6:	9307      	strlt	r3, [sp, #28]
 800f8b8:	bfb8      	it	lt
 800f8ba:	9204      	strlt	r2, [sp, #16]
 800f8bc:	7823      	ldrb	r3, [r4, #0]
 800f8be:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8c0:	d10a      	bne.n	800f8d8 <_svfiprintf_r+0x130>
 800f8c2:	7863      	ldrb	r3, [r4, #1]
 800f8c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8c6:	d132      	bne.n	800f92e <_svfiprintf_r+0x186>
 800f8c8:	9b03      	ldr	r3, [sp, #12]
 800f8ca:	1d1a      	adds	r2, r3, #4
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	9203      	str	r2, [sp, #12]
 800f8d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8d4:	3402      	adds	r4, #2
 800f8d6:	9305      	str	r3, [sp, #20]
 800f8d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f99c <_svfiprintf_r+0x1f4>
 800f8dc:	7821      	ldrb	r1, [r4, #0]
 800f8de:	2203      	movs	r2, #3
 800f8e0:	4650      	mov	r0, sl
 800f8e2:	f7f0 fd05 	bl	80002f0 <memchr>
 800f8e6:	b138      	cbz	r0, 800f8f8 <_svfiprintf_r+0x150>
 800f8e8:	9b04      	ldr	r3, [sp, #16]
 800f8ea:	eba0 000a 	sub.w	r0, r0, sl
 800f8ee:	2240      	movs	r2, #64	@ 0x40
 800f8f0:	4082      	lsls	r2, r0
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	3401      	adds	r4, #1
 800f8f6:	9304      	str	r3, [sp, #16]
 800f8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8fc:	4824      	ldr	r0, [pc, #144]	@ (800f990 <_svfiprintf_r+0x1e8>)
 800f8fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f902:	2206      	movs	r2, #6
 800f904:	f7f0 fcf4 	bl	80002f0 <memchr>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d036      	beq.n	800f97a <_svfiprintf_r+0x1d2>
 800f90c:	4b21      	ldr	r3, [pc, #132]	@ (800f994 <_svfiprintf_r+0x1ec>)
 800f90e:	bb1b      	cbnz	r3, 800f958 <_svfiprintf_r+0x1b0>
 800f910:	9b03      	ldr	r3, [sp, #12]
 800f912:	3307      	adds	r3, #7
 800f914:	f023 0307 	bic.w	r3, r3, #7
 800f918:	3308      	adds	r3, #8
 800f91a:	9303      	str	r3, [sp, #12]
 800f91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91e:	4433      	add	r3, r6
 800f920:	9309      	str	r3, [sp, #36]	@ 0x24
 800f922:	e76a      	b.n	800f7fa <_svfiprintf_r+0x52>
 800f924:	fb0c 3202 	mla	r2, ip, r2, r3
 800f928:	460c      	mov	r4, r1
 800f92a:	2001      	movs	r0, #1
 800f92c:	e7a8      	b.n	800f880 <_svfiprintf_r+0xd8>
 800f92e:	2300      	movs	r3, #0
 800f930:	3401      	adds	r4, #1
 800f932:	9305      	str	r3, [sp, #20]
 800f934:	4619      	mov	r1, r3
 800f936:	f04f 0c0a 	mov.w	ip, #10
 800f93a:	4620      	mov	r0, r4
 800f93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f940:	3a30      	subs	r2, #48	@ 0x30
 800f942:	2a09      	cmp	r2, #9
 800f944:	d903      	bls.n	800f94e <_svfiprintf_r+0x1a6>
 800f946:	2b00      	cmp	r3, #0
 800f948:	d0c6      	beq.n	800f8d8 <_svfiprintf_r+0x130>
 800f94a:	9105      	str	r1, [sp, #20]
 800f94c:	e7c4      	b.n	800f8d8 <_svfiprintf_r+0x130>
 800f94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f952:	4604      	mov	r4, r0
 800f954:	2301      	movs	r3, #1
 800f956:	e7f0      	b.n	800f93a <_svfiprintf_r+0x192>
 800f958:	ab03      	add	r3, sp, #12
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	462a      	mov	r2, r5
 800f95e:	4b0e      	ldr	r3, [pc, #56]	@ (800f998 <_svfiprintf_r+0x1f0>)
 800f960:	a904      	add	r1, sp, #16
 800f962:	4638      	mov	r0, r7
 800f964:	f3af 8000 	nop.w
 800f968:	1c42      	adds	r2, r0, #1
 800f96a:	4606      	mov	r6, r0
 800f96c:	d1d6      	bne.n	800f91c <_svfiprintf_r+0x174>
 800f96e:	89ab      	ldrh	r3, [r5, #12]
 800f970:	065b      	lsls	r3, r3, #25
 800f972:	f53f af2d 	bmi.w	800f7d0 <_svfiprintf_r+0x28>
 800f976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f978:	e72c      	b.n	800f7d4 <_svfiprintf_r+0x2c>
 800f97a:	ab03      	add	r3, sp, #12
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	462a      	mov	r2, r5
 800f980:	4b05      	ldr	r3, [pc, #20]	@ (800f998 <_svfiprintf_r+0x1f0>)
 800f982:	a904      	add	r1, sp, #16
 800f984:	4638      	mov	r0, r7
 800f986:	f000 f879 	bl	800fa7c <_printf_i>
 800f98a:	e7ed      	b.n	800f968 <_svfiprintf_r+0x1c0>
 800f98c:	0800fee4 	.word	0x0800fee4
 800f990:	0800feee 	.word	0x0800feee
 800f994:	00000000 	.word	0x00000000
 800f998:	0800f6f1 	.word	0x0800f6f1
 800f99c:	0800feea 	.word	0x0800feea

0800f9a0 <_printf_common>:
 800f9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9a4:	4616      	mov	r6, r2
 800f9a6:	4698      	mov	r8, r3
 800f9a8:	688a      	ldr	r2, [r1, #8]
 800f9aa:	690b      	ldr	r3, [r1, #16]
 800f9ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	bfb8      	it	lt
 800f9b4:	4613      	movlt	r3, r2
 800f9b6:	6033      	str	r3, [r6, #0]
 800f9b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9bc:	4607      	mov	r7, r0
 800f9be:	460c      	mov	r4, r1
 800f9c0:	b10a      	cbz	r2, 800f9c6 <_printf_common+0x26>
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	6033      	str	r3, [r6, #0]
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	0699      	lsls	r1, r3, #26
 800f9ca:	bf42      	ittt	mi
 800f9cc:	6833      	ldrmi	r3, [r6, #0]
 800f9ce:	3302      	addmi	r3, #2
 800f9d0:	6033      	strmi	r3, [r6, #0]
 800f9d2:	6825      	ldr	r5, [r4, #0]
 800f9d4:	f015 0506 	ands.w	r5, r5, #6
 800f9d8:	d106      	bne.n	800f9e8 <_printf_common+0x48>
 800f9da:	f104 0a19 	add.w	sl, r4, #25
 800f9de:	68e3      	ldr	r3, [r4, #12]
 800f9e0:	6832      	ldr	r2, [r6, #0]
 800f9e2:	1a9b      	subs	r3, r3, r2
 800f9e4:	42ab      	cmp	r3, r5
 800f9e6:	dc26      	bgt.n	800fa36 <_printf_common+0x96>
 800f9e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f9ec:	6822      	ldr	r2, [r4, #0]
 800f9ee:	3b00      	subs	r3, #0
 800f9f0:	bf18      	it	ne
 800f9f2:	2301      	movne	r3, #1
 800f9f4:	0692      	lsls	r2, r2, #26
 800f9f6:	d42b      	bmi.n	800fa50 <_printf_common+0xb0>
 800f9f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f9fc:	4641      	mov	r1, r8
 800f9fe:	4638      	mov	r0, r7
 800fa00:	47c8      	blx	r9
 800fa02:	3001      	adds	r0, #1
 800fa04:	d01e      	beq.n	800fa44 <_printf_common+0xa4>
 800fa06:	6823      	ldr	r3, [r4, #0]
 800fa08:	6922      	ldr	r2, [r4, #16]
 800fa0a:	f003 0306 	and.w	r3, r3, #6
 800fa0e:	2b04      	cmp	r3, #4
 800fa10:	bf02      	ittt	eq
 800fa12:	68e5      	ldreq	r5, [r4, #12]
 800fa14:	6833      	ldreq	r3, [r6, #0]
 800fa16:	1aed      	subeq	r5, r5, r3
 800fa18:	68a3      	ldr	r3, [r4, #8]
 800fa1a:	bf0c      	ite	eq
 800fa1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa20:	2500      	movne	r5, #0
 800fa22:	4293      	cmp	r3, r2
 800fa24:	bfc4      	itt	gt
 800fa26:	1a9b      	subgt	r3, r3, r2
 800fa28:	18ed      	addgt	r5, r5, r3
 800fa2a:	2600      	movs	r6, #0
 800fa2c:	341a      	adds	r4, #26
 800fa2e:	42b5      	cmp	r5, r6
 800fa30:	d11a      	bne.n	800fa68 <_printf_common+0xc8>
 800fa32:	2000      	movs	r0, #0
 800fa34:	e008      	b.n	800fa48 <_printf_common+0xa8>
 800fa36:	2301      	movs	r3, #1
 800fa38:	4652      	mov	r2, sl
 800fa3a:	4641      	mov	r1, r8
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	47c8      	blx	r9
 800fa40:	3001      	adds	r0, #1
 800fa42:	d103      	bne.n	800fa4c <_printf_common+0xac>
 800fa44:	f04f 30ff 	mov.w	r0, #4294967295
 800fa48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa4c:	3501      	adds	r5, #1
 800fa4e:	e7c6      	b.n	800f9de <_printf_common+0x3e>
 800fa50:	18e1      	adds	r1, r4, r3
 800fa52:	1c5a      	adds	r2, r3, #1
 800fa54:	2030      	movs	r0, #48	@ 0x30
 800fa56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa5a:	4422      	add	r2, r4
 800fa5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa64:	3302      	adds	r3, #2
 800fa66:	e7c7      	b.n	800f9f8 <_printf_common+0x58>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	4622      	mov	r2, r4
 800fa6c:	4641      	mov	r1, r8
 800fa6e:	4638      	mov	r0, r7
 800fa70:	47c8      	blx	r9
 800fa72:	3001      	adds	r0, #1
 800fa74:	d0e6      	beq.n	800fa44 <_printf_common+0xa4>
 800fa76:	3601      	adds	r6, #1
 800fa78:	e7d9      	b.n	800fa2e <_printf_common+0x8e>
	...

0800fa7c <_printf_i>:
 800fa7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa80:	7e0f      	ldrb	r7, [r1, #24]
 800fa82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa84:	2f78      	cmp	r7, #120	@ 0x78
 800fa86:	4691      	mov	r9, r2
 800fa88:	4680      	mov	r8, r0
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	469a      	mov	sl, r3
 800fa8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fa92:	d807      	bhi.n	800faa4 <_printf_i+0x28>
 800fa94:	2f62      	cmp	r7, #98	@ 0x62
 800fa96:	d80a      	bhi.n	800faae <_printf_i+0x32>
 800fa98:	2f00      	cmp	r7, #0
 800fa9a:	f000 80d2 	beq.w	800fc42 <_printf_i+0x1c6>
 800fa9e:	2f58      	cmp	r7, #88	@ 0x58
 800faa0:	f000 80b9 	beq.w	800fc16 <_printf_i+0x19a>
 800faa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800faa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800faac:	e03a      	b.n	800fb24 <_printf_i+0xa8>
 800faae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fab2:	2b15      	cmp	r3, #21
 800fab4:	d8f6      	bhi.n	800faa4 <_printf_i+0x28>
 800fab6:	a101      	add	r1, pc, #4	@ (adr r1, 800fabc <_printf_i+0x40>)
 800fab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fabc:	0800fb15 	.word	0x0800fb15
 800fac0:	0800fb29 	.word	0x0800fb29
 800fac4:	0800faa5 	.word	0x0800faa5
 800fac8:	0800faa5 	.word	0x0800faa5
 800facc:	0800faa5 	.word	0x0800faa5
 800fad0:	0800faa5 	.word	0x0800faa5
 800fad4:	0800fb29 	.word	0x0800fb29
 800fad8:	0800faa5 	.word	0x0800faa5
 800fadc:	0800faa5 	.word	0x0800faa5
 800fae0:	0800faa5 	.word	0x0800faa5
 800fae4:	0800faa5 	.word	0x0800faa5
 800fae8:	0800fc29 	.word	0x0800fc29
 800faec:	0800fb53 	.word	0x0800fb53
 800faf0:	0800fbe3 	.word	0x0800fbe3
 800faf4:	0800faa5 	.word	0x0800faa5
 800faf8:	0800faa5 	.word	0x0800faa5
 800fafc:	0800fc4b 	.word	0x0800fc4b
 800fb00:	0800faa5 	.word	0x0800faa5
 800fb04:	0800fb53 	.word	0x0800fb53
 800fb08:	0800faa5 	.word	0x0800faa5
 800fb0c:	0800faa5 	.word	0x0800faa5
 800fb10:	0800fbeb 	.word	0x0800fbeb
 800fb14:	6833      	ldr	r3, [r6, #0]
 800fb16:	1d1a      	adds	r2, r3, #4
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	6032      	str	r2, [r6, #0]
 800fb1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb24:	2301      	movs	r3, #1
 800fb26:	e09d      	b.n	800fc64 <_printf_i+0x1e8>
 800fb28:	6833      	ldr	r3, [r6, #0]
 800fb2a:	6820      	ldr	r0, [r4, #0]
 800fb2c:	1d19      	adds	r1, r3, #4
 800fb2e:	6031      	str	r1, [r6, #0]
 800fb30:	0606      	lsls	r6, r0, #24
 800fb32:	d501      	bpl.n	800fb38 <_printf_i+0xbc>
 800fb34:	681d      	ldr	r5, [r3, #0]
 800fb36:	e003      	b.n	800fb40 <_printf_i+0xc4>
 800fb38:	0645      	lsls	r5, r0, #25
 800fb3a:	d5fb      	bpl.n	800fb34 <_printf_i+0xb8>
 800fb3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb40:	2d00      	cmp	r5, #0
 800fb42:	da03      	bge.n	800fb4c <_printf_i+0xd0>
 800fb44:	232d      	movs	r3, #45	@ 0x2d
 800fb46:	426d      	negs	r5, r5
 800fb48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb4c:	4859      	ldr	r0, [pc, #356]	@ (800fcb4 <_printf_i+0x238>)
 800fb4e:	230a      	movs	r3, #10
 800fb50:	e011      	b.n	800fb76 <_printf_i+0xfa>
 800fb52:	6821      	ldr	r1, [r4, #0]
 800fb54:	6833      	ldr	r3, [r6, #0]
 800fb56:	0608      	lsls	r0, r1, #24
 800fb58:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb5c:	d402      	bmi.n	800fb64 <_printf_i+0xe8>
 800fb5e:	0649      	lsls	r1, r1, #25
 800fb60:	bf48      	it	mi
 800fb62:	b2ad      	uxthmi	r5, r5
 800fb64:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb66:	4853      	ldr	r0, [pc, #332]	@ (800fcb4 <_printf_i+0x238>)
 800fb68:	6033      	str	r3, [r6, #0]
 800fb6a:	bf14      	ite	ne
 800fb6c:	230a      	movne	r3, #10
 800fb6e:	2308      	moveq	r3, #8
 800fb70:	2100      	movs	r1, #0
 800fb72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb76:	6866      	ldr	r6, [r4, #4]
 800fb78:	60a6      	str	r6, [r4, #8]
 800fb7a:	2e00      	cmp	r6, #0
 800fb7c:	bfa2      	ittt	ge
 800fb7e:	6821      	ldrge	r1, [r4, #0]
 800fb80:	f021 0104 	bicge.w	r1, r1, #4
 800fb84:	6021      	strge	r1, [r4, #0]
 800fb86:	b90d      	cbnz	r5, 800fb8c <_printf_i+0x110>
 800fb88:	2e00      	cmp	r6, #0
 800fb8a:	d04b      	beq.n	800fc24 <_printf_i+0x1a8>
 800fb8c:	4616      	mov	r6, r2
 800fb8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fb92:	fb03 5711 	mls	r7, r3, r1, r5
 800fb96:	5dc7      	ldrb	r7, [r0, r7]
 800fb98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fb9c:	462f      	mov	r7, r5
 800fb9e:	42bb      	cmp	r3, r7
 800fba0:	460d      	mov	r5, r1
 800fba2:	d9f4      	bls.n	800fb8e <_printf_i+0x112>
 800fba4:	2b08      	cmp	r3, #8
 800fba6:	d10b      	bne.n	800fbc0 <_printf_i+0x144>
 800fba8:	6823      	ldr	r3, [r4, #0]
 800fbaa:	07df      	lsls	r7, r3, #31
 800fbac:	d508      	bpl.n	800fbc0 <_printf_i+0x144>
 800fbae:	6923      	ldr	r3, [r4, #16]
 800fbb0:	6861      	ldr	r1, [r4, #4]
 800fbb2:	4299      	cmp	r1, r3
 800fbb4:	bfde      	ittt	le
 800fbb6:	2330      	movle	r3, #48	@ 0x30
 800fbb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fbc0:	1b92      	subs	r2, r2, r6
 800fbc2:	6122      	str	r2, [r4, #16]
 800fbc4:	f8cd a000 	str.w	sl, [sp]
 800fbc8:	464b      	mov	r3, r9
 800fbca:	aa03      	add	r2, sp, #12
 800fbcc:	4621      	mov	r1, r4
 800fbce:	4640      	mov	r0, r8
 800fbd0:	f7ff fee6 	bl	800f9a0 <_printf_common>
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	d14a      	bne.n	800fc6e <_printf_i+0x1f2>
 800fbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbdc:	b004      	add	sp, #16
 800fbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	f043 0320 	orr.w	r3, r3, #32
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	4833      	ldr	r0, [pc, #204]	@ (800fcb8 <_printf_i+0x23c>)
 800fbec:	2778      	movs	r7, #120	@ 0x78
 800fbee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	6831      	ldr	r1, [r6, #0]
 800fbf6:	061f      	lsls	r7, r3, #24
 800fbf8:	f851 5b04 	ldr.w	r5, [r1], #4
 800fbfc:	d402      	bmi.n	800fc04 <_printf_i+0x188>
 800fbfe:	065f      	lsls	r7, r3, #25
 800fc00:	bf48      	it	mi
 800fc02:	b2ad      	uxthmi	r5, r5
 800fc04:	6031      	str	r1, [r6, #0]
 800fc06:	07d9      	lsls	r1, r3, #31
 800fc08:	bf44      	itt	mi
 800fc0a:	f043 0320 	orrmi.w	r3, r3, #32
 800fc0e:	6023      	strmi	r3, [r4, #0]
 800fc10:	b11d      	cbz	r5, 800fc1a <_printf_i+0x19e>
 800fc12:	2310      	movs	r3, #16
 800fc14:	e7ac      	b.n	800fb70 <_printf_i+0xf4>
 800fc16:	4827      	ldr	r0, [pc, #156]	@ (800fcb4 <_printf_i+0x238>)
 800fc18:	e7e9      	b.n	800fbee <_printf_i+0x172>
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	f023 0320 	bic.w	r3, r3, #32
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	e7f6      	b.n	800fc12 <_printf_i+0x196>
 800fc24:	4616      	mov	r6, r2
 800fc26:	e7bd      	b.n	800fba4 <_printf_i+0x128>
 800fc28:	6833      	ldr	r3, [r6, #0]
 800fc2a:	6825      	ldr	r5, [r4, #0]
 800fc2c:	6961      	ldr	r1, [r4, #20]
 800fc2e:	1d18      	adds	r0, r3, #4
 800fc30:	6030      	str	r0, [r6, #0]
 800fc32:	062e      	lsls	r6, r5, #24
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	d501      	bpl.n	800fc3c <_printf_i+0x1c0>
 800fc38:	6019      	str	r1, [r3, #0]
 800fc3a:	e002      	b.n	800fc42 <_printf_i+0x1c6>
 800fc3c:	0668      	lsls	r0, r5, #25
 800fc3e:	d5fb      	bpl.n	800fc38 <_printf_i+0x1bc>
 800fc40:	8019      	strh	r1, [r3, #0]
 800fc42:	2300      	movs	r3, #0
 800fc44:	6123      	str	r3, [r4, #16]
 800fc46:	4616      	mov	r6, r2
 800fc48:	e7bc      	b.n	800fbc4 <_printf_i+0x148>
 800fc4a:	6833      	ldr	r3, [r6, #0]
 800fc4c:	1d1a      	adds	r2, r3, #4
 800fc4e:	6032      	str	r2, [r6, #0]
 800fc50:	681e      	ldr	r6, [r3, #0]
 800fc52:	6862      	ldr	r2, [r4, #4]
 800fc54:	2100      	movs	r1, #0
 800fc56:	4630      	mov	r0, r6
 800fc58:	f7f0 fb4a 	bl	80002f0 <memchr>
 800fc5c:	b108      	cbz	r0, 800fc62 <_printf_i+0x1e6>
 800fc5e:	1b80      	subs	r0, r0, r6
 800fc60:	6060      	str	r0, [r4, #4]
 800fc62:	6863      	ldr	r3, [r4, #4]
 800fc64:	6123      	str	r3, [r4, #16]
 800fc66:	2300      	movs	r3, #0
 800fc68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc6c:	e7aa      	b.n	800fbc4 <_printf_i+0x148>
 800fc6e:	6923      	ldr	r3, [r4, #16]
 800fc70:	4632      	mov	r2, r6
 800fc72:	4649      	mov	r1, r9
 800fc74:	4640      	mov	r0, r8
 800fc76:	47d0      	blx	sl
 800fc78:	3001      	adds	r0, #1
 800fc7a:	d0ad      	beq.n	800fbd8 <_printf_i+0x15c>
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	079b      	lsls	r3, r3, #30
 800fc80:	d413      	bmi.n	800fcaa <_printf_i+0x22e>
 800fc82:	68e0      	ldr	r0, [r4, #12]
 800fc84:	9b03      	ldr	r3, [sp, #12]
 800fc86:	4298      	cmp	r0, r3
 800fc88:	bfb8      	it	lt
 800fc8a:	4618      	movlt	r0, r3
 800fc8c:	e7a6      	b.n	800fbdc <_printf_i+0x160>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	4632      	mov	r2, r6
 800fc92:	4649      	mov	r1, r9
 800fc94:	4640      	mov	r0, r8
 800fc96:	47d0      	blx	sl
 800fc98:	3001      	adds	r0, #1
 800fc9a:	d09d      	beq.n	800fbd8 <_printf_i+0x15c>
 800fc9c:	3501      	adds	r5, #1
 800fc9e:	68e3      	ldr	r3, [r4, #12]
 800fca0:	9903      	ldr	r1, [sp, #12]
 800fca2:	1a5b      	subs	r3, r3, r1
 800fca4:	42ab      	cmp	r3, r5
 800fca6:	dcf2      	bgt.n	800fc8e <_printf_i+0x212>
 800fca8:	e7eb      	b.n	800fc82 <_printf_i+0x206>
 800fcaa:	2500      	movs	r5, #0
 800fcac:	f104 0619 	add.w	r6, r4, #25
 800fcb0:	e7f5      	b.n	800fc9e <_printf_i+0x222>
 800fcb2:	bf00      	nop
 800fcb4:	0800fef5 	.word	0x0800fef5
 800fcb8:	0800ff06 	.word	0x0800ff06

0800fcbc <memmove>:
 800fcbc:	4288      	cmp	r0, r1
 800fcbe:	b510      	push	{r4, lr}
 800fcc0:	eb01 0402 	add.w	r4, r1, r2
 800fcc4:	d902      	bls.n	800fccc <memmove+0x10>
 800fcc6:	4284      	cmp	r4, r0
 800fcc8:	4623      	mov	r3, r4
 800fcca:	d807      	bhi.n	800fcdc <memmove+0x20>
 800fccc:	1e43      	subs	r3, r0, #1
 800fcce:	42a1      	cmp	r1, r4
 800fcd0:	d008      	beq.n	800fce4 <memmove+0x28>
 800fcd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcda:	e7f8      	b.n	800fcce <memmove+0x12>
 800fcdc:	4402      	add	r2, r0
 800fcde:	4601      	mov	r1, r0
 800fce0:	428a      	cmp	r2, r1
 800fce2:	d100      	bne.n	800fce6 <memmove+0x2a>
 800fce4:	bd10      	pop	{r4, pc}
 800fce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcee:	e7f7      	b.n	800fce0 <memmove+0x24>

0800fcf0 <_sbrk_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4d06      	ldr	r5, [pc, #24]	@ (800fd0c <_sbrk_r+0x1c>)
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	4608      	mov	r0, r1
 800fcfa:	602b      	str	r3, [r5, #0]
 800fcfc:	f7f1 fafe 	bl	80012fc <_sbrk>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_sbrk_r+0x1a>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_sbrk_r+0x1a>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	2403494c 	.word	0x2403494c

0800fd10 <_realloc_r>:
 800fd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd14:	4680      	mov	r8, r0
 800fd16:	4615      	mov	r5, r2
 800fd18:	460c      	mov	r4, r1
 800fd1a:	b921      	cbnz	r1, 800fd26 <_realloc_r+0x16>
 800fd1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd20:	4611      	mov	r1, r2
 800fd22:	f7ff bc59 	b.w	800f5d8 <_malloc_r>
 800fd26:	b92a      	cbnz	r2, 800fd34 <_realloc_r+0x24>
 800fd28:	f7ff fbea 	bl	800f500 <_free_r>
 800fd2c:	2400      	movs	r4, #0
 800fd2e:	4620      	mov	r0, r4
 800fd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd34:	f000 f81a 	bl	800fd6c <_malloc_usable_size_r>
 800fd38:	4285      	cmp	r5, r0
 800fd3a:	4606      	mov	r6, r0
 800fd3c:	d802      	bhi.n	800fd44 <_realloc_r+0x34>
 800fd3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fd42:	d8f4      	bhi.n	800fd2e <_realloc_r+0x1e>
 800fd44:	4629      	mov	r1, r5
 800fd46:	4640      	mov	r0, r8
 800fd48:	f7ff fc46 	bl	800f5d8 <_malloc_r>
 800fd4c:	4607      	mov	r7, r0
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	d0ec      	beq.n	800fd2c <_realloc_r+0x1c>
 800fd52:	42b5      	cmp	r5, r6
 800fd54:	462a      	mov	r2, r5
 800fd56:	4621      	mov	r1, r4
 800fd58:	bf28      	it	cs
 800fd5a:	4632      	movcs	r2, r6
 800fd5c:	f7ff fbc2 	bl	800f4e4 <memcpy>
 800fd60:	4621      	mov	r1, r4
 800fd62:	4640      	mov	r0, r8
 800fd64:	f7ff fbcc 	bl	800f500 <_free_r>
 800fd68:	463c      	mov	r4, r7
 800fd6a:	e7e0      	b.n	800fd2e <_realloc_r+0x1e>

0800fd6c <_malloc_usable_size_r>:
 800fd6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd70:	1f18      	subs	r0, r3, #4
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	bfbc      	itt	lt
 800fd76:	580b      	ldrlt	r3, [r1, r0]
 800fd78:	18c0      	addlt	r0, r0, r3
 800fd7a:	4770      	bx	lr

0800fd7c <_init>:
 800fd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7e:	bf00      	nop
 800fd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd82:	bc08      	pop	{r3}
 800fd84:	469e      	mov	lr, r3
 800fd86:	4770      	bx	lr

0800fd88 <_fini>:
 800fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8a:	bf00      	nop
 800fd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd8e:	bc08      	pop	{r3}
 800fd90:	469e      	mov	lr, r3
 800fd92:	4770      	bx	lr
