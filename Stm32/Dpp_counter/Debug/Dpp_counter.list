
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fac4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800fd64  0800fd64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fee4  0800fee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800feec  0800feec  00010eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fef0  0800fef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800fef4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000548e8  24000068  0800ff5c  00011068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24054950  0800ff5c  00011950  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002abf6  00000000  00000000  00011096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055d3  00000000  00000000  0003bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e68  00000000  00000000  00041260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000174d  00000000  00000000  000430c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e136  00000000  00000000  00044815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b611  00000000  00000000  0008294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001864b6  00000000  00000000  000adf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00234412  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008598  00000000  00000000  002344cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0023ca64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00000d00  00000000  00000000  0023cac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0023d7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fd4c 	.word	0x0800fd4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800fd4c 	.word	0x0800fd4c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <MX_ADC1_Init+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006be:	2204      	movs	r2, #4
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c2:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000704:	f001 fafe 	bl	8001d04 <HAL_ADC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 fd17 	bl	8001140 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_ADC1_Init+0xe8>)
 800071e:	f002 fc95 	bl	800304c <HAL_ADCEx_MultiModeConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000728:	f000 fd0a 	bl	8001140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_ADC1_Init+0xf0>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000734:	2304      	movs	r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073e:	2304      	movs	r3, #4
 8000740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_ADC1_Init+0xe8>)
 8000750:	f001 fdb4 	bl	80022bc <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800075a:	f000 fcf1 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	24000084 	.word	0x24000084
 800076c:	40022000 	.word	0x40022000
 8000770:	3ef08000 	.word	0x3ef08000

08000774 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ba      	sub	sp, #232	@ 0xe8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	22c0      	movs	r2, #192	@ 0xc0
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00e fe03 	bl	800f3a0 <memset>
  if(adcHandle->Instance==ADC1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <HAL_ADC_MspInit+0x13c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8081 	bne.w	80008a8 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 f9a5 	bl	8007b2c <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007e8:	f000 fcaa 	bl	8001140 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f2:	4a30      	ldr	r2, [pc, #192]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x140>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x144>)
 8000842:	f005 fded 	bl	8006420 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_ADC_MspInit+0x14c>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800086c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000884:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 800088e:	f002 ff8b 	bl	80037a8 <HAL_DMA_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000898:	f000 fc52 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0x148>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e8      	adds	r7, #232	@ 0xe8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022000 	.word	0x40022000
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000
 80008bc:	240000e8 	.word	0x240000e8
 80008c0:	40020010 	.word	0x40020010

080008c4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_COMP1_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_3_4VREFINT;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_COMP1_Init+0x58>)
 80008d2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008da:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_COMP1_Init+0x50>)
 80008fc:	2211      	movs	r2, #17
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_COMP1_Init+0x50>)
 8000902:	f002 fc81 	bl	8003208 <HAL_COMP_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 fc18 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000160 	.word	0x24000160
 8000918:	5800380c 	.word	0x5800380c
 800091c:	00020006 	.word	0x00020006

08000920 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <HAL_COMP_MspInit+0x90>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d131      	bne.n	80009a6 <HAL_COMP_MspInit+0x86>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* COMP1 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000948:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_COMP_MspInit+0x94>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <HAL_COMP_MspInit+0x98>)
 8000992:	f005 fd45 	bl	8006420 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	2089      	movs	r0, #137	@ 0x89
 800099c:	f002 fedc 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80009a0:	2089      	movs	r0, #137	@ 0x89
 80009a2:	f002 fef3 	bl	800378c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	5800380c 	.word	0x5800380c
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020400 	.word	0x58020400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_DMA_Init+0x3c>)
 80009d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2105      	movs	r1, #5
 80009e4:	200b      	movs	r0, #11
 80009e6:	f002 feb7 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ea:	200b      	movs	r0, #11
 80009ec:	f002 fece 	bl	800378c <HAL_NVIC_EnableIRQ>

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	58024400 	.word	0x58024400

080009fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <vApplicationGetIdleTaskMemory+0x30>)
 8000a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	24050248 	.word	0x24050248
 8000a2c:	240502e8 	.word	0x240502e8

08000a30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_FREERTOS_Init+0x7c>)
 8000a38:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000a4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00c ff81 	bl	800d958 <osThreadCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_FREERTOS_Init+0x80>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_FREERTOS_Init+0x84>)
 8000a5e:	f107 0420 	add.w	r4, r7, #32
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00c ff6e 	bl	800d958 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <MX_FREERTOS_Init+0x88>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_FREERTOS_Init+0x8c>)
 8000a84:	1d3c      	adds	r4, r7, #4
 8000a86:	461d      	mov	r5, r3
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00c ff5d 	bl	800d958 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <MX_FREERTOS_Init+0x90>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	@ 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000aac:	0800fd70 	.word	0x0800fd70
 8000ab0:	2405023c 	.word	0x2405023c
 8000ab4:	0800fd9c 	.word	0x0800fd9c
 8000ab8:	24050240 	.word	0x24050240
 8000abc:	0800fdc4 	.word	0x0800fdc4
 8000ac0:	24050244 	.word	0x24050244

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f00c ff8f 	bl	800d9f0 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartDefaultTask+0x8>

08000ad4 <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
	HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <StartSamplingTask+0x98>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4822      	ldr	r0, [pc, #136]	@ (8000b70 <StartSamplingTask+0x9c>)
 8000ae8:	f001 faae 	bl	8002048 <HAL_ADC_Start_DMA>
	HAL_COMP_Start_IT(&hcomp1);
 8000aec:	4821      	ldr	r0, [pc, #132]	@ (8000b74 <StartSamplingTask+0xa0>)
 8000aee:	f002 fcb5 	bl	800345c <HAL_COMP_Start_IT>

	initFIR();
 8000af2:	f000 f8c7 	bl	8000c84 <initFIR>
	//HAL_ADC_Start(&hadc1);
  /* Infinite loop */
  for(;;)
  {

	  if (capture_done == 1) {
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <StartSamplingTask+0xa4>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d1fb      	bne.n	8000af6 <StartSamplingTask+0x22>
		  capture_done = 0;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <StartSamplingTask+0xa4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]


		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e01e      	b.n	8000b48 <StartSamplingTask+0x74>
			  if (*(sendBuffer+i) > 2000) {
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <StartSamplingTask+0xa8>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b1a:	d912      	bls.n	8000b42 <StartSamplingTask+0x6e>
				  write_ptr = (i + BUFFER_SIZE - PREEMPT_SIZE) % BUFFER_SIZE;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8000b22:	425a      	negs	r2, r3
 8000b24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b28:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000b2c:	bf58      	it	pl
 8000b2e:	4253      	negpl	r3, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <StartSamplingTask+0xac>)
 8000b34:	601a      	str	r2, [r3, #0]
				  contador++;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <StartSamplingTask+0xb0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a11      	ldr	r2, [pc, #68]	@ (8000b84 <StartSamplingTask+0xb0>)
 8000b3e:	6013      	str	r3, [r2, #0]
				  break;
 8000b40:	e006      	b.n	8000b50 <StartSamplingTask+0x7c>
		  for (int i = 0; i < BUFFER_SIZE; i++){
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b4e:	dbdc      	blt.n	8000b0a <StartSamplingTask+0x36>
			  }
		  }

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2102      	movs	r1, #2
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <StartSamplingTask+0xb4>)
 8000b56:	f005 fe13 	bl	8006780 <HAL_GPIO_WritePin>
		  osDelay(20);
 8000b5a:	2014      	movs	r0, #20
 8000b5c:	f00c ff48 	bl	800d9f0 <osDelay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <StartSamplingTask+0xb4>)
 8000b66:	f005 fe0b 	bl	8006780 <HAL_GPIO_WritePin>
	  if (capture_done == 1) {
 8000b6a:	e7c4      	b.n	8000af6 <StartSamplingTask+0x22>
 8000b6c:	24000000 	.word	0x24000000
 8000b70:	24000084 	.word	0x24000084
 8000b74:	24000160 	.word	0x24000160
 8000b78:	240201b0 	.word	0x240201b0
 8000b7c:	240201a4 	.word	0x240201a4
 8000b80:	240201ac 	.word	0x240201ac
 8000b84:	240201b4 	.word	0x240201b4
 8000b88:	58021000 	.word	0x58021000

08000b8c <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);   // enable idle line interrupt

	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	4931      	ldr	r1, [pc, #196]	@ (8000c5c <StartSerialTask+0xd0>)
 8000b98:	4831      	ldr	r0, [pc, #196]	@ (8000c60 <StartSerialTask+0xd4>)
 8000b9a:	f00a f871 	bl	800ac80 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {

	  if (fl_receive == 1){
 8000b9e:	4b31      	ldr	r3, [pc, #196]	@ (8000c64 <StartSerialTask+0xd8>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d156      	bne.n	8000c54 <StartSerialTask+0xc8>
		  fl_receive = 0;
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c64 <StartSerialTask+0xd8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

		  // Copiar los datos del buffer ADC al buffer de entrada
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e012      	b.n	8000bd8 <StartSerialTask+0x4c>
		    input[i] = (float32_t)sendBuffer[i];
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <StartSerialTask+0xdc>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc6:	4a29      	ldr	r2, [pc, #164]	@ (8000c6c <StartSerialTask+0xe0>)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000bde:	dbe8      	blt.n	8000bb2 <StartSerialTask+0x26>

		  }

		  // Aplicar el filtro FIR
		  arm_fir_f32(&S, input, output, BUFFER_SIZE);
 8000be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be4:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <StartSerialTask+0xe4>)
 8000be6:	4921      	ldr	r1, [pc, #132]	@ (8000c6c <StartSerialTask+0xe0>)
 8000be8:	4822      	ldr	r0, [pc, #136]	@ (8000c74 <StartSerialTask+0xe8>)
 8000bea:	f00e f935 	bl	800ee58 <arm_fir_f32>


		  //HAL_UART_Transmit_IT(&huart3, "HELLO FABIAN\n", 13);
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	e02b      	b.n	8000c4c <StartSerialTask+0xc0>
			  sprintf(Tx_Data, "%lu,%lu\r\n", (uint32_t)output[(write_ptr + i) % BUFFER_SIZE],
 8000bf4:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <StartSerialTask+0xec>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <StartSerialTask+0xe4>)
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
					                         *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <StartSerialTask+0xdc>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <StartSerialTask+0xec>)
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	440b      	add	r3, r1
 8000c1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
			  sprintf(Tx_Data, "%lu,%lu\r\n", (uint32_t)output[(write_ptr + i) % BUFFER_SIZE],
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	ee17 2a90 	vmov	r2, s15
 8000c28:	4914      	ldr	r1, [pc, #80]	@ (8000c7c <StartSerialTask+0xf0>)
 8000c2a:	4815      	ldr	r0, [pc, #84]	@ (8000c80 <StartSerialTask+0xf4>)
 8000c2c:	f00e fb98 	bl	800f360 <siprintf>
			  // sprintf(Tx_Data, "%lu\r\n", *(sendBuffer + ((write_ptr + i) % BUFFER_SIZE)));
			  HAL_UART_Transmit(&huart3, Tx_Data, strlen(Tx_Data), HAL_MAX_DELAY);
 8000c30:	4813      	ldr	r0, [pc, #76]	@ (8000c80 <StartSerialTask+0xf4>)
 8000c32:	f7ff fb55 	bl	80002e0 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	4910      	ldr	r1, [pc, #64]	@ (8000c80 <StartSerialTask+0xf4>)
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <StartSerialTask+0xd4>)
 8000c42:	f009 ff8f 	bl	800ab64 <HAL_UART_Transmit>
		  for (int i = 0; i < BUFFER_PRINT ; i++){
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c52:	dbcf      	blt.n	8000bf4 <StartSerialTask+0x68>
		  }


	  }

    osDelay(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f00c fecb 	bl	800d9f0 <osDelay>
	  if (fl_receive == 1){
 8000c5a:	e7a0      	b.n	8000b9e <StartSerialTask+0x12>
 8000c5c:	2400018c 	.word	0x2400018c
 8000c60:	24050538 	.word	0x24050538
 8000c64:	24000196 	.word	0x24000196
 8000c68:	240201a4 	.word	0x240201a4
 8000c6c:	2403023c 	.word	0x2403023c
 8000c70:	2404023c 	.word	0x2404023c
 8000c74:	24030230 	.word	0x24030230
 8000c78:	240201ac 	.word	0x240201ac
 8000c7c:	0800fde0 	.word	0x0800fde0
 8000c80:	24000198 	.word	0x24000198

08000c84 <initFIR>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void initFIR(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8
  // arm_fir_init_q31(&S, FIR_TAP_NUM, &firCoeffs32, &firStateF32, BUFFER_SIZE);
  arm_fir_init_f32(&S, FIR_TAP_NUM, firCoeffs32, firStateF32, BUFFER_SIZE);
 8000c8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <initFIR+0x20>)
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <initFIR+0x24>)
 8000c94:	211f      	movs	r1, #31
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <initFIR+0x28>)
 8000c98:	f00e f8cc 	bl	800ee34 <arm_fir_init_f32>
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	240201b8 	.word	0x240201b8
 8000ca8:	0800fdf4 	.word	0x0800fdf4
 8000cac:	24030230 	.word	0x24030230

08000cb0 <HAL_COMP_TriggerCallback>:

/* ******************************************************************************** */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	fl_trigger = 1;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <HAL_COMP_TriggerCallback+0x1c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]


}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	24000197 	.word	0x24000197

08000cd0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	read_ptr = (read_ptr + 1) % BUFFER_SIZE;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ce2:	4a18      	ldr	r2, [pc, #96]	@ (8000d44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000ce4:	6013      	str	r3, [r2, #0]

	if (fl_trigger == 1){
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_ADC_ConvCpltCallback+0x78>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d126      	bne.n	8000d3c <HAL_ADC_ConvCpltCallback+0x6c>
		fl_trigger = 0;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_ADC_ConvCpltCallback+0x78>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
		if (capture_done ==  0) {
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d11f      	bne.n	8000d3c <HAL_ADC_ConvCpltCallback+0x6c>
				capture_done = 1;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 8000d02:	4813      	ldr	r0, [pc, #76]	@ (8000d50 <HAL_ADC_ConvCpltCallback+0x80>)
 8000d04:	f001 fa64 	bl	80021d0 <HAL_ADC_Stop_DMA>
			  // Alternar buffers
			  if (currentBuffer == medicion)
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_ADC_ConvCpltCallback+0x84>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d106      	bne.n	8000d20 <HAL_ADC_ConvCpltCallback+0x50>
			  {
				  currentBuffer = envio;
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <HAL_ADC_ConvCpltCallback+0x84>)
 8000d14:	4a11      	ldr	r2, [pc, #68]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d16:	601a      	str	r2, [r3, #0]
				  sendBuffer = medicion;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e005      	b.n	8000d2c <HAL_ADC_ConvCpltCallback+0x5c>
			  }
			  else
			  {
				  currentBuffer = medicion;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_ADC_ConvCpltCallback+0x84>)
 8000d22:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d24:	601a      	str	r2, [r3, #0]
				  sendBuffer = envio;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d28:	4a0c      	ldr	r2, [pc, #48]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d2a:	601a      	str	r2, [r3, #0]
			  }

			  // Reiniciar el DMA con el nuevo buffer
			  HAL_ADC_Start_DMA(&hadc1, currentBuffer, BUFFER_SIZE);
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_ADC_ConvCpltCallback+0x84>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <HAL_ADC_ConvCpltCallback+0x80>)
 8000d38:	f001 f986 	bl	8002048 <HAL_ADC_Start_DMA>
			}
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240201a8 	.word	0x240201a8
 8000d48:	24000197 	.word	0x24000197
 8000d4c:	240201b0 	.word	0x240201b0
 8000d50:	24000084 	.word	0x24000084
 8000d54:	24000000 	.word	0x24000000
 8000d58:	240001a4 	.word	0x240001a4
 8000d5c:	240101a4 	.word	0x240101a4
 8000d60:	240201a4 	.word	0x240201a4

08000d64 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d70:	4803      	ldr	r0, [pc, #12]	@ (8000d80 <HAL_UART_TxCpltCallback+0x1c>)
 8000d72:	f005 fd1e 	bl	80067b2 <HAL_GPIO_TogglePin>
	return;
 8000d76:	bf00      	nop
}
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58020400 	.word	0x58020400

08000d84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4807      	ldr	r0, [pc, #28]	@ (8000dac <HAL_UART_RxCpltCallback+0x28>)
 8000d90:	f005 fd0f 	bl	80067b2 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart3, Rx_Data, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	4906      	ldr	r1, [pc, #24]	@ (8000db0 <HAL_UART_RxCpltCallback+0x2c>)
 8000d98:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <HAL_UART_RxCpltCallback+0x30>)
 8000d9a:	f009 ff71 	bl	800ac80 <HAL_UART_Receive_IT>
	fl_receive = 1;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_UART_RxCpltCallback+0x34>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
	return;
 8000da4:	bf00      	nop
}
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58020400 	.word	0x58020400
 8000db0:	2400018c 	.word	0x2400018c
 8000db4:	24050538 	.word	0x24050538
 8000db8:	24000196 	.word	0x24000196

08000dbc <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA3   ------> ADCx_INP15
*/
void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	@ 0x30
 8000dc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b68      	ldr	r3, [pc, #416]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	4a66      	ldr	r2, [pc, #408]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de2:	4b64      	ldr	r3, [pc, #400]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df0:	4b60      	ldr	r3, [pc, #384]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b5c      	ldr	r3, [pc, #368]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b59      	ldr	r3, [pc, #356]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a57      	ldr	r2, [pc, #348]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b55      	ldr	r3, [pc, #340]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b51      	ldr	r3, [pc, #324]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	4a50      	ldr	r2, [pc, #320]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	4a48      	ldr	r2, [pc, #288]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e68:	4b42      	ldr	r3, [pc, #264]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	4a41      	ldr	r2, [pc, #260]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e78:	4b3e      	ldr	r3, [pc, #248]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	4b3b      	ldr	r3, [pc, #236]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	4a39      	ldr	r2, [pc, #228]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e96:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <MX_GPIO_Init+0x1b8>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000eaa:	4833      	ldr	r0, [pc, #204]	@ (8000f78 <MX_GPIO_Init+0x1bc>)
 8000eac:	f005 fc68 	bl	8006780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eb6:	4831      	ldr	r0, [pc, #196]	@ (8000f7c <MX_GPIO_Init+0x1c0>)
 8000eb8:	f005 fc62 	bl	8006780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	482f      	ldr	r0, [pc, #188]	@ (8000f80 <MX_GPIO_Init+0x1c4>)
 8000ec2:	f005 fc5d 	bl	8006780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482a      	ldr	r0, [pc, #168]	@ (8000f84 <MX_GPIO_Init+0x1c8>)
 8000edc:	f005 faa0 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4825      	ldr	r0, [pc, #148]	@ (8000f88 <MX_GPIO_Init+0x1cc>)
 8000ef4:	f005 fa94 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ef8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4819      	ldr	r0, [pc, #100]	@ (8000f78 <MX_GPIO_Init+0x1bc>)
 8000f12:	f005 fa85 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4813      	ldr	r0, [pc, #76]	@ (8000f7c <MX_GPIO_Init+0x1c0>)
 8000f30:	f005 fa76 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4810      	ldr	r0, [pc, #64]	@ (8000f8c <MX_GPIO_Init+0x1d0>)
 8000f4a:	f005 fa69 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_GPIO_Init+0x1c4>)
 8000f66:	f005 fa5b 	bl	8006420 <HAL_GPIO_Init>

}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	@ 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020400 	.word	0x58020400
 8000f7c:	58020c00 	.word	0x58020c00
 8000f80:	58021000 	.word	0x58021000
 8000f84:	58020800 	.word	0x58020800
 8000f88:	58020000 	.word	0x58020000
 8000f8c:	58021800 	.word	0x58021800

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fbf2 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f812 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f7ff ff0e 	bl	8000dbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa0:	f7ff fd0c 	bl	80009bc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fa4:	f000 fb12 	bl	80015cc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000fa8:	f7ff fb6a 	bl	8000680 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000fac:	f000 fa50 	bl	8001450 <MX_USART3_UART_Init>
  MX_COMP1_Init();
 8000fb0:	f7ff fc88 	bl	80008c4 <MX_COMP1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fb4:	f7ff fd3c 	bl	8000a30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fb8:	f00c fcc7 	bl	800d94a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <main+0x2c>

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09e      	sub	sp, #120	@ 0x78
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fca:	224c      	movs	r2, #76	@ 0x4c
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00e f9e6 	bl	800f3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2220      	movs	r2, #32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00e f9df 	bl	800f3a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f005 fd30 	bl	8006a48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b48      	ldr	r3, [pc, #288]	@ (8001110 <SystemClock_Config+0x150>)
 8000fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff0:	4a47      	ldr	r2, [pc, #284]	@ (8001110 <SystemClock_Config+0x150>)
 8000ff2:	f023 0301 	bic.w	r3, r3, #1
 8000ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ff8:	4b45      	ldr	r3, [pc, #276]	@ (8001110 <SystemClock_Config+0x150>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b44      	ldr	r3, [pc, #272]	@ (8001114 <SystemClock_Config+0x154>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4a43      	ldr	r2, [pc, #268]	@ (8001114 <SystemClock_Config+0x154>)
 8001008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800100c:	6193      	str	r3, [r2, #24]
 800100e:	4b41      	ldr	r3, [pc, #260]	@ (8001114 <SystemClock_Config+0x154>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800101a:	bf00      	nop
 800101c:	4b3d      	ldr	r3, [pc, #244]	@ (8001114 <SystemClock_Config+0x154>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001028:	d1f8      	bne.n	800101c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <SystemClock_Config+0x158>)
 800102c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001030:	4a39      	ldr	r2, [pc, #228]	@ (8001118 <SystemClock_Config+0x158>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800103a:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <SystemClock_Config+0x158>)
 800103c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <SystemClock_Config+0x154>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <SystemClock_Config+0x154>)
 8001052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <SystemClock_Config+0x154>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <SystemClock_Config+0x150>)
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	4a2a      	ldr	r2, [pc, #168]	@ (8001110 <SystemClock_Config+0x150>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <SystemClock_Config+0x150>)
 8001070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800107a:	bf00      	nop
 800107c:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <SystemClock_Config+0x154>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001088:	d1f8      	bne.n	800107c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108a:	2301      	movs	r3, #1
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800108e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001098:	2302      	movs	r3, #2
 800109a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010a0:	2378      	movs	r3, #120	@ 0x78
 80010a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80010a8:	230f      	movs	r3, #15
 80010aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010b0:	230c      	movs	r3, #12
 80010b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 fd0b 	bl	8006adc <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80010cc:	f000 f838 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	233f      	movs	r3, #63	@ 0x3f
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2303      	movs	r3, #3
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010dc:	2308      	movs	r3, #8
 80010de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010e0:	2340      	movs	r3, #64	@ 0x40
 80010e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ee:	2340      	movs	r3, #64	@ 0x40
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2104      	movs	r1, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 f949 	bl	8007390 <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001104:	f000 f81c 	bl	8001140 <Error_Handler>
  }
}
 8001108:	bf00      	nop
 800110a:	3778      	adds	r7, #120	@ 0x78
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58000400 	.word	0x58000400
 8001114:	58024800 	.word	0x58024800
 8001118:	58024400 	.word	0x58024400

0800111c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112e:	f000 fb61 	bl	80017f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40010000 	.word	0x40010000

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <Error_Handler+0x8>

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_MspInit+0x38>)
 8001154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001158:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <HAL_MspInit+0x38>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_MspInit+0x38>)
 8001164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	210f      	movs	r1, #15
 8001174:	f06f 0001 	mvn.w	r0, #1
 8001178:	f002 faee 	bl	8003758 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024400 	.word	0x58024400

08001188 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	@ 0x38
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	d844      	bhi.n	8001220 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001196:	2200      	movs	r2, #0
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	2019      	movs	r0, #25
 800119c:	f002 fadc 	bl	8003758 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011a0:	2019      	movs	r0, #25
 80011a2:	f002 faf3 	bl	800378c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80011a6:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <HAL_InitTick+0xb0>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_InitTick+0xb4>)
 80011ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b2:	4a22      	ldr	r2, [pc, #136]	@ (800123c <HAL_InitTick+0xb4>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <HAL_InitTick+0xb4>)
 80011be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 fc67 	bl	8007aa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011da:	f006 fc4f 	bl	8007a7c <HAL_RCC_GetPCLK2Freq>
 80011de:	4603      	mov	r3, r0
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e6:	4a16      	ldr	r2, [pc, #88]	@ (8001240 <HAL_InitTick+0xb8>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	3b01      	subs	r3, #1
 80011f0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_InitTick+0xbc>)
 80011f4:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <HAL_InitTick+0xc0>)
 80011f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0xbc>)
 80011fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001200:	4a10      	ldr	r2, [pc, #64]	@ (8001244 <HAL_InitTick+0xbc>)
 8001202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001204:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_InitTick+0xbc>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <HAL_InitTick+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001212:	480c      	ldr	r0, [pc, #48]	@ (8001244 <HAL_InitTick+0xbc>)
 8001214:	f009 f988 	bl	800a528 <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d107      	bne.n	800122e <HAL_InitTick+0xa6>
 800121e:	e001      	b.n	8001224 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e005      	b.n	8001230 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001224:	4807      	ldr	r0, [pc, #28]	@ (8001244 <HAL_InitTick+0xbc>)
 8001226:	f009 f9e1 	bl	800a5ec <HAL_TIM_Base_Start_IT>
 800122a:	4603      	mov	r3, r0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3738      	adds	r7, #56	@ 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2400000c 	.word	0x2400000c
 800123c:	58024400 	.word	0x58024400
 8001240:	431bde83 	.word	0x431bde83
 8001244:	240504e8 	.word	0x240504e8
 8001248:	40010000 	.word	0x40010000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <DMA1_Stream0_IRQHandler+0x10>)
 800128a:	f003 fdb7 	bl	8004dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	240000e8 	.word	0x240000e8

08001298 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <TIM1_UP_IRQHandler+0x10>)
 800129e:	f009 fa1d 	bl	800a6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	240504e8 	.word	0x240504e8

080012ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <USART3_IRQHandler+0x10>)
 80012b2:	f009 fd31 	bl	800ad18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	24050538 	.word	0x24050538

080012c0 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <COMP1_IRQHandler+0x10>)
 80012c6:	f002 f91b 	bl	8003500 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000160 	.word	0x24000160

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f00e f8aa 	bl	800f45c <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	24080000 	.word	0x24080000
 8001334:	00000400 	.word	0x00000400
 8001338:	24050534 	.word	0x24050534
 800133c:	24054950 	.word	0x24054950

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001344:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <SystemInit+0xe4>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134a:	4a36      	ldr	r2, [pc, #216]	@ (8001424 <SystemInit+0xe4>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001354:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <SystemInit+0xe8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	2b06      	cmp	r3, #6
 800135e:	d807      	bhi.n	8001370 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001360:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <SystemInit+0xe8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 030f 	bic.w	r3, r3, #15
 8001368:	4a2f      	ldr	r2, [pc, #188]	@ (8001428 <SystemInit+0xe8>)
 800136a:	f043 0307 	orr.w	r3, r3, #7
 800136e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001370:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <SystemInit+0xec>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2d      	ldr	r2, [pc, #180]	@ (800142c <SystemInit+0xec>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <SystemInit+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001382:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <SystemInit+0xec>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4929      	ldr	r1, [pc, #164]	@ (800142c <SystemInit+0xec>)
 8001388:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <SystemInit+0xf0>)
 800138a:	4013      	ands	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800138e:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <SystemInit+0xe8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800139a:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <SystemInit+0xe8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 030f 	bic.w	r3, r3, #15
 80013a2:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <SystemInit+0xe8>)
 80013a4:	f043 0307 	orr.w	r3, r3, #7
 80013a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <SystemInit+0xec>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <SystemInit+0xec>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <SystemInit+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <SystemInit+0xec>)
 80013be:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <SystemInit+0xf4>)
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <SystemInit+0xec>)
 80013c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <SystemInit+0xf8>)
 80013c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <SystemInit+0xec>)
 80013ca:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <SystemInit+0xfc>)
 80013cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <SystemInit+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <SystemInit+0xec>)
 80013d6:	4a19      	ldr	r2, [pc, #100]	@ (800143c <SystemInit+0xfc>)
 80013d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <SystemInit+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <SystemInit+0xec>)
 80013e2:	4a16      	ldr	r2, [pc, #88]	@ (800143c <SystemInit+0xfc>)
 80013e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <SystemInit+0xec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <SystemInit+0xec>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0e      	ldr	r2, [pc, #56]	@ (800142c <SystemInit+0xec>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <SystemInit+0xec>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <SystemInit+0x100>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <SystemInit+0x104>)
 8001404:	4013      	ands	r3, r2
 8001406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800140a:	d202      	bcs.n	8001412 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800140c:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <SystemInit+0x108>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <SystemInit+0x10c>)
 8001414:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001418:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	52002000 	.word	0x52002000
 800142c:	58024400 	.word	0x58024400
 8001430:	eaf6ed7f 	.word	0xeaf6ed7f
 8001434:	02020200 	.word	0x02020200
 8001438:	01ff0000 	.word	0x01ff0000
 800143c:	01010280 	.word	0x01010280
 8001440:	5c001000 	.word	0x5c001000
 8001444:	ffff0000 	.word	0xffff0000
 8001448:	51008108 	.word	0x51008108
 800144c:	52004000 	.word	0x52004000

08001450 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001454:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001456:	4a23      	ldr	r2, [pc, #140]	@ (80014e4 <MX_USART3_UART_Init+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800145c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001498:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800149a:	f009 fb13 	bl	800aac4 <HAL_UART_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014a4:	f7ff fe4c 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ac:	f00b fe63 	bl	800d176 <HAL_UARTEx_SetTxFifoThreshold>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014b6:	f7ff fe43 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ba:	2100      	movs	r1, #0
 80014bc:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 80014be:	f00b fe98 	bl	800d1f2 <HAL_UARTEx_SetRxFifoThreshold>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f7ff fe3a 	bl	8001140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ce:	f00b fe19 	bl	800d104 <HAL_UARTEx_DisableFifoMode>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014d8:	f7ff fe32 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	24050538 	.word	0x24050538
 80014e4:	40004800 	.word	0x40004800

080014e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0ba      	sub	sp, #232	@ 0xe8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	22c0      	movs	r2, #192	@ 0xc0
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f00d ff49 	bl	800f3a0 <memset>
  if(uartHandle->Instance==USART3)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a2b      	ldr	r2, [pc, #172]	@ (80015c0 <HAL_UART_MspInit+0xd8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d14e      	bne.n	80015b6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001518:	f04f 0202 	mov.w	r2, #2
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4618      	mov	r0, r3
 8001530:	f006 fafc 	bl	8007b2c <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800153a:	f7ff fe01 	bl	8001140 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153e:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <HAL_UART_MspInit+0xdc>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001544:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <HAL_UART_MspInit+0xdc>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <HAL_UART_MspInit+0xdc>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_UART_MspInit+0xdc>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <HAL_UART_MspInit+0xdc>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_UART_MspInit+0xdc>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800157a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001594:	2307      	movs	r3, #7
 8001596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800159e:	4619      	mov	r1, r3
 80015a0:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <HAL_UART_MspInit+0xe0>)
 80015a2:	f004 ff3d 	bl	8006420 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	2027      	movs	r0, #39	@ 0x27
 80015ac:	f002 f8d4 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015b0:	2027      	movs	r0, #39	@ 0x27
 80015b2:	f002 f8eb 	bl	800378c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015b6:	bf00      	nop
 80015b8:	37e8      	adds	r7, #232	@ 0xe8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004800 	.word	0x40004800
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58020c00 	.word	0x58020c00

080015cc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015d2:	4a16      	ldr	r2, [pc, #88]	@ (800162c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80015d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015d8:	2209      	movs	r2, #9
 80015da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015de:	2202      	movs	r2, #2
 80015e0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ea:	2202      	movs	r2, #2
 80015ec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001602:	2201      	movs	r2, #1
 8001604:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001608:	2201      	movs	r2, #1
 800160a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800160e:	2200      	movs	r2, #0
 8001610:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001614:	f005 f8e7 	bl	80067e6 <HAL_PCD_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800161e:	f7ff fd8f 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	240505cc 	.word	0x240505cc
 800162c:	40080000 	.word	0x40080000

08001630 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0ba      	sub	sp, #232	@ 0xe8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	22c0      	movs	r2, #192	@ 0xc0
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f00d fea5 	bl	800f3a0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a30      	ldr	r2, [pc, #192]	@ (800171c <HAL_PCD_MspInit+0xec>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d159      	bne.n	8001714 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001660:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800166c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fa57 	bl	8007b2c <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001684:	f7ff fd5c 	bl	8001140 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001688:	f005 fa18 	bl	8006abc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_PCD_MspInit+0xf0>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <HAL_PCD_MspInit+0xf0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_PCD_MspInit+0xf0>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80016aa:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80016ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016c4:	230a      	movs	r3, #10
 80016c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	@ (8001724 <HAL_PCD_MspInit+0xf4>)
 80016d2:	f004 fea5 	bl	8006420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016ee:	4619      	mov	r1, r3
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <HAL_PCD_MspInit+0xf4>)
 80016f2:	f004 fe95 	bl	8006420 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_PCD_MspInit+0xf0>)
 80016f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016fc:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <HAL_PCD_MspInit+0xf0>)
 80016fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001702:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_PCD_MspInit+0xf0>)
 8001708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800170c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001714:	bf00      	nop
 8001716:	37e8      	adds	r7, #232	@ 0xe8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40080000 	.word	0x40080000
 8001720:	58024400 	.word	0x58024400
 8001724:	58020000 	.word	0x58020000

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800172c:	f7ff fe08 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f00d fe87 	bl	800f468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff fc19 	bl	8000f90 <main>
  bx  lr
 800175e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001760:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001764:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001768:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 800176c:	0800fef4 	.word	0x0800fef4
  ldr r2, =_sbss
 8001770:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8001774:	24054950 	.word	0x24054950

08001778 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC3_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001782:	2003      	movs	r0, #3
 8001784:	f001 ffdd 	bl	8003742 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001788:	f005 ffb8 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_Init+0x68>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	4913      	ldr	r1, [pc, #76]	@ (80017e8 <HAL_Init+0x6c>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_Init+0x68>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	4a0e      	ldr	r2, [pc, #56]	@ (80017e8 <HAL_Init+0x6c>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_Init+0x70>)
 80017be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017c0:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <HAL_Init+0x74>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c6:	200f      	movs	r0, #15
 80017c8:	f7ff fcde 	bl	8001188 <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e002      	b.n	80017dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017d6:	f7ff fcb9 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	58024400 	.word	0x58024400
 80017e8:	0800fe70 	.word	0x0800fe70
 80017ec:	24000008 	.word	0x24000008
 80017f0:	24000004 	.word	0x24000004

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	24000010 	.word	0x24000010
 8001818:	24050ab0 	.word	0x24050ab0

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	24050ab0 	.word	0x24050ab0

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	24000010 	.word	0x24000010

0800187c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_GetREVID+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0c1b      	lsrs	r3, r3, #16
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	5c001000 	.word	0x5c001000

08001894 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	609a      	str	r2, [r3, #8]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3360      	adds	r3, #96	@ 0x60
 800190e:	461a      	mov	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	430b      	orrs	r3, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	611a      	str	r2, [r3, #16]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800196e:	b480      	push	{r7}
 8001970:	b087      	sub	sp, #28
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3360      	adds	r3, #96	@ 0x60
 800197e:	461a      	mov	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	431a      	orrs	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]
  }
}
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b087      	sub	sp, #28
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3330      	adds	r3, #48	@ 0x30
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	4413      	add	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	211f      	movs	r1, #31
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	401a      	ands	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 011f 	and.w	r1, r3, #31
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f023 0203 	bic.w	r2, r3, #3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3314      	adds	r3, #20
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	0e5b      	lsrs	r3, r3, #25
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	4413      	add	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	0d1b      	lsrs	r3, r3, #20
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2107      	movs	r1, #7
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	0d1b      	lsrs	r3, r3, #20
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0318 	and.w	r3, r3, #24
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ac4:	40d9      	lsrs	r1, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	400b      	ands	r3, r1
 8001aca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	000fffff 	.word	0x000fffff

08001ae8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 031f 	and.w	r3, r3, #31
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6093      	str	r3, [r2, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	5fffffc0 	.word	0x5fffffc0

08001b28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	6fffffc0 	.word	0x6fffffc0

08001b78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b8c:	d101      	bne.n	8001b92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <LL_ADC_Enable+0x24>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	7fffffc0 	.word	0x7fffffc0

08001bc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <LL_ADC_Disable+0x24>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	f043 0202 	orr.w	r2, r3, #2
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	7fffffc0 	.word	0x7fffffc0

08001bf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_IsEnabled+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_IsEnabled+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_IsDisableOngoing+0x18>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_IsDisableOngoing+0x1a>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <LL_ADC_REG_StartConversion+0x24>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	f043 0204 	orr.w	r2, r3, #4
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	7fffffc0 	.word	0x7fffffc0

08001c64 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <LL_ADC_REG_StopConversion+0x24>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	f043 0210 	orr.w	r2, r3, #16
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	7fffffc0 	.word	0x7fffffc0

08001c8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <LL_ADC_INJ_StopConversion+0x24>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	7fffffc0 	.word	0x7fffffc0

08001cdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e18f      	b.n	800203e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fd21 	bl	8000774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff feef 	bl	8001b28 <LL_ADC_IsDeepPowerDownEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fed5 	bl	8001b04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff0a 	bl	8001b78 <LL_ADC_IsInternalRegulatorEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d114      	bne.n	8001d94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff feee 	bl	8001b50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d74:	4b87      	ldr	r3, [pc, #540]	@ (8001f94 <HAL_ADC_Init+0x290>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	4a87      	ldr	r2, [pc, #540]	@ (8001f98 <HAL_ADC_Init+0x294>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	3301      	adds	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d86:	e002      	b.n	8001d8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f9      	bne.n	8001d88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff feed 	bl	8001b78 <LL_ADC_IsInternalRegulatorEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10d      	bne.n	8001dc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da8:	f043 0210 	orr.w	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff61 	bl	8001c8c <LL_ADC_REG_IsConversionOngoing>
 8001dca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 8129 	bne.w	800202c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 8125 	bne.w	800202c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fefa 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d136      	bne.n	8001e70 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a65      	ldr	r2, [pc, #404]	@ (8001f9c <HAL_ADC_Init+0x298>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d004      	beq.n	8001e16 <HAL_ADC_Init+0x112>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a63      	ldr	r2, [pc, #396]	@ (8001fa0 <HAL_ADC_Init+0x29c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10e      	bne.n	8001e34 <HAL_ADC_Init+0x130>
 8001e16:	4861      	ldr	r0, [pc, #388]	@ (8001f9c <HAL_ADC_Init+0x298>)
 8001e18:	f7ff feea 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	4860      	ldr	r0, [pc, #384]	@ (8001fa0 <HAL_ADC_Init+0x29c>)
 8001e20:	f7ff fee6 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4323      	orrs	r3, r4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e008      	b.n	8001e46 <HAL_ADC_Init+0x142>
 8001e34:	485b      	ldr	r0, [pc, #364]	@ (8001fa4 <HAL_ADC_Init+0x2a0>)
 8001e36:	f7ff fedb 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a53      	ldr	r2, [pc, #332]	@ (8001f9c <HAL_ADC_Init+0x298>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_ADC_Init+0x15a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a51      	ldr	r2, [pc, #324]	@ (8001fa0 <HAL_ADC_Init+0x29c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_Init+0x15e>
 8001e5e:	4a52      	ldr	r2, [pc, #328]	@ (8001fa8 <HAL_ADC_Init+0x2a4>)
 8001e60:	e000      	b.n	8001e64 <HAL_ADC_Init+0x160>
 8001e62:	4a52      	ldr	r2, [pc, #328]	@ (8001fac <HAL_ADC_Init+0x2a8>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f7ff fd12 	bl	8001894 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e70:	f7ff fd04 	bl	800187c <HAL_GetREVID>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d914      	bls.n	8001ea8 <HAL_ADC_Init+0x1a4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d110      	bne.n	8001ea8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7d5b      	ldrb	r3, [r3, #21]
 8001e8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e90:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7f1b      	ldrb	r3, [r3, #28]
 8001e9c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e9e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea0:	f043 030c 	orr.w	r3, r3, #12
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	e00d      	b.n	8001ec4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7d5b      	ldrb	r3, [r3, #21]
 8001eac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001eb8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7f1b      	ldrb	r3, [r3, #28]
 8001ebe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7f1b      	ldrb	r3, [r3, #28]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	045b      	lsls	r3, r3, #17
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <HAL_ADC_Init+0x2ac>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	430b      	orrs	r3, r1
 8001f08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff febc 	bl	8001c8c <LL_ADC_REG_IsConversionOngoing>
 8001f14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fede 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 8001f20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d15f      	bne.n	8001fe8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d15c      	bne.n	8001fe8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7d1b      	ldrb	r3, [r3, #20]
 8001f32:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <HAL_ADC_Init+0x2b0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d130      	bne.n	8001fbc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_ADC_Init+0x2b4>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f6e:	3a01      	subs	r2, #1
 8001f70:	0411      	lsls	r1, r2, #16
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f82:	430a      	orrs	r2, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	e01c      	b.n	8001fcc <HAL_ADC_Init+0x2c8>
 8001f92:	bf00      	nop
 8001f94:	24000004 	.word	0x24000004
 8001f98:	053e2d63 	.word	0x053e2d63
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40022100 	.word	0x40022100
 8001fa4:	58026000 	.word	0x58026000
 8001fa8:	40022300 	.word	0x40022300
 8001fac:	58026300 	.word	0x58026300
 8001fb0:	fff0c003 	.word	0xfff0c003
 8001fb4:	ffffbffc 	.word	0xffffbffc
 8001fb8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 ff00 	bl	8002de8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10c      	bne.n	800200a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f023 010f 	bic.w	r1, r3, #15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
 8002008:	e007      	b.n	800201a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 020f 	bic.w	r2, r2, #15
 8002018:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
 800202a:	e007      	b.n	800203c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f043 0210 	orr.w	r2, r3, #16
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800203c:	7ffb      	ldrb	r3, [r7, #31]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop

08002048 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a55      	ldr	r2, [pc, #340]	@ (80021b0 <HAL_ADC_Start_DMA+0x168>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_ADC_Start_DMA+0x20>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a54      	ldr	r2, [pc, #336]	@ (80021b4 <HAL_ADC_Start_DMA+0x16c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_ADC_Start_DMA+0x24>
 8002068:	4b53      	ldr	r3, [pc, #332]	@ (80021b8 <HAL_ADC_Start_DMA+0x170>)
 800206a:	e000      	b.n	800206e <HAL_ADC_Start_DMA+0x26>
 800206c:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_ADC_Start_DMA+0x174>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fd3a 	bl	8001ae8 <LL_ADC_GetMultimode>
 8002074:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe06 	bl	8001c8c <LL_ADC_REG_IsConversionOngoing>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 808c 	bne.w	80021a0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_Start_DMA+0x4e>
 8002092:	2302      	movs	r3, #2
 8002094:	e087      	b.n	80021a6 <HAL_ADC_Start_DMA+0x15e>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d002      	beq.n	80020b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d170      	bne.n	8002192 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fd1b 	bl	8002aec <ADC_Enable>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d163      	bne.n	8002188 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020c4:	4b3e      	ldr	r3, [pc, #248]	@ (80021c0 <HAL_ADC_Start_DMA+0x178>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a37      	ldr	r2, [pc, #220]	@ (80021b4 <HAL_ADC_Start_DMA+0x16c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d002      	beq.n	80020e0 <HAL_ADC_Start_DMA+0x98>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e000      	b.n	80020e2 <HAL_ADC_Start_DMA+0x9a>
 80020e0:	4b33      	ldr	r3, [pc, #204]	@ (80021b0 <HAL_ADC_Start_DMA+0x168>)
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f023 0206 	bic.w	r2, r3, #6
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	659a      	str	r2, [r3, #88]	@ 0x58
 8002114:	e002      	b.n	800211c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002120:	4a28      	ldr	r2, [pc, #160]	@ (80021c4 <HAL_ADC_Start_DMA+0x17c>)
 8002122:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002128:	4a27      	ldr	r2, [pc, #156]	@ (80021c8 <HAL_ADC_Start_DMA+0x180>)
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002130:	4a26      	ldr	r2, [pc, #152]	@ (80021cc <HAL_ADC_Start_DMA+0x184>)
 8002132:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	221c      	movs	r2, #28
 800213a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0210 	orr.w	r2, r2, #16
 8002152:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f7ff fc5f 	bl	8001a22 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3340      	adds	r3, #64	@ 0x40
 800216e:	4619      	mov	r1, r3
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f001 fe74 	bl	8003e60 <HAL_DMA_Start_IT>
 8002178:	4603      	mov	r3, r0
 800217a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fd5b 	bl	8001c3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002186:	e00d      	b.n	80021a4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002190:	e008      	b.n	80021a4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800219e:	e001      	b.n	80021a4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
 80021a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40022100 	.word	0x40022100
 80021b8:	40022300 	.word	0x40022300
 80021bc:	58026300 	.word	0x58026300
 80021c0:	fffff0fe 	.word	0xfffff0fe
 80021c4:	08002cbf 	.word	0x08002cbf
 80021c8:	08002d97 	.word	0x08002d97
 80021cc:	08002db3 	.word	0x08002db3

080021d0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_Stop_DMA+0x16>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e04f      	b.n	8002286 <HAL_ADC_Stop_DMA+0xb6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021ee:	2103      	movs	r1, #3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fbbf 	bl	8002974 <ADC_ConversionStop>
 80021f6:	4603      	mov	r3, r0
 80021f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d13d      	bne.n	800227c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0203 	bic.w	r2, r2, #3
 800220e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d10f      	bne.n	800223e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	4618      	mov	r0, r3
 8002224:	f002 f886 	bl	8004334 <HAL_DMA_Abort>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002236:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0210 	bic.w	r2, r2, #16
 800224c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fcd3 	bl	8002c00 <ADC_Disable>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e002      	b.n	8002266 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fccd 	bl	8002c00 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <HAL_ADC_Stop_DMA+0xc0>)
 8002272:	4013      	ands	r3, r2
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	ffffeefe 	.word	0xffffeefe

08002294 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b0a1      	sub	sp, #132	@ 0x84
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a65      	ldr	r2, [pc, #404]	@ (800246c <HAL_ADC_ConfigChannel+0x1b0>)
 80022d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x2a>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e32e      	b.n	8002944 <HAL_ADC_ConfigChannel+0x688>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fcca 	bl	8001c8c <LL_ADC_REG_IsConversionOngoing>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 8313 	bne.w	8002926 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db2c      	blt.n	8002362 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002310:	2b00      	cmp	r3, #0
 8002312:	d108      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x6a>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2201      	movs	r2, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	e016      	b.n	8002354 <HAL_ADC_ConfigChannel+0x98>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002336:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002338:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e003      	b.n	800234a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002342:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2201      	movs	r2, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	69d1      	ldr	r1, [r2, #28]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	430b      	orrs	r3, r1
 8002360:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f7ff fb2b 	bl	80019ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fc87 	bl	8001c8c <LL_ADC_REG_IsConversionOngoing>
 800237e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fca9 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 800238a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800238c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 80b8 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 80b4 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f7ff fb4d 	bl	8001a48 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023ae:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <HAL_ADC_ConfigChannel+0x1b4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80023b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023ba:	d10b      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x118>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	e01d      	b.n	8002410 <HAL_ADC_ConfigChannel+0x154>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x13e>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	e00a      	b.n	8002410 <HAL_ADC_ConfigChannel+0x154>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b04      	cmp	r3, #4
 8002418:	d02c      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6919      	ldr	r1, [r3, #16]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002428:	f7ff fa68 	bl	80018fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	7e5b      	ldrb	r3, [r3, #25]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d102      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x186>
 800243c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002440:	e000      	b.n	8002444 <HAL_ADC_ConfigChannel+0x188>
 8002442:	2300      	movs	r3, #0
 8002444:	461a      	mov	r2, r3
 8002446:	f7ff fa92 	bl	800196e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	7e1b      	ldrb	r3, [r3, #24]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d102      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1a4>
 800245a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800245e:	e000      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1a6>
 8002460:	2300      	movs	r3, #0
 8002462:	461a      	mov	r2, r3
 8002464:	f7ff fa6a 	bl	800193c <LL_ADC_SetDataRightShift>
 8002468:	e04c      	b.n	8002504 <HAL_ADC_ConfigChannel+0x248>
 800246a:	bf00      	nop
 800246c:	47ff0000 	.word	0x47ff0000
 8002470:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	069b      	lsls	r3, r3, #26
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002496:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800249e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	069b      	lsls	r3, r3, #26
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d107      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024ba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	069b      	lsls	r3, r3, #26
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d107      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024de:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	069b      	lsls	r3, r3, #26
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002502:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fb71 	bl	8001bf0 <LL_ADC_IsEnabled>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 8211 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff fabc 	bl	8001aa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4aa1      	ldr	r2, [pc, #644]	@ (80027b4 <HAL_ADC_ConfigChannel+0x4f8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f040 812e 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_ADC_ConfigChannel+0x2a0>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2b09      	cmp	r3, #9
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e019      	b.n	8002590 <HAL_ADC_ConfigChannel+0x2d4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800256a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800256e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2b09      	cmp	r3, #9
 8002588:	bf94      	ite	ls
 800258a:	2301      	movls	r3, #1
 800258c:	2300      	movhi	r3, #0
 800258e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002590:	2b00      	cmp	r3, #0
 8002592:	d079      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x2f4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	3301      	adds	r3, #1
 80025a8:	069b      	lsls	r3, r3, #26
 80025aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ae:	e015      	b.n	80025dc <HAL_ADC_ConfigChannel+0x320>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e003      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80025cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	069b      	lsls	r3, r3, #26
 80025d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x340>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	e017      	b.n	800262c <HAL_ADC_ConfigChannel+0x370>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800260a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800260c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800260e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	ea42 0103 	orr.w	r1, r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x396>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	3301      	adds	r3, #1
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	e018      	b.n	8002684 <HAL_ADC_ConfigChannel+0x3c8>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002662:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002684:	430b      	orrs	r3, r1
 8002686:	e07e      	b.n	8002786 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x3e8>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026a2:	e015      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x414>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80026c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	069b      	lsls	r3, r3, #26
 80026cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x434>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	e017      	b.n	8002720 <HAL_ADC_ConfigChannel+0x464>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	61bb      	str	r3, [r7, #24]
  return result;
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	ea42 0103 	orr.w	r1, r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_ADC_ConfigChannel+0x490>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	3b1e      	subs	r3, #30
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800274a:	e01b      	b.n	8002784 <HAL_ADC_ConfigChannel+0x4c8>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	60fb      	str	r3, [r7, #12]
  return result;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e003      	b.n	8002770 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f003 021f 	and.w	r2, r3, #31
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3b1e      	subs	r3, #30
 800277e:	051b      	lsls	r3, r3, #20
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002784:	430b      	orrs	r3, r1
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	4619      	mov	r1, r3
 800278c:	f7ff f95c 	bl	8001a48 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f280 80cf 	bge.w	8002938 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a06      	ldr	r2, [pc, #24]	@ (80027b8 <HAL_ADC_ConfigChannel+0x4fc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x4f2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a04      	ldr	r2, [pc, #16]	@ (80027bc <HAL_ADC_ConfigChannel+0x500>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10a      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x508>
 80027ae:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <HAL_ADC_ConfigChannel+0x504>)
 80027b0:	e009      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x50a>
 80027b2:	bf00      	nop
 80027b4:	47ff0000 	.word	0x47ff0000
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40022100 	.word	0x40022100
 80027c0:	40022300 	.word	0x40022300
 80027c4:	4b61      	ldr	r3, [pc, #388]	@ (800294c <HAL_ADC_ConfigChannel+0x690>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f88a 	bl	80018e0 <LL_ADC_GetCommonPathInternalCh>
 80027cc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002950 <HAL_ADC_ConfigChannel+0x694>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x526>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002954 <HAL_ADC_ConfigChannel+0x698>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10e      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x544>
 80027e2:	485b      	ldr	r0, [pc, #364]	@ (8002950 <HAL_ADC_ConfigChannel+0x694>)
 80027e4:	f7ff fa04 	bl	8001bf0 <LL_ADC_IsEnabled>
 80027e8:	4604      	mov	r4, r0
 80027ea:	485a      	ldr	r0, [pc, #360]	@ (8002954 <HAL_ADC_ConfigChannel+0x698>)
 80027ec:	f7ff fa00 	bl	8001bf0 <LL_ADC_IsEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4323      	orrs	r3, r4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e008      	b.n	8002812 <HAL_ADC_ConfigChannel+0x556>
 8002800:	4855      	ldr	r0, [pc, #340]	@ (8002958 <HAL_ADC_ConfigChannel+0x69c>)
 8002802:	f7ff f9f5 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d07d      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a50      	ldr	r2, [pc, #320]	@ (800295c <HAL_ADC_ConfigChannel+0x6a0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d130      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x5c6>
 8002820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d12b      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a4a      	ldr	r2, [pc, #296]	@ (8002958 <HAL_ADC_ConfigChannel+0x69c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	f040 8081 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a45      	ldr	r2, [pc, #276]	@ (8002950 <HAL_ADC_ConfigChannel+0x694>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_ADC_ConfigChannel+0x58e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a43      	ldr	r2, [pc, #268]	@ (8002954 <HAL_ADC_ConfigChannel+0x698>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x592>
 800284a:	4a45      	ldr	r2, [pc, #276]	@ (8002960 <HAL_ADC_ConfigChannel+0x6a4>)
 800284c:	e000      	b.n	8002850 <HAL_ADC_ConfigChannel+0x594>
 800284e:	4a3f      	ldr	r2, [pc, #252]	@ (800294c <HAL_ADC_ConfigChannel+0x690>)
 8002850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002852:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7ff f82e 	bl	80018ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800285e:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_ADC_ConfigChannel+0x6a8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	4a40      	ldr	r2, [pc, #256]	@ (8002968 <HAL_ADC_ConfigChannel+0x6ac>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	3301      	adds	r3, #1
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002872:	e002      	b.n	800287a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	3b01      	subs	r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002880:	e05a      	b.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a39      	ldr	r2, [pc, #228]	@ (800296c <HAL_ADC_ConfigChannel+0x6b0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d11e      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x60e>
 800288c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800288e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2f      	ldr	r2, [pc, #188]	@ (8002958 <HAL_ADC_ConfigChannel+0x69c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d14b      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002950 <HAL_ADC_ConfigChannel+0x694>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x5f8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a29      	ldr	r2, [pc, #164]	@ (8002954 <HAL_ADC_ConfigChannel+0x698>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x5fc>
 80028b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <HAL_ADC_ConfigChannel+0x6a4>)
 80028b6:	e000      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5fe>
 80028b8:	4a24      	ldr	r2, [pc, #144]	@ (800294c <HAL_ADC_ConfigChannel+0x690>)
 80028ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f7fe fff9 	bl	80018ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c8:	e036      	b.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <HAL_ADC_ConfigChannel+0x6b4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d131      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
 80028d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d12c      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002958 <HAL_ADC_ConfigChannel+0x69c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d127      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_ADC_ConfigChannel+0x694>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d004      	beq.n	80028fc <HAL_ADC_ConfigChannel+0x640>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_ADC_ConfigChannel+0x698>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x644>
 80028fc:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <HAL_ADC_ConfigChannel+0x6a4>)
 80028fe:	e000      	b.n	8002902 <HAL_ADC_ConfigChannel+0x646>
 8002900:	4a12      	ldr	r2, [pc, #72]	@ (800294c <HAL_ADC_ConfigChannel+0x690>)
 8002902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002904:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f7fe ffd5 	bl	80018ba <LL_ADC_SetCommonPathInternalCh>
 8002910:	e012      	b.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	f043 0220 	orr.w	r2, r3, #32
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002924:	e008      	b.n	8002938 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002940:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002944:	4618      	mov	r0, r3
 8002946:	3784      	adds	r7, #132	@ 0x84
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	58026300 	.word	0x58026300
 8002950:	40022000 	.word	0x40022000
 8002954:	40022100 	.word	0x40022100
 8002958:	58026000 	.word	0x58026000
 800295c:	cb840000 	.word	0xcb840000
 8002960:	40022300 	.word	0x40022300
 8002964:	24000004 	.word	0x24000004
 8002968:	053e2d63 	.word	0x053e2d63
 800296c:	c7520000 	.word	0xc7520000
 8002970:	cfb80000 	.word	0xcfb80000

08002974 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f97e 	bl	8001c8c <LL_ADC_REG_IsConversionOngoing>
 8002990:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f9a0 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 800299c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8098 	beq.w	8002adc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d02a      	beq.n	8002a10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7d5b      	ldrb	r3, [r3, #21]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d126      	bne.n	8002a10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7d1b      	ldrb	r3, [r3, #20]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d122      	bne.n	8002a10 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029ce:	e014      	b.n	80029fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4a45      	ldr	r2, [pc, #276]	@ (8002ae8 <ADC_ConversionStop+0x174>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d90d      	bls.n	80029f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	f043 0210 	orr.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e074      	b.n	8002ade <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a04:	2b40      	cmp	r3, #64	@ 0x40
 8002a06:	d1e3      	bne.n	80029d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2240      	movs	r2, #64	@ 0x40
 8002a0e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d014      	beq.n	8002a40 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f936 	bl	8001c8c <LL_ADC_REG_IsConversionOngoing>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f8f3 	bl	8001c16 <LL_ADC_IsDisableOngoing>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d104      	bne.n	8002a40 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff f912 	bl	8001c64 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d014      	beq.n	8002a70 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f946 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f8db 	bl	8001c16 <LL_ADC_IsDisableOngoing>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f922 	bl	8001cb4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d005      	beq.n	8002a82 <ADC_ConversionStop+0x10e>
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d105      	bne.n	8002a88 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	617b      	str	r3, [r7, #20]
        break;
 8002a80:	e005      	b.n	8002a8e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a82:	2308      	movs	r3, #8
 8002a84:	617b      	str	r3, [r7, #20]
        break;
 8002a86:	e002      	b.n	8002a8e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a88:	2304      	movs	r3, #4
 8002a8a:	617b      	str	r3, [r7, #20]
        break;
 8002a8c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a8e:	f7fe fec5 	bl	800181c <HAL_GetTick>
 8002a92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a94:	e01b      	b.n	8002ace <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a96:	f7fe fec1 	bl	800181c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d914      	bls.n	8002ace <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	f043 0210 	orr.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e007      	b.n	8002ade <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1dc      	bne.n	8002a96 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	000cdbff 	.word	0x000cdbff

08002aec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f879 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d16e      	bne.n	8002be2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	4b38      	ldr	r3, [pc, #224]	@ (8002bec <ADC_Enable+0x100>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e05a      	b.n	8002be4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f834 	bl	8001ba0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fe70 	bl	800181c <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf0 <ADC_Enable+0x104>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <ADC_Enable+0x66>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a29      	ldr	r2, [pc, #164]	@ (8002bf4 <ADC_Enable+0x108>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <ADC_Enable+0x6a>
 8002b52:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <ADC_Enable+0x10c>)
 8002b54:	e000      	b.n	8002b58 <ADC_Enable+0x6c>
 8002b56:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <ADC_Enable+0x110>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe ffc5 	bl	8001ae8 <LL_ADC_GetMultimode>
 8002b5e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a23      	ldr	r2, [pc, #140]	@ (8002bf4 <ADC_Enable+0x108>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d002      	beq.n	8002b70 <ADC_Enable+0x84>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	e000      	b.n	8002b72 <ADC_Enable+0x86>
 8002b70:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf0 <ADC_Enable+0x104>)
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d02c      	beq.n	8002bd4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d130      	bne.n	8002be2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b80:	e028      	b.n	8002bd4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f832 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d104      	bne.n	8002b9c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f802 	bl	8001ba0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b9c:	f7fe fe3e 	bl	800181c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d914      	bls.n	8002bd4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d00d      	beq.n	8002bd4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	f043 0210 	orr.w	r2, r3, #16
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e007      	b.n	8002be4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d1cf      	bne.n	8002b82 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	8000003f 	.word	0x8000003f
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40022100 	.word	0x40022100
 8002bf8:	40022300 	.word	0x40022300
 8002bfc:	58026300 	.word	0x58026300

08002c00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff f802 	bl	8001c16 <LL_ADC_IsDisableOngoing>
 8002c12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ffe9 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d047      	beq.n	8002cb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d144      	bne.n	8002cb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030d 	and.w	r3, r3, #13
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10c      	bne.n	8002c52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe ffc3 	bl	8001bc8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2203      	movs	r2, #3
 8002c48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fde7 	bl	800181c <HAL_GetTick>
 8002c4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c50:	e029      	b.n	8002ca6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e023      	b.n	8002cb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c6e:	f7fe fdd5 	bl	800181c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d914      	bls.n	8002ca6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	f043 0210 	orr.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e007      	b.n	8002cb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1dc      	bne.n	8002c6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d14b      	bne.n	8002d70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d021      	beq.n	8002d36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fe54 	bl	80019a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d032      	beq.n	8002d68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d12b      	bne.n	8002d68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11f      	bne.n	8002d68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d34:	e018      	b.n	8002d68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7fd ffb1 	bl	8000cd0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d6e:	e00e      	b.n	8002d8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fa93 	bl	80022a8 <HAL_ADC_ErrorCallback>
}
 8002d82:	e004      	b.n	8002d8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fa75 	bl	8002294 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fa65 	bl	80022a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe0 <ADC_ConfigureBoostMode+0x1f8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <ADC_ConfigureBoostMode+0x1c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a79      	ldr	r2, [pc, #484]	@ (8002fe4 <ADC_ConfigureBoostMode+0x1fc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d109      	bne.n	8002e18 <ADC_ConfigureBoostMode+0x30>
 8002e04:	4b78      	ldr	r3, [pc, #480]	@ (8002fe8 <ADC_ConfigureBoostMode+0x200>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <ADC_ConfigureBoostMode+0x42>
 8002e18:	4b74      	ldr	r3, [pc, #464]	@ (8002fec <ADC_ConfigureBoostMode+0x204>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01c      	beq.n	8002e68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e2e:	f004 fddf 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8002e32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e3c:	d010      	beq.n	8002e60 <ADC_ConfigureBoostMode+0x78>
 8002e3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e42:	d873      	bhi.n	8002f2c <ADC_ConfigureBoostMode+0x144>
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e48:	d002      	beq.n	8002e50 <ADC_ConfigureBoostMode+0x68>
 8002e4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e4e:	d16d      	bne.n	8002f2c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	60fb      	str	r3, [r7, #12]
        break;
 8002e5e:	e068      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	60fb      	str	r3, [r7, #12]
        break;
 8002e66:	e064      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e68:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	f006 f866 	bl	8008f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e7e:	d051      	beq.n	8002f24 <ADC_ConfigureBoostMode+0x13c>
 8002e80:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e84:	d854      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002e86:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e8a:	d047      	beq.n	8002f1c <ADC_ConfigureBoostMode+0x134>
 8002e8c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e90:	d84e      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002e92:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e96:	d03d      	beq.n	8002f14 <ADC_ConfigureBoostMode+0x12c>
 8002e98:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e9c:	d848      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002e9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ea2:	d033      	beq.n	8002f0c <ADC_ConfigureBoostMode+0x124>
 8002ea4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ea8:	d842      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002eaa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002eae:	d029      	beq.n	8002f04 <ADC_ConfigureBoostMode+0x11c>
 8002eb0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002eb4:	d83c      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002eb6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002eba:	d01a      	beq.n	8002ef2 <ADC_ConfigureBoostMode+0x10a>
 8002ebc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ec0:	d836      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002ec2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002ec6:	d014      	beq.n	8002ef2 <ADC_ConfigureBoostMode+0x10a>
 8002ec8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002ecc:	d830      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed2:	d00e      	beq.n	8002ef2 <ADC_ConfigureBoostMode+0x10a>
 8002ed4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed8:	d82a      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002eda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ede:	d008      	beq.n	8002ef2 <ADC_ConfigureBoostMode+0x10a>
 8002ee0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ee4:	d824      	bhi.n	8002f30 <ADC_ConfigureBoostMode+0x148>
 8002ee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002eea:	d002      	beq.n	8002ef2 <ADC_ConfigureBoostMode+0x10a>
 8002eec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ef0:	d11e      	bne.n	8002f30 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	0c9b      	lsrs	r3, r3, #18
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	60fb      	str	r3, [r7, #12]
        break;
 8002f02:	e016      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
        break;
 8002f0a:	e012      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	60fb      	str	r3, [r7, #12]
        break;
 8002f12:	e00e      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	60fb      	str	r3, [r7, #12]
        break;
 8002f1a:	e00a      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	09db      	lsrs	r3, r3, #7
 8002f20:	60fb      	str	r3, [r7, #12]
        break;
 8002f22:	e006      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	60fb      	str	r3, [r7, #12]
        break;
 8002f2a:	e002      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f30:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f32:	f7fe fca3 	bl	800187c <HAL_GetREVID>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d815      	bhi.n	8002f6c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff0 <ADC_ConfigureBoostMode+0x208>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d908      	bls.n	8002f5a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f58:	e03e      	b.n	8002fd8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f68:	609a      	str	r2, [r3, #8]
}
 8002f6a:	e035      	b.n	8002fd8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff4 <ADC_ConfigureBoostMode+0x20c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d808      	bhi.n	8002f8c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f88:	609a      	str	r2, [r3, #8]
}
 8002f8a:	e025      	b.n	8002fd8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <ADC_ConfigureBoostMode+0x210>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d80a      	bhi.n	8002faa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	e016      	b.n	8002fd8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a13      	ldr	r2, [pc, #76]	@ (8002ffc <ADC_ConfigureBoostMode+0x214>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d80a      	bhi.n	8002fc8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	e007      	b.n	8002fd8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40022100 	.word	0x40022100
 8002fe8:	40022300 	.word	0x40022300
 8002fec:	58026300 	.word	0x58026300
 8002ff0:	01312d00 	.word	0x01312d00
 8002ff4:	005f5e10 	.word	0x005f5e10
 8002ff8:	00bebc20 	.word	0x00bebc20
 8002ffc:	017d7840 	.word	0x017d7840

08003000 <LL_ADC_IsEnabled>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <LL_ADC_IsEnabled+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_IsEnabled+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_REG_IsConversionOngoing>:
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d101      	bne.n	800303e <LL_ADC_REG_IsConversionOngoing+0x18>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b09f      	sub	sp, #124	@ 0x7c
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003066:	2302      	movs	r3, #2
 8003068:	e0be      	b.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003076:	2300      	movs	r3, #0
 8003078:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5c      	ldr	r2, [pc, #368]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d102      	bne.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003084:	4b5b      	ldr	r3, [pc, #364]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	e001      	b.n	800308e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e09d      	b.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ffb9 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 80030b4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ffb3 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d17f      	bne.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d17c      	bne.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a47      	ldr	r2, [pc, #284]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a46      	ldr	r2, [pc, #280]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80030e0:	4b45      	ldr	r3, [pc, #276]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030e2:	e000      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80030e4:	4b45      	ldr	r3, [pc, #276]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d039      	beq.n	8003164 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80030f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003100:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a3a      	ldr	r2, [pc, #232]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a38      	ldr	r2, [pc, #224]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10e      	bne.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003116:	4836      	ldr	r0, [pc, #216]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003118:	f7ff ff72 	bl	8003000 <LL_ADC_IsEnabled>
 800311c:	4604      	mov	r4, r0
 800311e:	4835      	ldr	r0, [pc, #212]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003120:	f7ff ff6e 	bl	8003000 <LL_ADC_IsEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	4323      	orrs	r3, r4
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e008      	b.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003134:	4832      	ldr	r0, [pc, #200]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003136:	f7ff ff63 	bl	8003000 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d047      	beq.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800314a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003150:	4013      	ands	r3, r2
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	6892      	ldr	r2, [r2, #8]
 800315a:	430a      	orrs	r2, r1
 800315c:	431a      	orrs	r2, r3
 800315e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003160:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003162:	e03a      	b.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800316c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800316e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1e      	ldr	r2, [pc, #120]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10e      	bne.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003184:	481a      	ldr	r0, [pc, #104]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003186:	f7ff ff3b 	bl	8003000 <LL_ADC_IsEnabled>
 800318a:	4604      	mov	r4, r0
 800318c:	4819      	ldr	r0, [pc, #100]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800318e:	f7ff ff37 	bl	8003000 <LL_ADC_IsEnabled>
 8003192:	4603      	mov	r3, r0
 8003194:	4323      	orrs	r3, r4
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e008      	b.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80031a2:	4817      	ldr	r0, [pc, #92]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031a4:	f7ff ff2c 	bl	8003000 <LL_ADC_IsEnabled>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031be:	4013      	ands	r3, r2
 80031c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031c4:	e009      	b.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80031d8:	e000      	b.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	377c      	adds	r7, #124	@ 0x7c
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40022100 	.word	0x40022100
 80031f8:	40022300 	.word	0x40022300
 80031fc:	58026300 	.word	0x58026300
 8003200:	58026000 	.word	0x58026000
 8003204:	fffff0e0 	.word	0xfffff0e0

08003208 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e10e      	b.n	8003442 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800322e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003232:	d102      	bne.n	800323a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e103      	b.n	8003442 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fd fb63 	bl	8000920 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800326e:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8003274:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800327a:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8003280:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b6e      	ldr	r3, [pc, #440]	@ (800344c <HAL_COMP_Init+0x244>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	6979      	ldr	r1, [r7, #20]
 800329a:	430b      	orrs	r3, r1
 800329c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d108      	bne.n	80032b8 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0210 	orr.w	r2, r2, #16
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e007      	b.n	80032c8 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0210 	bic.w	r2, r2, #16
 80032c6:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_COMP_Init+0xfc>
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032dc:	4b5c      	ldr	r3, [pc, #368]	@ (8003450 <HAL_COMP_Init+0x248>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	099b      	lsrs	r3, r3, #6
 80032e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003454 <HAL_COMP_Init+0x24c>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80032f6:	e002      	b.n	80032fe <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f9      	bne.n	80032f8 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a53      	ldr	r2, [pc, #332]	@ (8003458 <HAL_COMP_Init+0x250>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d102      	bne.n	8003314 <HAL_COMP_Init+0x10c>
 800330e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003312:	e001      	b.n	8003318 <HAL_COMP_Init+0x110>
 8003314:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003318:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d06d      	beq.n	8003402 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
 8003342:	e008      	b.n	8003356 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003352:	4013      	ands	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	604b      	str	r3, [r1, #4]
 8003372:	e008      	b.n	8003386 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003382:	4013      	ands	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8003386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80033a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80033b0:	e00a      	b.n	80033c8 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c2:	4013      	ands	r3, r2
 80033c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80033dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80033e8:	e021      	b.n	800342e <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033fa:	4013      	ands	r3, r2
 80033fc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8003400:	e015      	b.n	800342e <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003406:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003412:	4013      	ands	r3, r2
 8003414:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003428:	4013      	ands	r3, r2
 800342a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8003442:	7ffb      	ldrb	r3, [r7, #31]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	f0e8cce1 	.word	0xf0e8cce1
 8003450:	24000004 	.word	0x24000004
 8003454:	053e2d63 	.word	0x053e2d63
 8003458:	5800380c 	.word	0x5800380c

0800345c <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
 8003476:	e038      	b.n	80034ea <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003482:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003486:	d102      	bne.n	800348e <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e02d      	b.n	80034ea <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d125      	bne.n	80034e6 <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034b8:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <HAL_COMP_Start_IT+0x9c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	4a0c      	ldr	r2, [pc, #48]	@ (80034fc <HAL_COMP_Start_IT+0xa0>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	3301      	adds	r3, #1
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 80034d6:	e002      	b.n	80034de <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3b01      	subs	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f9      	bne.n	80034d8 <HAL_COMP_Start_IT+0x7c>
 80034e4:	e001      	b.n	80034ea <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	24000004 	.word	0x24000004
 80034fc:	053e2d63 	.word	0x053e2d63

08003500 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a33      	ldr	r2, [pc, #204]	@ (80035dc <HAL_COMP_IRQHandler+0xdc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d102      	bne.n	8003518 <HAL_COMP_IRQHandler+0x18>
 8003512:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003516:	e001      	b.n	800351c <HAL_COMP_IRQHandler+0x1c>
 8003518:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800351c:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003522:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d014      	beq.n	8003558 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800352e:	4b2c      	ldr	r3, [pc, #176]	@ (80035e0 <HAL_COMP_IRQHandler+0xe0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8003542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003546:	e004      	b.n	8003552 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8003548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fbac 	bl	8000cb0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003562:	2b40      	cmp	r3, #64	@ 0x40
 8003564:	d136      	bne.n	80035d4 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8003566:	4b1f      	ldr	r3, [pc, #124]	@ (80035e4 <HAL_COMP_IRQHandler+0xe4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003572:	d101      	bne.n	8003578 <HAL_COMP_IRQHandler+0x78>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_COMP_IRQHandler+0x7a>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800357e:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_COMP_IRQHandler+0xe4>)
 8003580:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003584:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003594:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8003596:	4b13      	ldr	r3, [pc, #76]	@ (80035e4 <HAL_COMP_IRQHandler+0xe4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035a2:	d101      	bne.n	80035a8 <HAL_COMP_IRQHandler+0xa8>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_COMP_IRQHandler+0xaa>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 80035ae:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <HAL_COMP_IRQHandler+0xe4>)
 80035b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035b4:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035c4:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fb6e 	bl	8000cb0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	5800380c 	.word	0x5800380c
 80035e0:	58003810 	.word	0x58003810
 80035e4:	58003800 	.word	0x58003800

080035e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <__NVIC_SetPriorityGrouping+0x40>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003610:	4b06      	ldr	r3, [pc, #24]	@ (800362c <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	4313      	orrs	r3, r2
 8003614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003616:	4a04      	ldr	r2, [pc, #16]	@ (8003628 <__NVIC_SetPriorityGrouping+0x40>)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	60d3      	str	r3, [r2, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000ed00 	.word	0xe000ed00
 800362c:	05fa0000 	.word	0x05fa0000

08003630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003634:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <__NVIC_GetPriorityGrouping+0x18>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0307 	and.w	r3, r3, #7
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db0b      	blt.n	8003676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4907      	ldr	r1, [pc, #28]	@ (8003684 <__NVIC_EnableIRQ+0x38>)
 8003666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2001      	movs	r0, #1
 800366e:	fa00 f202 	lsl.w	r2, r0, r2
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000e100 	.word	0xe000e100

08003688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db0a      	blt.n	80036b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	490c      	ldr	r1, [pc, #48]	@ (80036d4 <__NVIC_SetPriority+0x4c>)
 80036a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	440b      	add	r3, r1
 80036ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b0:	e00a      	b.n	80036c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4908      	ldr	r1, [pc, #32]	@ (80036d8 <__NVIC_SetPriority+0x50>)
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3b04      	subs	r3, #4
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	440b      	add	r3, r1
 80036c6:	761a      	strb	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	@ 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f1c3 0307 	rsb	r3, r3, #7
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf28      	it	cs
 80036fa:	2304      	movcs	r3, #4
 80036fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3304      	adds	r3, #4
 8003702:	2b06      	cmp	r3, #6
 8003704:	d902      	bls.n	800370c <NVIC_EncodePriority+0x30>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3b03      	subs	r3, #3
 800370a:	e000      	b.n	800370e <NVIC_EncodePriority+0x32>
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	f04f 32ff 	mov.w	r2, #4294967295
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43d9      	mvns	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	4313      	orrs	r3, r2
         );
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	@ 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff4c 	bl	80035e8 <__NVIC_SetPriorityGrouping>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003766:	f7ff ff63 	bl	8003630 <__NVIC_GetPriorityGrouping>
 800376a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	6978      	ldr	r0, [r7, #20]
 8003772:	f7ff ffb3 	bl	80036dc <NVIC_EncodePriority>
 8003776:	4602      	mov	r2, r0
 8003778:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff82 	bl	8003688 <__NVIC_SetPriority>
}
 8003784:	bf00      	nop
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ff56 	bl	800364c <__NVIC_EnableIRQ>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7fe f834 	bl	800181c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e316      	b.n	8003dee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a66      	ldr	r2, [pc, #408]	@ (8003960 <HAL_DMA_Init+0x1b8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04a      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a65      	ldr	r2, [pc, #404]	@ (8003964 <HAL_DMA_Init+0x1bc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d045      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a63      	ldr	r2, [pc, #396]	@ (8003968 <HAL_DMA_Init+0x1c0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d040      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a62      	ldr	r2, [pc, #392]	@ (800396c <HAL_DMA_Init+0x1c4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d03b      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a60      	ldr	r2, [pc, #384]	@ (8003970 <HAL_DMA_Init+0x1c8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d036      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003974 <HAL_DMA_Init+0x1cc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d031      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5d      	ldr	r2, [pc, #372]	@ (8003978 <HAL_DMA_Init+0x1d0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02c      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5c      	ldr	r2, [pc, #368]	@ (800397c <HAL_DMA_Init+0x1d4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d027      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a5a      	ldr	r2, [pc, #360]	@ (8003980 <HAL_DMA_Init+0x1d8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d022      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a59      	ldr	r2, [pc, #356]	@ (8003984 <HAL_DMA_Init+0x1dc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d01d      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a57      	ldr	r2, [pc, #348]	@ (8003988 <HAL_DMA_Init+0x1e0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d018      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a56      	ldr	r2, [pc, #344]	@ (800398c <HAL_DMA_Init+0x1e4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a54      	ldr	r2, [pc, #336]	@ (8003990 <HAL_DMA_Init+0x1e8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a53      	ldr	r2, [pc, #332]	@ (8003994 <HAL_DMA_Init+0x1ec>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a51      	ldr	r2, [pc, #324]	@ (8003998 <HAL_DMA_Init+0x1f0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_DMA_Init+0xb8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a50      	ldr	r2, [pc, #320]	@ (800399c <HAL_DMA_Init+0x1f4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Init+0xbc>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_DMA_Init+0xbe>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 813b 	beq.w	8003ae2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a37      	ldr	r2, [pc, #220]	@ (8003960 <HAL_DMA_Init+0x1b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d04a      	beq.n	800391c <HAL_DMA_Init+0x174>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a36      	ldr	r2, [pc, #216]	@ (8003964 <HAL_DMA_Init+0x1bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d045      	beq.n	800391c <HAL_DMA_Init+0x174>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a34      	ldr	r2, [pc, #208]	@ (8003968 <HAL_DMA_Init+0x1c0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d040      	beq.n	800391c <HAL_DMA_Init+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a33      	ldr	r2, [pc, #204]	@ (800396c <HAL_DMA_Init+0x1c4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d03b      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a31      	ldr	r2, [pc, #196]	@ (8003970 <HAL_DMA_Init+0x1c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d036      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a30      	ldr	r2, [pc, #192]	@ (8003974 <HAL_DMA_Init+0x1cc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d031      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003978 <HAL_DMA_Init+0x1d0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02c      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <HAL_DMA_Init+0x1d4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d027      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <HAL_DMA_Init+0x1d8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2a      	ldr	r2, [pc, #168]	@ (8003984 <HAL_DMA_Init+0x1dc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01d      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <HAL_DMA_Init+0x1e0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a27      	ldr	r2, [pc, #156]	@ (800398c <HAL_DMA_Init+0x1e4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_DMA_Init+0x1e8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_DMA_Init+0x174>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a24      	ldr	r2, [pc, #144]	@ (8003994 <HAL_DMA_Init+0x1ec>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_DMA_Init+0x174>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_Init+0x1f0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_DMA_Init+0x174>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a21      	ldr	r2, [pc, #132]	@ (800399c <HAL_DMA_Init+0x1f4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <HAL_DMA_Init+0x186>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e007      	b.n	800393e <HAL_DMA_Init+0x196>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800393e:	e02f      	b.n	80039a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003940:	f7fd ff6c 	bl	800181c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b05      	cmp	r3, #5
 800394c:	d928      	bls.n	80039a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2203      	movs	r2, #3
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e246      	b.n	8003dee <HAL_DMA_Init+0x646>
 8003960:	40020010 	.word	0x40020010
 8003964:	40020028 	.word	0x40020028
 8003968:	40020040 	.word	0x40020040
 800396c:	40020058 	.word	0x40020058
 8003970:	40020070 	.word	0x40020070
 8003974:	40020088 	.word	0x40020088
 8003978:	400200a0 	.word	0x400200a0
 800397c:	400200b8 	.word	0x400200b8
 8003980:	40020410 	.word	0x40020410
 8003984:	40020428 	.word	0x40020428
 8003988:	40020440 	.word	0x40020440
 800398c:	40020458 	.word	0x40020458
 8003990:	40020470 	.word	0x40020470
 8003994:	40020488 	.word	0x40020488
 8003998:	400204a0 	.word	0x400204a0
 800399c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1c8      	bne.n	8003940 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4b83      	ldr	r3, [pc, #524]	@ (8003bc8 <HAL_DMA_Init+0x420>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d107      	bne.n	8003a04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	4313      	orrs	r3, r2
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a04:	4b71      	ldr	r3, [pc, #452]	@ (8003bcc <HAL_DMA_Init+0x424>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b71      	ldr	r3, [pc, #452]	@ (8003bd0 <HAL_DMA_Init+0x428>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a10:	d328      	bcc.n	8003a64 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b28      	cmp	r3, #40	@ 0x28
 8003a18:	d903      	bls.n	8003a22 <HAL_DMA_Init+0x27a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a20:	d917      	bls.n	8003a52 <HAL_DMA_Init+0x2aa>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a28:	d903      	bls.n	8003a32 <HAL_DMA_Init+0x28a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b42      	cmp	r3, #66	@ 0x42
 8003a30:	d90f      	bls.n	8003a52 <HAL_DMA_Init+0x2aa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b46      	cmp	r3, #70	@ 0x46
 8003a38:	d903      	bls.n	8003a42 <HAL_DMA_Init+0x29a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b48      	cmp	r3, #72	@ 0x48
 8003a40:	d907      	bls.n	8003a52 <HAL_DMA_Init+0x2aa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a48:	d905      	bls.n	8003a56 <HAL_DMA_Init+0x2ae>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b52      	cmp	r3, #82	@ 0x52
 8003a50:	d801      	bhi.n	8003a56 <HAL_DMA_Init+0x2ae>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_DMA_Init+0x2b0>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a62:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 0307 	bic.w	r3, r3, #7
 8003a7a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d117      	bne.n	8003abe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f002 fb33 	bl	800610c <DMA_CheckFifoParam>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2240      	movs	r2, #64	@ 0x40
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e197      	b.n	8003dee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f002 fa6e 	bl	8005fa8 <DMA_CalcBaseAndBitshift>
 8003acc:	4603      	mov	r3, r0
 8003ace:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	223f      	movs	r2, #63	@ 0x3f
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	e0cd      	b.n	8003c7e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd4 <HAL_DMA_Init+0x42c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <HAL_DMA_Init+0x38a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a39      	ldr	r2, [pc, #228]	@ (8003bd8 <HAL_DMA_Init+0x430>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <HAL_DMA_Init+0x38a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a38      	ldr	r2, [pc, #224]	@ (8003bdc <HAL_DMA_Init+0x434>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <HAL_DMA_Init+0x38a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a36      	ldr	r2, [pc, #216]	@ (8003be0 <HAL_DMA_Init+0x438>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_DMA_Init+0x38a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a35      	ldr	r2, [pc, #212]	@ (8003be4 <HAL_DMA_Init+0x43c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_DMA_Init+0x38a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a33      	ldr	r2, [pc, #204]	@ (8003be8 <HAL_DMA_Init+0x440>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_DMA_Init+0x38a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a32      	ldr	r2, [pc, #200]	@ (8003bec <HAL_DMA_Init+0x444>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_DMA_Init+0x38a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a30      	ldr	r2, [pc, #192]	@ (8003bf0 <HAL_DMA_Init+0x448>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_DMA_Init+0x38e>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_DMA_Init+0x390>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8097 	beq.w	8003c6c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a24      	ldr	r2, [pc, #144]	@ (8003bd4 <HAL_DMA_Init+0x42c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d021      	beq.n	8003b8c <HAL_DMA_Init+0x3e4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <HAL_DMA_Init+0x430>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01c      	beq.n	8003b8c <HAL_DMA_Init+0x3e4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a21      	ldr	r2, [pc, #132]	@ (8003bdc <HAL_DMA_Init+0x434>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d017      	beq.n	8003b8c <HAL_DMA_Init+0x3e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	@ (8003be0 <HAL_DMA_Init+0x438>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d012      	beq.n	8003b8c <HAL_DMA_Init+0x3e4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003be4 <HAL_DMA_Init+0x43c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00d      	beq.n	8003b8c <HAL_DMA_Init+0x3e4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1c      	ldr	r2, [pc, #112]	@ (8003be8 <HAL_DMA_Init+0x440>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d008      	beq.n	8003b8c <HAL_DMA_Init+0x3e4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <HAL_DMA_Init+0x444>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <HAL_DMA_Init+0x3e4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a19      	ldr	r2, [pc, #100]	@ (8003bf0 <HAL_DMA_Init+0x448>)
 8003b8a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <HAL_DMA_Init+0x44c>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b40      	cmp	r3, #64	@ 0x40
 8003bb2:	d021      	beq.n	8003bf8 <HAL_DMA_Init+0x450>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b80      	cmp	r3, #128	@ 0x80
 8003bba:	d102      	bne.n	8003bc2 <HAL_DMA_Init+0x41a>
 8003bbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bc0:	e01b      	b.n	8003bfa <HAL_DMA_Init+0x452>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e019      	b.n	8003bfa <HAL_DMA_Init+0x452>
 8003bc6:	bf00      	nop
 8003bc8:	fe10803f 	.word	0xfe10803f
 8003bcc:	5c001000 	.word	0x5c001000
 8003bd0:	ffff0000 	.word	0xffff0000
 8003bd4:	58025408 	.word	0x58025408
 8003bd8:	5802541c 	.word	0x5802541c
 8003bdc:	58025430 	.word	0x58025430
 8003be0:	58025444 	.word	0x58025444
 8003be4:	58025458 	.word	0x58025458
 8003be8:	5802546c 	.word	0x5802546c
 8003bec:	58025480 	.word	0x58025480
 8003bf0:	58025494 	.word	0x58025494
 8003bf4:	fffe000f 	.word	0xfffe000f
 8003bf8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003df8 <HAL_DMA_Init+0x650>)
 8003c40:	4413      	add	r3, r2
 8003c42:	4a6e      	ldr	r2, [pc, #440]	@ (8003dfc <HAL_DMA_Init+0x654>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	009a      	lsls	r2, r3, #2
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f002 f9a9 	bl	8005fa8 <DMA_CalcBaseAndBitshift>
 8003c56:	4603      	mov	r3, r0
 8003c58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	2201      	movs	r2, #1
 8003c64:	409a      	lsls	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	e008      	b.n	8003c7e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2240      	movs	r2, #64	@ 0x40
 8003c70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0b7      	b.n	8003dee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5f      	ldr	r2, [pc, #380]	@ (8003e00 <HAL_DMA_Init+0x658>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d072      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003e04 <HAL_DMA_Init+0x65c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d06d      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5c      	ldr	r2, [pc, #368]	@ (8003e08 <HAL_DMA_Init+0x660>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d068      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e0c <HAL_DMA_Init+0x664>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d063      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a59      	ldr	r2, [pc, #356]	@ (8003e10 <HAL_DMA_Init+0x668>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d05e      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a57      	ldr	r2, [pc, #348]	@ (8003e14 <HAL_DMA_Init+0x66c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d059      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a56      	ldr	r2, [pc, #344]	@ (8003e18 <HAL_DMA_Init+0x670>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d054      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a54      	ldr	r2, [pc, #336]	@ (8003e1c <HAL_DMA_Init+0x674>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d04f      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a53      	ldr	r2, [pc, #332]	@ (8003e20 <HAL_DMA_Init+0x678>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d04a      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a51      	ldr	r2, [pc, #324]	@ (8003e24 <HAL_DMA_Init+0x67c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d045      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a50      	ldr	r2, [pc, #320]	@ (8003e28 <HAL_DMA_Init+0x680>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d040      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8003e2c <HAL_DMA_Init+0x684>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d03b      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8003e30 <HAL_DMA_Init+0x688>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d036      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4b      	ldr	r2, [pc, #300]	@ (8003e34 <HAL_DMA_Init+0x68c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d031      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e38 <HAL_DMA_Init+0x690>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d02c      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a48      	ldr	r2, [pc, #288]	@ (8003e3c <HAL_DMA_Init+0x694>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d027      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a47      	ldr	r2, [pc, #284]	@ (8003e40 <HAL_DMA_Init+0x698>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d022      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a45      	ldr	r2, [pc, #276]	@ (8003e44 <HAL_DMA_Init+0x69c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01d      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a44      	ldr	r2, [pc, #272]	@ (8003e48 <HAL_DMA_Init+0x6a0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d018      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a42      	ldr	r2, [pc, #264]	@ (8003e4c <HAL_DMA_Init+0x6a4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a41      	ldr	r2, [pc, #260]	@ (8003e50 <HAL_DMA_Init+0x6a8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3f      	ldr	r2, [pc, #252]	@ (8003e54 <HAL_DMA_Init+0x6ac>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e58 <HAL_DMA_Init+0x6b0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_DMA_Init+0x5c6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3c      	ldr	r2, [pc, #240]	@ (8003e5c <HAL_DMA_Init+0x6b4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_DMA_Init+0x5ca>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_DMA_Init+0x5cc>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d032      	beq.n	8003dde <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f002 fa43 	bl	8006204 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b80      	cmp	r3, #128	@ 0x80
 8003d84:	d102      	bne.n	8003d8c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003da0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <HAL_DMA_Init+0x624>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d80c      	bhi.n	8003dcc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f002 fac0 	bl	8006338 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	e008      	b.n	8003dde <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	a7fdabf8 	.word	0xa7fdabf8
 8003dfc:	cccccccd 	.word	0xcccccccd
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8
 8003e40:	58025408 	.word	0x58025408
 8003e44:	5802541c 	.word	0x5802541c
 8003e48:	58025430 	.word	0x58025430
 8003e4c:	58025444 	.word	0x58025444
 8003e50:	58025458 	.word	0x58025458
 8003e54:	5802546c 	.word	0x5802546c
 8003e58:	58025480 	.word	0x58025480
 8003e5c:	58025494 	.word	0x58025494

08003e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e226      	b.n	80042ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_DMA_Start_IT+0x2a>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e21f      	b.n	80042ca <HAL_DMA_Start_IT+0x46a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	f040 820a 	bne.w	80042b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a68      	ldr	r2, [pc, #416]	@ (8004054 <HAL_DMA_Start_IT+0x1f4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a66      	ldr	r2, [pc, #408]	@ (8004058 <HAL_DMA_Start_IT+0x1f8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a65      	ldr	r2, [pc, #404]	@ (800405c <HAL_DMA_Start_IT+0x1fc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a63      	ldr	r2, [pc, #396]	@ (8004060 <HAL_DMA_Start_IT+0x200>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a62      	ldr	r2, [pc, #392]	@ (8004064 <HAL_DMA_Start_IT+0x204>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a60      	ldr	r2, [pc, #384]	@ (8004068 <HAL_DMA_Start_IT+0x208>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5f      	ldr	r2, [pc, #380]	@ (800406c <HAL_DMA_Start_IT+0x20c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8004070 <HAL_DMA_Start_IT+0x210>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5c      	ldr	r2, [pc, #368]	@ (8004074 <HAL_DMA_Start_IT+0x214>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004078 <HAL_DMA_Start_IT+0x218>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a59      	ldr	r2, [pc, #356]	@ (800407c <HAL_DMA_Start_IT+0x21c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a57      	ldr	r2, [pc, #348]	@ (8004080 <HAL_DMA_Start_IT+0x220>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a56      	ldr	r2, [pc, #344]	@ (8004084 <HAL_DMA_Start_IT+0x224>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a54      	ldr	r2, [pc, #336]	@ (8004088 <HAL_DMA_Start_IT+0x228>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a53      	ldr	r2, [pc, #332]	@ (800408c <HAL_DMA_Start_IT+0x22c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_Start_IT+0xee>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a51      	ldr	r2, [pc, #324]	@ (8004090 <HAL_DMA_Start_IT+0x230>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <HAL_DMA_Start_IT+0x100>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e007      	b.n	8003f70 <HAL_DMA_Start_IT+0x110>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f001 fe6a 	bl	8005c50 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a34      	ldr	r2, [pc, #208]	@ (8004054 <HAL_DMA_Start_IT+0x1f4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04a      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	@ (8004058 <HAL_DMA_Start_IT+0x1f8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d045      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a31      	ldr	r2, [pc, #196]	@ (800405c <HAL_DMA_Start_IT+0x1fc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d040      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a30      	ldr	r2, [pc, #192]	@ (8004060 <HAL_DMA_Start_IT+0x200>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d03b      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8004064 <HAL_DMA_Start_IT+0x204>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d036      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004068 <HAL_DMA_Start_IT+0x208>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d031      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <HAL_DMA_Start_IT+0x20c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004070 <HAL_DMA_Start_IT+0x210>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d027      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	@ (8004074 <HAL_DMA_Start_IT+0x214>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d022      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a27      	ldr	r2, [pc, #156]	@ (8004078 <HAL_DMA_Start_IT+0x218>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d01d      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a25      	ldr	r2, [pc, #148]	@ (800407c <HAL_DMA_Start_IT+0x21c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a24      	ldr	r2, [pc, #144]	@ (8004080 <HAL_DMA_Start_IT+0x220>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a22      	ldr	r2, [pc, #136]	@ (8004084 <HAL_DMA_Start_IT+0x224>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a21      	ldr	r2, [pc, #132]	@ (8004088 <HAL_DMA_Start_IT+0x228>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1f      	ldr	r2, [pc, #124]	@ (800408c <HAL_DMA_Start_IT+0x22c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_DMA_Start_IT+0x1bc>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1e      	ldr	r2, [pc, #120]	@ (8004090 <HAL_DMA_Start_IT+0x230>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <HAL_DMA_Start_IT+0x1c0>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_DMA_Start_IT+0x1c2>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d036      	beq.n	8004094 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 021e 	bic.w	r2, r3, #30
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0216 	orr.w	r2, r2, #22
 8004038:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03e      	beq.n	80040c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0208 	orr.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e035      	b.n	80040c0 <HAL_DMA_Start_IT+0x260>
 8004054:	40020010 	.word	0x40020010
 8004058:	40020028 	.word	0x40020028
 800405c:	40020040 	.word	0x40020040
 8004060:	40020058 	.word	0x40020058
 8004064:	40020070 	.word	0x40020070
 8004068:	40020088 	.word	0x40020088
 800406c:	400200a0 	.word	0x400200a0
 8004070:	400200b8 	.word	0x400200b8
 8004074:	40020410 	.word	0x40020410
 8004078:	40020428 	.word	0x40020428
 800407c:	40020440 	.word	0x40020440
 8004080:	40020458 	.word	0x40020458
 8004084:	40020470 	.word	0x40020470
 8004088:	40020488 	.word	0x40020488
 800408c:	400204a0 	.word	0x400204a0
 8004090:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020e 	bic.w	r2, r3, #14
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 020a 	orr.w	r2, r2, #10
 80040a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0204 	orr.w	r2, r2, #4
 80040be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a83      	ldr	r2, [pc, #524]	@ (80042d4 <HAL_DMA_Start_IT+0x474>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d072      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a82      	ldr	r2, [pc, #520]	@ (80042d8 <HAL_DMA_Start_IT+0x478>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d06d      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a80      	ldr	r2, [pc, #512]	@ (80042dc <HAL_DMA_Start_IT+0x47c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d068      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7f      	ldr	r2, [pc, #508]	@ (80042e0 <HAL_DMA_Start_IT+0x480>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d063      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a7d      	ldr	r2, [pc, #500]	@ (80042e4 <HAL_DMA_Start_IT+0x484>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d05e      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a7c      	ldr	r2, [pc, #496]	@ (80042e8 <HAL_DMA_Start_IT+0x488>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d059      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a7a      	ldr	r2, [pc, #488]	@ (80042ec <HAL_DMA_Start_IT+0x48c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d054      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a79      	ldr	r2, [pc, #484]	@ (80042f0 <HAL_DMA_Start_IT+0x490>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d04f      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a77      	ldr	r2, [pc, #476]	@ (80042f4 <HAL_DMA_Start_IT+0x494>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d04a      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a76      	ldr	r2, [pc, #472]	@ (80042f8 <HAL_DMA_Start_IT+0x498>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d045      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a74      	ldr	r2, [pc, #464]	@ (80042fc <HAL_DMA_Start_IT+0x49c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d040      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a73      	ldr	r2, [pc, #460]	@ (8004300 <HAL_DMA_Start_IT+0x4a0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d03b      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a71      	ldr	r2, [pc, #452]	@ (8004304 <HAL_DMA_Start_IT+0x4a4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d036      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a70      	ldr	r2, [pc, #448]	@ (8004308 <HAL_DMA_Start_IT+0x4a8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d031      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6e      	ldr	r2, [pc, #440]	@ (800430c <HAL_DMA_Start_IT+0x4ac>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d02c      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6d      	ldr	r2, [pc, #436]	@ (8004310 <HAL_DMA_Start_IT+0x4b0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d027      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a6b      	ldr	r2, [pc, #428]	@ (8004314 <HAL_DMA_Start_IT+0x4b4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d022      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6a      	ldr	r2, [pc, #424]	@ (8004318 <HAL_DMA_Start_IT+0x4b8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d01d      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a68      	ldr	r2, [pc, #416]	@ (800431c <HAL_DMA_Start_IT+0x4bc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a67      	ldr	r2, [pc, #412]	@ (8004320 <HAL_DMA_Start_IT+0x4c0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a65      	ldr	r2, [pc, #404]	@ (8004324 <HAL_DMA_Start_IT+0x4c4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a64      	ldr	r2, [pc, #400]	@ (8004328 <HAL_DMA_Start_IT+0x4c8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a62      	ldr	r2, [pc, #392]	@ (800432c <HAL_DMA_Start_IT+0x4cc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_DMA_Start_IT+0x350>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a61      	ldr	r2, [pc, #388]	@ (8004330 <HAL_DMA_Start_IT+0x4d0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <HAL_DMA_Start_IT+0x354>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_DMA_Start_IT+0x356>
 80041b4:	2300      	movs	r3, #0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01a      	beq.n	80041f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a37      	ldr	r2, [pc, #220]	@ (80042d4 <HAL_DMA_Start_IT+0x474>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d04a      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a36      	ldr	r2, [pc, #216]	@ (80042d8 <HAL_DMA_Start_IT+0x478>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d045      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a34      	ldr	r2, [pc, #208]	@ (80042dc <HAL_DMA_Start_IT+0x47c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d040      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a33      	ldr	r2, [pc, #204]	@ (80042e0 <HAL_DMA_Start_IT+0x480>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d03b      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a31      	ldr	r2, [pc, #196]	@ (80042e4 <HAL_DMA_Start_IT+0x484>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d036      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a30      	ldr	r2, [pc, #192]	@ (80042e8 <HAL_DMA_Start_IT+0x488>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d031      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2e      	ldr	r2, [pc, #184]	@ (80042ec <HAL_DMA_Start_IT+0x48c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02c      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2d      	ldr	r2, [pc, #180]	@ (80042f0 <HAL_DMA_Start_IT+0x490>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d027      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_DMA_Start_IT+0x494>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <HAL_DMA_Start_IT+0x498>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01d      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a28      	ldr	r2, [pc, #160]	@ (80042fc <HAL_DMA_Start_IT+0x49c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <HAL_DMA_Start_IT+0x4a0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a25      	ldr	r2, [pc, #148]	@ (8004304 <HAL_DMA_Start_IT+0x4a4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a24      	ldr	r2, [pc, #144]	@ (8004308 <HAL_DMA_Start_IT+0x4a8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a22      	ldr	r2, [pc, #136]	@ (800430c <HAL_DMA_Start_IT+0x4ac>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_DMA_Start_IT+0x430>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a21      	ldr	r2, [pc, #132]	@ (8004310 <HAL_DMA_Start_IT+0x4b0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <HAL_DMA_Start_IT+0x442>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e012      	b.n	80042c8 <HAL_DMA_Start_IT+0x468>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e009      	b.n	80042c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40020010 	.word	0x40020010
 80042d8:	40020028 	.word	0x40020028
 80042dc:	40020040 	.word	0x40020040
 80042e0:	40020058 	.word	0x40020058
 80042e4:	40020070 	.word	0x40020070
 80042e8:	40020088 	.word	0x40020088
 80042ec:	400200a0 	.word	0x400200a0
 80042f0:	400200b8 	.word	0x400200b8
 80042f4:	40020410 	.word	0x40020410
 80042f8:	40020428 	.word	0x40020428
 80042fc:	40020440 	.word	0x40020440
 8004300:	40020458 	.word	0x40020458
 8004304:	40020470 	.word	0x40020470
 8004308:	40020488 	.word	0x40020488
 800430c:	400204a0 	.word	0x400204a0
 8004310:	400204b8 	.word	0x400204b8
 8004314:	58025408 	.word	0x58025408
 8004318:	5802541c 	.word	0x5802541c
 800431c:	58025430 	.word	0x58025430
 8004320:	58025444 	.word	0x58025444
 8004324:	58025458 	.word	0x58025458
 8004328:	5802546c 	.word	0x5802546c
 800432c:	58025480 	.word	0x58025480
 8004330:	58025494 	.word	0x58025494

08004334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800433c:	f7fd fa6e 	bl	800181c <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e2dc      	b.n	8004906 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d008      	beq.n	800436a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2280      	movs	r2, #128	@ 0x80
 800435c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e2cd      	b.n	8004906 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a76      	ldr	r2, [pc, #472]	@ (8004548 <HAL_DMA_Abort+0x214>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d04a      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a74      	ldr	r2, [pc, #464]	@ (800454c <HAL_DMA_Abort+0x218>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d045      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a73      	ldr	r2, [pc, #460]	@ (8004550 <HAL_DMA_Abort+0x21c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d040      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a71      	ldr	r2, [pc, #452]	@ (8004554 <HAL_DMA_Abort+0x220>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d03b      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a70      	ldr	r2, [pc, #448]	@ (8004558 <HAL_DMA_Abort+0x224>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d036      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a6e      	ldr	r2, [pc, #440]	@ (800455c <HAL_DMA_Abort+0x228>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d031      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004560 <HAL_DMA_Abort+0x22c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d02c      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004564 <HAL_DMA_Abort+0x230>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d027      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6a      	ldr	r2, [pc, #424]	@ (8004568 <HAL_DMA_Abort+0x234>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d022      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a68      	ldr	r2, [pc, #416]	@ (800456c <HAL_DMA_Abort+0x238>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01d      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a67      	ldr	r2, [pc, #412]	@ (8004570 <HAL_DMA_Abort+0x23c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d018      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a65      	ldr	r2, [pc, #404]	@ (8004574 <HAL_DMA_Abort+0x240>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a64      	ldr	r2, [pc, #400]	@ (8004578 <HAL_DMA_Abort+0x244>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a62      	ldr	r2, [pc, #392]	@ (800457c <HAL_DMA_Abort+0x248>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a61      	ldr	r2, [pc, #388]	@ (8004580 <HAL_DMA_Abort+0x24c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_DMA_Abort+0xd6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5f      	ldr	r2, [pc, #380]	@ (8004584 <HAL_DMA_Abort+0x250>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_DMA_Abort+0xda>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_DMA_Abort+0xdc>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 021e 	bic.w	r2, r2, #30
 8004422:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004432:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e00a      	b.n	8004452 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 020e 	bic.w	r2, r2, #14
 800444a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3c      	ldr	r2, [pc, #240]	@ (8004548 <HAL_DMA_Abort+0x214>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d072      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a3a      	ldr	r2, [pc, #232]	@ (800454c <HAL_DMA_Abort+0x218>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d06d      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a39      	ldr	r2, [pc, #228]	@ (8004550 <HAL_DMA_Abort+0x21c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d068      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a37      	ldr	r2, [pc, #220]	@ (8004554 <HAL_DMA_Abort+0x220>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d063      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a36      	ldr	r2, [pc, #216]	@ (8004558 <HAL_DMA_Abort+0x224>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d05e      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a34      	ldr	r2, [pc, #208]	@ (800455c <HAL_DMA_Abort+0x228>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d059      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a33      	ldr	r2, [pc, #204]	@ (8004560 <HAL_DMA_Abort+0x22c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d054      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a31      	ldr	r2, [pc, #196]	@ (8004564 <HAL_DMA_Abort+0x230>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04f      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a30      	ldr	r2, [pc, #192]	@ (8004568 <HAL_DMA_Abort+0x234>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04a      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2e      	ldr	r2, [pc, #184]	@ (800456c <HAL_DMA_Abort+0x238>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d045      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004570 <HAL_DMA_Abort+0x23c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d040      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <HAL_DMA_Abort+0x240>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d03b      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004578 <HAL_DMA_Abort+0x244>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d036      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a28      	ldr	r2, [pc, #160]	@ (800457c <HAL_DMA_Abort+0x248>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d031      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a27      	ldr	r2, [pc, #156]	@ (8004580 <HAL_DMA_Abort+0x24c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02c      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a25      	ldr	r2, [pc, #148]	@ (8004584 <HAL_DMA_Abort+0x250>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d027      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a24      	ldr	r2, [pc, #144]	@ (8004588 <HAL_DMA_Abort+0x254>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a22      	ldr	r2, [pc, #136]	@ (800458c <HAL_DMA_Abort+0x258>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a21      	ldr	r2, [pc, #132]	@ (8004590 <HAL_DMA_Abort+0x25c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1f      	ldr	r2, [pc, #124]	@ (8004594 <HAL_DMA_Abort+0x260>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <HAL_DMA_Abort+0x264>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1c      	ldr	r2, [pc, #112]	@ (800459c <HAL_DMA_Abort+0x268>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_DMA_Abort+0x26c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_DMA_Abort+0x20e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_DMA_Abort+0x270>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d132      	bne.n	80045a8 <HAL_DMA_Abort+0x274>
 8004542:	2301      	movs	r3, #1
 8004544:	e031      	b.n	80045aa <HAL_DMA_Abort+0x276>
 8004546:	bf00      	nop
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	58025408 	.word	0x58025408
 800458c:	5802541c 	.word	0x5802541c
 8004590:	58025430 	.word	0x58025430
 8004594:	58025444 	.word	0x58025444
 8004598:	58025458 	.word	0x58025458
 800459c:	5802546c 	.word	0x5802546c
 80045a0:	58025480 	.word	0x58025480
 80045a4:	58025494 	.word	0x58025494
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004778 <HAL_DMA_Abort+0x444>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d04a      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a6b      	ldr	r2, [pc, #428]	@ (800477c <HAL_DMA_Abort+0x448>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d045      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004780 <HAL_DMA_Abort+0x44c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d040      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	@ (8004784 <HAL_DMA_Abort+0x450>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a67      	ldr	r2, [pc, #412]	@ (8004788 <HAL_DMA_Abort+0x454>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d036      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a65      	ldr	r2, [pc, #404]	@ (800478c <HAL_DMA_Abort+0x458>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a64      	ldr	r2, [pc, #400]	@ (8004790 <HAL_DMA_Abort+0x45c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d02c      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a62      	ldr	r2, [pc, #392]	@ (8004794 <HAL_DMA_Abort+0x460>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d027      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a61      	ldr	r2, [pc, #388]	@ (8004798 <HAL_DMA_Abort+0x464>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5f      	ldr	r2, [pc, #380]	@ (800479c <HAL_DMA_Abort+0x468>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5e      	ldr	r2, [pc, #376]	@ (80047a0 <HAL_DMA_Abort+0x46c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a5c      	ldr	r2, [pc, #368]	@ (80047a4 <HAL_DMA_Abort+0x470>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a5b      	ldr	r2, [pc, #364]	@ (80047a8 <HAL_DMA_Abort+0x474>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a59      	ldr	r2, [pc, #356]	@ (80047ac <HAL_DMA_Abort+0x478>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a58      	ldr	r2, [pc, #352]	@ (80047b0 <HAL_DMA_Abort+0x47c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_DMA_Abort+0x32a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a56      	ldr	r2, [pc, #344]	@ (80047b4 <HAL_DMA_Abort+0x480>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <HAL_DMA_Abort+0x33c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e007      	b.n	8004680 <HAL_DMA_Abort+0x34c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004680:	e013      	b.n	80046aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004682:	f7fd f8cb 	bl	800181c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b05      	cmp	r3, #5
 800468e:	d90c      	bls.n	80046aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2203      	movs	r2, #3
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e12d      	b.n	8004906 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004778 <HAL_DMA_Abort+0x444>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d04a      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2d      	ldr	r2, [pc, #180]	@ (800477c <HAL_DMA_Abort+0x448>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d045      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004780 <HAL_DMA_Abort+0x44c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d040      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004784 <HAL_DMA_Abort+0x450>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d03b      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a29      	ldr	r2, [pc, #164]	@ (8004788 <HAL_DMA_Abort+0x454>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d036      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a27      	ldr	r2, [pc, #156]	@ (800478c <HAL_DMA_Abort+0x458>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d031      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a26      	ldr	r2, [pc, #152]	@ (8004790 <HAL_DMA_Abort+0x45c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d02c      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a24      	ldr	r2, [pc, #144]	@ (8004794 <HAL_DMA_Abort+0x460>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d027      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a23      	ldr	r2, [pc, #140]	@ (8004798 <HAL_DMA_Abort+0x464>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a21      	ldr	r2, [pc, #132]	@ (800479c <HAL_DMA_Abort+0x468>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01d      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a20      	ldr	r2, [pc, #128]	@ (80047a0 <HAL_DMA_Abort+0x46c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1e      	ldr	r2, [pc, #120]	@ (80047a4 <HAL_DMA_Abort+0x470>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1d      	ldr	r2, [pc, #116]	@ (80047a8 <HAL_DMA_Abort+0x474>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <HAL_DMA_Abort+0x478>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1a      	ldr	r2, [pc, #104]	@ (80047b0 <HAL_DMA_Abort+0x47c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_DMA_Abort+0x422>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_DMA_Abort+0x480>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <HAL_DMA_Abort+0x426>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_DMA_Abort+0x428>
 800475a:	2300      	movs	r3, #0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02b      	beq.n	80047b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	223f      	movs	r2, #63	@ 0x3f
 8004770:	409a      	lsls	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	e02a      	b.n	80047ce <HAL_DMA_Abort+0x49a>
 8004778:	40020010 	.word	0x40020010
 800477c:	40020028 	.word	0x40020028
 8004780:	40020040 	.word	0x40020040
 8004784:	40020058 	.word	0x40020058
 8004788:	40020070 	.word	0x40020070
 800478c:	40020088 	.word	0x40020088
 8004790:	400200a0 	.word	0x400200a0
 8004794:	400200b8 	.word	0x400200b8
 8004798:	40020410 	.word	0x40020410
 800479c:	40020428 	.word	0x40020428
 80047a0:	40020440 	.word	0x40020440
 80047a4:	40020458 	.word	0x40020458
 80047a8:	40020470 	.word	0x40020470
 80047ac:	40020488 	.word	0x40020488
 80047b0:	400204a0 	.word	0x400204a0
 80047b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2201      	movs	r2, #1
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a4f      	ldr	r2, [pc, #316]	@ (8004910 <HAL_DMA_Abort+0x5dc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d072      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004914 <HAL_DMA_Abort+0x5e0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d06d      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004918 <HAL_DMA_Abort+0x5e4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d068      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a4a      	ldr	r2, [pc, #296]	@ (800491c <HAL_DMA_Abort+0x5e8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d063      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a49      	ldr	r2, [pc, #292]	@ (8004920 <HAL_DMA_Abort+0x5ec>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d05e      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a47      	ldr	r2, [pc, #284]	@ (8004924 <HAL_DMA_Abort+0x5f0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d059      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a46      	ldr	r2, [pc, #280]	@ (8004928 <HAL_DMA_Abort+0x5f4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d054      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a44      	ldr	r2, [pc, #272]	@ (800492c <HAL_DMA_Abort+0x5f8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d04f      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a43      	ldr	r2, [pc, #268]	@ (8004930 <HAL_DMA_Abort+0x5fc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d04a      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a41      	ldr	r2, [pc, #260]	@ (8004934 <HAL_DMA_Abort+0x600>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d045      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a40      	ldr	r2, [pc, #256]	@ (8004938 <HAL_DMA_Abort+0x604>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d040      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3e      	ldr	r2, [pc, #248]	@ (800493c <HAL_DMA_Abort+0x608>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d03b      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3d      	ldr	r2, [pc, #244]	@ (8004940 <HAL_DMA_Abort+0x60c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d036      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3b      	ldr	r2, [pc, #236]	@ (8004944 <HAL_DMA_Abort+0x610>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d031      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3a      	ldr	r2, [pc, #232]	@ (8004948 <HAL_DMA_Abort+0x614>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d02c      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a38      	ldr	r2, [pc, #224]	@ (800494c <HAL_DMA_Abort+0x618>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d027      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a37      	ldr	r2, [pc, #220]	@ (8004950 <HAL_DMA_Abort+0x61c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a35      	ldr	r2, [pc, #212]	@ (8004954 <HAL_DMA_Abort+0x620>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01d      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a34      	ldr	r2, [pc, #208]	@ (8004958 <HAL_DMA_Abort+0x624>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a32      	ldr	r2, [pc, #200]	@ (800495c <HAL_DMA_Abort+0x628>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a31      	ldr	r2, [pc, #196]	@ (8004960 <HAL_DMA_Abort+0x62c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004964 <HAL_DMA_Abort+0x630>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004968 <HAL_DMA_Abort+0x634>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_DMA_Abort+0x58a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2c      	ldr	r2, [pc, #176]	@ (800496c <HAL_DMA_Abort+0x638>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_DMA_Abort+0x58e>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_DMA_Abort+0x590>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d015      	beq.n	80048f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00c      	beq.n	80048f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
 8004950:	58025408 	.word	0x58025408
 8004954:	5802541c 	.word	0x5802541c
 8004958:	58025430 	.word	0x58025430
 800495c:	58025444 	.word	0x58025444
 8004960:	58025458 	.word	0x58025458
 8004964:	5802546c 	.word	0x5802546c
 8004968:	58025480 	.word	0x58025480
 800496c:	58025494 	.word	0x58025494

08004970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e237      	b.n	8004df2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d004      	beq.n	8004998 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2280      	movs	r2, #128	@ 0x80
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e22c      	b.n	8004df2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a5c      	ldr	r2, [pc, #368]	@ (8004b10 <HAL_DMA_Abort_IT+0x1a0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d04a      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004b14 <HAL_DMA_Abort_IT+0x1a4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d045      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a59      	ldr	r2, [pc, #356]	@ (8004b18 <HAL_DMA_Abort_IT+0x1a8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d040      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a58      	ldr	r2, [pc, #352]	@ (8004b1c <HAL_DMA_Abort_IT+0x1ac>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d03b      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a56      	ldr	r2, [pc, #344]	@ (8004b20 <HAL_DMA_Abort_IT+0x1b0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d036      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a55      	ldr	r2, [pc, #340]	@ (8004b24 <HAL_DMA_Abort_IT+0x1b4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d031      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a53      	ldr	r2, [pc, #332]	@ (8004b28 <HAL_DMA_Abort_IT+0x1b8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d02c      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a52      	ldr	r2, [pc, #328]	@ (8004b2c <HAL_DMA_Abort_IT+0x1bc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d027      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a50      	ldr	r2, [pc, #320]	@ (8004b30 <HAL_DMA_Abort_IT+0x1c0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d022      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004b34 <HAL_DMA_Abort_IT+0x1c4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d01d      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a4d      	ldr	r2, [pc, #308]	@ (8004b38 <HAL_DMA_Abort_IT+0x1c8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8004b3c <HAL_DMA_Abort_IT+0x1cc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a4a      	ldr	r2, [pc, #296]	@ (8004b40 <HAL_DMA_Abort_IT+0x1d0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a49      	ldr	r2, [pc, #292]	@ (8004b44 <HAL_DMA_Abort_IT+0x1d4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a47      	ldr	r2, [pc, #284]	@ (8004b48 <HAL_DMA_Abort_IT+0x1d8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_DMA_Abort_IT+0xc8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a46      	ldr	r2, [pc, #280]	@ (8004b4c <HAL_DMA_Abort_IT+0x1dc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_DMA_Abort_IT+0xcc>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_DMA_Abort_IT+0xce>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8086 	beq.w	8004b50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2204      	movs	r2, #4
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2f      	ldr	r2, [pc, #188]	@ (8004b10 <HAL_DMA_Abort_IT+0x1a0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d04a      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b14 <HAL_DMA_Abort_IT+0x1a4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d045      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2c      	ldr	r2, [pc, #176]	@ (8004b18 <HAL_DMA_Abort_IT+0x1a8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d040      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b1c <HAL_DMA_Abort_IT+0x1ac>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d03b      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <HAL_DMA_Abort_IT+0x1b0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d036      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <HAL_DMA_Abort_IT+0x1b4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d031      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <HAL_DMA_Abort_IT+0x1b8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02c      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <HAL_DMA_Abort_IT+0x1bc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d027      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a23      	ldr	r2, [pc, #140]	@ (8004b30 <HAL_DMA_Abort_IT+0x1c0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a22      	ldr	r2, [pc, #136]	@ (8004b34 <HAL_DMA_Abort_IT+0x1c4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d01d      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	@ (8004b38 <HAL_DMA_Abort_IT+0x1c8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1f      	ldr	r2, [pc, #124]	@ (8004b3c <HAL_DMA_Abort_IT+0x1cc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b40 <HAL_DMA_Abort_IT+0x1d0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b44 <HAL_DMA_Abort_IT+0x1d4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b48 <HAL_DMA_Abort_IT+0x1d8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_DMA_Abort_IT+0x17c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <HAL_DMA_Abort_IT+0x1dc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d108      	bne.n	8004afe <HAL_DMA_Abort_IT+0x18e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e178      	b.n	8004df0 <HAL_DMA_Abort_IT+0x480>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e16f      	b.n	8004df0 <HAL_DMA_Abort_IT+0x480>
 8004b10:	40020010 	.word	0x40020010
 8004b14:	40020028 	.word	0x40020028
 8004b18:	40020040 	.word	0x40020040
 8004b1c:	40020058 	.word	0x40020058
 8004b20:	40020070 	.word	0x40020070
 8004b24:	40020088 	.word	0x40020088
 8004b28:	400200a0 	.word	0x400200a0
 8004b2c:	400200b8 	.word	0x400200b8
 8004b30:	40020410 	.word	0x40020410
 8004b34:	40020428 	.word	0x40020428
 8004b38:	40020440 	.word	0x40020440
 8004b3c:	40020458 	.word	0x40020458
 8004b40:	40020470 	.word	0x40020470
 8004b44:	40020488 	.word	0x40020488
 8004b48:	400204a0 	.word	0x400204a0
 8004b4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 020e 	bic.w	r2, r2, #14
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a6c      	ldr	r2, [pc, #432]	@ (8004d18 <HAL_DMA_Abort_IT+0x3a8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d04a      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8004d1c <HAL_DMA_Abort_IT+0x3ac>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d045      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a69      	ldr	r2, [pc, #420]	@ (8004d20 <HAL_DMA_Abort_IT+0x3b0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d040      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a68      	ldr	r2, [pc, #416]	@ (8004d24 <HAL_DMA_Abort_IT+0x3b4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d03b      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a66      	ldr	r2, [pc, #408]	@ (8004d28 <HAL_DMA_Abort_IT+0x3b8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d036      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a65      	ldr	r2, [pc, #404]	@ (8004d2c <HAL_DMA_Abort_IT+0x3bc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d031      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a63      	ldr	r2, [pc, #396]	@ (8004d30 <HAL_DMA_Abort_IT+0x3c0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02c      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a62      	ldr	r2, [pc, #392]	@ (8004d34 <HAL_DMA_Abort_IT+0x3c4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d027      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a60      	ldr	r2, [pc, #384]	@ (8004d38 <HAL_DMA_Abort_IT+0x3c8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d022      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8004d3c <HAL_DMA_Abort_IT+0x3cc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d01d      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d40 <HAL_DMA_Abort_IT+0x3d0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8004d44 <HAL_DMA_Abort_IT+0x3d4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d48 <HAL_DMA_Abort_IT+0x3d8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00e      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a59      	ldr	r2, [pc, #356]	@ (8004d4c <HAL_DMA_Abort_IT+0x3dc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a57      	ldr	r2, [pc, #348]	@ (8004d50 <HAL_DMA_Abort_IT+0x3e0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x290>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a56      	ldr	r2, [pc, #344]	@ (8004d54 <HAL_DMA_Abort_IT+0x3e4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d108      	bne.n	8004c12 <HAL_DMA_Abort_IT+0x2a2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e007      	b.n	8004c22 <HAL_DMA_Abort_IT+0x2b2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3c      	ldr	r2, [pc, #240]	@ (8004d18 <HAL_DMA_Abort_IT+0x3a8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d072      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3a      	ldr	r2, [pc, #232]	@ (8004d1c <HAL_DMA_Abort_IT+0x3ac>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d06d      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a39      	ldr	r2, [pc, #228]	@ (8004d20 <HAL_DMA_Abort_IT+0x3b0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d068      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a37      	ldr	r2, [pc, #220]	@ (8004d24 <HAL_DMA_Abort_IT+0x3b4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d063      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a36      	ldr	r2, [pc, #216]	@ (8004d28 <HAL_DMA_Abort_IT+0x3b8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d05e      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a34      	ldr	r2, [pc, #208]	@ (8004d2c <HAL_DMA_Abort_IT+0x3bc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d059      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a33      	ldr	r2, [pc, #204]	@ (8004d30 <HAL_DMA_Abort_IT+0x3c0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d054      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a31      	ldr	r2, [pc, #196]	@ (8004d34 <HAL_DMA_Abort_IT+0x3c4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d04f      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a30      	ldr	r2, [pc, #192]	@ (8004d38 <HAL_DMA_Abort_IT+0x3c8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d04a      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2e      	ldr	r2, [pc, #184]	@ (8004d3c <HAL_DMA_Abort_IT+0x3cc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d045      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d40 <HAL_DMA_Abort_IT+0x3d0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d040      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2b      	ldr	r2, [pc, #172]	@ (8004d44 <HAL_DMA_Abort_IT+0x3d4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d03b      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d48 <HAL_DMA_Abort_IT+0x3d8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d036      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a28      	ldr	r2, [pc, #160]	@ (8004d4c <HAL_DMA_Abort_IT+0x3dc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d031      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a27      	ldr	r2, [pc, #156]	@ (8004d50 <HAL_DMA_Abort_IT+0x3e0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d02c      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a25      	ldr	r2, [pc, #148]	@ (8004d54 <HAL_DMA_Abort_IT+0x3e4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d027      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a24      	ldr	r2, [pc, #144]	@ (8004d58 <HAL_DMA_Abort_IT+0x3e8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d022      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a22      	ldr	r2, [pc, #136]	@ (8004d5c <HAL_DMA_Abort_IT+0x3ec>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01d      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a21      	ldr	r2, [pc, #132]	@ (8004d60 <HAL_DMA_Abort_IT+0x3f0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <HAL_DMA_Abort_IT+0x3f4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1e      	ldr	r2, [pc, #120]	@ (8004d68 <HAL_DMA_Abort_IT+0x3f8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <HAL_DMA_Abort_IT+0x3fc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1b      	ldr	r2, [pc, #108]	@ (8004d70 <HAL_DMA_Abort_IT+0x400>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_DMA_Abort_IT+0x3a2>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <HAL_DMA_Abort_IT+0x404>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d132      	bne.n	8004d78 <HAL_DMA_Abort_IT+0x408>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e031      	b.n	8004d7a <HAL_DMA_Abort_IT+0x40a>
 8004d16:	bf00      	nop
 8004d18:	40020010 	.word	0x40020010
 8004d1c:	40020028 	.word	0x40020028
 8004d20:	40020040 	.word	0x40020040
 8004d24:	40020058 	.word	0x40020058
 8004d28:	40020070 	.word	0x40020070
 8004d2c:	40020088 	.word	0x40020088
 8004d30:	400200a0 	.word	0x400200a0
 8004d34:	400200b8 	.word	0x400200b8
 8004d38:	40020410 	.word	0x40020410
 8004d3c:	40020428 	.word	0x40020428
 8004d40:	40020440 	.word	0x40020440
 8004d44:	40020458 	.word	0x40020458
 8004d48:	40020470 	.word	0x40020470
 8004d4c:	40020488 	.word	0x40020488
 8004d50:	400204a0 	.word	0x400204a0
 8004d54:	400204b8 	.word	0x400204b8
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d028      	beq.n	8004dd0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004dac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00c      	beq.n	8004dd0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004dce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop

08004dfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	@ 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e08:	4b67      	ldr	r3, [pc, #412]	@ (8004fa8 <HAL_DMA_IRQHandler+0x1ac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a67      	ldr	r2, [pc, #412]	@ (8004fac <HAL_DMA_IRQHandler+0x1b0>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	0a9b      	lsrs	r3, r3, #10
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb0 <HAL_DMA_IRQHandler+0x1b4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d04a      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8004fb4 <HAL_DMA_IRQHandler+0x1b8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d045      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5c      	ldr	r2, [pc, #368]	@ (8004fb8 <HAL_DMA_IRQHandler+0x1bc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d040      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a5a      	ldr	r2, [pc, #360]	@ (8004fbc <HAL_DMA_IRQHandler+0x1c0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d03b      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a59      	ldr	r2, [pc, #356]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1c4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d036      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a57      	ldr	r2, [pc, #348]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1c8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d031      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a56      	ldr	r2, [pc, #344]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1cc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d02c      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a54      	ldr	r2, [pc, #336]	@ (8004fcc <HAL_DMA_IRQHandler+0x1d0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d027      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a53      	ldr	r2, [pc, #332]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1d4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d022      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a51      	ldr	r2, [pc, #324]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1d8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01d      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a50      	ldr	r2, [pc, #320]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1dc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8004fdc <HAL_DMA_IRQHandler+0x1e0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1e4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1e8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1ec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_DMA_IRQHandler+0xd2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a48      	ldr	r2, [pc, #288]	@ (8004fec <HAL_DMA_IRQHandler+0x1f0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <HAL_DMA_IRQHandler+0xd6>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <HAL_DMA_IRQHandler+0xd8>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 842b 	beq.w	8005730 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80a2 	beq.w	8005034 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb0 <HAL_DMA_IRQHandler+0x1b4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d04a      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb4 <HAL_DMA_IRQHandler+0x1b8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d045      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb8 <HAL_DMA_IRQHandler+0x1bc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d040      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2a      	ldr	r2, [pc, #168]	@ (8004fbc <HAL_DMA_IRQHandler+0x1c0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d03b      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a28      	ldr	r2, [pc, #160]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1c4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d036      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a27      	ldr	r2, [pc, #156]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1c8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d031      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a25      	ldr	r2, [pc, #148]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1cc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02c      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a24      	ldr	r2, [pc, #144]	@ (8004fcc <HAL_DMA_IRQHandler+0x1d0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d027      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a22      	ldr	r2, [pc, #136]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1d4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d022      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a21      	ldr	r2, [pc, #132]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1d8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01d      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1dc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1e      	ldr	r2, [pc, #120]	@ (8004fdc <HAL_DMA_IRQHandler+0x1e0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1e4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1e8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1ec>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x194>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a18      	ldr	r2, [pc, #96]	@ (8004fec <HAL_DMA_IRQHandler+0x1f0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d12f      	bne.n	8004ff0 <HAL_DMA_IRQHandler+0x1f4>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e02e      	b.n	8005004 <HAL_DMA_IRQHandler+0x208>
 8004fa6:	bf00      	nop
 8004fa8:	24000004 	.word	0x24000004
 8004fac:	1b4e81b5 	.word	0x1b4e81b5
 8004fb0:	40020010 	.word	0x40020010
 8004fb4:	40020028 	.word	0x40020028
 8004fb8:	40020040 	.word	0x40020040
 8004fbc:	40020058 	.word	0x40020058
 8004fc0:	40020070 	.word	0x40020070
 8004fc4:	40020088 	.word	0x40020088
 8004fc8:	400200a0 	.word	0x400200a0
 8004fcc:	400200b8 	.word	0x400200b8
 8004fd0:	40020410 	.word	0x40020410
 8004fd4:	40020428 	.word	0x40020428
 8004fd8:	40020440 	.word	0x40020440
 8004fdc:	40020458 	.word	0x40020458
 8004fe0:	40020470 	.word	0x40020470
 8004fe4:	40020488 	.word	0x40020488
 8004fe8:	400204a0 	.word	0x400204a0
 8004fec:	400204b8 	.word	0x400204b8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0204 	bic.w	r2, r2, #4
 8005016:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2208      	movs	r2, #8
 8005022:	409a      	lsls	r2, r3
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	f043 0201 	orr.w	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d06e      	beq.n	8005128 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a69      	ldr	r2, [pc, #420]	@ (80051f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d04a      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a67      	ldr	r2, [pc, #412]	@ (80051f8 <HAL_DMA_IRQHandler+0x3fc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d045      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a66      	ldr	r2, [pc, #408]	@ (80051fc <HAL_DMA_IRQHandler+0x400>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d040      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a64      	ldr	r2, [pc, #400]	@ (8005200 <HAL_DMA_IRQHandler+0x404>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d03b      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a63      	ldr	r2, [pc, #396]	@ (8005204 <HAL_DMA_IRQHandler+0x408>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d036      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a61      	ldr	r2, [pc, #388]	@ (8005208 <HAL_DMA_IRQHandler+0x40c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d031      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a60      	ldr	r2, [pc, #384]	@ (800520c <HAL_DMA_IRQHandler+0x410>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d02c      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5e      	ldr	r2, [pc, #376]	@ (8005210 <HAL_DMA_IRQHandler+0x414>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d027      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5d      	ldr	r2, [pc, #372]	@ (8005214 <HAL_DMA_IRQHandler+0x418>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005218 <HAL_DMA_IRQHandler+0x41c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01d      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a5a      	ldr	r2, [pc, #360]	@ (800521c <HAL_DMA_IRQHandler+0x420>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a58      	ldr	r2, [pc, #352]	@ (8005220 <HAL_DMA_IRQHandler+0x424>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a57      	ldr	r2, [pc, #348]	@ (8005224 <HAL_DMA_IRQHandler+0x428>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a55      	ldr	r2, [pc, #340]	@ (8005228 <HAL_DMA_IRQHandler+0x42c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a54      	ldr	r2, [pc, #336]	@ (800522c <HAL_DMA_IRQHandler+0x430>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_DMA_IRQHandler+0x2ee>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a52      	ldr	r2, [pc, #328]	@ (8005230 <HAL_DMA_IRQHandler+0x434>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d10a      	bne.n	8005100 <HAL_DMA_IRQHandler+0x304>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e003      	b.n	8005108 <HAL_DMA_IRQHandler+0x30c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	f043 0202 	orr.w	r2, r3, #2
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2204      	movs	r2, #4
 8005132:	409a      	lsls	r2, r3
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 808f 	beq.w	800525c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2c      	ldr	r2, [pc, #176]	@ (80051f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2a      	ldr	r2, [pc, #168]	@ (80051f8 <HAL_DMA_IRQHandler+0x3fc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a29      	ldr	r2, [pc, #164]	@ (80051fc <HAL_DMA_IRQHandler+0x400>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a27      	ldr	r2, [pc, #156]	@ (8005200 <HAL_DMA_IRQHandler+0x404>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a26      	ldr	r2, [pc, #152]	@ (8005204 <HAL_DMA_IRQHandler+0x408>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a24      	ldr	r2, [pc, #144]	@ (8005208 <HAL_DMA_IRQHandler+0x40c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a23      	ldr	r2, [pc, #140]	@ (800520c <HAL_DMA_IRQHandler+0x410>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a21      	ldr	r2, [pc, #132]	@ (8005210 <HAL_DMA_IRQHandler+0x414>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a20      	ldr	r2, [pc, #128]	@ (8005214 <HAL_DMA_IRQHandler+0x418>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1e      	ldr	r2, [pc, #120]	@ (8005218 <HAL_DMA_IRQHandler+0x41c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	@ (800521c <HAL_DMA_IRQHandler+0x420>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005220 <HAL_DMA_IRQHandler+0x424>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005224 <HAL_DMA_IRQHandler+0x428>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a18      	ldr	r2, [pc, #96]	@ (8005228 <HAL_DMA_IRQHandler+0x42c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a17      	ldr	r2, [pc, #92]	@ (800522c <HAL_DMA_IRQHandler+0x430>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_IRQHandler+0x3e2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <HAL_DMA_IRQHandler+0x434>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d12a      	bne.n	8005234 <HAL_DMA_IRQHandler+0x438>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e023      	b.n	800523c <HAL_DMA_IRQHandler+0x440>
 80051f4:	40020010 	.word	0x40020010
 80051f8:	40020028 	.word	0x40020028
 80051fc:	40020040 	.word	0x40020040
 8005200:	40020058 	.word	0x40020058
 8005204:	40020070 	.word	0x40020070
 8005208:	40020088 	.word	0x40020088
 800520c:	400200a0 	.word	0x400200a0
 8005210:	400200b8 	.word	0x400200b8
 8005214:	40020410 	.word	0x40020410
 8005218:	40020428 	.word	0x40020428
 800521c:	40020440 	.word	0x40020440
 8005220:	40020458 	.word	0x40020458
 8005224:	40020470 	.word	0x40020470
 8005228:	40020488 	.word	0x40020488
 800522c:	400204a0 	.word	0x400204a0
 8005230:	400204b8 	.word	0x400204b8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2204      	movs	r2, #4
 800524a:	409a      	lsls	r2, r3
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005254:	f043 0204 	orr.w	r2, r3, #4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2210      	movs	r2, #16
 8005266:	409a      	lsls	r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80a6 	beq.w	80053be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a85      	ldr	r2, [pc, #532]	@ (800548c <HAL_DMA_IRQHandler+0x690>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d04a      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a83      	ldr	r2, [pc, #524]	@ (8005490 <HAL_DMA_IRQHandler+0x694>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d045      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a82      	ldr	r2, [pc, #520]	@ (8005494 <HAL_DMA_IRQHandler+0x698>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d040      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a80      	ldr	r2, [pc, #512]	@ (8005498 <HAL_DMA_IRQHandler+0x69c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d03b      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a7f      	ldr	r2, [pc, #508]	@ (800549c <HAL_DMA_IRQHandler+0x6a0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d036      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7d      	ldr	r2, [pc, #500]	@ (80054a0 <HAL_DMA_IRQHandler+0x6a4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d031      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a7c      	ldr	r2, [pc, #496]	@ (80054a4 <HAL_DMA_IRQHandler+0x6a8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d02c      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a7a      	ldr	r2, [pc, #488]	@ (80054a8 <HAL_DMA_IRQHandler+0x6ac>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d027      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a79      	ldr	r2, [pc, #484]	@ (80054ac <HAL_DMA_IRQHandler+0x6b0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a77      	ldr	r2, [pc, #476]	@ (80054b0 <HAL_DMA_IRQHandler+0x6b4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01d      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a76      	ldr	r2, [pc, #472]	@ (80054b4 <HAL_DMA_IRQHandler+0x6b8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d018      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a74      	ldr	r2, [pc, #464]	@ (80054b8 <HAL_DMA_IRQHandler+0x6bc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a73      	ldr	r2, [pc, #460]	@ (80054bc <HAL_DMA_IRQHandler+0x6c0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a71      	ldr	r2, [pc, #452]	@ (80054c0 <HAL_DMA_IRQHandler+0x6c4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a70      	ldr	r2, [pc, #448]	@ (80054c4 <HAL_DMA_IRQHandler+0x6c8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_DMA_IRQHandler+0x516>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6e      	ldr	r2, [pc, #440]	@ (80054c8 <HAL_DMA_IRQHandler+0x6cc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10a      	bne.n	8005328 <HAL_DMA_IRQHandler+0x52c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e009      	b.n	800533c <HAL_DMA_IRQHandler+0x540>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d03e      	beq.n	80053be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2210      	movs	r2, #16
 800534a:	409a      	lsls	r2, r3
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d018      	beq.n	8005390 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d024      	beq.n	80053be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	4798      	blx	r3
 800537c:	e01f      	b.n	80053be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01b      	beq.n	80053be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
 800538e:	e016      	b.n	80053be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0208 	bic.w	r2, r2, #8
 80053ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2220      	movs	r2, #32
 80053c8:	409a      	lsls	r2, r3
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8110 	beq.w	80055f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a2c      	ldr	r2, [pc, #176]	@ (800548c <HAL_DMA_IRQHandler+0x690>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d04a      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005490 <HAL_DMA_IRQHandler+0x694>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d045      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a29      	ldr	r2, [pc, #164]	@ (8005494 <HAL_DMA_IRQHandler+0x698>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d040      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a28      	ldr	r2, [pc, #160]	@ (8005498 <HAL_DMA_IRQHandler+0x69c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d03b      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a26      	ldr	r2, [pc, #152]	@ (800549c <HAL_DMA_IRQHandler+0x6a0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d036      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a25      	ldr	r2, [pc, #148]	@ (80054a0 <HAL_DMA_IRQHandler+0x6a4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d031      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a23      	ldr	r2, [pc, #140]	@ (80054a4 <HAL_DMA_IRQHandler+0x6a8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d02c      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a22      	ldr	r2, [pc, #136]	@ (80054a8 <HAL_DMA_IRQHandler+0x6ac>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d027      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a20      	ldr	r2, [pc, #128]	@ (80054ac <HAL_DMA_IRQHandler+0x6b0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d022      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <HAL_DMA_IRQHandler+0x6b4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d01d      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1d      	ldr	r2, [pc, #116]	@ (80054b4 <HAL_DMA_IRQHandler+0x6b8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d018      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1c      	ldr	r2, [pc, #112]	@ (80054b8 <HAL_DMA_IRQHandler+0x6bc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1a      	ldr	r2, [pc, #104]	@ (80054bc <HAL_DMA_IRQHandler+0x6c0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a19      	ldr	r2, [pc, #100]	@ (80054c0 <HAL_DMA_IRQHandler+0x6c4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a17      	ldr	r2, [pc, #92]	@ (80054c4 <HAL_DMA_IRQHandler+0x6c8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_DMA_IRQHandler+0x678>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a16      	ldr	r2, [pc, #88]	@ (80054c8 <HAL_DMA_IRQHandler+0x6cc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d12b      	bne.n	80054cc <HAL_DMA_IRQHandler+0x6d0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	bf14      	ite	ne
 8005482:	2301      	movne	r3, #1
 8005484:	2300      	moveq	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e02a      	b.n	80054e0 <HAL_DMA_IRQHandler+0x6e4>
 800548a:	bf00      	nop
 800548c:	40020010 	.word	0x40020010
 8005490:	40020028 	.word	0x40020028
 8005494:	40020040 	.word	0x40020040
 8005498:	40020058 	.word	0x40020058
 800549c:	40020070 	.word	0x40020070
 80054a0:	40020088 	.word	0x40020088
 80054a4:	400200a0 	.word	0x400200a0
 80054a8:	400200b8 	.word	0x400200b8
 80054ac:	40020410 	.word	0x40020410
 80054b0:	40020428 	.word	0x40020428
 80054b4:	40020440 	.word	0x40020440
 80054b8:	40020458 	.word	0x40020458
 80054bc:	40020470 	.word	0x40020470
 80054c0:	40020488 	.word	0x40020488
 80054c4:	400204a0 	.word	0x400204a0
 80054c8:	400204b8 	.word	0x400204b8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8087 	beq.w	80055f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2220      	movs	r2, #32
 80054f0:	409a      	lsls	r2, r3
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d139      	bne.n	8005576 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0216 	bic.w	r2, r2, #22
 8005510:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005520:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <HAL_DMA_IRQHandler+0x736>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0208 	bic.w	r2, r2, #8
 8005540:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	223f      	movs	r2, #63	@ 0x3f
 800554c:	409a      	lsls	r2, r3
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 834a 	beq.w	8005c00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
          }
          return;
 8005574:	e344      	b.n	8005c00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d018      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02c      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
 80055a2:	e027      	b.n	80055f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d023      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
 80055b4:	e01e      	b.n	80055f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10f      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0210 	bic.w	r2, r2, #16
 80055d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8306 	beq.w	8005c0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8088 	beq.w	800571c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2204      	movs	r2, #4
 8005610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a7a      	ldr	r2, [pc, #488]	@ (8005804 <HAL_DMA_IRQHandler+0xa08>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04a      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a79      	ldr	r2, [pc, #484]	@ (8005808 <HAL_DMA_IRQHandler+0xa0c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d045      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a77      	ldr	r2, [pc, #476]	@ (800580c <HAL_DMA_IRQHandler+0xa10>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d040      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a76      	ldr	r2, [pc, #472]	@ (8005810 <HAL_DMA_IRQHandler+0xa14>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d03b      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a74      	ldr	r2, [pc, #464]	@ (8005814 <HAL_DMA_IRQHandler+0xa18>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d036      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a73      	ldr	r2, [pc, #460]	@ (8005818 <HAL_DMA_IRQHandler+0xa1c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d031      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a71      	ldr	r2, [pc, #452]	@ (800581c <HAL_DMA_IRQHandler+0xa20>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d02c      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a70      	ldr	r2, [pc, #448]	@ (8005820 <HAL_DMA_IRQHandler+0xa24>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d027      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a6e      	ldr	r2, [pc, #440]	@ (8005824 <HAL_DMA_IRQHandler+0xa28>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6d      	ldr	r2, [pc, #436]	@ (8005828 <HAL_DMA_IRQHandler+0xa2c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01d      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6b      	ldr	r2, [pc, #428]	@ (800582c <HAL_DMA_IRQHandler+0xa30>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a6a      	ldr	r2, [pc, #424]	@ (8005830 <HAL_DMA_IRQHandler+0xa34>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a68      	ldr	r2, [pc, #416]	@ (8005834 <HAL_DMA_IRQHandler+0xa38>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a67      	ldr	r2, [pc, #412]	@ (8005838 <HAL_DMA_IRQHandler+0xa3c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a65      	ldr	r2, [pc, #404]	@ (800583c <HAL_DMA_IRQHandler+0xa40>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_DMA_IRQHandler+0x8b8>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a64      	ldr	r2, [pc, #400]	@ (8005840 <HAL_DMA_IRQHandler+0xa44>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d108      	bne.n	80056c6 <HAL_DMA_IRQHandler+0x8ca>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e007      	b.n	80056d6 <HAL_DMA_IRQHandler+0x8da>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056de:	429a      	cmp	r2, r3
 80056e0:	d307      	bcc.n	80056f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f2      	bne.n	80056d6 <HAL_DMA_IRQHandler+0x8da>
 80056f0:	e000      	b.n	80056f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80056f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2203      	movs	r2, #3
 8005706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800570a:	e003      	b.n	8005714 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8272 	beq.w	8005c0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
 800572e:	e26c      	b.n	8005c0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a43      	ldr	r2, [pc, #268]	@ (8005844 <HAL_DMA_IRQHandler+0xa48>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <HAL_DMA_IRQHandler+0x984>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a42      	ldr	r2, [pc, #264]	@ (8005848 <HAL_DMA_IRQHandler+0xa4c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d01d      	beq.n	8005780 <HAL_DMA_IRQHandler+0x984>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a40      	ldr	r2, [pc, #256]	@ (800584c <HAL_DMA_IRQHandler+0xa50>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_DMA_IRQHandler+0x984>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a3f      	ldr	r2, [pc, #252]	@ (8005850 <HAL_DMA_IRQHandler+0xa54>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_DMA_IRQHandler+0x984>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3d      	ldr	r2, [pc, #244]	@ (8005854 <HAL_DMA_IRQHandler+0xa58>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_DMA_IRQHandler+0x984>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3c      	ldr	r2, [pc, #240]	@ (8005858 <HAL_DMA_IRQHandler+0xa5c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_DMA_IRQHandler+0x984>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a3a      	ldr	r2, [pc, #232]	@ (800585c <HAL_DMA_IRQHandler+0xa60>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_DMA_IRQHandler+0x984>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a39      	ldr	r2, [pc, #228]	@ (8005860 <HAL_DMA_IRQHandler+0xa64>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <HAL_DMA_IRQHandler+0x988>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <HAL_DMA_IRQHandler+0x98a>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 823f 	beq.w	8005c0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2204      	movs	r2, #4
 800579e:	409a      	lsls	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80cd 	beq.w	8005944 <HAL_DMA_IRQHandler+0xb48>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80c7 	beq.w	8005944 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2204      	movs	r2, #4
 80057c0:	409a      	lsls	r2, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d049      	beq.n	8005864 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8210 	beq.w	8005c04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ec:	e20a      	b.n	8005c04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8206 	beq.w	8005c04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005800:	e200      	b.n	8005c04 <HAL_DMA_IRQHandler+0xe08>
 8005802:	bf00      	nop
 8005804:	40020010 	.word	0x40020010
 8005808:	40020028 	.word	0x40020028
 800580c:	40020040 	.word	0x40020040
 8005810:	40020058 	.word	0x40020058
 8005814:	40020070 	.word	0x40020070
 8005818:	40020088 	.word	0x40020088
 800581c:	400200a0 	.word	0x400200a0
 8005820:	400200b8 	.word	0x400200b8
 8005824:	40020410 	.word	0x40020410
 8005828:	40020428 	.word	0x40020428
 800582c:	40020440 	.word	0x40020440
 8005830:	40020458 	.word	0x40020458
 8005834:	40020470 	.word	0x40020470
 8005838:	40020488 	.word	0x40020488
 800583c:	400204a0 	.word	0x400204a0
 8005840:	400204b8 	.word	0x400204b8
 8005844:	58025408 	.word	0x58025408
 8005848:	5802541c 	.word	0x5802541c
 800584c:	58025430 	.word	0x58025430
 8005850:	58025444 	.word	0x58025444
 8005854:	58025458 	.word	0x58025458
 8005858:	5802546c 	.word	0x5802546c
 800585c:	58025480 	.word	0x58025480
 8005860:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d160      	bne.n	8005930 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a7f      	ldr	r2, [pc, #508]	@ (8005a70 <HAL_DMA_IRQHandler+0xc74>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d04a      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a7d      	ldr	r2, [pc, #500]	@ (8005a74 <HAL_DMA_IRQHandler+0xc78>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d045      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a7c      	ldr	r2, [pc, #496]	@ (8005a78 <HAL_DMA_IRQHandler+0xc7c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d040      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a7a      	ldr	r2, [pc, #488]	@ (8005a7c <HAL_DMA_IRQHandler+0xc80>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d03b      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a79      	ldr	r2, [pc, #484]	@ (8005a80 <HAL_DMA_IRQHandler+0xc84>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d036      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a77      	ldr	r2, [pc, #476]	@ (8005a84 <HAL_DMA_IRQHandler+0xc88>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d031      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a76      	ldr	r2, [pc, #472]	@ (8005a88 <HAL_DMA_IRQHandler+0xc8c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d02c      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a74      	ldr	r2, [pc, #464]	@ (8005a8c <HAL_DMA_IRQHandler+0xc90>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d027      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a73      	ldr	r2, [pc, #460]	@ (8005a90 <HAL_DMA_IRQHandler+0xc94>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d022      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a71      	ldr	r2, [pc, #452]	@ (8005a94 <HAL_DMA_IRQHandler+0xc98>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01d      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a70      	ldr	r2, [pc, #448]	@ (8005a98 <HAL_DMA_IRQHandler+0xc9c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d018      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6e      	ldr	r2, [pc, #440]	@ (8005a9c <HAL_DMA_IRQHandler+0xca0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a6d      	ldr	r2, [pc, #436]	@ (8005aa0 <HAL_DMA_IRQHandler+0xca4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa4 <HAL_DMA_IRQHandler+0xca8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a6a      	ldr	r2, [pc, #424]	@ (8005aa8 <HAL_DMA_IRQHandler+0xcac>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_DMA_IRQHandler+0xb12>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a68      	ldr	r2, [pc, #416]	@ (8005aac <HAL_DMA_IRQHandler+0xcb0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <HAL_DMA_IRQHandler+0xb24>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0208 	bic.w	r2, r2, #8
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e007      	b.n	8005930 <HAL_DMA_IRQHandler+0xb34>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8165 	beq.w	8005c04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005942:	e15f      	b.n	8005c04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	2202      	movs	r2, #2
 800594e:	409a      	lsls	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80c5 	beq.w	8005ae4 <HAL_DMA_IRQHandler+0xce8>
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80bf 	beq.w	8005ae4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	2202      	movs	r2, #2
 8005970:	409a      	lsls	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d018      	beq.n	80059b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 813a 	beq.w	8005c08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800599c:	e134      	b.n	8005c08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8130 	beq.w	8005c08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b0:	e12a      	b.n	8005c08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f040 8089 	bne.w	8005ad0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005a70 <HAL_DMA_IRQHandler+0xc74>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d04a      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a29      	ldr	r2, [pc, #164]	@ (8005a74 <HAL_DMA_IRQHandler+0xc78>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d045      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a28      	ldr	r2, [pc, #160]	@ (8005a78 <HAL_DMA_IRQHandler+0xc7c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d040      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a26      	ldr	r2, [pc, #152]	@ (8005a7c <HAL_DMA_IRQHandler+0xc80>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d03b      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <HAL_DMA_IRQHandler+0xc84>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d036      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a23      	ldr	r2, [pc, #140]	@ (8005a84 <HAL_DMA_IRQHandler+0xc88>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d031      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a22      	ldr	r2, [pc, #136]	@ (8005a88 <HAL_DMA_IRQHandler+0xc8c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d02c      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a20      	ldr	r2, [pc, #128]	@ (8005a8c <HAL_DMA_IRQHandler+0xc90>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d027      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <HAL_DMA_IRQHandler+0xc94>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d022      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a94 <HAL_DMA_IRQHandler+0xc98>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01d      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <HAL_DMA_IRQHandler+0xc9c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d018      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1a      	ldr	r2, [pc, #104]	@ (8005a9c <HAL_DMA_IRQHandler+0xca0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a19      	ldr	r2, [pc, #100]	@ (8005aa0 <HAL_DMA_IRQHandler+0xca4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a17      	ldr	r2, [pc, #92]	@ (8005aa4 <HAL_DMA_IRQHandler+0xca8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <HAL_DMA_IRQHandler+0xcac>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xc62>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a14      	ldr	r2, [pc, #80]	@ (8005aac <HAL_DMA_IRQHandler+0xcb0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d128      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0xcb4>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0214 	bic.w	r2, r2, #20
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e027      	b.n	8005ac0 <HAL_DMA_IRQHandler+0xcc4>
 8005a70:	40020010 	.word	0x40020010
 8005a74:	40020028 	.word	0x40020028
 8005a78:	40020040 	.word	0x40020040
 8005a7c:	40020058 	.word	0x40020058
 8005a80:	40020070 	.word	0x40020070
 8005a84:	40020088 	.word	0x40020088
 8005a88:	400200a0 	.word	0x400200a0
 8005a8c:	400200b8 	.word	0x400200b8
 8005a90:	40020410 	.word	0x40020410
 8005a94:	40020428 	.word	0x40020428
 8005a98:	40020440 	.word	0x40020440
 8005a9c:	40020458 	.word	0x40020458
 8005aa0:	40020470 	.word	0x40020470
 8005aa4:	40020488 	.word	0x40020488
 8005aa8:	400204a0 	.word	0x400204a0
 8005aac:	400204b8 	.word	0x400204b8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 020a 	bic.w	r2, r2, #10
 8005abe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8097 	beq.w	8005c08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ae2:	e091      	b.n	8005c08 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	2208      	movs	r2, #8
 8005aee:	409a      	lsls	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8088 	beq.w	8005c0a <HAL_DMA_IRQHandler+0xe0e>
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8082 	beq.w	8005c0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a41      	ldr	r2, [pc, #260]	@ (8005c10 <HAL_DMA_IRQHandler+0xe14>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d04a      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a3f      	ldr	r2, [pc, #252]	@ (8005c14 <HAL_DMA_IRQHandler+0xe18>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d045      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005c18 <HAL_DMA_IRQHandler+0xe1c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d040      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	@ (8005c1c <HAL_DMA_IRQHandler+0xe20>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d03b      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <HAL_DMA_IRQHandler+0xe24>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d036      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a39      	ldr	r2, [pc, #228]	@ (8005c24 <HAL_DMA_IRQHandler+0xe28>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d031      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a38      	ldr	r2, [pc, #224]	@ (8005c28 <HAL_DMA_IRQHandler+0xe2c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d02c      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a36      	ldr	r2, [pc, #216]	@ (8005c2c <HAL_DMA_IRQHandler+0xe30>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d027      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a35      	ldr	r2, [pc, #212]	@ (8005c30 <HAL_DMA_IRQHandler+0xe34>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d022      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a33      	ldr	r2, [pc, #204]	@ (8005c34 <HAL_DMA_IRQHandler+0xe38>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01d      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a32      	ldr	r2, [pc, #200]	@ (8005c38 <HAL_DMA_IRQHandler+0xe3c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a30      	ldr	r2, [pc, #192]	@ (8005c3c <HAL_DMA_IRQHandler+0xe40>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2f      	ldr	r2, [pc, #188]	@ (8005c40 <HAL_DMA_IRQHandler+0xe44>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00e      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c44 <HAL_DMA_IRQHandler+0xe48>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <HAL_DMA_IRQHandler+0xe4c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xdaa>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c4c <HAL_DMA_IRQHandler+0xe50>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0xdbc>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 021c 	bic.w	r2, r2, #28
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e007      	b.n	8005bc8 <HAL_DMA_IRQHandler+0xdcc>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 020e 	bic.w	r2, r2, #14
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
 8005bfe:	e004      	b.n	8005c0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005c00:	bf00      	nop
 8005c02:	e002      	b.n	8005c0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c0a:	3728      	adds	r7, #40	@ 0x28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40020010 	.word	0x40020010
 8005c14:	40020028 	.word	0x40020028
 8005c18:	40020040 	.word	0x40020040
 8005c1c:	40020058 	.word	0x40020058
 8005c20:	40020070 	.word	0x40020070
 8005c24:	40020088 	.word	0x40020088
 8005c28:	400200a0 	.word	0x400200a0
 8005c2c:	400200b8 	.word	0x400200b8
 8005c30:	40020410 	.word	0x40020410
 8005c34:	40020428 	.word	0x40020428
 8005c38:	40020440 	.word	0x40020440
 8005c3c:	40020458 	.word	0x40020458
 8005c40:	40020470 	.word	0x40020470
 8005c44:	40020488 	.word	0x40020488
 8005c48:	400204a0 	.word	0x400204a0
 8005c4c:	400204b8 	.word	0x400204b8

08005c50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c62:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c68:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a7f      	ldr	r2, [pc, #508]	@ (8005e6c <DMA_SetConfig+0x21c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d072      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a7d      	ldr	r2, [pc, #500]	@ (8005e70 <DMA_SetConfig+0x220>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d06d      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a7c      	ldr	r2, [pc, #496]	@ (8005e74 <DMA_SetConfig+0x224>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d068      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a7a      	ldr	r2, [pc, #488]	@ (8005e78 <DMA_SetConfig+0x228>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d063      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a79      	ldr	r2, [pc, #484]	@ (8005e7c <DMA_SetConfig+0x22c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d05e      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a77      	ldr	r2, [pc, #476]	@ (8005e80 <DMA_SetConfig+0x230>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d059      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a76      	ldr	r2, [pc, #472]	@ (8005e84 <DMA_SetConfig+0x234>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d054      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a74      	ldr	r2, [pc, #464]	@ (8005e88 <DMA_SetConfig+0x238>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d04f      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a73      	ldr	r2, [pc, #460]	@ (8005e8c <DMA_SetConfig+0x23c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d04a      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a71      	ldr	r2, [pc, #452]	@ (8005e90 <DMA_SetConfig+0x240>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d045      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a70      	ldr	r2, [pc, #448]	@ (8005e94 <DMA_SetConfig+0x244>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d040      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8005e98 <DMA_SetConfig+0x248>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d03b      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e9c <DMA_SetConfig+0x24c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d036      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8005ea0 <DMA_SetConfig+0x250>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d031      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a6a      	ldr	r2, [pc, #424]	@ (8005ea4 <DMA_SetConfig+0x254>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d02c      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a68      	ldr	r2, [pc, #416]	@ (8005ea8 <DMA_SetConfig+0x258>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d027      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a67      	ldr	r2, [pc, #412]	@ (8005eac <DMA_SetConfig+0x25c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d022      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a65      	ldr	r2, [pc, #404]	@ (8005eb0 <DMA_SetConfig+0x260>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01d      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a64      	ldr	r2, [pc, #400]	@ (8005eb4 <DMA_SetConfig+0x264>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d018      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a62      	ldr	r2, [pc, #392]	@ (8005eb8 <DMA_SetConfig+0x268>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a61      	ldr	r2, [pc, #388]	@ (8005ebc <DMA_SetConfig+0x26c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec0 <DMA_SetConfig+0x270>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec4 <DMA_SetConfig+0x274>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <DMA_SetConfig+0x10a>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a5c      	ldr	r2, [pc, #368]	@ (8005ec8 <DMA_SetConfig+0x278>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <DMA_SetConfig+0x10e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <DMA_SetConfig+0x110>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00d      	beq.n	8005d80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a39      	ldr	r2, [pc, #228]	@ (8005e6c <DMA_SetConfig+0x21c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d04a      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a38      	ldr	r2, [pc, #224]	@ (8005e70 <DMA_SetConfig+0x220>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d045      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a36      	ldr	r2, [pc, #216]	@ (8005e74 <DMA_SetConfig+0x224>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d040      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a35      	ldr	r2, [pc, #212]	@ (8005e78 <DMA_SetConfig+0x228>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d03b      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a33      	ldr	r2, [pc, #204]	@ (8005e7c <DMA_SetConfig+0x22c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d036      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <DMA_SetConfig+0x230>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d031      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a30      	ldr	r2, [pc, #192]	@ (8005e84 <DMA_SetConfig+0x234>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d02c      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2f      	ldr	r2, [pc, #188]	@ (8005e88 <DMA_SetConfig+0x238>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d027      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e8c <DMA_SetConfig+0x23c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d022      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2c      	ldr	r2, [pc, #176]	@ (8005e90 <DMA_SetConfig+0x240>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01d      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2a      	ldr	r2, [pc, #168]	@ (8005e94 <DMA_SetConfig+0x244>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d018      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a29      	ldr	r2, [pc, #164]	@ (8005e98 <DMA_SetConfig+0x248>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d013      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a27      	ldr	r2, [pc, #156]	@ (8005e9c <DMA_SetConfig+0x24c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00e      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a26      	ldr	r2, [pc, #152]	@ (8005ea0 <DMA_SetConfig+0x250>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a24      	ldr	r2, [pc, #144]	@ (8005ea4 <DMA_SetConfig+0x254>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <DMA_SetConfig+0x1d0>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a23      	ldr	r2, [pc, #140]	@ (8005ea8 <DMA_SetConfig+0x258>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <DMA_SetConfig+0x1d4>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <DMA_SetConfig+0x1d6>
 8005e24:	2300      	movs	r3, #0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d059      	beq.n	8005ede <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	223f      	movs	r2, #63	@ 0x3f
 8005e34:	409a      	lsls	r2, r3
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b40      	cmp	r3, #64	@ 0x40
 8005e58:	d138      	bne.n	8005ecc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e6a:	e086      	b.n	8005f7a <DMA_SetConfig+0x32a>
 8005e6c:	40020010 	.word	0x40020010
 8005e70:	40020028 	.word	0x40020028
 8005e74:	40020040 	.word	0x40020040
 8005e78:	40020058 	.word	0x40020058
 8005e7c:	40020070 	.word	0x40020070
 8005e80:	40020088 	.word	0x40020088
 8005e84:	400200a0 	.word	0x400200a0
 8005e88:	400200b8 	.word	0x400200b8
 8005e8c:	40020410 	.word	0x40020410
 8005e90:	40020428 	.word	0x40020428
 8005e94:	40020440 	.word	0x40020440
 8005e98:	40020458 	.word	0x40020458
 8005e9c:	40020470 	.word	0x40020470
 8005ea0:	40020488 	.word	0x40020488
 8005ea4:	400204a0 	.word	0x400204a0
 8005ea8:	400204b8 	.word	0x400204b8
 8005eac:	58025408 	.word	0x58025408
 8005eb0:	5802541c 	.word	0x5802541c
 8005eb4:	58025430 	.word	0x58025430
 8005eb8:	58025444 	.word	0x58025444
 8005ebc:	58025458 	.word	0x58025458
 8005ec0:	5802546c 	.word	0x5802546c
 8005ec4:	58025480 	.word	0x58025480
 8005ec8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	60da      	str	r2, [r3, #12]
}
 8005edc:	e04d      	b.n	8005f7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a29      	ldr	r2, [pc, #164]	@ (8005f88 <DMA_SetConfig+0x338>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d022      	beq.n	8005f2e <DMA_SetConfig+0x2de>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a27      	ldr	r2, [pc, #156]	@ (8005f8c <DMA_SetConfig+0x33c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01d      	beq.n	8005f2e <DMA_SetConfig+0x2de>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a26      	ldr	r2, [pc, #152]	@ (8005f90 <DMA_SetConfig+0x340>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d018      	beq.n	8005f2e <DMA_SetConfig+0x2de>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a24      	ldr	r2, [pc, #144]	@ (8005f94 <DMA_SetConfig+0x344>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <DMA_SetConfig+0x2de>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a23      	ldr	r2, [pc, #140]	@ (8005f98 <DMA_SetConfig+0x348>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <DMA_SetConfig+0x2de>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a21      	ldr	r2, [pc, #132]	@ (8005f9c <DMA_SetConfig+0x34c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <DMA_SetConfig+0x2de>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a20      	ldr	r2, [pc, #128]	@ (8005fa0 <DMA_SetConfig+0x350>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <DMA_SetConfig+0x2de>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa4 <DMA_SetConfig+0x354>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d101      	bne.n	8005f32 <DMA_SetConfig+0x2e2>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <DMA_SetConfig+0x2e4>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d020      	beq.n	8005f7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2201      	movs	r2, #1
 8005f42:	409a      	lsls	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b40      	cmp	r3, #64	@ 0x40
 8005f56:	d108      	bne.n	8005f6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	60da      	str	r2, [r3, #12]
}
 8005f68:	e007      	b.n	8005f7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	58025408 	.word	0x58025408
 8005f8c:	5802541c 	.word	0x5802541c
 8005f90:	58025430 	.word	0x58025430
 8005f94:	58025444 	.word	0x58025444
 8005f98:	58025458 	.word	0x58025458
 8005f9c:	5802546c 	.word	0x5802546c
 8005fa0:	58025480 	.word	0x58025480
 8005fa4:	58025494 	.word	0x58025494

08005fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a42      	ldr	r2, [pc, #264]	@ (80060c0 <DMA_CalcBaseAndBitshift+0x118>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d04a      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a41      	ldr	r2, [pc, #260]	@ (80060c4 <DMA_CalcBaseAndBitshift+0x11c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d045      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80060c8 <DMA_CalcBaseAndBitshift+0x120>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d040      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80060cc <DMA_CalcBaseAndBitshift+0x124>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d03b      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80060d0 <DMA_CalcBaseAndBitshift+0x128>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d036      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a3b      	ldr	r2, [pc, #236]	@ (80060d4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d031      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a39      	ldr	r2, [pc, #228]	@ (80060d8 <DMA_CalcBaseAndBitshift+0x130>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02c      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a38      	ldr	r2, [pc, #224]	@ (80060dc <DMA_CalcBaseAndBitshift+0x134>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d027      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a36      	ldr	r2, [pc, #216]	@ (80060e0 <DMA_CalcBaseAndBitshift+0x138>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d022      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a35      	ldr	r2, [pc, #212]	@ (80060e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d01d      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a33      	ldr	r2, [pc, #204]	@ (80060e8 <DMA_CalcBaseAndBitshift+0x140>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d018      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a32      	ldr	r2, [pc, #200]	@ (80060ec <DMA_CalcBaseAndBitshift+0x144>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d013      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a30      	ldr	r2, [pc, #192]	@ (80060f0 <DMA_CalcBaseAndBitshift+0x148>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00e      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2f      	ldr	r2, [pc, #188]	@ (80060f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d009      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2d      	ldr	r2, [pc, #180]	@ (80060f8 <DMA_CalcBaseAndBitshift+0x150>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <DMA_CalcBaseAndBitshift+0xa8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2c      	ldr	r2, [pc, #176]	@ (80060fc <DMA_CalcBaseAndBitshift+0x154>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d101      	bne.n	8006054 <DMA_CalcBaseAndBitshift+0xac>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <DMA_CalcBaseAndBitshift+0xae>
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d024      	beq.n	80060a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	3b10      	subs	r3, #16
 8006062:	4a27      	ldr	r2, [pc, #156]	@ (8006100 <DMA_CalcBaseAndBitshift+0x158>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	091b      	lsrs	r3, r3, #4
 800606a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	4a24      	ldr	r2, [pc, #144]	@ (8006104 <DMA_CalcBaseAndBitshift+0x15c>)
 8006074:	5cd3      	ldrb	r3, [r2, r3]
 8006076:	461a      	mov	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d908      	bls.n	8006094 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	4b1f      	ldr	r3, [pc, #124]	@ (8006108 <DMA_CalcBaseAndBitshift+0x160>)
 800608a:	4013      	ands	r3, r2
 800608c:	1d1a      	adds	r2, r3, #4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	659a      	str	r2, [r3, #88]	@ 0x58
 8006092:	e00d      	b.n	80060b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <DMA_CalcBaseAndBitshift+0x160>)
 800609c:	4013      	ands	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a2:	e005      	b.n	80060b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40020010 	.word	0x40020010
 80060c4:	40020028 	.word	0x40020028
 80060c8:	40020040 	.word	0x40020040
 80060cc:	40020058 	.word	0x40020058
 80060d0:	40020070 	.word	0x40020070
 80060d4:	40020088 	.word	0x40020088
 80060d8:	400200a0 	.word	0x400200a0
 80060dc:	400200b8 	.word	0x400200b8
 80060e0:	40020410 	.word	0x40020410
 80060e4:	40020428 	.word	0x40020428
 80060e8:	40020440 	.word	0x40020440
 80060ec:	40020458 	.word	0x40020458
 80060f0:	40020470 	.word	0x40020470
 80060f4:	40020488 	.word	0x40020488
 80060f8:	400204a0 	.word	0x400204a0
 80060fc:	400204b8 	.word	0x400204b8
 8006100:	aaaaaaab 	.word	0xaaaaaaab
 8006104:	0800fe80 	.word	0x0800fe80
 8006108:	fffffc00 	.word	0xfffffc00

0800610c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d120      	bne.n	8006162 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006124:	2b03      	cmp	r3, #3
 8006126:	d858      	bhi.n	80061da <DMA_CheckFifoParam+0xce>
 8006128:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <DMA_CheckFifoParam+0x24>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006141 	.word	0x08006141
 8006134:	08006153 	.word	0x08006153
 8006138:	08006141 	.word	0x08006141
 800613c:	080061db 	.word	0x080061db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d048      	beq.n	80061de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006150:	e045      	b.n	80061de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800615a:	d142      	bne.n	80061e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006160:	e03f      	b.n	80061e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800616a:	d123      	bne.n	80061b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	2b03      	cmp	r3, #3
 8006172:	d838      	bhi.n	80061e6 <DMA_CheckFifoParam+0xda>
 8006174:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <DMA_CheckFifoParam+0x70>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	0800618d 	.word	0x0800618d
 8006180:	08006193 	.word	0x08006193
 8006184:	0800618d 	.word	0x0800618d
 8006188:	080061a5 	.word	0x080061a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
        break;
 8006190:	e030      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d025      	beq.n	80061ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061a2:	e022      	b.n	80061ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061ac:	d11f      	bne.n	80061ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061b2:	e01c      	b.n	80061ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d902      	bls.n	80061c2 <DMA_CheckFifoParam+0xb6>
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d003      	beq.n	80061c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061c0:	e018      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	73fb      	strb	r3, [r7, #15]
        break;
 80061c6:	e015      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00e      	beq.n	80061f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]
    break;
 80061d8:	e00b      	b.n	80061f2 <DMA_CheckFifoParam+0xe6>
        break;
 80061da:	bf00      	nop
 80061dc:	e00a      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
        break;
 80061de:	bf00      	nop
 80061e0:	e008      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
        break;
 80061e2:	bf00      	nop
 80061e4:	e006      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e004      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
        break;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
        break;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
    break;
 80061f2:	bf00      	nop
    }
  }

  return status;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop

08006204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a38      	ldr	r2, [pc, #224]	@ (80062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d022      	beq.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a36      	ldr	r2, [pc, #216]	@ (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01d      	beq.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a35      	ldr	r2, [pc, #212]	@ (8006300 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d018      	beq.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a33      	ldr	r2, [pc, #204]	@ (8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a32      	ldr	r2, [pc, #200]	@ (8006308 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00e      	beq.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a30      	ldr	r2, [pc, #192]	@ (800630c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d009      	beq.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d004      	beq.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2d      	ldr	r2, [pc, #180]	@ (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01a      	beq.n	80062a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	3b08      	subs	r3, #8
 8006274:	4a28      	ldr	r2, [pc, #160]	@ (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	091b      	lsrs	r3, r3, #4
 800627c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4b26      	ldr	r3, [pc, #152]	@ (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a24      	ldr	r2, [pc, #144]	@ (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006290:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2201      	movs	r2, #1
 800629a:	409a      	lsls	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80062a0:	e024      	b.n	80062ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	3b10      	subs	r3, #16
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006328 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d806      	bhi.n	80062ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4a1b      	ldr	r2, [pc, #108]	@ (800632c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d902      	bls.n	80062ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3308      	adds	r3, #8
 80062c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4b18      	ldr	r3, [pc, #96]	@ (8006330 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a16      	ldr	r2, [pc, #88]	@ (8006334 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2201      	movs	r2, #1
 80062e6:	409a      	lsls	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062ec:	bf00      	nop
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	58025408 	.word	0x58025408
 80062fc:	5802541c 	.word	0x5802541c
 8006300:	58025430 	.word	0x58025430
 8006304:	58025444 	.word	0x58025444
 8006308:	58025458 	.word	0x58025458
 800630c:	5802546c 	.word	0x5802546c
 8006310:	58025480 	.word	0x58025480
 8006314:	58025494 	.word	0x58025494
 8006318:	cccccccd 	.word	0xcccccccd
 800631c:	16009600 	.word	0x16009600
 8006320:	58025880 	.word	0x58025880
 8006324:	aaaaaaab 	.word	0xaaaaaaab
 8006328:	400204b8 	.word	0x400204b8
 800632c:	4002040f 	.word	0x4002040f
 8006330:	10008200 	.word	0x10008200
 8006334:	40020880 	.word	0x40020880

08006338 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d04a      	beq.n	80063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d847      	bhi.n	80063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a25      	ldr	r2, [pc, #148]	@ (80063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d022      	beq.n	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a24      	ldr	r2, [pc, #144]	@ (80063f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d01d      	beq.n	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a22      	ldr	r2, [pc, #136]	@ (80063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d018      	beq.n	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a21      	ldr	r2, [pc, #132]	@ (80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d013      	beq.n	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1f      	ldr	r2, [pc, #124]	@ (8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00e      	beq.n	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1e      	ldr	r2, [pc, #120]	@ (8006404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d009      	beq.n	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1c      	ldr	r2, [pc, #112]	@ (8006408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1b      	ldr	r2, [pc, #108]	@ (800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d101      	bne.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063a8:	2300      	movs	r3, #0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4b17      	ldr	r3, [pc, #92]	@ (8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a15      	ldr	r2, [pc, #84]	@ (8006414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80063c2:	e009      	b.n	80063d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4b14      	ldr	r3, [pc, #80]	@ (8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	461a      	mov	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a11      	ldr	r2, [pc, #68]	@ (800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3b01      	subs	r3, #1
 80063dc:	2201      	movs	r2, #1
 80063de:	409a      	lsls	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	58025408 	.word	0x58025408
 80063f4:	5802541c 	.word	0x5802541c
 80063f8:	58025430 	.word	0x58025430
 80063fc:	58025444 	.word	0x58025444
 8006400:	58025458 	.word	0x58025458
 8006404:	5802546c 	.word	0x5802546c
 8006408:	58025480 	.word	0x58025480
 800640c:	58025494 	.word	0x58025494
 8006410:	1600963f 	.word	0x1600963f
 8006414:	58025940 	.word	0x58025940
 8006418:	1000823f 	.word	0x1000823f
 800641c:	40020940 	.word	0x40020940

08006420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006420:	b480      	push	{r7}
 8006422:	b089      	sub	sp, #36	@ 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800642e:	4b89      	ldr	r3, [pc, #548]	@ (8006654 <HAL_GPIO_Init+0x234>)
 8006430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006432:	e194      	b.n	800675e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	2101      	movs	r1, #1
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	4013      	ands	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 8186 	beq.w	8006758 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	2b01      	cmp	r3, #1
 8006456:	d005      	beq.n	8006464 <HAL_GPIO_Init+0x44>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d130      	bne.n	80064c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	2203      	movs	r2, #3
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	43db      	mvns	r3, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4013      	ands	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800649a:	2201      	movs	r2, #1
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4013      	ands	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	f003 0201 	and.w	r2, r3, #1
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d017      	beq.n	8006502 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	2203      	movs	r2, #3
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	43db      	mvns	r3, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4013      	ands	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d123      	bne.n	8006556 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	08da      	lsrs	r2, r3, #3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3208      	adds	r2, #8
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	220f      	movs	r2, #15
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43db      	mvns	r3, r3
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	4013      	ands	r3, r2
 8006530:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	08da      	lsrs	r2, r3, #3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3208      	adds	r2, #8
 8006550:	69b9      	ldr	r1, [r7, #24]
 8006552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	2203      	movs	r2, #3
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	43db      	mvns	r3, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4013      	ands	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 0203 	and.w	r2, r3, #3
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80e0 	beq.w	8006758 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006598:	4b2f      	ldr	r3, [pc, #188]	@ (8006658 <HAL_GPIO_Init+0x238>)
 800659a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800659e:	4a2e      	ldr	r2, [pc, #184]	@ (8006658 <HAL_GPIO_Init+0x238>)
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80065a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006658 <HAL_GPIO_Init+0x238>)
 80065aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065b6:	4a29      	ldr	r2, [pc, #164]	@ (800665c <HAL_GPIO_Init+0x23c>)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	3302      	adds	r3, #2
 80065be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	220f      	movs	r2, #15
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a20      	ldr	r2, [pc, #128]	@ (8006660 <HAL_GPIO_Init+0x240>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d052      	beq.n	8006688 <HAL_GPIO_Init+0x268>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006664 <HAL_GPIO_Init+0x244>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d031      	beq.n	800664e <HAL_GPIO_Init+0x22e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006668 <HAL_GPIO_Init+0x248>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02b      	beq.n	800664a <HAL_GPIO_Init+0x22a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1d      	ldr	r2, [pc, #116]	@ (800666c <HAL_GPIO_Init+0x24c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d025      	beq.n	8006646 <HAL_GPIO_Init+0x226>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <HAL_GPIO_Init+0x250>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01f      	beq.n	8006642 <HAL_GPIO_Init+0x222>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1b      	ldr	r2, [pc, #108]	@ (8006674 <HAL_GPIO_Init+0x254>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d019      	beq.n	800663e <HAL_GPIO_Init+0x21e>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1a      	ldr	r2, [pc, #104]	@ (8006678 <HAL_GPIO_Init+0x258>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <HAL_GPIO_Init+0x21a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a19      	ldr	r2, [pc, #100]	@ (800667c <HAL_GPIO_Init+0x25c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00d      	beq.n	8006636 <HAL_GPIO_Init+0x216>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a18      	ldr	r2, [pc, #96]	@ (8006680 <HAL_GPIO_Init+0x260>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d007      	beq.n	8006632 <HAL_GPIO_Init+0x212>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a17      	ldr	r2, [pc, #92]	@ (8006684 <HAL_GPIO_Init+0x264>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d101      	bne.n	800662e <HAL_GPIO_Init+0x20e>
 800662a:	2309      	movs	r3, #9
 800662c:	e02d      	b.n	800668a <HAL_GPIO_Init+0x26a>
 800662e:	230a      	movs	r3, #10
 8006630:	e02b      	b.n	800668a <HAL_GPIO_Init+0x26a>
 8006632:	2308      	movs	r3, #8
 8006634:	e029      	b.n	800668a <HAL_GPIO_Init+0x26a>
 8006636:	2307      	movs	r3, #7
 8006638:	e027      	b.n	800668a <HAL_GPIO_Init+0x26a>
 800663a:	2306      	movs	r3, #6
 800663c:	e025      	b.n	800668a <HAL_GPIO_Init+0x26a>
 800663e:	2305      	movs	r3, #5
 8006640:	e023      	b.n	800668a <HAL_GPIO_Init+0x26a>
 8006642:	2304      	movs	r3, #4
 8006644:	e021      	b.n	800668a <HAL_GPIO_Init+0x26a>
 8006646:	2303      	movs	r3, #3
 8006648:	e01f      	b.n	800668a <HAL_GPIO_Init+0x26a>
 800664a:	2302      	movs	r3, #2
 800664c:	e01d      	b.n	800668a <HAL_GPIO_Init+0x26a>
 800664e:	2301      	movs	r3, #1
 8006650:	e01b      	b.n	800668a <HAL_GPIO_Init+0x26a>
 8006652:	bf00      	nop
 8006654:	58000080 	.word	0x58000080
 8006658:	58024400 	.word	0x58024400
 800665c:	58000400 	.word	0x58000400
 8006660:	58020000 	.word	0x58020000
 8006664:	58020400 	.word	0x58020400
 8006668:	58020800 	.word	0x58020800
 800666c:	58020c00 	.word	0x58020c00
 8006670:	58021000 	.word	0x58021000
 8006674:	58021400 	.word	0x58021400
 8006678:	58021800 	.word	0x58021800
 800667c:	58021c00 	.word	0x58021c00
 8006680:	58022000 	.word	0x58022000
 8006684:	58022400 	.word	0x58022400
 8006688:	2300      	movs	r3, #0
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	f002 0203 	and.w	r2, r2, #3
 8006690:	0092      	lsls	r2, r2, #2
 8006692:	4093      	lsls	r3, r2
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4313      	orrs	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800669a:	4938      	ldr	r1, [pc, #224]	@ (800677c <HAL_GPIO_Init+0x35c>)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	089b      	lsrs	r3, r3, #2
 80066a0:	3302      	adds	r3, #2
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	43db      	mvns	r3, r3
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	4013      	ands	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	43db      	mvns	r3, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4013      	ands	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3301      	adds	r3, #1
 800675c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f ae63 	bne.w	8006434 <HAL_GPIO_Init+0x14>
  }
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	3724      	adds	r7, #36	@ 0x24
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	58000400 	.word	0x58000400

08006780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	807b      	strh	r3, [r7, #2]
 800678c:	4613      	mov	r3, r2
 800678e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006790:	787b      	ldrb	r3, [r7, #1]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800679c:	e003      	b.n	80067a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800679e:	887b      	ldrh	r3, [r7, #2]
 80067a0:	041a      	lsls	r2, r3, #16
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	619a      	str	r2, [r3, #24]
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067c4:	887a      	ldrh	r2, [r7, #2]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4013      	ands	r3, r2
 80067ca:	041a      	lsls	r2, r3, #16
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	43d9      	mvns	r1, r3
 80067d0:	887b      	ldrh	r3, [r7, #2]
 80067d2:	400b      	ands	r3, r1
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	619a      	str	r2, [r3, #24]
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af02      	add	r7, sp, #8
 80067ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0fe      	b.n	80069f6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d106      	bne.n	8006812 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fa ff0f 	bl	8001630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2203      	movs	r2, #3
 8006816:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f006 fde6 	bl	800d3f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	7c1a      	ldrb	r2, [r3, #16]
 800682c:	f88d 2000 	strb.w	r2, [sp]
 8006830:	3304      	adds	r3, #4
 8006832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006834:	f006 fd6a 	bl	800d30c <USB_CoreInit>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e0d5      	b.n	80069f6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f006 fdde 	bl	800d412 <USB_SetCurrentMode>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0c6      	b.n	80069f6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	e04a      	b.n	8006904 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3315      	adds	r3, #21
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	3314      	adds	r3, #20
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	b298      	uxth	r0, r3
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	332e      	adds	r3, #46	@ 0x2e
 80068aa:	4602      	mov	r2, r0
 80068ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068ae:	7bfa      	ldrb	r2, [r7, #15]
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	3318      	adds	r3, #24
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	331c      	adds	r3, #28
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	3320      	adds	r3, #32
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	3324      	adds	r3, #36	@ 0x24
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	3301      	adds	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	791b      	ldrb	r3, [r3, #4]
 8006908:	7bfa      	ldrb	r2, [r7, #15]
 800690a:	429a      	cmp	r2, r3
 800690c:	d3af      	bcc.n	800686e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
 8006912:	e044      	b.n	800699e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006914:	7bfa      	ldrb	r2, [r7, #15]
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	4613      	mov	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800692a:	7bfa      	ldrb	r2, [r7, #15]
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006940:	7bfa      	ldrb	r2, [r7, #15]
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	4613      	mov	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006956:	7bfa      	ldrb	r2, [r7, #15]
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800696c:	7bfa      	ldrb	r2, [r7, #15]
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006982:	7bfa      	ldrb	r2, [r7, #15]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	3301      	adds	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	791b      	ldrb	r3, [r3, #4]
 80069a2:	7bfa      	ldrb	r2, [r7, #15]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d3b5      	bcc.n	8006914 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7c1a      	ldrb	r2, [r3, #16]
 80069b0:	f88d 2000 	strb.w	r2, [sp]
 80069b4:	3304      	adds	r3, #4
 80069b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069b8:	f006 fd78 	bl	800d4ac <USB_DevInit>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e013      	b.n	80069f6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d102      	bne.n	80069ea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f80b 	bl	8006a00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f006 ff33 	bl	800d85a <USB_DevDisconnect>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a2e:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <HAL_PCDEx_ActivateLPM+0x44>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	10000003 	.word	0x10000003

08006a48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006a50:	4b19      	ldr	r3, [pc, #100]	@ (8006ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d00a      	beq.n	8006a72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a5c:	4b16      	ldr	r3, [pc, #88]	@ (8006ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d001      	beq.n	8006a6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e01f      	b.n	8006aae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e01d      	b.n	8006aae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a72:	4b11      	ldr	r3, [pc, #68]	@ (8006ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f023 0207 	bic.w	r2, r3, #7
 8006a7a:	490f      	ldr	r1, [pc, #60]	@ (8006ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a82:	f7fa fecb 	bl	800181c <HAL_GetTick>
 8006a86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a88:	e009      	b.n	8006a9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a8a:	f7fa fec7 	bl	800181c <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a98:	d901      	bls.n	8006a9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e007      	b.n	8006aae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a9e:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aaa:	d1ee      	bne.n	8006a8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	58024800 	.word	0x58024800

08006abc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006ac0:	4b05      	ldr	r3, [pc, #20]	@ (8006ad8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4a04      	ldr	r2, [pc, #16]	@ (8006ad8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aca:	60d3      	str	r3, [r2, #12]
}
 8006acc:	bf00      	nop
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	58024800 	.word	0x58024800

08006adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08c      	sub	sp, #48	@ 0x30
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d102      	bne.n	8006af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f000 bc48 	b.w	8007380 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8088 	beq.w	8006c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006afe:	4b99      	ldr	r3, [pc, #612]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b08:	4b96      	ldr	r3, [pc, #600]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d007      	beq.n	8006b24 <HAL_RCC_OscConfig+0x48>
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	2b18      	cmp	r3, #24
 8006b18:	d111      	bne.n	8006b3e <HAL_RCC_OscConfig+0x62>
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d10c      	bne.n	8006b3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b24:	4b8f      	ldr	r3, [pc, #572]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d06d      	beq.n	8006c0c <HAL_RCC_OscConfig+0x130>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d169      	bne.n	8006c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f000 bc21 	b.w	8007380 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b46:	d106      	bne.n	8006b56 <HAL_RCC_OscConfig+0x7a>
 8006b48:	4b86      	ldr	r3, [pc, #536]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a85      	ldr	r2, [pc, #532]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	e02e      	b.n	8006bb4 <HAL_RCC_OscConfig+0xd8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10c      	bne.n	8006b78 <HAL_RCC_OscConfig+0x9c>
 8006b5e:	4b81      	ldr	r3, [pc, #516]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a80      	ldr	r2, [pc, #512]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	4b7e      	ldr	r3, [pc, #504]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a7d      	ldr	r2, [pc, #500]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	e01d      	b.n	8006bb4 <HAL_RCC_OscConfig+0xd8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b80:	d10c      	bne.n	8006b9c <HAL_RCC_OscConfig+0xc0>
 8006b82:	4b78      	ldr	r3, [pc, #480]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a77      	ldr	r2, [pc, #476]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	4b75      	ldr	r3, [pc, #468]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a74      	ldr	r2, [pc, #464]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e00b      	b.n	8006bb4 <HAL_RCC_OscConfig+0xd8>
 8006b9c:	4b71      	ldr	r3, [pc, #452]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a70      	ldr	r2, [pc, #448]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a6d      	ldr	r2, [pc, #436]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d013      	beq.n	8006be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbc:	f7fa fe2e 	bl	800181c <HAL_GetTick>
 8006bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bc4:	f7fa fe2a 	bl	800181c <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b64      	cmp	r3, #100	@ 0x64
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e3d4      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bd6:	4b63      	ldr	r3, [pc, #396]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0xe8>
 8006be2:	e014      	b.n	8006c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fa fe1a 	bl	800181c <HAL_GetTick>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bec:	f7fa fe16 	bl	800181c <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b64      	cmp	r3, #100	@ 0x64
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e3c0      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bfe:	4b59      	ldr	r3, [pc, #356]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x110>
 8006c0a:	e000      	b.n	8006c0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80ca 	beq.w	8006db0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1c:	4b51      	ldr	r3, [pc, #324]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c26:	4b4f      	ldr	r3, [pc, #316]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <HAL_RCC_OscConfig+0x166>
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	2b18      	cmp	r3, #24
 8006c36:	d156      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x20a>
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d151      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c42:	4b48      	ldr	r3, [pc, #288]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_RCC_OscConfig+0x17e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e392      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c5a:	4b42      	ldr	r3, [pc, #264]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 0219 	bic.w	r2, r3, #25
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	493f      	ldr	r1, [pc, #252]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fa fdd6 	bl	800181c <HAL_GetTick>
 8006c70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c74:	f7fa fdd2 	bl	800181c <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e37c      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c86:	4b37      	ldr	r3, [pc, #220]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f0      	beq.n	8006c74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c92:	f7fa fdf3 	bl	800187c <HAL_GetREVID>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d817      	bhi.n	8006cd0 <HAL_RCC_OscConfig+0x1f4>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b40      	cmp	r3, #64	@ 0x40
 8006ca6:	d108      	bne.n	8006cba <HAL_RCC_OscConfig+0x1de>
 8006ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cb8:	e07a      	b.n	8006db0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cba:	4b2a      	ldr	r3, [pc, #168]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	031b      	lsls	r3, r3, #12
 8006cc8:	4926      	ldr	r1, [pc, #152]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cce:	e06f      	b.n	8006db0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd0:	4b24      	ldr	r3, [pc, #144]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	4921      	ldr	r1, [pc, #132]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ce4:	e064      	b.n	8006db0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d047      	beq.n	8006d7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cee:	4b1d      	ldr	r3, [pc, #116]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f023 0219 	bic.w	r2, r3, #25
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	491a      	ldr	r1, [pc, #104]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fa fd8c 	bl	800181c <HAL_GetTick>
 8006d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d08:	f7fa fd88 	bl	800181c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e332      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f0      	beq.n	8006d08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d26:	f7fa fda9 	bl	800187c <HAL_GetREVID>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d819      	bhi.n	8006d68 <HAL_RCC_OscConfig+0x28c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d108      	bne.n	8006d4e <HAL_RCC_OscConfig+0x272>
 8006d3c:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d44:	4a07      	ldr	r2, [pc, #28]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d4a:	6053      	str	r3, [r2, #4]
 8006d4c:	e030      	b.n	8006db0 <HAL_RCC_OscConfig+0x2d4>
 8006d4e:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	031b      	lsls	r3, r3, #12
 8006d5c:	4901      	ldr	r1, [pc, #4]	@ (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	604b      	str	r3, [r1, #4]
 8006d62:	e025      	b.n	8006db0 <HAL_RCC_OscConfig+0x2d4>
 8006d64:	58024400 	.word	0x58024400
 8006d68:	4b9a      	ldr	r3, [pc, #616]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	4997      	ldr	r1, [pc, #604]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]
 8006d7c:	e018      	b.n	8006db0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d7e:	4b95      	ldr	r3, [pc, #596]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a94      	ldr	r2, [pc, #592]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006d84:	f023 0301 	bic.w	r3, r3, #1
 8006d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8a:	f7fa fd47 	bl	800181c <HAL_GetTick>
 8006d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d92:	f7fa fd43 	bl	800181c <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e2ed      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006da4:	4b8b      	ldr	r3, [pc, #556]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f0      	bne.n	8006d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80a9 	beq.w	8006f10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dbe:	4b85      	ldr	r3, [pc, #532]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dc8:	4b82      	ldr	r3, [pc, #520]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d007      	beq.n	8006de4 <HAL_RCC_OscConfig+0x308>
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b18      	cmp	r3, #24
 8006dd8:	d13a      	bne.n	8006e50 <HAL_RCC_OscConfig+0x374>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d135      	bne.n	8006e50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006de4:	4b7b      	ldr	r3, [pc, #492]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_OscConfig+0x320>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	2b80      	cmp	r3, #128	@ 0x80
 8006df6:	d001      	beq.n	8006dfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e2c1      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dfc:	f7fa fd3e 	bl	800187c <HAL_GetREVID>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d817      	bhi.n	8006e3a <HAL_RCC_OscConfig+0x35e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d108      	bne.n	8006e24 <HAL_RCC_OscConfig+0x348>
 8006e12:	4b70      	ldr	r3, [pc, #448]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e22:	e075      	b.n	8006f10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e24:	4b6b      	ldr	r3, [pc, #428]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	069b      	lsls	r3, r3, #26
 8006e32:	4968      	ldr	r1, [pc, #416]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e38:	e06a      	b.n	8006f10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e3a:	4b66      	ldr	r3, [pc, #408]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	061b      	lsls	r3, r3, #24
 8006e48:	4962      	ldr	r1, [pc, #392]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e4e:	e05f      	b.n	8006f10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d042      	beq.n	8006ede <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e58:	4b5e      	ldr	r3, [pc, #376]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fa fcda 	bl	800181c <HAL_GetTick>
 8006e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e6c:	f7fa fcd6 	bl	800181c <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e280      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e7e:	4b55      	ldr	r3, [pc, #340]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e8a:	f7fa fcf7 	bl	800187c <HAL_GetREVID>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d817      	bhi.n	8006ec8 <HAL_RCC_OscConfig+0x3ec>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d108      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x3d6>
 8006ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006eaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eae:	6053      	str	r3, [r2, #4]
 8006eb0:	e02e      	b.n	8006f10 <HAL_RCC_OscConfig+0x434>
 8006eb2:	4b48      	ldr	r3, [pc, #288]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	069b      	lsls	r3, r3, #26
 8006ec0:	4944      	ldr	r1, [pc, #272]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	604b      	str	r3, [r1, #4]
 8006ec6:	e023      	b.n	8006f10 <HAL_RCC_OscConfig+0x434>
 8006ec8:	4b42      	ldr	r3, [pc, #264]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	061b      	lsls	r3, r3, #24
 8006ed6:	493f      	ldr	r1, [pc, #252]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60cb      	str	r3, [r1, #12]
 8006edc:	e018      	b.n	8006f10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ede:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eea:	f7fa fc97 	bl	800181c <HAL_GetTick>
 8006eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ef2:	f7fa fc93 	bl	800181c <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e23d      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f04:	4b33      	ldr	r3, [pc, #204]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f0      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d036      	beq.n	8006f8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d019      	beq.n	8006f58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f24:	4b2b      	ldr	r3, [pc, #172]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f28:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f30:	f7fa fc74 	bl	800181c <HAL_GetTick>
 8006f34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f38:	f7fa fc70 	bl	800181c <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e21a      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f4a:	4b22      	ldr	r3, [pc, #136]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x45c>
 8006f56:	e018      	b.n	8006f8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f58:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f64:	f7fa fc5a 	bl	800181c <HAL_GetTick>
 8006f68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f6c:	f7fa fc56 	bl	800181c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e200      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f7e:	4b15      	ldr	r3, [pc, #84]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f0      	bne.n	8006f6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d039      	beq.n	800700a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01c      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006fa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006fa8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006faa:	f7fa fc37 	bl	800181c <HAL_GetTick>
 8006fae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fb2:	f7fa fc33 	bl	800181c <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e1dd      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fc4:	4b03      	ldr	r3, [pc, #12]	@ (8006fd4 <HAL_RCC_OscConfig+0x4f8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x4d6>
 8006fd0:	e01b      	b.n	800700a <HAL_RCC_OscConfig+0x52e>
 8006fd2:	bf00      	nop
 8006fd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fd8:	4b9b      	ldr	r3, [pc, #620]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a9a      	ldr	r2, [pc, #616]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8006fde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fe4:	f7fa fc1a 	bl	800181c <HAL_GetTick>
 8006fe8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fec:	f7fa fc16 	bl	800181c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e1c0      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ffe:	4b92      	ldr	r3, [pc, #584]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8081 	beq.w	800711a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007018:	4b8c      	ldr	r3, [pc, #560]	@ (800724c <HAL_RCC_OscConfig+0x770>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a8b      	ldr	r2, [pc, #556]	@ (800724c <HAL_RCC_OscConfig+0x770>)
 800701e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007024:	f7fa fbfa 	bl	800181c <HAL_GetTick>
 8007028:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800702c:	f7fa fbf6 	bl	800181c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b64      	cmp	r3, #100	@ 0x64
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e1a0      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800703e:	4b83      	ldr	r3, [pc, #524]	@ (800724c <HAL_RCC_OscConfig+0x770>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d106      	bne.n	8007060 <HAL_RCC_OscConfig+0x584>
 8007052:	4b7d      	ldr	r3, [pc, #500]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007056:	4a7c      	ldr	r2, [pc, #496]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	6713      	str	r3, [r2, #112]	@ 0x70
 800705e:	e02d      	b.n	80070bc <HAL_RCC_OscConfig+0x5e0>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10c      	bne.n	8007082 <HAL_RCC_OscConfig+0x5a6>
 8007068:	4b77      	ldr	r3, [pc, #476]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800706a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706c:	4a76      	ldr	r2, [pc, #472]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800706e:	f023 0301 	bic.w	r3, r3, #1
 8007072:	6713      	str	r3, [r2, #112]	@ 0x70
 8007074:	4b74      	ldr	r3, [pc, #464]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007078:	4a73      	ldr	r2, [pc, #460]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800707a:	f023 0304 	bic.w	r3, r3, #4
 800707e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007080:	e01c      	b.n	80070bc <HAL_RCC_OscConfig+0x5e0>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b05      	cmp	r3, #5
 8007088:	d10c      	bne.n	80070a4 <HAL_RCC_OscConfig+0x5c8>
 800708a:	4b6f      	ldr	r3, [pc, #444]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708e:	4a6e      	ldr	r2, [pc, #440]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007090:	f043 0304 	orr.w	r3, r3, #4
 8007094:	6713      	str	r3, [r2, #112]	@ 0x70
 8007096:	4b6c      	ldr	r3, [pc, #432]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709a:	4a6b      	ldr	r2, [pc, #428]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800709c:	f043 0301 	orr.w	r3, r3, #1
 80070a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a2:	e00b      	b.n	80070bc <HAL_RCC_OscConfig+0x5e0>
 80070a4:	4b68      	ldr	r3, [pc, #416]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80070a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a8:	4a67      	ldr	r2, [pc, #412]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80070b0:	4b65      	ldr	r3, [pc, #404]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80070b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b4:	4a64      	ldr	r2, [pc, #400]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80070b6:	f023 0304 	bic.w	r3, r3, #4
 80070ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d015      	beq.n	80070f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c4:	f7fa fbaa 	bl	800181c <HAL_GetTick>
 80070c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070ca:	e00a      	b.n	80070e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070cc:	f7fa fba6 	bl	800181c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070da:	4293      	cmp	r3, r2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e14e      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e2:	4b59      	ldr	r3, [pc, #356]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0ee      	beq.n	80070cc <HAL_RCC_OscConfig+0x5f0>
 80070ee:	e014      	b.n	800711a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f0:	f7fa fb94 	bl	800181c <HAL_GetTick>
 80070f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070f6:	e00a      	b.n	800710e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f8:	f7fa fb90 	bl	800181c <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007106:	4293      	cmp	r3, r2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e138      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800710e:	4b4e      	ldr	r3, [pc, #312]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1ee      	bne.n	80070f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 812d 	beq.w	800737e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007124:	4b48      	ldr	r3, [pc, #288]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800712c:	2b18      	cmp	r3, #24
 800712e:	f000 80bd 	beq.w	80072ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	2b02      	cmp	r3, #2
 8007138:	f040 809e 	bne.w	8007278 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713c:	4b42      	ldr	r3, [pc, #264]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a41      	ldr	r2, [pc, #260]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fa fb68 	bl	800181c <HAL_GetTick>
 800714c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007150:	f7fa fb64 	bl	800181c <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e10e      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007162:	4b39      	ldr	r3, [pc, #228]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800716e:	4b36      	ldr	r3, [pc, #216]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007172:	4b37      	ldr	r3, [pc, #220]	@ (8007250 <HAL_RCC_OscConfig+0x774>)
 8007174:	4013      	ands	r3, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800717e:	0112      	lsls	r2, r2, #4
 8007180:	430a      	orrs	r2, r1
 8007182:	4931      	ldr	r1, [pc, #196]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007184:	4313      	orrs	r3, r2
 8007186:	628b      	str	r3, [r1, #40]	@ 0x28
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718c:	3b01      	subs	r3, #1
 800718e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007196:	3b01      	subs	r3, #1
 8007198:	025b      	lsls	r3, r3, #9
 800719a:	b29b      	uxth	r3, r3
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	3b01      	subs	r3, #1
 80071a4:	041b      	lsls	r3, r3, #16
 80071a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b0:	3b01      	subs	r3, #1
 80071b2:	061b      	lsls	r3, r3, #24
 80071b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071b8:	4923      	ldr	r1, [pc, #140]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c2:	4a21      	ldr	r2, [pc, #132]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ce:	4b21      	ldr	r3, [pc, #132]	@ (8007254 <HAL_RCC_OscConfig+0x778>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80071d6:	00d2      	lsls	r2, r2, #3
 80071d8:	491b      	ldr	r1, [pc, #108]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071de:	4b1a      	ldr	r3, [pc, #104]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	f023 020c 	bic.w	r2, r3, #12
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	4917      	ldr	r1, [pc, #92]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071f0:	4b15      	ldr	r3, [pc, #84]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	f023 0202 	bic.w	r2, r3, #2
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fc:	4912      	ldr	r1, [pc, #72]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007202:	4b11      	ldr	r3, [pc, #68]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007206:	4a10      	ldr	r2, [pc, #64]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800720e:	4b0e      	ldr	r3, [pc, #56]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	4a0d      	ldr	r2, [pc, #52]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800721a:	4b0b      	ldr	r3, [pc, #44]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	4a0a      	ldr	r2, [pc, #40]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007226:	4b08      	ldr	r3, [pc, #32]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	4a07      	ldr	r2, [pc, #28]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007232:	4b05      	ldr	r3, [pc, #20]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a04      	ldr	r2, [pc, #16]	@ (8007248 <HAL_RCC_OscConfig+0x76c>)
 8007238:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800723c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723e:	f7fa faed 	bl	800181c <HAL_GetTick>
 8007242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007244:	e011      	b.n	800726a <HAL_RCC_OscConfig+0x78e>
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
 800724c:	58024800 	.word	0x58024800
 8007250:	fffffc0c 	.word	0xfffffc0c
 8007254:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007258:	f7fa fae0 	bl	800181c <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e08a      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800726a:	4b47      	ldr	r3, [pc, #284]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f0      	beq.n	8007258 <HAL_RCC_OscConfig+0x77c>
 8007276:	e082      	b.n	800737e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007278:	4b43      	ldr	r3, [pc, #268]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a42      	ldr	r2, [pc, #264]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 800727e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fa faca 	bl	800181c <HAL_GetTick>
 8007288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800728c:	f7fa fac6 	bl	800181c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e070      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800729e:	4b3a      	ldr	r3, [pc, #232]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_OscConfig+0x7b0>
 80072aa:	e068      	b.n	800737e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072ac:	4b36      	ldr	r3, [pc, #216]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072b2:	4b35      	ldr	r3, [pc, #212]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d031      	beq.n	8007324 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f003 0203 	and.w	r2, r3, #3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d12a      	bne.n	8007324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	091b      	lsrs	r3, r3, #4
 80072d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d122      	bne.n	8007324 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d11a      	bne.n	8007324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	0a5b      	lsrs	r3, r3, #9
 80072f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d111      	bne.n	8007324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800730e:	429a      	cmp	r2, r3
 8007310:	d108      	bne.n	8007324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e02b      	b.n	8007380 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007328:	4b17      	ldr	r3, [pc, #92]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 800732a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732c:	08db      	lsrs	r3, r3, #3
 800732e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007332:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	429a      	cmp	r2, r3
 800733c:	d01f      	beq.n	800737e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800733e:	4b12      	ldr	r3, [pc, #72]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	4a11      	ldr	r2, [pc, #68]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800734a:	f7fa fa67 	bl	800181c <HAL_GetTick>
 800734e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007350:	bf00      	nop
 8007352:	f7fa fa63 	bl	800181c <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	4293      	cmp	r3, r2
 800735c:	d0f9      	beq.n	8007352 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800735e:	4b0a      	ldr	r3, [pc, #40]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 8007360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007362:	4b0a      	ldr	r3, [pc, #40]	@ (800738c <HAL_RCC_OscConfig+0x8b0>)
 8007364:	4013      	ands	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800736a:	00d2      	lsls	r2, r2, #3
 800736c:	4906      	ldr	r1, [pc, #24]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 800736e:	4313      	orrs	r3, r2
 8007370:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007372:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 8007374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007376:	4a04      	ldr	r2, [pc, #16]	@ (8007388 <HAL_RCC_OscConfig+0x8ac>)
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3730      	adds	r7, #48	@ 0x30
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	58024400 	.word	0x58024400
 800738c:	ffff0007 	.word	0xffff0007

08007390 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e19c      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073a4:	4b8a      	ldr	r3, [pc, #552]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d910      	bls.n	80073d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b2:	4b87      	ldr	r3, [pc, #540]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 020f 	bic.w	r2, r3, #15
 80073ba:	4985      	ldr	r1, [pc, #532]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	4313      	orrs	r3, r2
 80073c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c2:	4b83      	ldr	r3, [pc, #524]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d001      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e184      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	4b7b      	ldr	r3, [pc, #492]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d908      	bls.n	8007402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073f0:	4b78      	ldr	r3, [pc, #480]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	4975      	ldr	r1, [pc, #468]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d010      	beq.n	8007430 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	4b70      	ldr	r3, [pc, #448]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800741a:	429a      	cmp	r2, r3
 800741c:	d908      	bls.n	8007430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800741e:	4b6d      	ldr	r3, [pc, #436]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	496a      	ldr	r1, [pc, #424]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800742c:	4313      	orrs	r3, r2
 800742e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	4b64      	ldr	r3, [pc, #400]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007448:	429a      	cmp	r2, r3
 800744a:	d908      	bls.n	800745e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800744c:	4b61      	ldr	r3, [pc, #388]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	495e      	ldr	r1, [pc, #376]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800745a:	4313      	orrs	r3, r2
 800745c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d010      	beq.n	800748c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	4b59      	ldr	r3, [pc, #356]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007476:	429a      	cmp	r2, r3
 8007478:	d908      	bls.n	800748c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800747a:	4b56      	ldr	r3, [pc, #344]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	4953      	ldr	r1, [pc, #332]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007488:	4313      	orrs	r3, r2
 800748a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d010      	beq.n	80074ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	4b4d      	ldr	r3, [pc, #308]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d908      	bls.n	80074ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a8:	4b4a      	ldr	r3, [pc, #296]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f023 020f 	bic.w	r2, r3, #15
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4947      	ldr	r1, [pc, #284]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d055      	beq.n	8007572 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074c6:	4b43      	ldr	r3, [pc, #268]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4940      	ldr	r1, [pc, #256]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d107      	bne.n	80074f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074e0:	4b3c      	ldr	r3, [pc, #240]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d121      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0f6      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d107      	bne.n	8007508 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074f8:	4b36      	ldr	r3, [pc, #216]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d115      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0ea      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d107      	bne.n	8007520 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007510:	4b30      	ldr	r3, [pc, #192]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e0de      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007520:	4b2c      	ldr	r3, [pc, #176]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0d6      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007530:	4b28      	ldr	r3, [pc, #160]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f023 0207 	bic.w	r2, r3, #7
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4925      	ldr	r1, [pc, #148]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800753e:	4313      	orrs	r3, r2
 8007540:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007542:	f7fa f96b 	bl	800181c <HAL_GetTick>
 8007546:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007548:	e00a      	b.n	8007560 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800754a:	f7fa f967 	bl	800181c <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007558:	4293      	cmp	r3, r2
 800755a:	d901      	bls.n	8007560 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e0be      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007560:	4b1c      	ldr	r3, [pc, #112]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	429a      	cmp	r2, r3
 8007570:	d1eb      	bne.n	800754a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d010      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	4b14      	ldr	r3, [pc, #80]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	429a      	cmp	r2, r3
 800758c:	d208      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800758e:	4b11      	ldr	r3, [pc, #68]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	f023 020f 	bic.w	r2, r3, #15
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	490e      	ldr	r1, [pc, #56]	@ (80075d4 <HAL_RCC_ClockConfig+0x244>)
 800759c:	4313      	orrs	r3, r2
 800759e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075a0:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d214      	bcs.n	80075d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ae:	4b08      	ldr	r3, [pc, #32]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 020f 	bic.w	r2, r3, #15
 80075b6:	4906      	ldr	r1, [pc, #24]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075be:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <HAL_RCC_ClockConfig+0x240>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d005      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e086      	b.n	80076de <HAL_RCC_ClockConfig+0x34e>
 80075d0:	52002000 	.word	0x52002000
 80075d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d010      	beq.n	8007606 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	4b3f      	ldr	r3, [pc, #252]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d208      	bcs.n	8007606 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075f4:	4b3c      	ldr	r3, [pc, #240]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	4939      	ldr	r1, [pc, #228]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007602:	4313      	orrs	r3, r2
 8007604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d010      	beq.n	8007634 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695a      	ldr	r2, [r3, #20]
 8007616:	4b34      	ldr	r3, [pc, #208]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800761e:	429a      	cmp	r2, r3
 8007620:	d208      	bcs.n	8007634 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007622:	4b31      	ldr	r3, [pc, #196]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	492e      	ldr	r1, [pc, #184]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007630:	4313      	orrs	r3, r2
 8007632:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	d010      	beq.n	8007662 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	4b28      	ldr	r3, [pc, #160]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800764c:	429a      	cmp	r2, r3
 800764e:	d208      	bcs.n	8007662 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007650:	4b25      	ldr	r3, [pc, #148]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	4922      	ldr	r1, [pc, #136]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 800765e:	4313      	orrs	r3, r2
 8007660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d010      	beq.n	8007690 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	4b1d      	ldr	r3, [pc, #116]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800767a:	429a      	cmp	r2, r3
 800767c:	d208      	bcs.n	8007690 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800767e:	4b1a      	ldr	r3, [pc, #104]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	4917      	ldr	r1, [pc, #92]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 800768c:	4313      	orrs	r3, r2
 800768e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007690:	f000 f834 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b14      	ldr	r3, [pc, #80]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	4912      	ldr	r1, [pc, #72]	@ (80076ec <HAL_RCC_ClockConfig+0x35c>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076ae:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <HAL_RCC_ClockConfig+0x358>)
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	4a0d      	ldr	r2, [pc, #52]	@ (80076ec <HAL_RCC_ClockConfig+0x35c>)
 80076b8:	5cd3      	ldrb	r3, [r2, r3]
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	4a0a      	ldr	r2, [pc, #40]	@ (80076f0 <HAL_RCC_ClockConfig+0x360>)
 80076c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076c8:	4a0a      	ldr	r2, [pc, #40]	@ (80076f4 <HAL_RCC_ClockConfig+0x364>)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80076ce:	4b0a      	ldr	r3, [pc, #40]	@ (80076f8 <HAL_RCC_ClockConfig+0x368>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7f9 fd58 	bl	8001188 <HAL_InitTick>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400
 80076ec:	0800fe70 	.word	0x0800fe70
 80076f0:	24000008 	.word	0x24000008
 80076f4:	24000004 	.word	0x24000004
 80076f8:	2400000c 	.word	0x2400000c

080076fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	@ 0x24
 8007700:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007702:	4bb3      	ldr	r3, [pc, #716]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800770a:	2b18      	cmp	r3, #24
 800770c:	f200 8155 	bhi.w	80079ba <HAL_RCC_GetSysClockFreq+0x2be>
 8007710:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	0800777d 	.word	0x0800777d
 800771c:	080079bb 	.word	0x080079bb
 8007720:	080079bb 	.word	0x080079bb
 8007724:	080079bb 	.word	0x080079bb
 8007728:	080079bb 	.word	0x080079bb
 800772c:	080079bb 	.word	0x080079bb
 8007730:	080079bb 	.word	0x080079bb
 8007734:	080079bb 	.word	0x080079bb
 8007738:	080077a3 	.word	0x080077a3
 800773c:	080079bb 	.word	0x080079bb
 8007740:	080079bb 	.word	0x080079bb
 8007744:	080079bb 	.word	0x080079bb
 8007748:	080079bb 	.word	0x080079bb
 800774c:	080079bb 	.word	0x080079bb
 8007750:	080079bb 	.word	0x080079bb
 8007754:	080079bb 	.word	0x080079bb
 8007758:	080077a9 	.word	0x080077a9
 800775c:	080079bb 	.word	0x080079bb
 8007760:	080079bb 	.word	0x080079bb
 8007764:	080079bb 	.word	0x080079bb
 8007768:	080079bb 	.word	0x080079bb
 800776c:	080079bb 	.word	0x080079bb
 8007770:	080079bb 	.word	0x080079bb
 8007774:	080079bb 	.word	0x080079bb
 8007778:	080077af 	.word	0x080077af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800777c:	4b94      	ldr	r3, [pc, #592]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007788:	4b91      	ldr	r3, [pc, #580]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	08db      	lsrs	r3, r3, #3
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	4a90      	ldr	r2, [pc, #576]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
 8007798:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800779a:	e111      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800779c:	4b8d      	ldr	r3, [pc, #564]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800779e:	61bb      	str	r3, [r7, #24]
      break;
 80077a0:	e10e      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80077a2:	4b8d      	ldr	r3, [pc, #564]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077a4:	61bb      	str	r3, [r7, #24]
      break;
 80077a6:	e10b      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80077a8:	4b8c      	ldr	r3, [pc, #560]	@ (80079dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077aa:	61bb      	str	r3, [r7, #24]
      break;
 80077ac:	e108      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077ae:	4b88      	ldr	r3, [pc, #544]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80077b8:	4b85      	ldr	r3, [pc, #532]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077c4:	4b82      	ldr	r3, [pc, #520]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077ce:	4b80      	ldr	r3, [pc, #512]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d2:	08db      	lsrs	r3, r3, #3
 80077d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	fb02 f303 	mul.w	r3, r2, r3
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80e1 	beq.w	80079b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	f000 8083 	beq.w	8007900 <HAL_RCC_GetSysClockFreq+0x204>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f200 80a1 	bhi.w	8007944 <HAL_RCC_GetSysClockFreq+0x248>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_RCC_GetSysClockFreq+0x114>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d056      	beq.n	80078bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800780e:	e099      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007810:	4b6f      	ldr	r3, [pc, #444]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d02d      	beq.n	8007878 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800781c:	4b6c      	ldr	r3, [pc, #432]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	08db      	lsrs	r3, r3, #3
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	4a6b      	ldr	r2, [pc, #428]	@ (80079d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007828:	fa22 f303 	lsr.w	r3, r2, r3
 800782c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b62      	ldr	r3, [pc, #392]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a02 	vldr	s12, [r7, #8]
 800785a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007876:	e087      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80079e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788a:	4b51      	ldr	r3, [pc, #324]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	ed97 6a02 	vldr	s12, [r7, #8]
 800789e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ba:	e065      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80079e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ce:	4b40      	ldr	r3, [pc, #256]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078de:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078fe:	e043      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80079ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800790e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007912:	4b2f      	ldr	r3, [pc, #188]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007922:	ed97 6a02 	vldr	s12, [r7, #8]
 8007926:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800792a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007942:	e021      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80079e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007956:	4b1e      	ldr	r3, [pc, #120]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007966:	ed97 6a02 	vldr	s12, [r7, #8]
 800796a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80079e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800796e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800797a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007986:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007988:	4b11      	ldr	r3, [pc, #68]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798c:	0a5b      	lsrs	r3, r3, #9
 800798e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007992:	3301      	adds	r3, #1
 8007994:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	ee17 3a90 	vmov	r3, s15
 80079b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80079b2:	e005      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61bb      	str	r3, [r7, #24]
      break;
 80079b8:	e002      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80079ba:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079bc:	61bb      	str	r3, [r7, #24]
      break;
 80079be:	bf00      	nop
  }

  return sysclockfreq;
 80079c0:	69bb      	ldr	r3, [r7, #24]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3724      	adds	r7, #36	@ 0x24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	58024400 	.word	0x58024400
 80079d4:	03d09000 	.word	0x03d09000
 80079d8:	003d0900 	.word	0x003d0900
 80079dc:	007a1200 	.word	0x007a1200
 80079e0:	46000000 	.word	0x46000000
 80079e4:	4c742400 	.word	0x4c742400
 80079e8:	4a742400 	.word	0x4a742400
 80079ec:	4af42400 	.word	0x4af42400

080079f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079f6:	f7ff fe81 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 80079fa:	4602      	mov	r2, r0
 80079fc:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x50>)
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	0a1b      	lsrs	r3, r3, #8
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	490f      	ldr	r1, [pc, #60]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a08:	5ccb      	ldrb	r3, [r1, r3]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a14:	4b0a      	ldr	r3, [pc, #40]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	4a09      	ldr	r2, [pc, #36]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a1e:	5cd3      	ldrb	r3, [r2, r3]
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2a:	4a07      	ldr	r2, [pc, #28]	@ (8007a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a2e:	4a07      	ldr	r2, [pc, #28]	@ (8007a4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a34:	4b04      	ldr	r3, [pc, #16]	@ (8007a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a36:	681b      	ldr	r3, [r3, #0]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58024400 	.word	0x58024400
 8007a44:	0800fe70 	.word	0x0800fe70
 8007a48:	24000008 	.word	0x24000008
 8007a4c:	24000004 	.word	0x24000004

08007a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a54:	f7ff ffcc 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	4904      	ldr	r1, [pc, #16]	@ (8007a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a66:	5ccb      	ldrb	r3, [r1, r3]
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	58024400 	.word	0x58024400
 8007a78:	0800fe70 	.word	0x0800fe70

08007a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a80:	f7ff ffb6 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8007a84:	4602      	mov	r2, r0
 8007a86:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	0a1b      	lsrs	r3, r3, #8
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	4904      	ldr	r1, [pc, #16]	@ (8007aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a92:	5ccb      	ldrb	r3, [r1, r3]
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	58024400 	.word	0x58024400
 8007aa4:	0800fe70 	.word	0x0800fe70

08007aa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	223f      	movs	r2, #63	@ 0x3f
 8007ab6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b24 <HAL_RCC_GetClockConfig+0x7c>)
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f003 0207 	and.w	r2, r3, #7
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007ac4:	4b17      	ldr	r3, [pc, #92]	@ (8007b24 <HAL_RCC_GetClockConfig+0x7c>)
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ad0:	4b14      	ldr	r3, [pc, #80]	@ (8007b24 <HAL_RCC_GetClockConfig+0x7c>)
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007adc:	4b11      	ldr	r3, [pc, #68]	@ (8007b24 <HAL_RCC_GetClockConfig+0x7c>)
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b24 <HAL_RCC_GetClockConfig+0x7c>)
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007af4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <HAL_RCC_GetClockConfig+0x7c>)
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007b00:	4b08      	ldr	r3, [pc, #32]	@ (8007b24 <HAL_RCC_GetClockConfig+0x7c>)
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b0c:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <HAL_RCC_GetClockConfig+0x80>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 020f 	and.w	r2, r3, #15
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	601a      	str	r2, [r3, #0]
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	58024400 	.word	0x58024400
 8007b28:	52002000 	.word	0x52002000

08007b2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b30:	b0ca      	sub	sp, #296	@ 0x128
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007b50:	2500      	movs	r5, #0
 8007b52:	ea54 0305 	orrs.w	r3, r4, r5
 8007b56:	d049      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b62:	d02f      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007b64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b68:	d828      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b6e:	d01a      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007b70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b74:	d822      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b7e:	d007      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b80:	e01c      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b82:	4bb8      	ldr	r3, [pc, #736]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	4ab7      	ldr	r2, [pc, #732]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b8e:	e01a      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	3308      	adds	r3, #8
 8007b96:	2102      	movs	r1, #2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f002 fb61 	bl	800a260 <RCCEx_PLL2_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ba4:	e00f      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007baa:	3328      	adds	r3, #40	@ 0x28
 8007bac:	2102      	movs	r1, #2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f002 fc08 	bl	800a3c4 <RCCEx_PLL3_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007bba:	e004      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007bce:	4ba5      	ldr	r3, [pc, #660]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bdc:	4aa1      	ldr	r2, [pc, #644]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007be2:	e003      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007bf8:	f04f 0900 	mov.w	r9, #0
 8007bfc:	ea58 0309 	orrs.w	r3, r8, r9
 8007c00:	d047      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d82a      	bhi.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c29 	.word	0x08007c29
 8007c18:	08007c37 	.word	0x08007c37
 8007c1c:	08007c4d 	.word	0x08007c4d
 8007c20:	08007c6b 	.word	0x08007c6b
 8007c24:	08007c6b 	.word	0x08007c6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c28:	4b8e      	ldr	r3, [pc, #568]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	4a8d      	ldr	r2, [pc, #564]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c34:	e01a      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f002 fb0e 	bl	800a260 <RCCEx_PLL2_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c4a:	e00f      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	3328      	adds	r3, #40	@ 0x28
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f002 fbb5 	bl	800a3c4 <RCCEx_PLL3_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c60:	e004      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c68:	e000      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c74:	4b7b      	ldr	r3, [pc, #492]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	f023 0107 	bic.w	r1, r3, #7
 8007c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c82:	4a78      	ldr	r2, [pc, #480]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c84:	430b      	orrs	r3, r1
 8007c86:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c88:	e003      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007c9e:	f04f 0b00 	mov.w	fp, #0
 8007ca2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ca6:	d04c      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cb2:	d030      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cb8:	d829      	bhi.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cba:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cbc:	d02d      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cc0:	d825      	bhi.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cc2:	2b80      	cmp	r3, #128	@ 0x80
 8007cc4:	d018      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007cc6:	2b80      	cmp	r3, #128	@ 0x80
 8007cc8:	d821      	bhi.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007cce:	2b40      	cmp	r3, #64	@ 0x40
 8007cd0:	d007      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007cd2:	e01c      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd4:	4b63      	ldr	r3, [pc, #396]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	4a62      	ldr	r2, [pc, #392]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ce0:	e01c      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f002 fab8 	bl	800a260 <RCCEx_PLL2_Config>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007cf6:	e011      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfc:	3328      	adds	r3, #40	@ 0x28
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 fb5f 	bl	800a3c4 <RCCEx_PLL3_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007d0c:	e006      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d14:	e002      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d24:	4b4f      	ldr	r3, [pc, #316]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d32:	4a4c      	ldr	r2, [pc, #304]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d38:	e003      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007d4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007d52:	2300      	movs	r3, #0
 8007d54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007d58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	d053      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d6e:	d035      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007d70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d74:	d82e      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d7a:	d031      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007d7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d80:	d828      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d86:	d01a      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d8c:	d822      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007d92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d96:	d007      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007d98:	e01c      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9a:	4b32      	ldr	r3, [pc, #200]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9e:	4a31      	ldr	r2, [pc, #196]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007da6:	e01c      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dac:	3308      	adds	r3, #8
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f002 fa55 	bl	800a260 <RCCEx_PLL2_Config>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007dbc:	e011      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc2:	3328      	adds	r3, #40	@ 0x28
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f002 fafc 	bl	800a3c4 <RCCEx_PLL3_Config>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dd2:	e006      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dda:	e002      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007dea:	4b1e      	ldr	r3, [pc, #120]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dfc:	430b      	orrs	r3, r1
 8007dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e00:	e003      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007e16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007e20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e24:	460b      	mov	r3, r1
 8007e26:	4313      	orrs	r3, r2
 8007e28:	d056      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e36:	d038      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e3c:	d831      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e42:	d034      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007e44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e48:	d82b      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e4e:	d01d      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007e50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e54:	d825      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d006      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e5e:	d00a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e60:	e01f      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e68:	4ba2      	ldr	r3, [pc, #648]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6c:	4aa1      	ldr	r2, [pc, #644]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e74:	e01c      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f002 f9ee 	bl	800a260 <RCCEx_PLL2_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007e8a:	e011      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e90:	3328      	adds	r3, #40	@ 0x28
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 fa95 	bl	800a3c4 <RCCEx_PLL3_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ea0:	e006      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ea8:	e002      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007eb8:	4b8e      	ldr	r3, [pc, #568]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ebc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ec8:	4a8a      	ldr	r2, [pc, #552]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ece:	e003      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007ee4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007eee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d03a      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efe:	2b30      	cmp	r3, #48	@ 0x30
 8007f00:	d01f      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007f02:	2b30      	cmp	r3, #48	@ 0x30
 8007f04:	d819      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d00c      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d815      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d019      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007f12:	2b10      	cmp	r3, #16
 8007f14:	d111      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f16:	4b77      	ldr	r3, [pc, #476]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	4a76      	ldr	r2, [pc, #472]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f22:	e011      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f28:	3308      	adds	r3, #8
 8007f2a:	2102      	movs	r1, #2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f002 f997 	bl	800a260 <RCCEx_PLL2_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f38:	e006      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f40:	e002      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f42:	bf00      	nop
 8007f44:	e000      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f50:	4b68      	ldr	r3, [pc, #416]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5e:	4a65      	ldr	r2, [pc, #404]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f64:	e003      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007f7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	d051      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f98:	d035      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f9e:	d82e      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fa4:	d031      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007fa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007faa:	d828      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb0:	d01a      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb6:	d822      	bhi.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc0:	d007      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007fc2:	e01c      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fd0:	e01c      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f002 f940 	bl	800a260 <RCCEx_PLL2_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fe6:	e011      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fec:	3328      	adds	r3, #40	@ 0x28
 8007fee:	2100      	movs	r1, #0
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f002 f9e7 	bl	800a3c4 <RCCEx_PLL3_Config>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ffc:	e006      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008004:	e002      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008006:	bf00      	nop
 8008008:	e000      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800800a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008014:	4b37      	ldr	r3, [pc, #220]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008018:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008022:	4a34      	ldr	r2, [pc, #208]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008024:	430b      	orrs	r3, r1
 8008026:	6513      	str	r3, [r2, #80]	@ 0x50
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800803e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008042:	2300      	movs	r3, #0
 8008044:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008048:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800804c:	460b      	mov	r3, r1
 800804e:	4313      	orrs	r3, r2
 8008050:	d056      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800805c:	d033      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800805e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008062:	d82c      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008064:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008068:	d02f      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800806a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800806e:	d826      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008070:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008074:	d02b      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008076:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800807a:	d820      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800807c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008080:	d012      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008082:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008086:	d81a      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d022      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008090:	d115      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008096:	3308      	adds	r3, #8
 8008098:	2101      	movs	r1, #1
 800809a:	4618      	mov	r0, r3
 800809c:	f002 f8e0 	bl	800a260 <RCCEx_PLL2_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080a6:	e015      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ac:	3328      	adds	r3, #40	@ 0x28
 80080ae:	2101      	movs	r1, #1
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 f987 	bl	800a3c4 <RCCEx_PLL3_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80080bc:	e00a      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080c4:	e006      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080c6:	bf00      	nop
 80080c8:	e004      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080ca:	bf00      	nop
 80080cc:	e002      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080ce:	bf00      	nop
 80080d0:	e000      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10d      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080dc:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ea:	4a02      	ldr	r2, [pc, #8]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80080f0:	e006      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80080f2:	bf00      	nop
 80080f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800810c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008110:	2300      	movs	r3, #0
 8008112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008116:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800811a:	460b      	mov	r3, r1
 800811c:	4313      	orrs	r3, r2
 800811e:	d055      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008128:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800812c:	d033      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800812e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008132:	d82c      	bhi.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008138:	d02f      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800813a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813e:	d826      	bhi.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008140:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008144:	d02b      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008146:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800814a:	d820      	bhi.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008150:	d012      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008156:	d81a      	bhi.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d022      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800815c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008160:	d115      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	3308      	adds	r3, #8
 8008168:	2101      	movs	r1, #1
 800816a:	4618      	mov	r0, r3
 800816c:	f002 f878 	bl	800a260 <RCCEx_PLL2_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008176:	e015      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817c:	3328      	adds	r3, #40	@ 0x28
 800817e:	2101      	movs	r1, #1
 8008180:	4618      	mov	r0, r3
 8008182:	f002 f91f 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800818c:	e00a      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008194:	e006      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008196:	bf00      	nop
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80081a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081ac:	4ba3      	ldr	r3, [pc, #652]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80081b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081bc:	4a9f      	ldr	r2, [pc, #636]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081be:	430b      	orrs	r3, r1
 80081c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80081c2:	e003      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80081d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081dc:	2300      	movs	r3, #0
 80081de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80081e6:	460b      	mov	r3, r1
 80081e8:	4313      	orrs	r3, r2
 80081ea:	d037      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f6:	d00e      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80081f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081fc:	d816      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d018      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008206:	d111      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008208:	4b8c      	ldr	r3, [pc, #560]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4a8b      	ldr	r2, [pc, #556]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800820e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008214:	e00f      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821a:	3308      	adds	r3, #8
 800821c:	2101      	movs	r1, #1
 800821e:	4618      	mov	r0, r3
 8008220:	f002 f81e 	bl	800a260 <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800822a:	e004      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008232:	e000      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800823e:	4b7f      	ldr	r3, [pc, #508]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008242:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824c:	4a7b      	ldr	r2, [pc, #492]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824e:	430b      	orrs	r3, r1
 8008250:	6513      	str	r3, [r2, #80]	@ 0x50
 8008252:	e003      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800825c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008272:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008276:	460b      	mov	r3, r1
 8008278:	4313      	orrs	r3, r2
 800827a:	d039      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008282:	2b03      	cmp	r3, #3
 8008284:	d81c      	bhi.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008286:	a201      	add	r2, pc, #4	@ (adr r2, 800828c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082c9 	.word	0x080082c9
 8008290:	0800829d 	.word	0x0800829d
 8008294:	080082ab 	.word	0x080082ab
 8008298:	080082c9 	.word	0x080082c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800829c:	4b67      	ldr	r3, [pc, #412]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800829e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a0:	4a66      	ldr	r2, [pc, #408]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082a8:	e00f      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ae:	3308      	adds	r3, #8
 80082b0:	2102      	movs	r1, #2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 ffd4 	bl	800a260 <RCCEx_PLL2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80082be:	e004      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082c6:	e000      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80082c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082d2:	4b5a      	ldr	r3, [pc, #360]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d6:	f023 0103 	bic.w	r1, r3, #3
 80082da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082e0:	4a56      	ldr	r2, [pc, #344]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e2:	430b      	orrs	r3, r1
 80082e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082e6:	e003      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80082fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008306:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800830a:	460b      	mov	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	f000 809f 	beq.w	8008450 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008312:	4b4b      	ldr	r3, [pc, #300]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a4a      	ldr	r2, [pc, #296]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800831c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800831e:	f7f9 fa7d 	bl	800181c <HAL_GetTick>
 8008322:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008326:	e00b      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008328:	f7f9 fa78 	bl	800181c <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b64      	cmp	r3, #100	@ 0x64
 8008336:	d903      	bls.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800833e:	e005      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008340:	4b3f      	ldr	r3, [pc, #252]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0ed      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800834c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008350:	2b00      	cmp	r3, #0
 8008352:	d179      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008354:	4b39      	ldr	r3, [pc, #228]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008356:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008360:	4053      	eors	r3, r2
 8008362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008366:	2b00      	cmp	r3, #0
 8008368:	d015      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800836a:	4b34      	ldr	r3, [pc, #208]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800836c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008372:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008376:	4b31      	ldr	r3, [pc, #196]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800837a:	4a30      	ldr	r2, [pc, #192]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008380:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008382:	4b2e      	ldr	r3, [pc, #184]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008386:	4a2d      	ldr	r2, [pc, #180]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800838c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800838e:	4a2b      	ldr	r2, [pc, #172]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008394:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800839e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083a2:	d118      	bne.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7f9 fa3a 	bl	800181c <HAL_GetTick>
 80083a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ac:	e00d      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ae:	f7f9 fa35 	bl	800181c <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80083b8:	1ad2      	subs	r2, r2, r3
 80083ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083be:	429a      	cmp	r2, r3
 80083c0:	d903      	bls.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80083c8:	e005      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ca:	4b1c      	ldr	r3, [pc, #112]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0eb      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80083d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d129      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ee:	d10e      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80083f0:	4b12      	ldr	r3, [pc, #72]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008400:	091a      	lsrs	r2, r3, #4
 8008402:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008404:	4013      	ands	r3, r2
 8008406:	4a0d      	ldr	r2, [pc, #52]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008408:	430b      	orrs	r3, r1
 800840a:	6113      	str	r3, [r2, #16]
 800840c:	e005      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800840e:	4b0b      	ldr	r3, [pc, #44]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	4a0a      	ldr	r2, [pc, #40]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008414:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008418:	6113      	str	r3, [r2, #16]
 800841a:	4b08      	ldr	r3, [pc, #32]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800841c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800842a:	4a04      	ldr	r2, [pc, #16]	@ (800843c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800842c:	430b      	orrs	r3, r1
 800842e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008430:	e00e      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800843a:	e009      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800843c:	58024400 	.word	0x58024400
 8008440:	58024800 	.word	0x58024800
 8008444:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f002 0301 	and.w	r3, r2, #1
 800845c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008460:	2300      	movs	r3, #0
 8008462:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008466:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800846a:	460b      	mov	r3, r1
 800846c:	4313      	orrs	r3, r2
 800846e:	f000 8089 	beq.w	8008584 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008478:	2b28      	cmp	r3, #40	@ 0x28
 800847a:	d86b      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800847c:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	0800855d 	.word	0x0800855d
 8008488:	08008555 	.word	0x08008555
 800848c:	08008555 	.word	0x08008555
 8008490:	08008555 	.word	0x08008555
 8008494:	08008555 	.word	0x08008555
 8008498:	08008555 	.word	0x08008555
 800849c:	08008555 	.word	0x08008555
 80084a0:	08008555 	.word	0x08008555
 80084a4:	08008529 	.word	0x08008529
 80084a8:	08008555 	.word	0x08008555
 80084ac:	08008555 	.word	0x08008555
 80084b0:	08008555 	.word	0x08008555
 80084b4:	08008555 	.word	0x08008555
 80084b8:	08008555 	.word	0x08008555
 80084bc:	08008555 	.word	0x08008555
 80084c0:	08008555 	.word	0x08008555
 80084c4:	0800853f 	.word	0x0800853f
 80084c8:	08008555 	.word	0x08008555
 80084cc:	08008555 	.word	0x08008555
 80084d0:	08008555 	.word	0x08008555
 80084d4:	08008555 	.word	0x08008555
 80084d8:	08008555 	.word	0x08008555
 80084dc:	08008555 	.word	0x08008555
 80084e0:	08008555 	.word	0x08008555
 80084e4:	0800855d 	.word	0x0800855d
 80084e8:	08008555 	.word	0x08008555
 80084ec:	08008555 	.word	0x08008555
 80084f0:	08008555 	.word	0x08008555
 80084f4:	08008555 	.word	0x08008555
 80084f8:	08008555 	.word	0x08008555
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008555 	.word	0x08008555
 8008504:	0800855d 	.word	0x0800855d
 8008508:	08008555 	.word	0x08008555
 800850c:	08008555 	.word	0x08008555
 8008510:	08008555 	.word	0x08008555
 8008514:	08008555 	.word	0x08008555
 8008518:	08008555 	.word	0x08008555
 800851c:	08008555 	.word	0x08008555
 8008520:	08008555 	.word	0x08008555
 8008524:	0800855d 	.word	0x0800855d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852c:	3308      	adds	r3, #8
 800852e:	2101      	movs	r1, #1
 8008530:	4618      	mov	r0, r3
 8008532:	f001 fe95 	bl	800a260 <RCCEx_PLL2_Config>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800853c:	e00f      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800853e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008542:	3328      	adds	r3, #40	@ 0x28
 8008544:	2101      	movs	r1, #1
 8008546:	4618      	mov	r0, r3
 8008548:	f001 ff3c 	bl	800a3c4 <RCCEx_PLL3_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008552:	e004      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800855a:	e000      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800855c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800855e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10a      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008566:	4bbf      	ldr	r3, [pc, #764]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800856a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008574:	4abb      	ldr	r2, [pc, #748]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008576:	430b      	orrs	r3, r1
 8008578:	6553      	str	r3, [r2, #84]	@ 0x54
 800857a:	e003      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f002 0302 	and.w	r3, r2, #2
 8008590:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008594:	2300      	movs	r3, #0
 8008596:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800859a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800859e:	460b      	mov	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	d041      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085aa:	2b05      	cmp	r3, #5
 80085ac:	d824      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80085ae:	a201      	add	r2, pc, #4	@ (adr r2, 80085b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	08008601 	.word	0x08008601
 80085b8:	080085cd 	.word	0x080085cd
 80085bc:	080085e3 	.word	0x080085e3
 80085c0:	08008601 	.word	0x08008601
 80085c4:	08008601 	.word	0x08008601
 80085c8:	08008601 	.word	0x08008601
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d0:	3308      	adds	r3, #8
 80085d2:	2101      	movs	r1, #1
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fe43 	bl	800a260 <RCCEx_PLL2_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085e0:	e00f      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e6:	3328      	adds	r3, #40	@ 0x28
 80085e8:	2101      	movs	r1, #1
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 feea 	bl	800a3c4 <RCCEx_PLL3_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085f6:	e004      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085fe:	e000      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10a      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800860a:	4b96      	ldr	r3, [pc, #600]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800860c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860e:	f023 0107 	bic.w	r1, r3, #7
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008616:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008618:	4a92      	ldr	r2, [pc, #584]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800861a:	430b      	orrs	r3, r1
 800861c:	6553      	str	r3, [r2, #84]	@ 0x54
 800861e:	e003      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f002 0304 	and.w	r3, r2, #4
 8008634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008638:	2300      	movs	r3, #0
 800863a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800863e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008642:	460b      	mov	r3, r1
 8008644:	4313      	orrs	r3, r2
 8008646:	d044      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008650:	2b05      	cmp	r3, #5
 8008652:	d825      	bhi.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008654:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	080086a9 	.word	0x080086a9
 8008660:	08008675 	.word	0x08008675
 8008664:	0800868b 	.word	0x0800868b
 8008668:	080086a9 	.word	0x080086a9
 800866c:	080086a9 	.word	0x080086a9
 8008670:	080086a9 	.word	0x080086a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	3308      	adds	r3, #8
 800867a:	2101      	movs	r1, #1
 800867c:	4618      	mov	r0, r3
 800867e:	f001 fdef 	bl	800a260 <RCCEx_PLL2_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008688:	e00f      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	3328      	adds	r3, #40	@ 0x28
 8008690:	2101      	movs	r1, #1
 8008692:	4618      	mov	r0, r3
 8008694:	f001 fe96 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800869e:	e004      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086a6:	e000      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80086a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086b2:	4b6c      	ldr	r3, [pc, #432]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b6:	f023 0107 	bic.w	r1, r3, #7
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086c2:	4a68      	ldr	r2, [pc, #416]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80086c8:	e003      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f002 0320 	and.w	r3, r2, #32
 80086de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086e2:	2300      	movs	r3, #0
 80086e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086ec:	460b      	mov	r3, r1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d055      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086fe:	d033      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008704:	d82c      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870a:	d02f      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008710:	d826      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008712:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008716:	d02b      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008718:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800871c:	d820      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800871e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008722:	d012      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008728:	d81a      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d022      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800872e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008732:	d115      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008738:	3308      	adds	r3, #8
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f001 fd8f 	bl	800a260 <RCCEx_PLL2_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008748:	e015      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874e:	3328      	adds	r3, #40	@ 0x28
 8008750:	2102      	movs	r1, #2
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fe36 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800875e:	e00a      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008766:	e006      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008768:	bf00      	nop
 800876a:	e004      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800877e:	4b39      	ldr	r3, [pc, #228]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008782:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800878e:	4a35      	ldr	r2, [pc, #212]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008790:	430b      	orrs	r3, r1
 8008792:	6553      	str	r3, [r2, #84]	@ 0x54
 8008794:	e003      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800879a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800879e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80087aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087ae:	2300      	movs	r3, #0
 80087b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4313      	orrs	r3, r2
 80087bc:	d058      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087ca:	d033      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80087cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087d0:	d82c      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d6:	d02f      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80087d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087dc:	d826      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087e2:	d02b      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80087e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087e8:	d820      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087ee:	d012      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80087f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087f4:	d81a      	bhi.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d022      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80087fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087fe:	d115      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008804:	3308      	adds	r3, #8
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fd29 	bl	800a260 <RCCEx_PLL2_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008814:	e015      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800881a:	3328      	adds	r3, #40	@ 0x28
 800881c:	2102      	movs	r1, #2
 800881e:	4618      	mov	r0, r3
 8008820:	f001 fdd0 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800882a:	e00a      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008832:	e006      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008834:	bf00      	nop
 8008836:	e004      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008838:	bf00      	nop
 800883a:	e002      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800883c:	bf00      	nop
 800883e:	e000      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10e      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800884a:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800884c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008856:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800885a:	4a02      	ldr	r2, [pc, #8]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800885c:	430b      	orrs	r3, r1
 800885e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008860:	e006      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008862:	bf00      	nop
 8008864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800887c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008880:	2300      	movs	r3, #0
 8008882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008886:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800888a:	460b      	mov	r3, r1
 800888c:	4313      	orrs	r3, r2
 800888e:	d055      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008894:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008898:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800889c:	d033      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800889e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80088a2:	d82c      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088a8:	d02f      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80088aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088ae:	d826      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088b4:	d02b      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80088b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80088ba:	d820      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088c0:	d012      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80088c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088c6:	d81a      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d022      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80088cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088d0:	d115      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d6:	3308      	adds	r3, #8
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fcc0 	bl	800a260 <RCCEx_PLL2_Config>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088e6:	e015      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ec:	3328      	adds	r3, #40	@ 0x28
 80088ee:	2102      	movs	r1, #2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f001 fd67 	bl	800a3c4 <RCCEx_PLL3_Config>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088fc:	e00a      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008904:	e006      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008906:	bf00      	nop
 8008908:	e004      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800890a:	bf00      	nop
 800890c:	e002      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800890e:	bf00      	nop
 8008910:	e000      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10b      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800891c:	4ba1      	ldr	r3, [pc, #644]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800891e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008920:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800892c:	4a9d      	ldr	r2, [pc, #628]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800892e:	430b      	orrs	r3, r1
 8008930:	6593      	str	r3, [r2, #88]	@ 0x58
 8008932:	e003      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800893c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f002 0308 	and.w	r3, r2, #8
 8008948:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800894c:	2300      	movs	r3, #0
 800894e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008952:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008956:	460b      	mov	r3, r1
 8008958:	4313      	orrs	r3, r2
 800895a:	d01e      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008968:	d10c      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896e:	3328      	adds	r3, #40	@ 0x28
 8008970:	2102      	movs	r1, #2
 8008972:	4618      	mov	r0, r3
 8008974:	f001 fd26 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008984:	4b87      	ldr	r3, [pc, #540]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008988:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800898c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008994:	4a83      	ldr	r2, [pc, #524]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008996:	430b      	orrs	r3, r1
 8008998:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800899a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f002 0310 	and.w	r3, r2, #16
 80089a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089aa:	2300      	movs	r3, #0
 80089ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80089b4:	460b      	mov	r3, r1
 80089b6:	4313      	orrs	r3, r2
 80089b8:	d01e      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80089ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c6:	d10c      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089cc:	3328      	adds	r3, #40	@ 0x28
 80089ce:	2102      	movs	r1, #2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fcf7 	bl	800a3c4 <RCCEx_PLL3_Config>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089e2:	4b70      	ldr	r3, [pc, #448]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089f2:	4a6c      	ldr	r2, [pc, #432]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089f4:	430b      	orrs	r3, r1
 80089f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008a04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008a12:	460b      	mov	r3, r1
 8008a14:	4313      	orrs	r3, r2
 8008a16:	d03e      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a24:	d022      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a2a:	d81b      	bhi.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a34:	d00b      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008a36:	e015      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f001 fc0d 	bl	800a260 <RCCEx_PLL2_Config>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a4c:	e00f      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a52:	3328      	adds	r3, #40	@ 0x28
 8008a54:	2102      	movs	r1, #2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 fcb4 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a62:	e004      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a6a:	e000      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a76:	4b4b      	ldr	r3, [pc, #300]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a86:	4a47      	ldr	r2, [pc, #284]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a8c:	e003      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008aa8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008aac:	460b      	mov	r3, r1
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	d03b      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008abe:	d01f      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ac0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ac4:	d818      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aca:	d003      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008acc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ad0:	d007      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008ad2:	e011      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad4:	4b33      	ldr	r3, [pc, #204]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad8:	4a32      	ldr	r2, [pc, #200]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ae0:	e00f      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae6:	3328      	adds	r3, #40	@ 0x28
 8008ae8:	2101      	movs	r1, #1
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 fc6a 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008af0:	4603      	mov	r3, r0
 8008af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008af6:	e004      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008afe:	e000      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10b      	bne.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1a:	4a22      	ldr	r2, [pc, #136]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b20:	e003      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b36:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b38:	2300      	movs	r3, #0
 8008b3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008b3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008b40:	460b      	mov	r3, r1
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d034      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b54:	d007      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008b56:	e011      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b58:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5c:	4a11      	ldr	r2, [pc, #68]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b64:	e00e      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	2102      	movs	r1, #2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 fb76 	bl	800a260 <RCCEx_PLL2_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b7a:	e003      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10d      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b9a:	4a02      	ldr	r2, [pc, #8]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ba0:	e006      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008ba2:	bf00      	nop
 8008ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	d00c      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd0:	3328      	adds	r3, #40	@ 0x28
 8008bd2:	2102      	movs	r1, #2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 fbf5 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008bf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bf8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	d038      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c0e:	d018      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c14:	d811      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c1a:	d014      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c20:	d80b      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d011      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c2a:	d106      	bne.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c2c:	4bc3      	ldr	r3, [pc, #780]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c30:	4ac2      	ldr	r2, [pc, #776]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c38:	e008      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c40:	e004      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c42:	bf00      	nop
 8008c44:	e002      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c46:	bf00      	nop
 8008c48:	e000      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10b      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c54:	4bb9      	ldr	r3, [pc, #740]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c64:	4ab5      	ldr	r2, [pc, #724]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c66:	430b      	orrs	r3, r1
 8008c68:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c6a:	e003      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008c80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c82:	2300      	movs	r3, #0
 8008c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c90:	4baa      	ldr	r3, [pc, #680]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c9e:	4aa7      	ldr	r2, [pc, #668]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008cb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	d00a      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008cc0:	4b9e      	ldr	r3, [pc, #632]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008cd0:	4a9a      	ldr	r2, [pc, #616]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cd2:	430b      	orrs	r3, r1
 8008cd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008cec:	460b      	mov	r3, r1
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	d009      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cf2:	4b92      	ldr	r3, [pc, #584]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d00:	4a8e      	ldr	r2, [pc, #568]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d02:	430b      	orrs	r3, r1
 8008d04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d14:	2300      	movs	r3, #0
 8008d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	d00e      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d22:	4b86      	ldr	r3, [pc, #536]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	4a85      	ldr	r2, [pc, #532]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d2c:	6113      	str	r3, [r2, #16]
 8008d2e:	4b83      	ldr	r3, [pc, #524]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d30:	6919      	ldr	r1, [r3, #16]
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d3a:	4a80      	ldr	r2, [pc, #512]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d4e:	2300      	movs	r3, #0
 8008d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d56:	460b      	mov	r3, r1
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	d009      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d5c:	4b77      	ldr	r3, [pc, #476]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6a:	4a74      	ldr	r2, [pc, #464]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d6c:	430b      	orrs	r3, r1
 8008d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d7e:	2300      	movs	r3, #0
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008d86:	460b      	mov	r3, r1
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	d00a      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d9c:	4a67      	ldr	r2, [pc, #412]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d9e:	430b      	orrs	r3, r1
 8008da0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008daa:	2100      	movs	r1, #0
 8008dac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008db4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008db8:	460b      	mov	r3, r1
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	d011      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 fa4a 	bl	800a260 <RCCEx_PLL2_Config>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	2100      	movs	r1, #0
 8008dec:	6239      	str	r1, [r7, #32]
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	d011      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e02:	3308      	adds	r3, #8
 8008e04:	2101      	movs	r1, #1
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fa2a 	bl	800a260 <RCCEx_PLL2_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	61b9      	str	r1, [r7, #24]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	61fb      	str	r3, [r7, #28]
 8008e34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	d011      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e42:	3308      	adds	r3, #8
 8008e44:	2102      	movs	r1, #2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 fa0a 	bl	800a260 <RCCEx_PLL2_Config>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6139      	str	r1, [r7, #16]
 8008e6e:	f003 0308 	and.w	r3, r3, #8
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	d011      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e82:	3328      	adds	r3, #40	@ 0x28
 8008e84:	2100      	movs	r1, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 fa9c 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	2100      	movs	r1, #0
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	d011      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec2:	3328      	adds	r3, #40	@ 0x28
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 fa7c 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	2100      	movs	r1, #0
 8008eec:	6039      	str	r1, [r7, #0]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	607b      	str	r3, [r7, #4]
 8008ef4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4313      	orrs	r3, r2
 8008efc:	d011      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f02:	3328      	adds	r3, #40	@ 0x28
 8008f04:	2102      	movs	r1, #2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f001 fa5c 	bl	800a3c4 <RCCEx_PLL3_Config>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008f22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e000      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008f36:	46bd      	mov	sp, r7
 8008f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f3c:	58024400 	.word	0x58024400

08008f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b090      	sub	sp, #64	@ 0x40
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008f52:	430b      	orrs	r3, r1
 8008f54:	f040 8094 	bne.w	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008f58:	4b9e      	ldr	r3, [pc, #632]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	f200 8087 	bhi.w	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008f85 	.word	0x08008f85
 8008f74:	08008fad 	.word	0x08008fad
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08009071 	.word	0x08009071
 8008f80:	08008ffd 	.word	0x08008ffd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f84:	4b93      	ldr	r3, [pc, #588]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f90:	d108      	bne.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 f810 	bl	8009fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa0:	f000 bd45 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa8:	f000 bd41 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fac:	4b89      	ldr	r3, [pc, #548]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fb8:	d108      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fba:	f107 0318 	add.w	r3, r7, #24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fd54 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc8:	f000 bd31 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd0:	f000 bd2d 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fe0:	d108      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe2:	f107 030c 	add.w	r3, r7, #12
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fe94 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff0:	f000 bd1d 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff8:	f000 bd19 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ffc:	4b75      	ldr	r3, [pc, #468]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009000:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009006:	4b73      	ldr	r3, [pc, #460]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0304 	and.w	r3, r3, #4
 800900e:	2b04      	cmp	r3, #4
 8009010:	d10c      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009018:	4b6e      	ldr	r3, [pc, #440]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	08db      	lsrs	r3, r3, #3
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	4a6d      	ldr	r2, [pc, #436]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009024:	fa22 f303 	lsr.w	r3, r2, r3
 8009028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800902a:	e01f      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800902c:	4b69      	ldr	r3, [pc, #420]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009038:	d106      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800903a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009040:	d102      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009042:	4b66      	ldr	r3, [pc, #408]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009046:	e011      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009048:	4b62      	ldr	r3, [pc, #392]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009054:	d106      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800905c:	d102      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800905e:	4b60      	ldr	r3, [pc, #384]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009062:	e003      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009068:	f000 bce1 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800906c:	f000 bcdf 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009070:	4b5c      	ldr	r3, [pc, #368]	@ (80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009074:	f000 bcdb 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907c:	f000 bcd7 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009084:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009088:	430b      	orrs	r3, r1
 800908a:	f040 80ad 	bne.w	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800908e:	4b51      	ldr	r3, [pc, #324]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009092:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009096:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800909e:	d056      	beq.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80090a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090a6:	f200 8090 	bhi.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80090ae:	f000 8088 	beq.w	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80090b6:	f200 8088 	bhi.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	2b80      	cmp	r3, #128	@ 0x80
 80090be:	d032      	beq.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80090c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c2:	2b80      	cmp	r3, #128	@ 0x80
 80090c4:	f200 8081 	bhi.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d0:	2b40      	cmp	r3, #64	@ 0x40
 80090d2:	d014      	beq.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80090d4:	e079      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090d6:	4b3f      	ldr	r3, [pc, #252]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090e2:	d108      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 ff67 	bl	8009fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f2:	f000 bc9c 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090fa:	f000 bc98 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090fe:	4b35      	ldr	r3, [pc, #212]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800910a:	d108      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800910c:	f107 0318 	add.w	r3, r7, #24
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fcab 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800911a:	f000 bc88 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009122:	f000 bc84 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009126:	4b2b      	ldr	r3, [pc, #172]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800912e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009132:	d108      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009134:	f107 030c 	add.w	r3, r7, #12
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fdeb 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009142:	f000 bc74 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800914a:	f000 bc70 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800914e:	4b21      	ldr	r3, [pc, #132]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009158:	4b1e      	ldr	r3, [pc, #120]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b04      	cmp	r3, #4
 8009162:	d10c      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800916a:	4b1a      	ldr	r3, [pc, #104]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	08db      	lsrs	r3, r3, #3
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	4a18      	ldr	r2, [pc, #96]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009176:	fa22 f303 	lsr.w	r3, r2, r3
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800917c:	e01f      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800917e:	4b15      	ldr	r3, [pc, #84]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918a:	d106      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800918c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009192:	d102      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009194:	4b11      	ldr	r3, [pc, #68]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009198:	e011      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800919a:	4b0e      	ldr	r3, [pc, #56]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091a6:	d106      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80091a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ae:	d102      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091b4:	e003      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091ba:	f000 bc38 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091be:	f000 bc36 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091c2:	4b08      	ldr	r3, [pc, #32]	@ (80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80091c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c6:	f000 bc32 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ce:	f000 bc2e 	b.w	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091d2:	bf00      	nop
 80091d4:	58024400 	.word	0x58024400
 80091d8:	03d09000 	.word	0x03d09000
 80091dc:	003d0900 	.word	0x003d0900
 80091e0:	007a1200 	.word	0x007a1200
 80091e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80091e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80091f0:	430b      	orrs	r3, r1
 80091f2:	f040 809c 	bne.w	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80091f6:	4b9e      	ldr	r3, [pc, #632]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091fa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80091fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009206:	d054      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800920e:	f200 808b 	bhi.w	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009218:	f000 8083 	beq.w	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800921c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009222:	f200 8081 	bhi.w	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800922c:	d02f      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009234:	d878      	bhi.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009242:	d012      	beq.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009244:	e070      	b.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009246:	4b8a      	ldr	r3, [pc, #552]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800924e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009252:	d107      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009258:	4618      	mov	r0, r3
 800925a:	f000 feaf 	bl	8009fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800925e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009262:	e3e4      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009268:	e3e1      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800926a:	4b81      	ldr	r3, [pc, #516]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009276:	d107      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009278:	f107 0318 	add.w	r3, r7, #24
 800927c:	4618      	mov	r0, r3
 800927e:	f000 fbf5 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009286:	e3d2      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928c:	e3cf      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800928e:	4b78      	ldr	r3, [pc, #480]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800929a:	d107      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929c:	f107 030c 	add.w	r3, r7, #12
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fd37 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092aa:	e3c0      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b0:	e3bd      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092b2:	4b6f      	ldr	r3, [pc, #444]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092bc:	4b6c      	ldr	r3, [pc, #432]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0304 	and.w	r3, r3, #4
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d10c      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80092c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092ce:	4b68      	ldr	r3, [pc, #416]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	08db      	lsrs	r3, r3, #3
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	4a66      	ldr	r2, [pc, #408]	@ (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80092da:	fa22 f303 	lsr.w	r3, r2, r3
 80092de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092e0:	e01e      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092e2:	4b63      	ldr	r3, [pc, #396]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092ee:	d106      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80092f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092f6:	d102      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092f8:	4b5f      	ldr	r3, [pc, #380]	@ (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092fc:	e010      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092fe:	4b5c      	ldr	r3, [pc, #368]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800930a:	d106      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800930c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009312:	d102      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009314:	4b59      	ldr	r3, [pc, #356]	@ (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009318:	e002      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800931e:	e386      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009320:	e385      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009322:	4b57      	ldr	r3, [pc, #348]	@ (8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009326:	e382      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800932c:	e37f      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800932e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009332:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009336:	430b      	orrs	r3, r1
 8009338:	f040 80a7 	bne.w	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800933c:	4b4c      	ldr	r3, [pc, #304]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800933e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009340:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009344:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800934c:	d055      	beq.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009354:	f200 8096 	bhi.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800935e:	f000 8084 	beq.w	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009368:	f200 808c 	bhi.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009372:	d030      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800937a:	f200 8083 	bhi.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800938a:	d012      	beq.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800938c:	e07a      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800938e:	4b38      	ldr	r3, [pc, #224]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009396:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800939a:	d107      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800939c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 fe0b 	bl	8009fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093aa:	e340      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b0:	e33d      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093be:	d107      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093c0:	f107 0318 	add.w	r3, r7, #24
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb51 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ce:	e32e      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d4:	e32b      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093d6:	4b26      	ldr	r3, [pc, #152]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093e2:	d107      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e4:	f107 030c 	add.w	r3, r7, #12
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fc93 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f2:	e31c      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f8:	e319      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009402:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009404:	4b1a      	ldr	r3, [pc, #104]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b04      	cmp	r3, #4
 800940e:	d10c      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009416:	4b16      	ldr	r3, [pc, #88]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	08db      	lsrs	r3, r3, #3
 800941c:	f003 0303 	and.w	r3, r3, #3
 8009420:	4a14      	ldr	r2, [pc, #80]	@ (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009422:	fa22 f303 	lsr.w	r3, r2, r3
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009428:	e01e      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800942a:	4b11      	ldr	r3, [pc, #68]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009436:	d106      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800943e:	d102      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009440:	4b0d      	ldr	r3, [pc, #52]	@ (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009444:	e010      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009446:	4b0a      	ldr	r3, [pc, #40]	@ (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800944e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009452:	d106      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800945a:	d102      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800945c:	4b07      	ldr	r3, [pc, #28]	@ (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800945e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009460:	e002      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009466:	e2e2      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009468:	e2e1      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800946a:	4b05      	ldr	r3, [pc, #20]	@ (8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800946e:	e2de      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009470:	58024400 	.word	0x58024400
 8009474:	03d09000 	.word	0x03d09000
 8009478:	003d0900 	.word	0x003d0900
 800947c:	007a1200 	.word	0x007a1200
 8009480:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009488:	e2d1      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800948a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800948e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009492:	430b      	orrs	r3, r1
 8009494:	f040 809c 	bne.w	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009498:	4b93      	ldr	r3, [pc, #588]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800949a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800949c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094a8:	d054      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094b0:	f200 808b 	bhi.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094ba:	f000 8083 	beq.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80094be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094c4:	f200 8081 	bhi.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ce:	d02f      	beq.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094d6:	d878      	bhi.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d004      	beq.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80094de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e4:	d012      	beq.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80094e6:	e070      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094e8:	4b7f      	ldr	r3, [pc, #508]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094f4:	d107      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 fd5e 	bl	8009fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009504:	e293      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800950a:	e290      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800950c:	4b76      	ldr	r3, [pc, #472]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009514:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009518:	d107      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800951a:	f107 0318 	add.w	r3, r7, #24
 800951e:	4618      	mov	r0, r3
 8009520:	f000 faa4 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009528:	e281      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800952e:	e27e      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009530:	4b6d      	ldr	r3, [pc, #436]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800953c:	d107      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800953e:	f107 030c 	add.w	r3, r7, #12
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fbe6 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800954c:	e26f      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009552:	e26c      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009554:	4b64      	ldr	r3, [pc, #400]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800955e:	4b62      	ldr	r3, [pc, #392]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b04      	cmp	r3, #4
 8009568:	d10c      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800956a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009570:	4b5d      	ldr	r3, [pc, #372]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	08db      	lsrs	r3, r3, #3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	4a5c      	ldr	r2, [pc, #368]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009582:	e01e      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009584:	4b58      	ldr	r3, [pc, #352]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009590:	d106      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009598:	d102      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800959a:	4b55      	ldr	r3, [pc, #340]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800959e:	e010      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095a0:	4b51      	ldr	r3, [pc, #324]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095ac:	d106      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80095ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095b4:	d102      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095b6:	4b4f      	ldr	r3, [pc, #316]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ba:	e002      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095c0:	e235      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095c2:	e234      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095c4:	4b4c      	ldr	r3, [pc, #304]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80095c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c8:	e231      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ce:	e22e      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80095d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80095d8:	430b      	orrs	r3, r1
 80095da:	f040 808f 	bne.w	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80095de:	4b42      	ldr	r3, [pc, #264]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095ee:	d06b      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095f6:	d874      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095fe:	d056      	beq.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009606:	d86c      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800960e:	d03b      	beq.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009612:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009616:	d864      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800961e:	d021      	beq.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009626:	d85c      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962a:	2b00      	cmp	r3, #0
 800962c:	d004      	beq.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800962e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009634:	d004      	beq.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009636:	e054      	b.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009638:	f7fe fa0a 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800963c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800963e:	e1f6      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009640:	4b29      	ldr	r3, [pc, #164]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800964c:	d107      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800964e:	f107 0318 	add.w	r3, r7, #24
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fa0a 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800965c:	e1e7      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800965e:	2300      	movs	r3, #0
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009662:	e1e4      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009664:	4b20      	ldr	r3, [pc, #128]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800966c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009670:	d107      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009672:	f107 030c 	add.w	r3, r7, #12
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fb4c 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009680:	e1d5      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009686:	e1d2      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009688:	4b17      	ldr	r3, [pc, #92]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b04      	cmp	r3, #4
 8009692:	d109      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009694:	4b14      	ldr	r3, [pc, #80]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	08db      	lsrs	r3, r3, #3
 800969a:	f003 0303 	and.w	r3, r3, #3
 800969e:	4a13      	ldr	r2, [pc, #76]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80096a0:	fa22 f303 	lsr.w	r3, r2, r3
 80096a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a6:	e1c2      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ac:	e1bf      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096ae:	4b0e      	ldr	r3, [pc, #56]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ba:	d102      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80096bc:	4b0c      	ldr	r3, [pc, #48]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c0:	e1b5      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c6:	e1b2      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096c8:	4b07      	ldr	r3, [pc, #28]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096d4:	d102      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80096d6:	4b07      	ldr	r3, [pc, #28]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096da:	e1a8      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e0:	e1a5      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e1a2      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096e8:	58024400 	.word	0x58024400
 80096ec:	03d09000 	.word	0x03d09000
 80096f0:	003d0900 	.word	0x003d0900
 80096f4:	007a1200 	.word	0x007a1200
 80096f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80096fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009700:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009704:	430b      	orrs	r3, r1
 8009706:	d173      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009708:	4b9c      	ldr	r3, [pc, #624]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800970a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009710:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009718:	d02f      	beq.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800971a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009720:	d863      	bhi.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	2b00      	cmp	r3, #0
 8009726:	d004      	beq.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800972e:	d012      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009730:	e05b      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009732:	4b92      	ldr	r3, [pc, #584]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800973a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800973e:	d107      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009740:	f107 0318 	add.w	r3, r7, #24
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f991 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974e:	e16e      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009754:	e16b      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009756:	4b89      	ldr	r3, [pc, #548]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800975e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009762:	d107      	bne.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009764:	f107 030c 	add.w	r3, r7, #12
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fad3 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009772:	e15c      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009778:	e159      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800977a:	4b80      	ldr	r3, [pc, #512]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800977c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800977e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009784:	4b7d      	ldr	r3, [pc, #500]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b04      	cmp	r3, #4
 800978e:	d10c      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009792:	2b00      	cmp	r3, #0
 8009794:	d109      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009796:	4b79      	ldr	r3, [pc, #484]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	08db      	lsrs	r3, r3, #3
 800979c:	f003 0303 	and.w	r3, r3, #3
 80097a0:	4a77      	ldr	r2, [pc, #476]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80097a2:	fa22 f303 	lsr.w	r3, r2, r3
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097a8:	e01e      	b.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097aa:	4b74      	ldr	r3, [pc, #464]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097b6:	d106      	bne.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80097b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097be:	d102      	bne.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097c0:	4b70      	ldr	r3, [pc, #448]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80097c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097c4:	e010      	b.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097c6:	4b6d      	ldr	r3, [pc, #436]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097d2:	d106      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80097d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097da:	d102      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097dc:	4b6a      	ldr	r3, [pc, #424]	@ (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e0:	e002      	b.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097e6:	e122      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097e8:	e121      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ee:	e11e      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80097f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80097f8:	430b      	orrs	r3, r1
 80097fa:	d133      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80097fc:	4b5f      	ldr	r3, [pc, #380]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009804:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	2b00      	cmp	r3, #0
 800980a:	d004      	beq.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009812:	d012      	beq.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009814:	e023      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009816:	4b59      	ldr	r3, [pc, #356]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800981e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009822:	d107      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fbc7 	bl	8009fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009832:	e0fc      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009838:	e0f9      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800983a:	4b50      	ldr	r3, [pc, #320]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009846:	d107      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009848:	f107 0318 	add.w	r3, r7, #24
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f90d 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009856:	e0ea      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985c:	e0e7      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009862:	e0e4      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009868:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800986c:	430b      	orrs	r3, r1
 800986e:	f040 808d 	bne.w	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009872:	4b42      	ldr	r3, [pc, #264]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009876:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800987a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800987c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009882:	d06b      	beq.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800988a:	d874      	bhi.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800988c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009892:	d056      	beq.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800989a:	d86c      	bhi.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800989c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098a2:	d03b      	beq.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098aa:	d864      	bhi.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b2:	d021      	beq.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ba:	d85c      	bhi.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d004      	beq.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80098c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c8:	d004      	beq.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80098ca:	e054      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80098cc:	f000 f8b8 	bl	8009a40 <HAL_RCCEx_GetD3PCLK1Freq>
 80098d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098d2:	e0ac      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098d4:	4b29      	ldr	r3, [pc, #164]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098e0:	d107      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e2:	f107 0318 	add.w	r3, r7, #24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 f8c0 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098f0:	e09d      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f6:	e09a      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098f8:	4b20      	ldr	r3, [pc, #128]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009904:	d107      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009906:	f107 030c 	add.w	r3, r7, #12
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fa02 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009914:	e08b      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991a:	e088      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800991c:	4b17      	ldr	r3, [pc, #92]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b04      	cmp	r3, #4
 8009926:	d109      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009928:	4b14      	ldr	r3, [pc, #80]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	08db      	lsrs	r3, r3, #3
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	4a13      	ldr	r2, [pc, #76]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800993a:	e078      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009940:	e075      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009942:	4b0e      	ldr	r3, [pc, #56]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800994a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800994e:	d102      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009950:	4b0c      	ldr	r3, [pc, #48]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009954:	e06b      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995a:	e068      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800995c:	4b07      	ldr	r3, [pc, #28]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009968:	d102      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800996a:	4b07      	ldr	r3, [pc, #28]	@ (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800996c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800996e:	e05e      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	e05b      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997a:	e058      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800997c:	58024400 	.word	0x58024400
 8009980:	03d09000 	.word	0x03d09000
 8009984:	003d0900 	.word	0x003d0900
 8009988:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800998c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009990:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009994:	430b      	orrs	r3, r1
 8009996:	d148      	bne.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009998:	4b27      	ldr	r3, [pc, #156]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800999a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800999c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a8:	d02a      	beq.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099b0:	d838      	bhi.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80099b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099be:	d00d      	beq.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80099c0:	e030      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099ce:	d102      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80099d0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099d4:	e02b      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099da:	e028      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099dc:	4b16      	ldr	r3, [pc, #88]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099e8:	d107      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 fae4 	bl	8009fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099f8:	e019      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099fe:	e016      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a00:	4b0d      	ldr	r3, [pc, #52]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a0c:	d107      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a0e:	f107 0318 	add.w	r3, r7, #24
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 f82a 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a1c:	e007      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a22:	e004      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a28:	e001      	b.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3740      	adds	r7, #64	@ 0x40
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	58024400 	.word	0x58024400
 8009a3c:	007a1200 	.word	0x007a1200

08009a40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a44:	f7fd ffd4 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	091b      	lsrs	r3, r3, #4
 8009a50:	f003 0307 	and.w	r3, r3, #7
 8009a54:	4904      	ldr	r1, [pc, #16]	@ (8009a68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a56:	5ccb      	ldrb	r3, [r1, r3]
 8009a58:	f003 031f 	and.w	r3, r3, #31
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	58024400 	.word	0x58024400
 8009a68:	0800fe70 	.word	0x0800fe70

08009a6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b089      	sub	sp, #36	@ 0x24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a74:	4ba1      	ldr	r3, [pc, #644]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009a7e:	4b9f      	ldr	r3, [pc, #636]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a82:	0b1b      	lsrs	r3, r3, #12
 8009a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a8a:	4b9c      	ldr	r3, [pc, #624]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8e:	091b      	lsrs	r3, r3, #4
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009a96:	4b99      	ldr	r3, [pc, #612]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a9a:	08db      	lsrs	r3, r3, #3
 8009a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	fb02 f303 	mul.w	r3, r2, r3
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 8111 	beq.w	8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	f000 8083 	beq.w	8009bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	f200 80a1 	bhi.w	8009c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d056      	beq.n	8009b84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ad6:	e099      	b.n	8009c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad8:	4b88      	ldr	r3, [pc, #544]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0320 	and.w	r3, r3, #32
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d02d      	beq.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae4:	4b85      	ldr	r3, [pc, #532]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	08db      	lsrs	r3, r3, #3
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	4a84      	ldr	r2, [pc, #528]	@ (8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009af0:	fa22 f303 	lsr.w	r3, r2, r3
 8009af4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b3e:	e087      	b.n	8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b52:	4b6a      	ldr	r3, [pc, #424]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b82:	e065      	b.n	8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b96:	4b59      	ldr	r3, [pc, #356]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009baa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bc6:	e043      	b.n	8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bda:	4b48      	ldr	r3, [pc, #288]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c0a:	e021      	b.n	8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1e:	4b37      	ldr	r3, [pc, #220]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009c50:	4b2a      	ldr	r3, [pc, #168]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c54:	0a5b      	lsrs	r3, r3, #9
 8009c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c76:	ee17 2a90 	vmov	r2, s15
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c82:	0c1b      	lsrs	r3, r3, #16
 8009c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c88:	ee07 3a90 	vmov	s15, r3
 8009c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca4:	ee17 2a90 	vmov	r2, s15
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009cac:	4b13      	ldr	r3, [pc, #76]	@ (8009cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb0:	0e1b      	lsrs	r3, r3, #24
 8009cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd2:	ee17 2a90 	vmov	r2, s15
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cda:	e008      	b.n	8009cee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	609a      	str	r2, [r3, #8]
}
 8009cee:	bf00      	nop
 8009cf0:	3724      	adds	r7, #36	@ 0x24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	58024400 	.word	0x58024400
 8009d00:	03d09000 	.word	0x03d09000
 8009d04:	46000000 	.word	0x46000000
 8009d08:	4c742400 	.word	0x4c742400
 8009d0c:	4a742400 	.word	0x4a742400
 8009d10:	4af42400 	.word	0x4af42400

08009d14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b089      	sub	sp, #36	@ 0x24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d1c:	4ba1      	ldr	r3, [pc, #644]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009d26:	4b9f      	ldr	r3, [pc, #636]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d2a:	0d1b      	lsrs	r3, r3, #20
 8009d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d32:	4b9c      	ldr	r3, [pc, #624]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d36:	0a1b      	lsrs	r3, r3, #8
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009d3e:	4b99      	ldr	r3, [pc, #612]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d42:	08db      	lsrs	r3, r3, #3
 8009d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	fb02 f303 	mul.w	r3, r2, r3
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 8111 	beq.w	8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	f000 8083 	beq.w	8009e70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	f200 80a1 	bhi.w	8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d056      	beq.n	8009e2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d7e:	e099      	b.n	8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d80:	4b88      	ldr	r3, [pc, #544]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d02d      	beq.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d8c:	4b85      	ldr	r3, [pc, #532]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	08db      	lsrs	r3, r3, #3
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	4a84      	ldr	r2, [pc, #528]	@ (8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d98:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	ee07 3a90 	vmov	s15, r3
 8009da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	ee07 3a90 	vmov	s15, r3
 8009dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db6:	4b7b      	ldr	r3, [pc, #492]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009de6:	e087      	b.n	8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e2a:	e065      	b.n	8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3e:	4b59      	ldr	r3, [pc, #356]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e6e:	e043      	b.n	8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e82:	4b48      	ldr	r3, [pc, #288]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8a:	ee07 3a90 	vmov	s15, r3
 8009e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eb2:	e021      	b.n	8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec6:	4b37      	ldr	r3, [pc, #220]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ece:	ee07 3a90 	vmov	s15, r3
 8009ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ef6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efc:	0a5b      	lsrs	r3, r3, #9
 8009efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f02:	ee07 3a90 	vmov	s15, r3
 8009f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f1e:	ee17 2a90 	vmov	r2, s15
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009f26:	4b1f      	ldr	r3, [pc, #124]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f30:	ee07 3a90 	vmov	s15, r3
 8009f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f4c:	ee17 2a90 	vmov	r2, s15
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009f54:	4b13      	ldr	r3, [pc, #76]	@ (8009fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f58:	0e1b      	lsrs	r3, r3, #24
 8009f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f7a:	ee17 2a90 	vmov	r2, s15
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f82:	e008      	b.n	8009f96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	609a      	str	r2, [r3, #8]
}
 8009f96:	bf00      	nop
 8009f98:	3724      	adds	r7, #36	@ 0x24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	58024400 	.word	0x58024400
 8009fa8:	03d09000 	.word	0x03d09000
 8009fac:	46000000 	.word	0x46000000
 8009fb0:	4c742400 	.word	0x4c742400
 8009fb4:	4a742400 	.word	0x4a742400
 8009fb8:	4af42400 	.word	0x4af42400

08009fbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b089      	sub	sp, #36	@ 0x24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fc4:	4ba0      	ldr	r3, [pc, #640]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	f003 0303 	and.w	r3, r3, #3
 8009fcc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009fce:	4b9e      	ldr	r3, [pc, #632]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd2:	091b      	lsrs	r3, r3, #4
 8009fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009fda:	4b9b      	ldr	r3, [pc, #620]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009fe4:	4b98      	ldr	r3, [pc, #608]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe8:	08db      	lsrs	r3, r3, #3
 8009fea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	fb02 f303 	mul.w	r3, r2, r3
 8009ff4:	ee07 3a90 	vmov	s15, r3
 8009ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 8111 	beq.w	800a22a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	f000 8083 	beq.w	800a116 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	2b02      	cmp	r3, #2
 800a014:	f200 80a1 	bhi.w	800a15a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d056      	beq.n	800a0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a024:	e099      	b.n	800a15a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a026:	4b88      	ldr	r3, [pc, #544]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d02d      	beq.n	800a08e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a032:	4b85      	ldr	r3, [pc, #532]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	08db      	lsrs	r3, r3, #3
 800a038:	f003 0303 	and.w	r3, r3, #3
 800a03c:	4a83      	ldr	r2, [pc, #524]	@ (800a24c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a03e:	fa22 f303 	lsr.w	r3, r2, r3
 800a042:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	ee07 3a90 	vmov	s15, r3
 800a054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05c:	4b7a      	ldr	r3, [pc, #488]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a064:	ee07 3a90 	vmov	s15, r3
 800a068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a070:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a088:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a08c:	e087      	b.n	800a19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a098:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a254 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a0:	4b69      	ldr	r3, [pc, #420]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a8:	ee07 3a90 	vmov	s15, r3
 800a0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0d0:	e065      	b.n	800a19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	ee07 3a90 	vmov	s15, r3
 800a0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0dc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a258 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a0e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e4:	4b58      	ldr	r3, [pc, #352]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ec:	ee07 3a90 	vmov	s15, r3
 800a0f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0f8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a104:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a114:	e043      	b.n	800a19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a120:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a25c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a128:	4b47      	ldr	r3, [pc, #284]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a12a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a130:	ee07 3a90 	vmov	s15, r3
 800a134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a138:	ed97 6a03 	vldr	s12, [r7, #12]
 800a13c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a148:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a14c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a150:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a154:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a158:	e021      	b.n	800a19e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	ee07 3a90 	vmov	s15, r3
 800a160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a164:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a254 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16c:	4b36      	ldr	r3, [pc, #216]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a174:	ee07 3a90 	vmov	s15, r3
 800a178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a180:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a194:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a198:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a19c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a19e:	4b2a      	ldr	r3, [pc, #168]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a2:	0a5b      	lsrs	r3, r3, #9
 800a1a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c4:	ee17 2a90 	vmov	r2, s15
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a1cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1d0:	0c1b      	lsrs	r3, r3, #16
 800a1d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f2:	ee17 2a90 	vmov	r2, s15
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a1fa:	4b13      	ldr	r3, [pc, #76]	@ (800a248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1fe:	0e1b      	lsrs	r3, r3, #24
 800a200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a204:	ee07 3a90 	vmov	s15, r3
 800a208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a210:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a214:	edd7 6a07 	vldr	s13, [r7, #28]
 800a218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a21c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a220:	ee17 2a90 	vmov	r2, s15
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a228:	e008      	b.n	800a23c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	609a      	str	r2, [r3, #8]
}
 800a23c:	bf00      	nop
 800a23e:	3724      	adds	r7, #36	@ 0x24
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	58024400 	.word	0x58024400
 800a24c:	03d09000 	.word	0x03d09000
 800a250:	46000000 	.word	0x46000000
 800a254:	4c742400 	.word	0x4c742400
 800a258:	4a742400 	.word	0x4a742400
 800a25c:	4af42400 	.word	0x4af42400

0800a260 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a26e:	4b53      	ldr	r3, [pc, #332]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a272:	f003 0303 	and.w	r3, r3, #3
 800a276:	2b03      	cmp	r3, #3
 800a278:	d101      	bne.n	800a27e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e099      	b.n	800a3b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a27e:	4b4f      	ldr	r3, [pc, #316]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a4e      	ldr	r2, [pc, #312]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a284:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a28a:	f7f7 fac7 	bl	800181c <HAL_GetTick>
 800a28e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a290:	e008      	b.n	800a2a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a292:	f7f7 fac3 	bl	800181c <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d901      	bls.n	800a2a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e086      	b.n	800a3b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2a4:	4b45      	ldr	r3, [pc, #276]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1f0      	bne.n	800a292 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2b0:	4b42      	ldr	r3, [pc, #264]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	031b      	lsls	r3, r3, #12
 800a2be:	493f      	ldr	r1, [pc, #252]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	025b      	lsls	r3, r3, #9
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	041b      	lsls	r3, r3, #16
 800a2e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	061b      	lsls	r3, r3, #24
 800a2f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a2f4:	4931      	ldr	r1, [pc, #196]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2fa:	4b30      	ldr	r3, [pc, #192]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	492d      	ldr	r1, [pc, #180]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a308:	4313      	orrs	r3, r2
 800a30a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a30c:	4b2b      	ldr	r3, [pc, #172]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a310:	f023 0220 	bic.w	r2, r3, #32
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	4928      	ldr	r1, [pc, #160]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a31e:	4b27      	ldr	r3, [pc, #156]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a322:	4a26      	ldr	r2, [pc, #152]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a324:	f023 0310 	bic.w	r3, r3, #16
 800a328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a32a:	4b24      	ldr	r3, [pc, #144]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a32c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a32e:	4b24      	ldr	r3, [pc, #144]	@ (800a3c0 <RCCEx_PLL2_Config+0x160>)
 800a330:	4013      	ands	r3, r2
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	69d2      	ldr	r2, [r2, #28]
 800a336:	00d2      	lsls	r2, r2, #3
 800a338:	4920      	ldr	r1, [pc, #128]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a33e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a342:	4a1e      	ldr	r2, [pc, #120]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a344:	f043 0310 	orr.w	r3, r3, #16
 800a348:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d106      	bne.n	800a35e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a350:	4b1a      	ldr	r3, [pc, #104]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a354:	4a19      	ldr	r2, [pc, #100]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a356:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a35a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a35c:	e00f      	b.n	800a37e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d106      	bne.n	800a372 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a364:	4b15      	ldr	r3, [pc, #84]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a368:	4a14      	ldr	r2, [pc, #80]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a36a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a36e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a370:	e005      	b.n	800a37e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a372:	4b12      	ldr	r3, [pc, #72]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a376:	4a11      	ldr	r2, [pc, #68]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a378:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a37c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a37e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a0e      	ldr	r2, [pc, #56]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a384:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a38a:	f7f7 fa47 	bl	800181c <HAL_GetTick>
 800a38e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a390:	e008      	b.n	800a3a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a392:	f7f7 fa43 	bl	800181c <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d901      	bls.n	800a3a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e006      	b.n	800a3b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3a4:	4b05      	ldr	r3, [pc, #20]	@ (800a3bc <RCCEx_PLL2_Config+0x15c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d0f0      	beq.n	800a392 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	58024400 	.word	0x58024400
 800a3c0:	ffff0007 	.word	0xffff0007

0800a3c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3d2:	4b53      	ldr	r3, [pc, #332]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d6:	f003 0303 	and.w	r3, r3, #3
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	d101      	bne.n	800a3e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e099      	b.n	800a516 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3e2:	4b4f      	ldr	r3, [pc, #316]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a4e      	ldr	r2, [pc, #312]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a3e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ee:	f7f7 fa15 	bl	800181c <HAL_GetTick>
 800a3f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3f4:	e008      	b.n	800a408 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3f6:	f7f7 fa11 	bl	800181c <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d901      	bls.n	800a408 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e086      	b.n	800a516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a408:	4b45      	ldr	r3, [pc, #276]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1f0      	bne.n	800a3f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a414:	4b42      	ldr	r3, [pc, #264]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a418:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	051b      	lsls	r3, r3, #20
 800a422:	493f      	ldr	r1, [pc, #252]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a424:	4313      	orrs	r3, r2
 800a426:	628b      	str	r3, [r1, #40]	@ 0x28
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	3b01      	subs	r3, #1
 800a438:	025b      	lsls	r3, r3, #9
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	3b01      	subs	r3, #1
 800a444:	041b      	lsls	r3, r3, #16
 800a446:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	3b01      	subs	r3, #1
 800a452:	061b      	lsls	r3, r3, #24
 800a454:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a458:	4931      	ldr	r1, [pc, #196]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a45e:	4b30      	ldr	r3, [pc, #192]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	492d      	ldr	r1, [pc, #180]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a46c:	4313      	orrs	r3, r2
 800a46e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a470:	4b2b      	ldr	r3, [pc, #172]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a474:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	4928      	ldr	r1, [pc, #160]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a482:	4b27      	ldr	r3, [pc, #156]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a486:	4a26      	ldr	r2, [pc, #152]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a48c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a48e:	4b24      	ldr	r3, [pc, #144]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a492:	4b24      	ldr	r3, [pc, #144]	@ (800a524 <RCCEx_PLL3_Config+0x160>)
 800a494:	4013      	ands	r3, r2
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	69d2      	ldr	r2, [r2, #28]
 800a49a:	00d2      	lsls	r2, r2, #3
 800a49c:	4920      	ldr	r1, [pc, #128]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4a2:	4b1f      	ldr	r3, [pc, #124]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	4a1e      	ldr	r2, [pc, #120]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d106      	bne.n	800a4c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b8:	4a19      	ldr	r2, [pc, #100]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a4be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4c0:	e00f      	b.n	800a4e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d106      	bne.n	800a4d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4c8:	4b15      	ldr	r3, [pc, #84]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4cc:	4a14      	ldr	r2, [pc, #80]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4d4:	e005      	b.n	800a4e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4d6:	4b12      	ldr	r3, [pc, #72]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4da:	4a11      	ldr	r2, [pc, #68]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a4e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ee:	f7f7 f995 	bl	800181c <HAL_GetTick>
 800a4f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4f4:	e008      	b.n	800a508 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4f6:	f7f7 f991 	bl	800181c <HAL_GetTick>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	2b02      	cmp	r3, #2
 800a502:	d901      	bls.n	800a508 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a504:	2303      	movs	r3, #3
 800a506:	e006      	b.n	800a516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a508:	4b05      	ldr	r3, [pc, #20]	@ (800a520 <RCCEx_PLL3_Config+0x15c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0f0      	beq.n	800a4f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a514:	7bfb      	ldrb	r3, [r7, #15]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	58024400 	.word	0x58024400
 800a524:	ffff0007 	.word	0xffff0007

0800a528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e049      	b.n	800a5ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f841 	bl	800a5d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f000 f9e8 	bl	800a93c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d001      	beq.n	800a604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e054      	b.n	800a6ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f042 0201 	orr.w	r2, r2, #1
 800a61a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a26      	ldr	r2, [pc, #152]	@ (800a6bc <HAL_TIM_Base_Start_IT+0xd0>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d022      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x80>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a62e:	d01d      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x80>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a22      	ldr	r2, [pc, #136]	@ (800a6c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d018      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x80>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a21      	ldr	r2, [pc, #132]	@ (800a6c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d013      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x80>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a1f      	ldr	r2, [pc, #124]	@ (800a6c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00e      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x80>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a1e      	ldr	r2, [pc, #120]	@ (800a6cc <HAL_TIM_Base_Start_IT+0xe0>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d009      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x80>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d004      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x80>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a1b      	ldr	r2, [pc, #108]	@ (800a6d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d115      	bne.n	800a698 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	4b19      	ldr	r3, [pc, #100]	@ (800a6d8 <HAL_TIM_Base_Start_IT+0xec>)
 800a674:	4013      	ands	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b06      	cmp	r3, #6
 800a67c:	d015      	beq.n	800a6aa <HAL_TIM_Base_Start_IT+0xbe>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a684:	d011      	beq.n	800a6aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f042 0201 	orr.w	r2, r2, #1
 800a694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a696:	e008      	b.n	800a6aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	e000      	b.n	800a6ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3714      	adds	r7, #20
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	40010000 	.word	0x40010000
 800a6c0:	40000400 	.word	0x40000400
 800a6c4:	40000800 	.word	0x40000800
 800a6c8:	40000c00 	.word	0x40000c00
 800a6cc:	40010400 	.word	0x40010400
 800a6d0:	40001800 	.word	0x40001800
 800a6d4:	40014000 	.word	0x40014000
 800a6d8:	00010007 	.word	0x00010007

0800a6dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	f003 0302 	and.w	r3, r3, #2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d020      	beq.n	800a740 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f003 0302 	and.w	r3, r3, #2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01b      	beq.n	800a740 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f06f 0202 	mvn.w	r2, #2
 800a710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f8e9 	bl	800a8fe <HAL_TIM_IC_CaptureCallback>
 800a72c:	e005      	b.n	800a73a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f8db 	bl	800a8ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f8ec 	bl	800a912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f003 0304 	and.w	r3, r3, #4
 800a746:	2b00      	cmp	r3, #0
 800a748:	d020      	beq.n	800a78c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01b      	beq.n	800a78c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f06f 0204 	mvn.w	r2, #4
 800a75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2202      	movs	r2, #2
 800a762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f8c3 	bl	800a8fe <HAL_TIM_IC_CaptureCallback>
 800a778:	e005      	b.n	800a786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f8b5 	bl	800a8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 f8c6 	bl	800a912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f003 0308 	and.w	r3, r3, #8
 800a792:	2b00      	cmp	r3, #0
 800a794:	d020      	beq.n	800a7d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01b      	beq.n	800a7d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f06f 0208 	mvn.w	r2, #8
 800a7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f89d 	bl	800a8fe <HAL_TIM_IC_CaptureCallback>
 800a7c4:	e005      	b.n	800a7d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f88f 	bl	800a8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f8a0 	bl	800a912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f003 0310 	and.w	r3, r3, #16
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d020      	beq.n	800a824 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f003 0310 	and.w	r3, r3, #16
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d01b      	beq.n	800a824 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f06f 0210 	mvn.w	r2, #16
 800a7f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2208      	movs	r2, #8
 800a7fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f877 	bl	800a8fe <HAL_TIM_IC_CaptureCallback>
 800a810:	e005      	b.n	800a81e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f869 	bl	800a8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f87a 	bl	800a912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f003 0301 	and.w	r3, r3, #1
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00c      	beq.n	800a848 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d007      	beq.n	800a848 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f06f 0201 	mvn.w	r2, #1
 800a840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7f6 fc6a 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d104      	bne.n	800a85c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00c      	beq.n	800a876 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f913 	bl	800aa9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00c      	beq.n	800a89a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f90b 	bl	800aab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00c      	beq.n	800a8be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d007      	beq.n	800a8be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a8b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f834 	bl	800a926 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f003 0320 	and.w	r3, r3, #32
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00c      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f003 0320 	and.w	r3, r3, #32
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d007      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f06f 0220 	mvn.w	r2, #32
 800a8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f8d3 	bl	800aa88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8f2:	bf00      	nop
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8fe:	b480      	push	{r7}
 800a900:	b083      	sub	sp, #12
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a92e:	bf00      	nop
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
	...

0800a93c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a46      	ldr	r2, [pc, #280]	@ (800aa68 <TIM_Base_SetConfig+0x12c>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d013      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a95a:	d00f      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a43      	ldr	r2, [pc, #268]	@ (800aa6c <TIM_Base_SetConfig+0x130>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d00b      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a42      	ldr	r2, [pc, #264]	@ (800aa70 <TIM_Base_SetConfig+0x134>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d007      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a41      	ldr	r2, [pc, #260]	@ (800aa74 <TIM_Base_SetConfig+0x138>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d003      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a40      	ldr	r2, [pc, #256]	@ (800aa78 <TIM_Base_SetConfig+0x13c>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d108      	bne.n	800a98e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a35      	ldr	r2, [pc, #212]	@ (800aa68 <TIM_Base_SetConfig+0x12c>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d01f      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a99c:	d01b      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a32      	ldr	r2, [pc, #200]	@ (800aa6c <TIM_Base_SetConfig+0x130>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d017      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a31      	ldr	r2, [pc, #196]	@ (800aa70 <TIM_Base_SetConfig+0x134>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d013      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a30      	ldr	r2, [pc, #192]	@ (800aa74 <TIM_Base_SetConfig+0x138>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00f      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a2f      	ldr	r2, [pc, #188]	@ (800aa78 <TIM_Base_SetConfig+0x13c>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00b      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a2e      	ldr	r2, [pc, #184]	@ (800aa7c <TIM_Base_SetConfig+0x140>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d007      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a2d      	ldr	r2, [pc, #180]	@ (800aa80 <TIM_Base_SetConfig+0x144>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d003      	beq.n	800a9d6 <TIM_Base_SetConfig+0x9a>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a2c      	ldr	r2, [pc, #176]	@ (800aa84 <TIM_Base_SetConfig+0x148>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d108      	bne.n	800a9e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a16      	ldr	r2, [pc, #88]	@ (800aa68 <TIM_Base_SetConfig+0x12c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d00f      	beq.n	800aa34 <TIM_Base_SetConfig+0xf8>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a18      	ldr	r2, [pc, #96]	@ (800aa78 <TIM_Base_SetConfig+0x13c>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d00b      	beq.n	800aa34 <TIM_Base_SetConfig+0xf8>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a17      	ldr	r2, [pc, #92]	@ (800aa7c <TIM_Base_SetConfig+0x140>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d007      	beq.n	800aa34 <TIM_Base_SetConfig+0xf8>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a16      	ldr	r2, [pc, #88]	@ (800aa80 <TIM_Base_SetConfig+0x144>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d003      	beq.n	800aa34 <TIM_Base_SetConfig+0xf8>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a15      	ldr	r2, [pc, #84]	@ (800aa84 <TIM_Base_SetConfig+0x148>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d103      	bne.n	800aa3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	691a      	ldr	r2, [r3, #16]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d105      	bne.n	800aa5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	f023 0201 	bic.w	r2, r3, #1
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	611a      	str	r2, [r3, #16]
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	40010000 	.word	0x40010000
 800aa6c:	40000400 	.word	0x40000400
 800aa70:	40000800 	.word	0x40000800
 800aa74:	40000c00 	.word	0x40000c00
 800aa78:	40010400 	.word	0x40010400
 800aa7c:	40014000 	.word	0x40014000
 800aa80:	40014400 	.word	0x40014400
 800aa84:	40014800 	.word	0x40014800

0800aa88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e042      	b.n	800ab5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7f6 fcfd 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2224      	movs	r2, #36	@ 0x24
 800aaf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0201 	bic.w	r2, r2, #1
 800ab04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f001 fa3a 	bl	800bf88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fccf 	bl	800b4b8 <UART_SetConfig>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d101      	bne.n	800ab24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e01b      	b.n	800ab5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f001 fab9 	bl	800c0cc <UART_CheckIdleState>
 800ab5a:	4603      	mov	r3, r0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08a      	sub	sp, #40	@ 0x28
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	4613      	mov	r3, r2
 800ab72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	d17b      	bne.n	800ac76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <HAL_UART_Transmit+0x26>
 800ab84:	88fb      	ldrh	r3, [r7, #6]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e074      	b.n	800ac78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2221      	movs	r2, #33	@ 0x21
 800ab9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab9e:	f7f6 fe3d 	bl	800181c <HAL_GetTick>
 800aba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	88fa      	ldrh	r2, [r7, #6]
 800aba8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	88fa      	ldrh	r2, [r7, #6]
 800abb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abbc:	d108      	bne.n	800abd0 <HAL_UART_Transmit+0x6c>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d104      	bne.n	800abd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	61bb      	str	r3, [r7, #24]
 800abce:	e003      	b.n	800abd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800abd8:	e030      	b.n	800ac3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2200      	movs	r2, #0
 800abe2:	2180      	movs	r1, #128	@ 0x80
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f001 fb1b 	bl	800c220 <UART_WaitOnFlagUntilTimeout>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e03d      	b.n	800ac78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10b      	bne.n	800ac1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	3302      	adds	r3, #2
 800ac16:	61bb      	str	r3, [r7, #24]
 800ac18:	e007      	b.n	800ac2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	781a      	ldrb	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	3301      	adds	r3, #1
 800ac28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	3b01      	subs	r3, #1
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1c8      	bne.n	800abda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2140      	movs	r1, #64	@ 0x40
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f001 fae4 	bl	800c220 <UART_WaitOnFlagUntilTimeout>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2220      	movs	r2, #32
 800ac62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e006      	b.n	800ac78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e000      	b.n	800ac78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ac76:	2302      	movs	r3, #2
  }
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3720      	adds	r7, #32
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08a      	sub	sp, #40	@ 0x28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac94:	2b20      	cmp	r3, #32
 800ac96:	d137      	bne.n	800ad08 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <HAL_UART_Receive_IT+0x24>
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e030      	b.n	800ad0a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a18      	ldr	r2, [pc, #96]	@ (800ad14 <HAL_UART_Receive_IT+0x94>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d01f      	beq.n	800acf8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d018      	beq.n	800acf8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	e853 3f00 	ldrex	r3, [r3]
 800acd2:	613b      	str	r3, [r7, #16]
   return(result);
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800acda:	627b      	str	r3, [r7, #36]	@ 0x24
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	623b      	str	r3, [r7, #32]
 800ace6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	69f9      	ldr	r1, [r7, #28]
 800acea:	6a3a      	ldr	r2, [r7, #32]
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	61bb      	str	r3, [r7, #24]
   return(result);
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e6      	bne.n	800acc6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800acf8:	88fb      	ldrh	r3, [r7, #6]
 800acfa:	461a      	mov	r2, r3
 800acfc:	68b9      	ldr	r1, [r7, #8]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f001 fafc 	bl	800c2fc <UART_Start_Receive_IT>
 800ad04:	4603      	mov	r3, r0
 800ad06:	e000      	b.n	800ad0a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ad08:	2302      	movs	r3, #2
  }
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3728      	adds	r7, #40	@ 0x28
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	58000c00 	.word	0x58000c00

0800ad18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b0ba      	sub	sp, #232	@ 0xe8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad42:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ad46:	4013      	ands	r3, r2
 800ad48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ad4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d11b      	bne.n	800ad8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d015      	beq.n	800ad8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad64:	f003 0320 	and.w	r3, r3, #32
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d105      	bne.n	800ad78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d009      	beq.n	800ad8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 8377 	beq.w	800b470 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	4798      	blx	r3
      }
      return;
 800ad8a:	e371      	b.n	800b470 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 8123 	beq.w	800afdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad9a:	4b8d      	ldr	r3, [pc, #564]	@ (800afd0 <HAL_UART_IRQHandler+0x2b8>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d106      	bne.n	800adb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ada2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ada6:	4b8b      	ldr	r3, [pc, #556]	@ (800afd4 <HAL_UART_IRQHandler+0x2bc>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 8116 	beq.w	800afdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d011      	beq.n	800ade0 <HAL_UART_IRQHandler+0xc8>
 800adbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2201      	movs	r2, #1
 800adce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800add6:	f043 0201 	orr.w	r2, r3, #1
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ade0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d011      	beq.n	800ae10 <HAL_UART_IRQHandler+0xf8>
 800adec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2202      	movs	r2, #2
 800adfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae06:	f043 0204 	orr.w	r2, r3, #4
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d011      	beq.n	800ae40 <HAL_UART_IRQHandler+0x128>
 800ae1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00b      	beq.n	800ae40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2204      	movs	r2, #4
 800ae2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae36:	f043 0202 	orr.w	r2, r3, #2
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae44:	f003 0308 	and.w	r3, r3, #8
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d017      	beq.n	800ae7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d105      	bne.n	800ae64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae5c:	4b5c      	ldr	r3, [pc, #368]	@ (800afd0 <HAL_UART_IRQHandler+0x2b8>)
 800ae5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2208      	movs	r2, #8
 800ae6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae72:	f043 0208 	orr.w	r2, r3, #8
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d012      	beq.n	800aeae <HAL_UART_IRQHandler+0x196>
 800ae88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00c      	beq.n	800aeae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aea4:	f043 0220 	orr.w	r2, r3, #32
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 82dd 	beq.w	800b474 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aeba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aebe:	f003 0320 	and.w	r3, r3, #32
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d013      	beq.n	800aeee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeca:	f003 0320 	and.w	r3, r3, #32
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d105      	bne.n	800aede <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d007      	beq.n	800aeee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af02:	2b40      	cmp	r3, #64	@ 0x40
 800af04:	d005      	beq.n	800af12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d054      	beq.n	800afbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f001 fb14 	bl	800c540 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af22:	2b40      	cmp	r3, #64	@ 0x40
 800af24:	d146      	bne.n	800afb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3308      	adds	r3, #8
 800af2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af34:	e853 3f00 	ldrex	r3, [r3]
 800af38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800af3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3308      	adds	r3, #8
 800af4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800af52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800af56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800af5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af62:	e841 2300 	strex	r3, r2, [r1]
 800af66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1d9      	bne.n	800af26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d017      	beq.n	800afac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af82:	4a15      	ldr	r2, [pc, #84]	@ (800afd8 <HAL_UART_IRQHandler+0x2c0>)
 800af84:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7f9 fcef 	bl	8004970 <HAL_DMA_Abort_IT>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d019      	beq.n	800afcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800afa6:	4610      	mov	r0, r2
 800afa8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afaa:	e00f      	b.n	800afcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fa6d 	bl	800b48c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb2:	e00b      	b.n	800afcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fa69 	bl	800b48c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afba:	e007      	b.n	800afcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fa65 	bl	800b48c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800afca:	e253      	b.n	800b474 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afcc:	bf00      	nop
    return;
 800afce:	e251      	b.n	800b474 <HAL_UART_IRQHandler+0x75c>
 800afd0:	10000001 	.word	0x10000001
 800afd4:	04000120 	.word	0x04000120
 800afd8:	0800c60d 	.word	0x0800c60d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	f040 81e7 	bne.w	800b3b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afea:	f003 0310 	and.w	r3, r3, #16
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 81e0 	beq.w	800b3b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aff8:	f003 0310 	and.w	r3, r3, #16
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 81d9 	beq.w	800b3b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2210      	movs	r2, #16
 800b008:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b014:	2b40      	cmp	r3, #64	@ 0x40
 800b016:	f040 8151 	bne.w	800b2bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a96      	ldr	r2, [pc, #600]	@ (800b27c <HAL_UART_IRQHandler+0x564>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d068      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a93      	ldr	r2, [pc, #588]	@ (800b280 <HAL_UART_IRQHandler+0x568>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d061      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a91      	ldr	r2, [pc, #580]	@ (800b284 <HAL_UART_IRQHandler+0x56c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d05a      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a8e      	ldr	r2, [pc, #568]	@ (800b288 <HAL_UART_IRQHandler+0x570>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d053      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a8c      	ldr	r2, [pc, #560]	@ (800b28c <HAL_UART_IRQHandler+0x574>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d04c      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a89      	ldr	r2, [pc, #548]	@ (800b290 <HAL_UART_IRQHandler+0x578>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d045      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a87      	ldr	r2, [pc, #540]	@ (800b294 <HAL_UART_IRQHandler+0x57c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d03e      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a84      	ldr	r2, [pc, #528]	@ (800b298 <HAL_UART_IRQHandler+0x580>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d037      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a82      	ldr	r2, [pc, #520]	@ (800b29c <HAL_UART_IRQHandler+0x584>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d030      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a7f      	ldr	r2, [pc, #508]	@ (800b2a0 <HAL_UART_IRQHandler+0x588>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d029      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a7d      	ldr	r2, [pc, #500]	@ (800b2a4 <HAL_UART_IRQHandler+0x58c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d022      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a7a      	ldr	r2, [pc, #488]	@ (800b2a8 <HAL_UART_IRQHandler+0x590>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d01b      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a78      	ldr	r2, [pc, #480]	@ (800b2ac <HAL_UART_IRQHandler+0x594>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d014      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a75      	ldr	r2, [pc, #468]	@ (800b2b0 <HAL_UART_IRQHandler+0x598>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d00d      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a73      	ldr	r2, [pc, #460]	@ (800b2b4 <HAL_UART_IRQHandler+0x59c>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d006      	beq.n	800b0fa <HAL_UART_IRQHandler+0x3e2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a70      	ldr	r2, [pc, #448]	@ (800b2b8 <HAL_UART_IRQHandler+0x5a0>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d106      	bne.n	800b108 <HAL_UART_IRQHandler+0x3f0>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	b29b      	uxth	r3, r3
 800b106:	e005      	b.n	800b114 <HAL_UART_IRQHandler+0x3fc>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	b29b      	uxth	r3, r3
 800b114:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f000 81ab 	beq.w	800b478 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b128:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b12c:	429a      	cmp	r2, r3
 800b12e:	f080 81a3 	bcs.w	800b478 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b138:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b148:	f000 8087 	beq.w	800b25a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b158:	e853 3f00 	ldrex	r3, [r3]
 800b15c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b160:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b17a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b182:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1da      	bne.n	800b14c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3308      	adds	r3, #8
 800b19c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1a0:	e853 3f00 	ldrex	r3, [r3]
 800b1a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b1a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1a8:	f023 0301 	bic.w	r3, r3, #1
 800b1ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b1ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b1be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b1c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e1      	bne.n	800b196 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b1e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b1f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b1f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b1fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e3      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b228:	f023 0310 	bic.w	r3, r3, #16
 800b22c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b23a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b23c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e4      	bne.n	800b218 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b254:	4618      	mov	r0, r3
 800b256:	f7f9 f86d 	bl	8004334 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2202      	movs	r2, #2
 800b25e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	b29b      	uxth	r3, r3
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f913 	bl	800b4a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b27a:	e0fd      	b.n	800b478 <HAL_UART_IRQHandler+0x760>
 800b27c:	40020010 	.word	0x40020010
 800b280:	40020028 	.word	0x40020028
 800b284:	40020040 	.word	0x40020040
 800b288:	40020058 	.word	0x40020058
 800b28c:	40020070 	.word	0x40020070
 800b290:	40020088 	.word	0x40020088
 800b294:	400200a0 	.word	0x400200a0
 800b298:	400200b8 	.word	0x400200b8
 800b29c:	40020410 	.word	0x40020410
 800b2a0:	40020428 	.word	0x40020428
 800b2a4:	40020440 	.word	0x40020440
 800b2a8:	40020458 	.word	0x40020458
 800b2ac:	40020470 	.word	0x40020470
 800b2b0:	40020488 	.word	0x40020488
 800b2b4:	400204a0 	.word	0x400204a0
 800b2b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f000 80cf 	beq.w	800b47c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b2de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 80ca 	beq.w	800b47c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	461a      	mov	r2, r3
 800b306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b30a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e4      	bne.n	800b2e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3308      	adds	r3, #8
 800b324:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	623b      	str	r3, [r7, #32]
   return(result);
 800b32e:	6a3a      	ldr	r2, [r7, #32]
 800b330:	4b55      	ldr	r3, [pc, #340]	@ (800b488 <HAL_UART_IRQHandler+0x770>)
 800b332:	4013      	ands	r3, r2
 800b334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3308      	adds	r3, #8
 800b33e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b342:	633a      	str	r2, [r7, #48]	@ 0x30
 800b344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b34a:	e841 2300 	strex	r3, r2, [r1]
 800b34e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e3      	bne.n	800b31e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2220      	movs	r2, #32
 800b35a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	e853 3f00 	ldrex	r3, [r3]
 800b376:	60fb      	str	r3, [r7, #12]
   return(result);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f023 0310 	bic.w	r3, r3, #16
 800b37e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	69b9      	ldr	r1, [r7, #24]
 800b392:	69fa      	ldr	r2, [r7, #28]
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	617b      	str	r3, [r7, #20]
   return(result);
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e4      	bne.n	800b36a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f877 	bl	800b4a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3b2:	e063      	b.n	800b47c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00e      	beq.n	800b3de <HAL_UART_IRQHandler+0x6c6>
 800b3c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d008      	beq.n	800b3de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b3d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 fe76 	bl	800d0c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3dc:	e051      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d014      	beq.n	800b414 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b3ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d105      	bne.n	800b402 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b3f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d008      	beq.n	800b414 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b406:	2b00      	cmp	r3, #0
 800b408:	d03a      	beq.n	800b480 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	4798      	blx	r3
    }
    return;
 800b412:	e035      	b.n	800b480 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d009      	beq.n	800b434 <HAL_UART_IRQHandler+0x71c>
 800b420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 f903 	bl	800c638 <UART_EndTransmit_IT>
    return;
 800b432:	e026      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b438:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d009      	beq.n	800b454 <HAL_UART_IRQHandler+0x73c>
 800b440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b444:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d003      	beq.n	800b454 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f001 fe4f 	bl	800d0f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b452:	e016      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d010      	beq.n	800b482 <HAL_UART_IRQHandler+0x76a>
 800b460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b464:	2b00      	cmp	r3, #0
 800b466:	da0c      	bge.n	800b482 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f001 fe37 	bl	800d0dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b46e:	e008      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
      return;
 800b470:	bf00      	nop
 800b472:	e006      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
    return;
 800b474:	bf00      	nop
 800b476:	e004      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
      return;
 800b478:	bf00      	nop
 800b47a:	e002      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
      return;
 800b47c:	bf00      	nop
 800b47e:	e000      	b.n	800b482 <HAL_UART_IRQHandler+0x76a>
    return;
 800b480:	bf00      	nop
  }
}
 800b482:	37e8      	adds	r7, #232	@ 0xe8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	effffffe 	.word	0xeffffffe

0800b48c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4bc:	b092      	sub	sp, #72	@ 0x48
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	689a      	ldr	r2, [r3, #8]
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	695b      	ldr	r3, [r3, #20]
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	4bbe      	ldr	r3, [pc, #760]	@ (800b7e0 <UART_SetConfig+0x328>)
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	6812      	ldr	r2, [r2, #0]
 800b4ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	699b      	ldr	r3, [r3, #24]
 800b50e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4ab3      	ldr	r2, [pc, #716]	@ (800b7e4 <UART_SetConfig+0x32c>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d004      	beq.n	800b524 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b520:	4313      	orrs	r3, r2
 800b522:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	689a      	ldr	r2, [r3, #8]
 800b52a:	4baf      	ldr	r3, [pc, #700]	@ (800b7e8 <UART_SetConfig+0x330>)
 800b52c:	4013      	ands	r3, r2
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	6812      	ldr	r2, [r2, #0]
 800b532:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b534:	430b      	orrs	r3, r1
 800b536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53e:	f023 010f 	bic.w	r1, r3, #15
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4aa6      	ldr	r2, [pc, #664]	@ (800b7ec <UART_SetConfig+0x334>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d177      	bne.n	800b648 <UART_SetConfig+0x190>
 800b558:	4ba5      	ldr	r3, [pc, #660]	@ (800b7f0 <UART_SetConfig+0x338>)
 800b55a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b55c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b560:	2b28      	cmp	r3, #40	@ 0x28
 800b562:	d86d      	bhi.n	800b640 <UART_SetConfig+0x188>
 800b564:	a201      	add	r2, pc, #4	@ (adr r2, 800b56c <UART_SetConfig+0xb4>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b611 	.word	0x0800b611
 800b570:	0800b641 	.word	0x0800b641
 800b574:	0800b641 	.word	0x0800b641
 800b578:	0800b641 	.word	0x0800b641
 800b57c:	0800b641 	.word	0x0800b641
 800b580:	0800b641 	.word	0x0800b641
 800b584:	0800b641 	.word	0x0800b641
 800b588:	0800b641 	.word	0x0800b641
 800b58c:	0800b619 	.word	0x0800b619
 800b590:	0800b641 	.word	0x0800b641
 800b594:	0800b641 	.word	0x0800b641
 800b598:	0800b641 	.word	0x0800b641
 800b59c:	0800b641 	.word	0x0800b641
 800b5a0:	0800b641 	.word	0x0800b641
 800b5a4:	0800b641 	.word	0x0800b641
 800b5a8:	0800b641 	.word	0x0800b641
 800b5ac:	0800b621 	.word	0x0800b621
 800b5b0:	0800b641 	.word	0x0800b641
 800b5b4:	0800b641 	.word	0x0800b641
 800b5b8:	0800b641 	.word	0x0800b641
 800b5bc:	0800b641 	.word	0x0800b641
 800b5c0:	0800b641 	.word	0x0800b641
 800b5c4:	0800b641 	.word	0x0800b641
 800b5c8:	0800b641 	.word	0x0800b641
 800b5cc:	0800b629 	.word	0x0800b629
 800b5d0:	0800b641 	.word	0x0800b641
 800b5d4:	0800b641 	.word	0x0800b641
 800b5d8:	0800b641 	.word	0x0800b641
 800b5dc:	0800b641 	.word	0x0800b641
 800b5e0:	0800b641 	.word	0x0800b641
 800b5e4:	0800b641 	.word	0x0800b641
 800b5e8:	0800b641 	.word	0x0800b641
 800b5ec:	0800b631 	.word	0x0800b631
 800b5f0:	0800b641 	.word	0x0800b641
 800b5f4:	0800b641 	.word	0x0800b641
 800b5f8:	0800b641 	.word	0x0800b641
 800b5fc:	0800b641 	.word	0x0800b641
 800b600:	0800b641 	.word	0x0800b641
 800b604:	0800b641 	.word	0x0800b641
 800b608:	0800b641 	.word	0x0800b641
 800b60c:	0800b639 	.word	0x0800b639
 800b610:	2301      	movs	r3, #1
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b616:	e222      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b618:	2304      	movs	r3, #4
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61e:	e21e      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b620:	2308      	movs	r3, #8
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b626:	e21a      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b628:	2310      	movs	r3, #16
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62e:	e216      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b630:	2320      	movs	r3, #32
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b636:	e212      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b638:	2340      	movs	r3, #64	@ 0x40
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63e:	e20e      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b640:	2380      	movs	r3, #128	@ 0x80
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b646:	e20a      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a69      	ldr	r2, [pc, #420]	@ (800b7f4 <UART_SetConfig+0x33c>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d130      	bne.n	800b6b4 <UART_SetConfig+0x1fc>
 800b652:	4b67      	ldr	r3, [pc, #412]	@ (800b7f0 <UART_SetConfig+0x338>)
 800b654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b656:	f003 0307 	and.w	r3, r3, #7
 800b65a:	2b05      	cmp	r3, #5
 800b65c:	d826      	bhi.n	800b6ac <UART_SetConfig+0x1f4>
 800b65e:	a201      	add	r2, pc, #4	@ (adr r2, 800b664 <UART_SetConfig+0x1ac>)
 800b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b664:	0800b67d 	.word	0x0800b67d
 800b668:	0800b685 	.word	0x0800b685
 800b66c:	0800b68d 	.word	0x0800b68d
 800b670:	0800b695 	.word	0x0800b695
 800b674:	0800b69d 	.word	0x0800b69d
 800b678:	0800b6a5 	.word	0x0800b6a5
 800b67c:	2300      	movs	r3, #0
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b682:	e1ec      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b684:	2304      	movs	r3, #4
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68a:	e1e8      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b68c:	2308      	movs	r3, #8
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b692:	e1e4      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b694:	2310      	movs	r3, #16
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69a:	e1e0      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b69c:	2320      	movs	r3, #32
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	e1dc      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b6a4:	2340      	movs	r3, #64	@ 0x40
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6aa:	e1d8      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b6ac:	2380      	movs	r3, #128	@ 0x80
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b2:	e1d4      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a4f      	ldr	r2, [pc, #316]	@ (800b7f8 <UART_SetConfig+0x340>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d130      	bne.n	800b720 <UART_SetConfig+0x268>
 800b6be:	4b4c      	ldr	r3, [pc, #304]	@ (800b7f0 <UART_SetConfig+0x338>)
 800b6c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6c2:	f003 0307 	and.w	r3, r3, #7
 800b6c6:	2b05      	cmp	r3, #5
 800b6c8:	d826      	bhi.n	800b718 <UART_SetConfig+0x260>
 800b6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <UART_SetConfig+0x218>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b6e9 	.word	0x0800b6e9
 800b6d4:	0800b6f1 	.word	0x0800b6f1
 800b6d8:	0800b6f9 	.word	0x0800b6f9
 800b6dc:	0800b701 	.word	0x0800b701
 800b6e0:	0800b709 	.word	0x0800b709
 800b6e4:	0800b711 	.word	0x0800b711
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ee:	e1b6      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e1b2      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b6f8:	2308      	movs	r3, #8
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	e1ae      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b700:	2310      	movs	r3, #16
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b706:	e1aa      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b708:	2320      	movs	r3, #32
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70e:	e1a6      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b710:	2340      	movs	r3, #64	@ 0x40
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e1a2      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b718:	2380      	movs	r3, #128	@ 0x80
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e19e      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a35      	ldr	r2, [pc, #212]	@ (800b7fc <UART_SetConfig+0x344>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d130      	bne.n	800b78c <UART_SetConfig+0x2d4>
 800b72a:	4b31      	ldr	r3, [pc, #196]	@ (800b7f0 <UART_SetConfig+0x338>)
 800b72c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	2b05      	cmp	r3, #5
 800b734:	d826      	bhi.n	800b784 <UART_SetConfig+0x2cc>
 800b736:	a201      	add	r2, pc, #4	@ (adr r2, 800b73c <UART_SetConfig+0x284>)
 800b738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73c:	0800b755 	.word	0x0800b755
 800b740:	0800b75d 	.word	0x0800b75d
 800b744:	0800b765 	.word	0x0800b765
 800b748:	0800b76d 	.word	0x0800b76d
 800b74c:	0800b775 	.word	0x0800b775
 800b750:	0800b77d 	.word	0x0800b77d
 800b754:	2300      	movs	r3, #0
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75a:	e180      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b75c:	2304      	movs	r3, #4
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b762:	e17c      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b764:	2308      	movs	r3, #8
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76a:	e178      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b76c:	2310      	movs	r3, #16
 800b76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b772:	e174      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b774:	2320      	movs	r3, #32
 800b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b77a:	e170      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b77c:	2340      	movs	r3, #64	@ 0x40
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b782:	e16c      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b784:	2380      	movs	r3, #128	@ 0x80
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b78a:	e168      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a1b      	ldr	r2, [pc, #108]	@ (800b800 <UART_SetConfig+0x348>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d142      	bne.n	800b81c <UART_SetConfig+0x364>
 800b796:	4b16      	ldr	r3, [pc, #88]	@ (800b7f0 <UART_SetConfig+0x338>)
 800b798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b79a:	f003 0307 	and.w	r3, r3, #7
 800b79e:	2b05      	cmp	r3, #5
 800b7a0:	d838      	bhi.n	800b814 <UART_SetConfig+0x35c>
 800b7a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a8 <UART_SetConfig+0x2f0>)
 800b7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a8:	0800b7c1 	.word	0x0800b7c1
 800b7ac:	0800b7c9 	.word	0x0800b7c9
 800b7b0:	0800b7d1 	.word	0x0800b7d1
 800b7b4:	0800b7d9 	.word	0x0800b7d9
 800b7b8:	0800b805 	.word	0x0800b805
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c6:	e14a      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b7c8:	2304      	movs	r3, #4
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ce:	e146      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b7d0:	2308      	movs	r3, #8
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d6:	e142      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b7d8:	2310      	movs	r3, #16
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7de:	e13e      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b7e0:	cfff69f3 	.word	0xcfff69f3
 800b7e4:	58000c00 	.word	0x58000c00
 800b7e8:	11fff4ff 	.word	0x11fff4ff
 800b7ec:	40011000 	.word	0x40011000
 800b7f0:	58024400 	.word	0x58024400
 800b7f4:	40004400 	.word	0x40004400
 800b7f8:	40004800 	.word	0x40004800
 800b7fc:	40004c00 	.word	0x40004c00
 800b800:	40005000 	.word	0x40005000
 800b804:	2320      	movs	r3, #32
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80a:	e128      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b80c:	2340      	movs	r3, #64	@ 0x40
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b812:	e124      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b814:	2380      	movs	r3, #128	@ 0x80
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81a:	e120      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4acb      	ldr	r2, [pc, #812]	@ (800bb50 <UART_SetConfig+0x698>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d176      	bne.n	800b914 <UART_SetConfig+0x45c>
 800b826:	4bcb      	ldr	r3, [pc, #812]	@ (800bb54 <UART_SetConfig+0x69c>)
 800b828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b82a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b82e:	2b28      	cmp	r3, #40	@ 0x28
 800b830:	d86c      	bhi.n	800b90c <UART_SetConfig+0x454>
 800b832:	a201      	add	r2, pc, #4	@ (adr r2, 800b838 <UART_SetConfig+0x380>)
 800b834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b838:	0800b8dd 	.word	0x0800b8dd
 800b83c:	0800b90d 	.word	0x0800b90d
 800b840:	0800b90d 	.word	0x0800b90d
 800b844:	0800b90d 	.word	0x0800b90d
 800b848:	0800b90d 	.word	0x0800b90d
 800b84c:	0800b90d 	.word	0x0800b90d
 800b850:	0800b90d 	.word	0x0800b90d
 800b854:	0800b90d 	.word	0x0800b90d
 800b858:	0800b8e5 	.word	0x0800b8e5
 800b85c:	0800b90d 	.word	0x0800b90d
 800b860:	0800b90d 	.word	0x0800b90d
 800b864:	0800b90d 	.word	0x0800b90d
 800b868:	0800b90d 	.word	0x0800b90d
 800b86c:	0800b90d 	.word	0x0800b90d
 800b870:	0800b90d 	.word	0x0800b90d
 800b874:	0800b90d 	.word	0x0800b90d
 800b878:	0800b8ed 	.word	0x0800b8ed
 800b87c:	0800b90d 	.word	0x0800b90d
 800b880:	0800b90d 	.word	0x0800b90d
 800b884:	0800b90d 	.word	0x0800b90d
 800b888:	0800b90d 	.word	0x0800b90d
 800b88c:	0800b90d 	.word	0x0800b90d
 800b890:	0800b90d 	.word	0x0800b90d
 800b894:	0800b90d 	.word	0x0800b90d
 800b898:	0800b8f5 	.word	0x0800b8f5
 800b89c:	0800b90d 	.word	0x0800b90d
 800b8a0:	0800b90d 	.word	0x0800b90d
 800b8a4:	0800b90d 	.word	0x0800b90d
 800b8a8:	0800b90d 	.word	0x0800b90d
 800b8ac:	0800b90d 	.word	0x0800b90d
 800b8b0:	0800b90d 	.word	0x0800b90d
 800b8b4:	0800b90d 	.word	0x0800b90d
 800b8b8:	0800b8fd 	.word	0x0800b8fd
 800b8bc:	0800b90d 	.word	0x0800b90d
 800b8c0:	0800b90d 	.word	0x0800b90d
 800b8c4:	0800b90d 	.word	0x0800b90d
 800b8c8:	0800b90d 	.word	0x0800b90d
 800b8cc:	0800b90d 	.word	0x0800b90d
 800b8d0:	0800b90d 	.word	0x0800b90d
 800b8d4:	0800b90d 	.word	0x0800b90d
 800b8d8:	0800b905 	.word	0x0800b905
 800b8dc:	2301      	movs	r3, #1
 800b8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e2:	e0bc      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b8e4:	2304      	movs	r3, #4
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ea:	e0b8      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b8ec:	2308      	movs	r3, #8
 800b8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f2:	e0b4      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fa:	e0b0      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b8fc:	2320      	movs	r3, #32
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b902:	e0ac      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b904:	2340      	movs	r3, #64	@ 0x40
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90a:	e0a8      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b90c:	2380      	movs	r3, #128	@ 0x80
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b912:	e0a4      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a8f      	ldr	r2, [pc, #572]	@ (800bb58 <UART_SetConfig+0x6a0>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d130      	bne.n	800b980 <UART_SetConfig+0x4c8>
 800b91e:	4b8d      	ldr	r3, [pc, #564]	@ (800bb54 <UART_SetConfig+0x69c>)
 800b920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b922:	f003 0307 	and.w	r3, r3, #7
 800b926:	2b05      	cmp	r3, #5
 800b928:	d826      	bhi.n	800b978 <UART_SetConfig+0x4c0>
 800b92a:	a201      	add	r2, pc, #4	@ (adr r2, 800b930 <UART_SetConfig+0x478>)
 800b92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b930:	0800b949 	.word	0x0800b949
 800b934:	0800b951 	.word	0x0800b951
 800b938:	0800b959 	.word	0x0800b959
 800b93c:	0800b961 	.word	0x0800b961
 800b940:	0800b969 	.word	0x0800b969
 800b944:	0800b971 	.word	0x0800b971
 800b948:	2300      	movs	r3, #0
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94e:	e086      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b950:	2304      	movs	r3, #4
 800b952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b956:	e082      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b958:	2308      	movs	r3, #8
 800b95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95e:	e07e      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b960:	2310      	movs	r3, #16
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e07a      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b968:	2320      	movs	r3, #32
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e076      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b970:	2340      	movs	r3, #64	@ 0x40
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e072      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b978:	2380      	movs	r3, #128	@ 0x80
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e06e      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a75      	ldr	r2, [pc, #468]	@ (800bb5c <UART_SetConfig+0x6a4>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d130      	bne.n	800b9ec <UART_SetConfig+0x534>
 800b98a:	4b72      	ldr	r3, [pc, #456]	@ (800bb54 <UART_SetConfig+0x69c>)
 800b98c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b98e:	f003 0307 	and.w	r3, r3, #7
 800b992:	2b05      	cmp	r3, #5
 800b994:	d826      	bhi.n	800b9e4 <UART_SetConfig+0x52c>
 800b996:	a201      	add	r2, pc, #4	@ (adr r2, 800b99c <UART_SetConfig+0x4e4>)
 800b998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99c:	0800b9b5 	.word	0x0800b9b5
 800b9a0:	0800b9bd 	.word	0x0800b9bd
 800b9a4:	0800b9c5 	.word	0x0800b9c5
 800b9a8:	0800b9cd 	.word	0x0800b9cd
 800b9ac:	0800b9d5 	.word	0x0800b9d5
 800b9b0:	0800b9dd 	.word	0x0800b9dd
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ba:	e050      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b9bc:	2304      	movs	r3, #4
 800b9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9c2:	e04c      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b9c4:	2308      	movs	r3, #8
 800b9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ca:	e048      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b9cc:	2310      	movs	r3, #16
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d2:	e044      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b9d4:	2320      	movs	r3, #32
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9da:	e040      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b9dc:	2340      	movs	r3, #64	@ 0x40
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e03c      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b9e4:	2380      	movs	r3, #128	@ 0x80
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ea:	e038      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a5b      	ldr	r2, [pc, #364]	@ (800bb60 <UART_SetConfig+0x6a8>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d130      	bne.n	800ba58 <UART_SetConfig+0x5a0>
 800b9f6:	4b57      	ldr	r3, [pc, #348]	@ (800bb54 <UART_SetConfig+0x69c>)
 800b9f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	2b05      	cmp	r3, #5
 800ba00:	d826      	bhi.n	800ba50 <UART_SetConfig+0x598>
 800ba02:	a201      	add	r2, pc, #4	@ (adr r2, 800ba08 <UART_SetConfig+0x550>)
 800ba04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba08:	0800ba21 	.word	0x0800ba21
 800ba0c:	0800ba29 	.word	0x0800ba29
 800ba10:	0800ba31 	.word	0x0800ba31
 800ba14:	0800ba39 	.word	0x0800ba39
 800ba18:	0800ba41 	.word	0x0800ba41
 800ba1c:	0800ba49 	.word	0x0800ba49
 800ba20:	2302      	movs	r3, #2
 800ba22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba26:	e01a      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800ba28:	2304      	movs	r3, #4
 800ba2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba2e:	e016      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800ba30:	2308      	movs	r3, #8
 800ba32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba36:	e012      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba3e:	e00e      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800ba40:	2320      	movs	r3, #32
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba46:	e00a      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800ba48:	2340      	movs	r3, #64	@ 0x40
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4e:	e006      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800ba50:	2380      	movs	r3, #128	@ 0x80
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba56:	e002      	b.n	800ba5e <UART_SetConfig+0x5a6>
 800ba58:	2380      	movs	r3, #128	@ 0x80
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a3f      	ldr	r2, [pc, #252]	@ (800bb60 <UART_SetConfig+0x6a8>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	f040 80f8 	bne.w	800bc5a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ba6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	2b20      	cmp	r3, #32
 800ba70:	dc46      	bgt.n	800bb00 <UART_SetConfig+0x648>
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	f2c0 8082 	blt.w	800bb7c <UART_SetConfig+0x6c4>
 800ba78:	3b02      	subs	r3, #2
 800ba7a:	2b1e      	cmp	r3, #30
 800ba7c:	d87e      	bhi.n	800bb7c <UART_SetConfig+0x6c4>
 800ba7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba84 <UART_SetConfig+0x5cc>)
 800ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba84:	0800bb07 	.word	0x0800bb07
 800ba88:	0800bb7d 	.word	0x0800bb7d
 800ba8c:	0800bb0f 	.word	0x0800bb0f
 800ba90:	0800bb7d 	.word	0x0800bb7d
 800ba94:	0800bb7d 	.word	0x0800bb7d
 800ba98:	0800bb7d 	.word	0x0800bb7d
 800ba9c:	0800bb1f 	.word	0x0800bb1f
 800baa0:	0800bb7d 	.word	0x0800bb7d
 800baa4:	0800bb7d 	.word	0x0800bb7d
 800baa8:	0800bb7d 	.word	0x0800bb7d
 800baac:	0800bb7d 	.word	0x0800bb7d
 800bab0:	0800bb7d 	.word	0x0800bb7d
 800bab4:	0800bb7d 	.word	0x0800bb7d
 800bab8:	0800bb7d 	.word	0x0800bb7d
 800babc:	0800bb2f 	.word	0x0800bb2f
 800bac0:	0800bb7d 	.word	0x0800bb7d
 800bac4:	0800bb7d 	.word	0x0800bb7d
 800bac8:	0800bb7d 	.word	0x0800bb7d
 800bacc:	0800bb7d 	.word	0x0800bb7d
 800bad0:	0800bb7d 	.word	0x0800bb7d
 800bad4:	0800bb7d 	.word	0x0800bb7d
 800bad8:	0800bb7d 	.word	0x0800bb7d
 800badc:	0800bb7d 	.word	0x0800bb7d
 800bae0:	0800bb7d 	.word	0x0800bb7d
 800bae4:	0800bb7d 	.word	0x0800bb7d
 800bae8:	0800bb7d 	.word	0x0800bb7d
 800baec:	0800bb7d 	.word	0x0800bb7d
 800baf0:	0800bb7d 	.word	0x0800bb7d
 800baf4:	0800bb7d 	.word	0x0800bb7d
 800baf8:	0800bb7d 	.word	0x0800bb7d
 800bafc:	0800bb6f 	.word	0x0800bb6f
 800bb00:	2b40      	cmp	r3, #64	@ 0x40
 800bb02:	d037      	beq.n	800bb74 <UART_SetConfig+0x6bc>
 800bb04:	e03a      	b.n	800bb7c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bb06:	f7fd ff9b 	bl	8009a40 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb0c:	e03c      	b.n	800bb88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fd ffaa 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb1c:	e034      	b.n	800bb88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb1e:	f107 0318 	add.w	r3, r7, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fe f8f6 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb2c:	e02c      	b.n	800bb88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb2e:	4b09      	ldr	r3, [pc, #36]	@ (800bb54 <UART_SetConfig+0x69c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 0320 	and.w	r3, r3, #32
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d016      	beq.n	800bb68 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb3a:	4b06      	ldr	r3, [pc, #24]	@ (800bb54 <UART_SetConfig+0x69c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	08db      	lsrs	r3, r3, #3
 800bb40:	f003 0303 	and.w	r3, r3, #3
 800bb44:	4a07      	ldr	r2, [pc, #28]	@ (800bb64 <UART_SetConfig+0x6ac>)
 800bb46:	fa22 f303 	lsr.w	r3, r2, r3
 800bb4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb4c:	e01c      	b.n	800bb88 <UART_SetConfig+0x6d0>
 800bb4e:	bf00      	nop
 800bb50:	40011400 	.word	0x40011400
 800bb54:	58024400 	.word	0x58024400
 800bb58:	40007800 	.word	0x40007800
 800bb5c:	40007c00 	.word	0x40007c00
 800bb60:	58000c00 	.word	0x58000c00
 800bb64:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bb68:	4b9d      	ldr	r3, [pc, #628]	@ (800bde0 <UART_SetConfig+0x928>)
 800bb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb6c:	e00c      	b.n	800bb88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb6e:	4b9d      	ldr	r3, [pc, #628]	@ (800bde4 <UART_SetConfig+0x92c>)
 800bb70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb72:	e009      	b.n	800bb88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb7a:	e005      	b.n	800bb88 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 81de 	beq.w	800bf4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb94:	4a94      	ldr	r2, [pc, #592]	@ (800bde8 <UART_SetConfig+0x930>)
 800bb96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bba2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	4413      	add	r3, r2
 800bbae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d305      	bcc.n	800bbc0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d903      	bls.n	800bbc8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbc6:	e1c1      	b.n	800bf4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbca:	2200      	movs	r2, #0
 800bbcc:	60bb      	str	r3, [r7, #8]
 800bbce:	60fa      	str	r2, [r7, #12]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd4:	4a84      	ldr	r2, [pc, #528]	@ (800bde8 <UART_SetConfig+0x930>)
 800bbd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	2200      	movs	r2, #0
 800bbde:	603b      	str	r3, [r7, #0]
 800bbe0:	607a      	str	r2, [r7, #4]
 800bbe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbea:	f7f4 fbd1 	bl	8000390 <__aeabi_uldivmod>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	f04f 0200 	mov.w	r2, #0
 800bbfa:	f04f 0300 	mov.w	r3, #0
 800bbfe:	020b      	lsls	r3, r1, #8
 800bc00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc04:	0202      	lsls	r2, r0, #8
 800bc06:	6979      	ldr	r1, [r7, #20]
 800bc08:	6849      	ldr	r1, [r1, #4]
 800bc0a:	0849      	lsrs	r1, r1, #1
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	4605      	mov	r5, r0
 800bc12:	eb12 0804 	adds.w	r8, r2, r4
 800bc16:	eb43 0905 	adc.w	r9, r3, r5
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	469a      	mov	sl, r3
 800bc22:	4693      	mov	fp, r2
 800bc24:	4652      	mov	r2, sl
 800bc26:	465b      	mov	r3, fp
 800bc28:	4640      	mov	r0, r8
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	f7f4 fbb0 	bl	8000390 <__aeabi_uldivmod>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4613      	mov	r3, r2
 800bc36:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc3e:	d308      	bcc.n	800bc52 <UART_SetConfig+0x79a>
 800bc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc46:	d204      	bcs.n	800bc52 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc4e:	60da      	str	r2, [r3, #12]
 800bc50:	e17c      	b.n	800bf4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bc58:	e178      	b.n	800bf4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc62:	f040 80c5 	bne.w	800bdf0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bc66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	dc48      	bgt.n	800bd00 <UART_SetConfig+0x848>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	db7b      	blt.n	800bd6a <UART_SetConfig+0x8b2>
 800bc72:	2b20      	cmp	r3, #32
 800bc74:	d879      	bhi.n	800bd6a <UART_SetConfig+0x8b2>
 800bc76:	a201      	add	r2, pc, #4	@ (adr r2, 800bc7c <UART_SetConfig+0x7c4>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bd07 	.word	0x0800bd07
 800bc80:	0800bd0f 	.word	0x0800bd0f
 800bc84:	0800bd6b 	.word	0x0800bd6b
 800bc88:	0800bd6b 	.word	0x0800bd6b
 800bc8c:	0800bd17 	.word	0x0800bd17
 800bc90:	0800bd6b 	.word	0x0800bd6b
 800bc94:	0800bd6b 	.word	0x0800bd6b
 800bc98:	0800bd6b 	.word	0x0800bd6b
 800bc9c:	0800bd27 	.word	0x0800bd27
 800bca0:	0800bd6b 	.word	0x0800bd6b
 800bca4:	0800bd6b 	.word	0x0800bd6b
 800bca8:	0800bd6b 	.word	0x0800bd6b
 800bcac:	0800bd6b 	.word	0x0800bd6b
 800bcb0:	0800bd6b 	.word	0x0800bd6b
 800bcb4:	0800bd6b 	.word	0x0800bd6b
 800bcb8:	0800bd6b 	.word	0x0800bd6b
 800bcbc:	0800bd37 	.word	0x0800bd37
 800bcc0:	0800bd6b 	.word	0x0800bd6b
 800bcc4:	0800bd6b 	.word	0x0800bd6b
 800bcc8:	0800bd6b 	.word	0x0800bd6b
 800bccc:	0800bd6b 	.word	0x0800bd6b
 800bcd0:	0800bd6b 	.word	0x0800bd6b
 800bcd4:	0800bd6b 	.word	0x0800bd6b
 800bcd8:	0800bd6b 	.word	0x0800bd6b
 800bcdc:	0800bd6b 	.word	0x0800bd6b
 800bce0:	0800bd6b 	.word	0x0800bd6b
 800bce4:	0800bd6b 	.word	0x0800bd6b
 800bce8:	0800bd6b 	.word	0x0800bd6b
 800bcec:	0800bd6b 	.word	0x0800bd6b
 800bcf0:	0800bd6b 	.word	0x0800bd6b
 800bcf4:	0800bd6b 	.word	0x0800bd6b
 800bcf8:	0800bd6b 	.word	0x0800bd6b
 800bcfc:	0800bd5d 	.word	0x0800bd5d
 800bd00:	2b40      	cmp	r3, #64	@ 0x40
 800bd02:	d02e      	beq.n	800bd62 <UART_SetConfig+0x8aa>
 800bd04:	e031      	b.n	800bd6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd06:	f7fb fea3 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800bd0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd0c:	e033      	b.n	800bd76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd0e:	f7fb feb5 	bl	8007a7c <HAL_RCC_GetPCLK2Freq>
 800bd12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd14:	e02f      	b.n	800bd76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fd fea6 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd24:	e027      	b.n	800bd76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd26:	f107 0318 	add.w	r3, r7, #24
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fd fff2 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd34:	e01f      	b.n	800bd76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd36:	4b2d      	ldr	r3, [pc, #180]	@ (800bdec <UART_SetConfig+0x934>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 0320 	and.w	r3, r3, #32
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd42:	4b2a      	ldr	r3, [pc, #168]	@ (800bdec <UART_SetConfig+0x934>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	08db      	lsrs	r3, r3, #3
 800bd48:	f003 0303 	and.w	r3, r3, #3
 800bd4c:	4a24      	ldr	r2, [pc, #144]	@ (800bde0 <UART_SetConfig+0x928>)
 800bd4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd54:	e00f      	b.n	800bd76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bd56:	4b22      	ldr	r3, [pc, #136]	@ (800bde0 <UART_SetConfig+0x928>)
 800bd58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd5a:	e00c      	b.n	800bd76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd5c:	4b21      	ldr	r3, [pc, #132]	@ (800bde4 <UART_SetConfig+0x92c>)
 800bd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd60:	e009      	b.n	800bd76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd68:	e005      	b.n	800bd76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 80e7 	beq.w	800bf4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd82:	4a19      	ldr	r2, [pc, #100]	@ (800bde8 <UART_SetConfig+0x930>)
 800bd84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd90:	005a      	lsls	r2, r3, #1
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	085b      	lsrs	r3, r3, #1
 800bd98:	441a      	add	r2, r3
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda6:	2b0f      	cmp	r3, #15
 800bda8:	d916      	bls.n	800bdd8 <UART_SetConfig+0x920>
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb0:	d212      	bcs.n	800bdd8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	f023 030f 	bic.w	r3, r3, #15
 800bdba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	f003 0307 	and.w	r3, r3, #7
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bdd4:	60da      	str	r2, [r3, #12]
 800bdd6:	e0b9      	b.n	800bf4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bdde:	e0b5      	b.n	800bf4c <UART_SetConfig+0xa94>
 800bde0:	03d09000 	.word	0x03d09000
 800bde4:	003d0900 	.word	0x003d0900
 800bde8:	0800fe88 	.word	0x0800fe88
 800bdec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bdf0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bdf4:	2b20      	cmp	r3, #32
 800bdf6:	dc49      	bgt.n	800be8c <UART_SetConfig+0x9d4>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	db7c      	blt.n	800bef6 <UART_SetConfig+0xa3e>
 800bdfc:	2b20      	cmp	r3, #32
 800bdfe:	d87a      	bhi.n	800bef6 <UART_SetConfig+0xa3e>
 800be00:	a201      	add	r2, pc, #4	@ (adr r2, 800be08 <UART_SetConfig+0x950>)
 800be02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be06:	bf00      	nop
 800be08:	0800be93 	.word	0x0800be93
 800be0c:	0800be9b 	.word	0x0800be9b
 800be10:	0800bef7 	.word	0x0800bef7
 800be14:	0800bef7 	.word	0x0800bef7
 800be18:	0800bea3 	.word	0x0800bea3
 800be1c:	0800bef7 	.word	0x0800bef7
 800be20:	0800bef7 	.word	0x0800bef7
 800be24:	0800bef7 	.word	0x0800bef7
 800be28:	0800beb3 	.word	0x0800beb3
 800be2c:	0800bef7 	.word	0x0800bef7
 800be30:	0800bef7 	.word	0x0800bef7
 800be34:	0800bef7 	.word	0x0800bef7
 800be38:	0800bef7 	.word	0x0800bef7
 800be3c:	0800bef7 	.word	0x0800bef7
 800be40:	0800bef7 	.word	0x0800bef7
 800be44:	0800bef7 	.word	0x0800bef7
 800be48:	0800bec3 	.word	0x0800bec3
 800be4c:	0800bef7 	.word	0x0800bef7
 800be50:	0800bef7 	.word	0x0800bef7
 800be54:	0800bef7 	.word	0x0800bef7
 800be58:	0800bef7 	.word	0x0800bef7
 800be5c:	0800bef7 	.word	0x0800bef7
 800be60:	0800bef7 	.word	0x0800bef7
 800be64:	0800bef7 	.word	0x0800bef7
 800be68:	0800bef7 	.word	0x0800bef7
 800be6c:	0800bef7 	.word	0x0800bef7
 800be70:	0800bef7 	.word	0x0800bef7
 800be74:	0800bef7 	.word	0x0800bef7
 800be78:	0800bef7 	.word	0x0800bef7
 800be7c:	0800bef7 	.word	0x0800bef7
 800be80:	0800bef7 	.word	0x0800bef7
 800be84:	0800bef7 	.word	0x0800bef7
 800be88:	0800bee9 	.word	0x0800bee9
 800be8c:	2b40      	cmp	r3, #64	@ 0x40
 800be8e:	d02e      	beq.n	800beee <UART_SetConfig+0xa36>
 800be90:	e031      	b.n	800bef6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be92:	f7fb fddd 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800be96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800be98:	e033      	b.n	800bf02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be9a:	f7fb fdef 	bl	8007a7c <HAL_RCC_GetPCLK2Freq>
 800be9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bea0:	e02f      	b.n	800bf02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fd fde0 	bl	8009a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800beac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb0:	e027      	b.n	800bf02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb2:	f107 0318 	add.w	r3, r7, #24
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fd ff2c 	bl	8009d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bec0:	e01f      	b.n	800bf02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bec2:	4b2d      	ldr	r3, [pc, #180]	@ (800bf78 <UART_SetConfig+0xac0>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 0320 	and.w	r3, r3, #32
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bece:	4b2a      	ldr	r3, [pc, #168]	@ (800bf78 <UART_SetConfig+0xac0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	08db      	lsrs	r3, r3, #3
 800bed4:	f003 0303 	and.w	r3, r3, #3
 800bed8:	4a28      	ldr	r2, [pc, #160]	@ (800bf7c <UART_SetConfig+0xac4>)
 800beda:	fa22 f303 	lsr.w	r3, r2, r3
 800bede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bee0:	e00f      	b.n	800bf02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bee2:	4b26      	ldr	r3, [pc, #152]	@ (800bf7c <UART_SetConfig+0xac4>)
 800bee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bee6:	e00c      	b.n	800bf02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bee8:	4b25      	ldr	r3, [pc, #148]	@ (800bf80 <UART_SetConfig+0xac8>)
 800beea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beec:	e009      	b.n	800bf02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bef4:	e005      	b.n	800bf02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bef6:	2300      	movs	r3, #0
 800bef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bf00:	bf00      	nop
    }

    if (pclk != 0U)
 800bf02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d021      	beq.n	800bf4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0c:	4a1d      	ldr	r2, [pc, #116]	@ (800bf84 <UART_SetConfig+0xacc>)
 800bf0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf12:	461a      	mov	r2, r3
 800bf14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf16:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	085b      	lsrs	r3, r3, #1
 800bf20:	441a      	add	r2, r3
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2e:	2b0f      	cmp	r3, #15
 800bf30:	d909      	bls.n	800bf46 <UART_SetConfig+0xa8e>
 800bf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf38:	d205      	bcs.n	800bf46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	60da      	str	r2, [r3, #12]
 800bf44:	e002      	b.n	800bf4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2200      	movs	r2, #0
 800bf66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bf68:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3748      	adds	r7, #72	@ 0x48
 800bf70:	46bd      	mov	sp, r7
 800bf72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf76:	bf00      	nop
 800bf78:	58024400 	.word	0x58024400
 800bf7c:	03d09000 	.word	0x03d09000
 800bf80:	003d0900 	.word	0x003d0900
 800bf84:	0800fe88 	.word	0x0800fe88

0800bf88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf94:	f003 0308 	and.w	r3, r3, #8
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00a      	beq.n	800bfb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb6:	f003 0301 	and.w	r3, r3, #1
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00a      	beq.n	800bff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	430a      	orrs	r2, r1
 800bff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bffa:	f003 0304 	and.w	r3, r3, #4
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00a      	beq.n	800c018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	430a      	orrs	r2, r1
 800c016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c01c:	f003 0310 	and.w	r3, r3, #16
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00a      	beq.n	800c03a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	430a      	orrs	r2, r1
 800c038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c03e:	f003 0320 	and.w	r3, r3, #32
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00a      	beq.n	800c05c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	430a      	orrs	r2, r1
 800c05a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c064:	2b00      	cmp	r3, #0
 800c066:	d01a      	beq.n	800c09e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	430a      	orrs	r2, r1
 800c07c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c086:	d10a      	bne.n	800c09e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	430a      	orrs	r2, r1
 800c09c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	430a      	orrs	r2, r1
 800c0be:	605a      	str	r2, [r3, #4]
  }
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b098      	sub	sp, #96	@ 0x60
 800c0d0:	af02      	add	r7, sp, #8
 800c0d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c0dc:	f7f5 fb9e 	bl	800181c <HAL_GetTick>
 800c0e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 0308 	and.w	r3, r3, #8
 800c0ec:	2b08      	cmp	r3, #8
 800c0ee:	d12f      	bne.n	800c150 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f88e 	bl	800c220 <UART_WaitOnFlagUntilTimeout>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d022      	beq.n	800c150 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c112:	e853 3f00 	ldrex	r3, [r3]
 800c116:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c11a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c11e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	461a      	mov	r2, r3
 800c126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c128:	647b      	str	r3, [r7, #68]	@ 0x44
 800c12a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c12e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c130:	e841 2300 	strex	r3, r2, [r1]
 800c134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1e6      	bne.n	800c10a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2220      	movs	r2, #32
 800c140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e063      	b.n	800c218 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 0304 	and.w	r3, r3, #4
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d149      	bne.n	800c1f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c15e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c166:	2200      	movs	r2, #0
 800c168:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f857 	bl	800c220 <UART_WaitOnFlagUntilTimeout>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d03c      	beq.n	800c1f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c180:	e853 3f00 	ldrex	r3, [r3]
 800c184:	623b      	str	r3, [r7, #32]
   return(result);
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c18c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c196:	633b      	str	r3, [r7, #48]	@ 0x30
 800c198:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c19c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c19e:	e841 2300 	strex	r3, r2, [r1]
 800c1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1e6      	bne.n	800c178 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f023 0301 	bic.w	r3, r3, #1
 800c1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3308      	adds	r3, #8
 800c1c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1ca:	61fa      	str	r2, [r7, #28]
 800c1cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ce:	69b9      	ldr	r1, [r7, #24]
 800c1d0:	69fa      	ldr	r2, [r7, #28]
 800c1d2:	e841 2300 	strex	r3, r2, [r1]
 800c1d6:	617b      	str	r3, [r7, #20]
   return(result);
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e5      	bne.n	800c1aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2220      	movs	r2, #32
 800c1e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e012      	b.n	800c218 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2220      	movs	r2, #32
 800c1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2220      	movs	r2, #32
 800c1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3758      	adds	r7, #88	@ 0x58
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	4613      	mov	r3, r2
 800c22e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c230:	e04f      	b.n	800c2d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c238:	d04b      	beq.n	800c2d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c23a:	f7f5 faef 	bl	800181c <HAL_GetTick>
 800c23e:	4602      	mov	r2, r0
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	1ad3      	subs	r3, r2, r3
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	429a      	cmp	r2, r3
 800c248:	d302      	bcc.n	800c250 <UART_WaitOnFlagUntilTimeout+0x30>
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c250:	2303      	movs	r3, #3
 800c252:	e04e      	b.n	800c2f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 0304 	and.w	r3, r3, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d037      	beq.n	800c2d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b80      	cmp	r3, #128	@ 0x80
 800c266:	d034      	beq.n	800c2d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2b40      	cmp	r3, #64	@ 0x40
 800c26c:	d031      	beq.n	800c2d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	69db      	ldr	r3, [r3, #28]
 800c274:	f003 0308 	and.w	r3, r3, #8
 800c278:	2b08      	cmp	r3, #8
 800c27a:	d110      	bne.n	800c29e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2208      	movs	r2, #8
 800c282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f95b 	bl	800c540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2208      	movs	r2, #8
 800c28e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e029      	b.n	800c2f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	69db      	ldr	r3, [r3, #28]
 800c2a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2ac:	d111      	bne.n	800c2d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f000 f941 	bl	800c540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	e00f      	b.n	800c2f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	69da      	ldr	r2, [r3, #28]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	4013      	ands	r3, r2
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	bf0c      	ite	eq
 800c2e2:	2301      	moveq	r3, #1
 800c2e4:	2300      	movne	r3, #0
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	79fb      	ldrb	r3, [r7, #7]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d0a0      	beq.n	800c232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b0a3      	sub	sp, #140	@ 0x8c
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	88fa      	ldrh	r2, [r7, #6]
 800c314:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	88fa      	ldrh	r2, [r7, #6]
 800c31c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c32e:	d10e      	bne.n	800c34e <UART_Start_Receive_IT+0x52>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d105      	bne.n	800c344 <UART_Start_Receive_IT+0x48>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c33e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c342:	e02d      	b.n	800c3a0 <UART_Start_Receive_IT+0xa4>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	22ff      	movs	r2, #255	@ 0xff
 800c348:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c34c:	e028      	b.n	800c3a0 <UART_Start_Receive_IT+0xa4>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10d      	bne.n	800c372 <UART_Start_Receive_IT+0x76>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d104      	bne.n	800c368 <UART_Start_Receive_IT+0x6c>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	22ff      	movs	r2, #255	@ 0xff
 800c362:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c366:	e01b      	b.n	800c3a0 <UART_Start_Receive_IT+0xa4>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	227f      	movs	r2, #127	@ 0x7f
 800c36c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c370:	e016      	b.n	800c3a0 <UART_Start_Receive_IT+0xa4>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c37a:	d10d      	bne.n	800c398 <UART_Start_Receive_IT+0x9c>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d104      	bne.n	800c38e <UART_Start_Receive_IT+0x92>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	227f      	movs	r2, #127	@ 0x7f
 800c388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c38c:	e008      	b.n	800c3a0 <UART_Start_Receive_IT+0xa4>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	223f      	movs	r2, #63	@ 0x3f
 800c392:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c396:	e003      	b.n	800c3a0 <UART_Start_Receive_IT+0xa4>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2222      	movs	r2, #34	@ 0x22
 800c3ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3ba:	e853 3f00 	ldrex	r3, [r3]
 800c3be:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c3c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3c2:	f043 0301 	orr.w	r3, r3, #1
 800c3c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c3d4:	673a      	str	r2, [r7, #112]	@ 0x70
 800c3d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3da:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c3dc:	e841 2300 	strex	r3, r2, [r1]
 800c3e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c3e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1e3      	bne.n	800c3b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3f0:	d14f      	bne.n	800c492 <UART_Start_Receive_IT+0x196>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c3f8:	88fa      	ldrh	r2, [r7, #6]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d349      	bcc.n	800c492 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c406:	d107      	bne.n	800c418 <UART_Start_Receive_IT+0x11c>
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d103      	bne.n	800c418 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4a47      	ldr	r2, [pc, #284]	@ (800c530 <UART_Start_Receive_IT+0x234>)
 800c414:	675a      	str	r2, [r3, #116]	@ 0x74
 800c416:	e002      	b.n	800c41e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	4a46      	ldr	r2, [pc, #280]	@ (800c534 <UART_Start_Receive_IT+0x238>)
 800c41c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d01a      	beq.n	800c45c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c43a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c44a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c44e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c450:	e841 2300 	strex	r3, r2, [r1]
 800c454:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e4      	bne.n	800c426 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3308      	adds	r3, #8
 800c462:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c466:	e853 3f00 	ldrex	r3, [r3]
 800c46a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c472:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3308      	adds	r3, #8
 800c47a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c47c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c47e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c48a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e5      	bne.n	800c45c <UART_Start_Receive_IT+0x160>
 800c490:	e046      	b.n	800c520 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c49a:	d107      	bne.n	800c4ac <UART_Start_Receive_IT+0x1b0>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d103      	bne.n	800c4ac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	4a24      	ldr	r2, [pc, #144]	@ (800c538 <UART_Start_Receive_IT+0x23c>)
 800c4a8:	675a      	str	r2, [r3, #116]	@ 0x74
 800c4aa:	e002      	b.n	800c4b2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4a23      	ldr	r2, [pc, #140]	@ (800c53c <UART_Start_Receive_IT+0x240>)
 800c4b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d019      	beq.n	800c4ee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c2:	e853 3f00 	ldrex	r3, [r3]
 800c4c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ca:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c4ce:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4da:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c4de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4e0:	e841 2300 	strex	r3, r2, [r1]
 800c4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1e6      	bne.n	800c4ba <UART_Start_Receive_IT+0x1be>
 800c4ec:	e018      	b.n	800c520 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	e853 3f00 	ldrex	r3, [r3]
 800c4fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	f043 0320 	orr.w	r3, r3, #32
 800c502:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c50c:	623b      	str	r3, [r7, #32]
 800c50e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c510:	69f9      	ldr	r1, [r7, #28]
 800c512:	6a3a      	ldr	r2, [r7, #32]
 800c514:	e841 2300 	strex	r3, r2, [r1]
 800c518:	61bb      	str	r3, [r7, #24]
   return(result);
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e6      	bne.n	800c4ee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	378c      	adds	r7, #140	@ 0x8c
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	0800cd61 	.word	0x0800cd61
 800c534:	0800ca01 	.word	0x0800ca01
 800c538:	0800c849 	.word	0x0800c849
 800c53c:	0800c691 	.word	0x0800c691

0800c540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c540:	b480      	push	{r7}
 800c542:	b095      	sub	sp, #84	@ 0x54
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c550:	e853 3f00 	ldrex	r3, [r3]
 800c554:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c55c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	461a      	mov	r2, r3
 800c564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c566:	643b      	str	r3, [r7, #64]	@ 0x40
 800c568:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c56c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c56e:	e841 2300 	strex	r3, r2, [r1]
 800c572:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1e6      	bne.n	800c548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	3308      	adds	r3, #8
 800c580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	e853 3f00 	ldrex	r3, [r3]
 800c588:	61fb      	str	r3, [r7, #28]
   return(result);
 800c58a:	69fa      	ldr	r2, [r7, #28]
 800c58c:	4b1e      	ldr	r3, [pc, #120]	@ (800c608 <UART_EndRxTransfer+0xc8>)
 800c58e:	4013      	ands	r3, r2
 800c590:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3308      	adds	r3, #8
 800c598:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c59a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c59c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e5      	bne.n	800c57a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d118      	bne.n	800c5e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	e853 3f00 	ldrex	r3, [r3]
 800c5c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	f023 0310 	bic.w	r3, r3, #16
 800c5ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d4:	61bb      	str	r3, [r7, #24]
 800c5d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d8:	6979      	ldr	r1, [r7, #20]
 800c5da:	69ba      	ldr	r2, [r7, #24]
 800c5dc:	e841 2300 	strex	r3, r2, [r1]
 800c5e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1e6      	bne.n	800c5b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c5fc:	bf00      	nop
 800c5fe:	3754      	adds	r7, #84	@ 0x54
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	effffffe 	.word	0xeffffffe

0800c60c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7fe ff2e 	bl	800b48c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c630:	bf00      	nop
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	e853 3f00 	ldrex	r3, [r3]
 800c64c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c654:	61fb      	str	r3, [r7, #28]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	61bb      	str	r3, [r7, #24]
 800c660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c662:	6979      	ldr	r1, [r7, #20]
 800c664:	69ba      	ldr	r2, [r7, #24]
 800c666:	e841 2300 	strex	r3, r2, [r1]
 800c66a:	613b      	str	r3, [r7, #16]
   return(result);
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1e6      	bne.n	800c640 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2220      	movs	r2, #32
 800c676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7f4 fb6f 	bl	8000d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c686:	bf00      	nop
 800c688:	3720      	adds	r7, #32
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b09c      	sub	sp, #112	@ 0x70
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c69e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6a8:	2b22      	cmp	r3, #34	@ 0x22
 800c6aa:	f040 80be 	bne.w	800c82a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6bc:	b2d9      	uxtb	r1, r3
 800c6be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6c8:	400a      	ands	r2, r1
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f040 80a1 	bne.w	800c83a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c700:	e853 3f00 	ldrex	r3, [r3]
 800c704:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c70c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c716:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c718:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c71c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c71e:	e841 2300 	strex	r3, r2, [r1]
 800c722:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1e6      	bne.n	800c6f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3308      	adds	r3, #8
 800c730:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c73c:	f023 0301 	bic.w	r3, r3, #1
 800c740:	667b      	str	r3, [r7, #100]	@ 0x64
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3308      	adds	r3, #8
 800c748:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c74a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c74c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c752:	e841 2300 	strex	r3, r2, [r1]
 800c756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1e5      	bne.n	800c72a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2220      	movs	r2, #32
 800c762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a33      	ldr	r2, [pc, #204]	@ (800c844 <UART_RxISR_8BIT+0x1b4>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d01f      	beq.n	800c7bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c786:	2b00      	cmp	r3, #0
 800c788:	d018      	beq.n	800c7bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	e853 3f00 	ldrex	r3, [r3]
 800c796:	623b      	str	r3, [r7, #32]
   return(result);
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c79e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7b0:	e841 2300 	strex	r3, r2, [r1]
 800c7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e6      	bne.n	800c78a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d12e      	bne.n	800c822 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	e853 3f00 	ldrex	r3, [r3]
 800c7d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f023 0310 	bic.w	r3, r3, #16
 800c7de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7e8:	61fb      	str	r3, [r7, #28]
 800c7ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ec:	69b9      	ldr	r1, [r7, #24]
 800c7ee:	69fa      	ldr	r2, [r7, #28]
 800c7f0:	e841 2300 	strex	r3, r2, [r1]
 800c7f4:	617b      	str	r3, [r7, #20]
   return(result);
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1e6      	bne.n	800c7ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	f003 0310 	and.w	r3, r3, #16
 800c806:	2b10      	cmp	r3, #16
 800c808:	d103      	bne.n	800c812 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2210      	movs	r2, #16
 800c810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7fe fe40 	bl	800b4a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c820:	e00b      	b.n	800c83a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7f4 faae 	bl	8000d84 <HAL_UART_RxCpltCallback>
}
 800c828:	e007      	b.n	800c83a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	699a      	ldr	r2, [r3, #24]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f042 0208 	orr.w	r2, r2, #8
 800c838:	619a      	str	r2, [r3, #24]
}
 800c83a:	bf00      	nop
 800c83c:	3770      	adds	r7, #112	@ 0x70
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	58000c00 	.word	0x58000c00

0800c848 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b09c      	sub	sp, #112	@ 0x70
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c856:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c860:	2b22      	cmp	r3, #34	@ 0x22
 800c862:	f040 80be 	bne.w	800c9e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c874:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c876:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c87a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c87e:	4013      	ands	r3, r2
 800c880:	b29a      	uxth	r2, r3
 800c882:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c884:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c88a:	1c9a      	adds	r2, r3, #2
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c896:	b29b      	uxth	r3, r3
 800c898:	3b01      	subs	r3, #1
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f040 80a1 	bne.w	800c9f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c8be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c8d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c8dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e6      	bne.n	800c8b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ec:	e853 3f00 	ldrex	r3, [r3]
 800c8f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f4:	f023 0301 	bic.w	r3, r3, #1
 800c8f8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	3308      	adds	r3, #8
 800c900:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c902:	643a      	str	r2, [r7, #64]	@ 0x40
 800c904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c906:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c90a:	e841 2300 	strex	r3, r2, [r1]
 800c90e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1e5      	bne.n	800c8e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2220      	movs	r2, #32
 800c91a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a33      	ldr	r2, [pc, #204]	@ (800c9fc <UART_RxISR_16BIT+0x1b4>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d01f      	beq.n	800c974 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d018      	beq.n	800c974 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	e853 3f00 	ldrex	r3, [r3]
 800c94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	461a      	mov	r2, r3
 800c95e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c962:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c968:	e841 2300 	strex	r3, r2, [r1]
 800c96c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1e6      	bne.n	800c942 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d12e      	bne.n	800c9da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	f023 0310 	bic.w	r3, r3, #16
 800c996:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9a0:	61bb      	str	r3, [r7, #24]
 800c9a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	6979      	ldr	r1, [r7, #20]
 800c9a6:	69ba      	ldr	r2, [r7, #24]
 800c9a8:	e841 2300 	strex	r3, r2, [r1]
 800c9ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e6      	bne.n	800c982 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	f003 0310 	and.w	r3, r3, #16
 800c9be:	2b10      	cmp	r3, #16
 800c9c0:	d103      	bne.n	800c9ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2210      	movs	r2, #16
 800c9c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7fe fd64 	bl	800b4a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9d8:	e00b      	b.n	800c9f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f7f4 f9d2 	bl	8000d84 <HAL_UART_RxCpltCallback>
}
 800c9e0:	e007      	b.n	800c9f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	699a      	ldr	r2, [r3, #24]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f042 0208 	orr.w	r2, r2, #8
 800c9f0:	619a      	str	r2, [r3, #24]
}
 800c9f2:	bf00      	nop
 800c9f4:	3770      	adds	r7, #112	@ 0x70
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	58000c00 	.word	0x58000c00

0800ca00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b0ac      	sub	sp, #176	@ 0xb0
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ca0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69db      	ldr	r3, [r3, #28]
 800ca18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca36:	2b22      	cmp	r3, #34	@ 0x22
 800ca38:	f040 8180 	bne.w	800cd3c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ca42:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca46:	e123      	b.n	800cc90 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca4e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ca56:	b2d9      	uxtb	r1, r3
 800ca58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca62:	400a      	ands	r2, r1
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	69db      	ldr	r3, [r3, #28]
 800ca8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca92:	f003 0307 	and.w	r3, r3, #7
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d053      	beq.n	800cb42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d011      	beq.n	800caca <UART_RxISR_8BIT_FIFOEN+0xca>
 800caa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800caaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00b      	beq.n	800caca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2201      	movs	r2, #1
 800cab8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cac0:	f043 0201 	orr.w	r2, r3, #1
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cace:	f003 0302 	and.w	r3, r3, #2
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d011      	beq.n	800cafa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00b      	beq.n	800cafa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2202      	movs	r2, #2
 800cae8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caf0:	f043 0204 	orr.w	r2, r3, #4
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cafa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cafe:	f003 0304 	and.w	r3, r3, #4
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d011      	beq.n	800cb2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cb06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00b      	beq.n	800cb2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2204      	movs	r2, #4
 800cb18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb20:	f043 0202 	orr.w	r2, r3, #2
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d006      	beq.n	800cb42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7fe fca9 	bl	800b48c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f040 80a0 	bne.w	800cc90 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb58:	e853 3f00 	ldrex	r3, [r3]
 800cb5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cb5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb74:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cb78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cb80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e4      	bne.n	800cb50 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3308      	adds	r3, #8
 800cb8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb90:	e853 3f00 	ldrex	r3, [r3]
 800cb94:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cb96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb98:	4b6e      	ldr	r3, [pc, #440]	@ (800cd54 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3308      	adds	r3, #8
 800cba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cbaa:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cbac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cbb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbb2:	e841 2300 	strex	r3, r2, [r1]
 800cbb6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cbb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1e3      	bne.n	800cb86 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2220      	movs	r2, #32
 800cbc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a60      	ldr	r2, [pc, #384]	@ (800cd58 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d021      	beq.n	800cc20 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d01a      	beq.n	800cc20 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbf2:	e853 3f00 	ldrex	r3, [r3]
 800cbf6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cbf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cbfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cc0c:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc0e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc14:	e841 2300 	strex	r3, r2, [r1]
 800cc18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cc1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e4      	bne.n	800cbea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d130      	bne.n	800cc8a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc36:	e853 3f00 	ldrex	r3, [r3]
 800cc3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3e:	f023 0310 	bic.w	r3, r3, #16
 800cc42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc50:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e4      	bne.n	800cc2e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	69db      	ldr	r3, [r3, #28]
 800cc6a:	f003 0310 	and.w	r3, r3, #16
 800cc6e:	2b10      	cmp	r3, #16
 800cc70:	d103      	bne.n	800cc7a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2210      	movs	r2, #16
 800cc78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc80:	4619      	mov	r1, r3
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7fe fc0c 	bl	800b4a0 <HAL_UARTEx_RxEventCallback>
 800cc88:	e002      	b.n	800cc90 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7f4 f87a 	bl	8000d84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc90:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d006      	beq.n	800cca6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800cc98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc9c:	f003 0320 	and.w	r3, r3, #32
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f47f aed1 	bne.w	800ca48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ccb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d049      	beq.n	800cd4c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ccbe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d242      	bcs.n	800cd4c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3308      	adds	r3, #8
 800cccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccce:	6a3b      	ldr	r3, [r7, #32]
 800ccd0:	e853 3f00 	ldrex	r3, [r3]
 800ccd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ccdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3308      	adds	r3, #8
 800cce6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ccea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccf2:	e841 2300 	strex	r3, r2, [r1]
 800ccf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1e3      	bne.n	800ccc6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	4a16      	ldr	r2, [pc, #88]	@ (800cd5c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cd02:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f043 0320 	orr.w	r3, r3, #32
 800cd18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	461a      	mov	r2, r3
 800cd22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd26:	61bb      	str	r3, [r7, #24]
 800cd28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2a:	6979      	ldr	r1, [r7, #20]
 800cd2c:	69ba      	ldr	r2, [r7, #24]
 800cd2e:	e841 2300 	strex	r3, r2, [r1]
 800cd32:	613b      	str	r3, [r7, #16]
   return(result);
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1e4      	bne.n	800cd04 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd3a:	e007      	b.n	800cd4c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	699a      	ldr	r2, [r3, #24]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f042 0208 	orr.w	r2, r2, #8
 800cd4a:	619a      	str	r2, [r3, #24]
}
 800cd4c:	bf00      	nop
 800cd4e:	37b0      	adds	r7, #176	@ 0xb0
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	effffffe 	.word	0xeffffffe
 800cd58:	58000c00 	.word	0x58000c00
 800cd5c:	0800c691 	.word	0x0800c691

0800cd60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b0ae      	sub	sp, #184	@ 0xb8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd6e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	69db      	ldr	r3, [r3, #28]
 800cd78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd96:	2b22      	cmp	r3, #34	@ 0x22
 800cd98:	f040 8184 	bne.w	800d0a4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cda2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cda6:	e127      	b.n	800cff8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cdba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cdbe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdd0:	1c9a      	adds	r2, r3, #2
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	3b01      	subs	r3, #1
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	69db      	ldr	r3, [r3, #28]
 800cdee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cdf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d053      	beq.n	800cea6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce02:	f003 0301 	and.w	r3, r3, #1
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d011      	beq.n	800ce2e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ce0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00b      	beq.n	800ce2e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce24:	f043 0201 	orr.w	r2, r3, #1
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce32:	f003 0302 	and.w	r3, r3, #2
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d011      	beq.n	800ce5e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ce3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00b      	beq.n	800ce5e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce54:	f043 0204 	orr.w	r2, r3, #4
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce62:	f003 0304 	and.w	r3, r3, #4
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d011      	beq.n	800ce8e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ce6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00b      	beq.n	800ce8e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2204      	movs	r2, #4
 800ce7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce84:	f043 0202 	orr.w	r2, r3, #2
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d006      	beq.n	800cea6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7fe faf7 	bl	800b48c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f040 80a2 	bne.w	800cff8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cebc:	e853 3f00 	ldrex	r3, [r3]
 800cec0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	461a      	mov	r2, r3
 800ced2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ced6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ceda:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cedc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cede:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e2      	bne.n	800ceb4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3308      	adds	r3, #8
 800cef4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cef8:	e853 3f00 	ldrex	r3, [r3]
 800cefc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cefe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cf00:	4b6e      	ldr	r3, [pc, #440]	@ (800d0bc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800cf02:	4013      	ands	r3, r2
 800cf04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3308      	adds	r3, #8
 800cf0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cf12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf1a:	e841 2300 	strex	r3, r2, [r1]
 800cf1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e3      	bne.n	800ceee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a60      	ldr	r2, [pc, #384]	@ (800d0c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d021      	beq.n	800cf88 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d01a      	beq.n	800cf88 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf5a:	e853 3f00 	ldrex	r3, [r3]
 800cf5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cf74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf76:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf7c:	e841 2300 	strex	r3, r2, [r1]
 800cf80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1e4      	bne.n	800cf52 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d130      	bne.n	800cff2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9e:	e853 3f00 	ldrex	r3, [r3]
 800cfa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cfa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa6:	f023 0310 	bic.w	r3, r3, #16
 800cfaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfc0:	e841 2300 	strex	r3, r2, [r1]
 800cfc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1e4      	bne.n	800cf96 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	69db      	ldr	r3, [r3, #28]
 800cfd2:	f003 0310 	and.w	r3, r3, #16
 800cfd6:	2b10      	cmp	r3, #16
 800cfd8:	d103      	bne.n	800cfe2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2210      	movs	r2, #16
 800cfe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7fe fa58 	bl	800b4a0 <HAL_UARTEx_RxEventCallback>
 800cff0:	e002      	b.n	800cff8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7f3 fec6 	bl	8000d84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cff8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d006      	beq.n	800d00e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d004:	f003 0320 	and.w	r3, r3, #32
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f47f aecd 	bne.w	800cda8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d014:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d018:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d049      	beq.n	800d0b4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d026:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d242      	bcs.n	800d0b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3308      	adds	r3, #8
 800d034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d038:	e853 3f00 	ldrex	r3, [r3]
 800d03c:	623b      	str	r3, [r7, #32]
   return(result);
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3308      	adds	r3, #8
 800d04e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d052:	633a      	str	r2, [r7, #48]	@ 0x30
 800d054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e3      	bne.n	800d02e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a16      	ldr	r2, [pc, #88]	@ (800d0c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d06a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	e853 3f00 	ldrex	r3, [r3]
 800d078:	60fb      	str	r3, [r7, #12]
   return(result);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f043 0320 	orr.w	r3, r3, #32
 800d080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	461a      	mov	r2, r3
 800d08a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d08e:	61fb      	str	r3, [r7, #28]
 800d090:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d092:	69b9      	ldr	r1, [r7, #24]
 800d094:	69fa      	ldr	r2, [r7, #28]
 800d096:	e841 2300 	strex	r3, r2, [r1]
 800d09a:	617b      	str	r3, [r7, #20]
   return(result);
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1e4      	bne.n	800d06c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0a2:	e007      	b.n	800d0b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	699a      	ldr	r2, [r3, #24]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f042 0208 	orr.w	r2, r2, #8
 800d0b2:	619a      	str	r2, [r3, #24]
}
 800d0b4:	bf00      	nop
 800d0b6:	37b8      	adds	r7, #184	@ 0xb8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	effffffe 	.word	0xeffffffe
 800d0c0:	58000c00 	.word	0x58000c00
 800d0c4:	0800c849 	.word	0x0800c849

0800d0c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d0e4:	bf00      	nop
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d112:	2b01      	cmp	r3, #1
 800d114:	d101      	bne.n	800d11a <HAL_UARTEx_DisableFifoMode+0x16>
 800d116:	2302      	movs	r3, #2
 800d118:	e027      	b.n	800d16a <HAL_UARTEx_DisableFifoMode+0x66>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2224      	movs	r2, #36	@ 0x24
 800d126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f022 0201 	bic.w	r2, r2, #1
 800d140:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d148:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2220      	movs	r2, #32
 800d15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr

0800d176 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d186:	2b01      	cmp	r3, #1
 800d188:	d101      	bne.n	800d18e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d18a:	2302      	movs	r3, #2
 800d18c:	e02d      	b.n	800d1ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2224      	movs	r2, #36	@ 0x24
 800d19a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f022 0201 	bic.w	r2, r2, #1
 800d1b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	430a      	orrs	r2, r1
 800d1c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f850 	bl	800d270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2220      	movs	r2, #32
 800d1dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d202:	2b01      	cmp	r3, #1
 800d204:	d101      	bne.n	800d20a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d206:	2302      	movs	r3, #2
 800d208:	e02d      	b.n	800d266 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2224      	movs	r2, #36	@ 0x24
 800d216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f022 0201 	bic.w	r2, r2, #1
 800d230:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	683a      	ldr	r2, [r7, #0]
 800d242:	430a      	orrs	r2, r1
 800d244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 f812 	bl	800d270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2220      	movs	r2, #32
 800d258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
	...

0800d270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d108      	bne.n	800d292 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d290:	e031      	b.n	800d2f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d292:	2310      	movs	r3, #16
 800d294:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d296:	2310      	movs	r3, #16
 800d298:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	0e5b      	lsrs	r3, r3, #25
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	f003 0307 	and.w	r3, r3, #7
 800d2a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	0f5b      	lsrs	r3, r3, #29
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	f003 0307 	and.w	r3, r3, #7
 800d2b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2ba:	7bbb      	ldrb	r3, [r7, #14]
 800d2bc:	7b3a      	ldrb	r2, [r7, #12]
 800d2be:	4911      	ldr	r1, [pc, #68]	@ (800d304 <UARTEx_SetNbDataToProcess+0x94>)
 800d2c0:	5c8a      	ldrb	r2, [r1, r2]
 800d2c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2c6:	7b3a      	ldrb	r2, [r7, #12]
 800d2c8:	490f      	ldr	r1, [pc, #60]	@ (800d308 <UARTEx_SetNbDataToProcess+0x98>)
 800d2ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2d8:	7bfb      	ldrb	r3, [r7, #15]
 800d2da:	7b7a      	ldrb	r2, [r7, #13]
 800d2dc:	4909      	ldr	r1, [pc, #36]	@ (800d304 <UARTEx_SetNbDataToProcess+0x94>)
 800d2de:	5c8a      	ldrb	r2, [r1, r2]
 800d2e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2e4:	7b7a      	ldrb	r2, [r7, #13]
 800d2e6:	4908      	ldr	r1, [pc, #32]	@ (800d308 <UARTEx_SetNbDataToProcess+0x98>)
 800d2e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d2f6:	bf00      	nop
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	0800fea0 	.word	0x0800fea0
 800d308:	0800fea8 	.word	0x0800fea8

0800d30c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d30c:	b084      	sub	sp, #16
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	f107 001c 	add.w	r0, r7, #28
 800d31a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d31e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d322:	2b01      	cmp	r3, #1
 800d324:	d121      	bne.n	800d36a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d32a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68da      	ldr	r2, [r3, #12]
 800d336:	4b2c      	ldr	r3, [pc, #176]	@ (800d3e8 <USB_CoreInit+0xdc>)
 800d338:	4013      	ands	r3, r2
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d34a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d105      	bne.n	800d35e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 faaa 	bl	800d8b8 <USB_CoreReset>
 800d364:	4603      	mov	r3, r0
 800d366:	73fb      	strb	r3, [r7, #15]
 800d368:	e01b      	b.n	800d3a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 fa9e 	bl	800d8b8 <USB_CoreReset>
 800d37c:	4603      	mov	r3, r0
 800d37e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d380:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d384:	2b00      	cmp	r3, #0
 800d386:	d106      	bne.n	800d396 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d38c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	639a      	str	r2, [r3, #56]	@ 0x38
 800d394:	e005      	b.n	800d3a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d3a2:	7fbb      	ldrb	r3, [r7, #30]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d116      	bne.n	800d3d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d3ec <USB_CoreInit+0xe0>)
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f043 0206 	orr.w	r2, r3, #6
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	f043 0220 	orr.w	r2, r3, #32
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3e2:	b004      	add	sp, #16
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	ffbdffbf 	.word	0xffbdffbf
 800d3ec:	03ee0000 	.word	0x03ee0000

0800d3f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	f023 0201 	bic.w	r2, r3, #1
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	460b      	mov	r3, r1
 800d41c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d41e:	2300      	movs	r3, #0
 800d420:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d115      	bne.n	800d460 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d440:	200a      	movs	r0, #10
 800d442:	f7f4 f9f7 	bl	8001834 <HAL_Delay>
      ms += 10U;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	330a      	adds	r3, #10
 800d44a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fa25 	bl	800d89c <USB_GetMode>
 800d452:	4603      	mov	r3, r0
 800d454:	2b01      	cmp	r3, #1
 800d456:	d01e      	beq.n	800d496 <USB_SetCurrentMode+0x84>
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2bc7      	cmp	r3, #199	@ 0xc7
 800d45c:	d9f0      	bls.n	800d440 <USB_SetCurrentMode+0x2e>
 800d45e:	e01a      	b.n	800d496 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d115      	bne.n	800d492 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d472:	200a      	movs	r0, #10
 800d474:	f7f4 f9de 	bl	8001834 <HAL_Delay>
      ms += 10U;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	330a      	adds	r3, #10
 800d47c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fa0c 	bl	800d89c <USB_GetMode>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d005      	beq.n	800d496 <USB_SetCurrentMode+0x84>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2bc7      	cmp	r3, #199	@ 0xc7
 800d48e:	d9f0      	bls.n	800d472 <USB_SetCurrentMode+0x60>
 800d490:	e001      	b.n	800d496 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e005      	b.n	800d4a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2bc8      	cmp	r3, #200	@ 0xc8
 800d49a:	d101      	bne.n	800d4a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	e000      	b.n	800d4a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
	...

0800d4ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b086      	sub	sp, #24
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d4ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	613b      	str	r3, [r7, #16]
 800d4ca:	e009      	b.n	800d4e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	3340      	adds	r3, #64	@ 0x40
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4413      	add	r3, r2
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	613b      	str	r3, [r7, #16]
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	2b0e      	cmp	r3, #14
 800d4e4:	d9f2      	bls.n	800d4cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d4e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d11c      	bne.n	800d528 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d4fc:	f043 0302 	orr.w	r3, r3, #2
 800d500:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d506:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	e005      	b.n	800d534 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d52c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d53a:	461a      	mov	r2, r3
 800d53c:	2300      	movs	r3, #0
 800d53e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d540:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d544:	2b01      	cmp	r3, #1
 800d546:	d10d      	bne.n	800d564 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d104      	bne.n	800d55a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d550:	2100      	movs	r1, #0
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f968 	bl	800d828 <USB_SetDevSpeed>
 800d558:	e008      	b.n	800d56c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d55a:	2101      	movs	r1, #1
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 f963 	bl	800d828 <USB_SetDevSpeed>
 800d562:	e003      	b.n	800d56c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d564:	2103      	movs	r1, #3
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f95e 	bl	800d828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d56c:	2110      	movs	r1, #16
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f8fa 	bl	800d768 <USB_FlushTxFifo>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d57a:	2301      	movs	r3, #1
 800d57c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f924 	bl	800d7cc <USB_FlushRxFifo>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d594:	461a      	mov	r2, r3
 800d596:	2300      	movs	r3, #0
 800d598:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	613b      	str	r3, [r7, #16]
 800d5b6:	e043      	b.n	800d640 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	015a      	lsls	r2, r3, #5
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	4413      	add	r3, r2
 800d5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d5ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5ce:	d118      	bne.n	800d602 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10a      	bne.n	800d5ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d5e8:	6013      	str	r3, [r2, #0]
 800d5ea:	e013      	b.n	800d614 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	015a      	lsls	r2, r3, #5
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d5fe:	6013      	str	r3, [r2, #0]
 800d600:	e008      	b.n	800d614 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d60e:	461a      	mov	r2, r3
 800d610:	2300      	movs	r3, #0
 800d612:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	015a      	lsls	r2, r3, #5
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	4413      	add	r3, r2
 800d61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d620:	461a      	mov	r2, r3
 800d622:	2300      	movs	r3, #0
 800d624:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	015a      	lsls	r2, r3, #5
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	4413      	add	r3, r2
 800d62e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d632:	461a      	mov	r2, r3
 800d634:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d638:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	3301      	adds	r3, #1
 800d63e:	613b      	str	r3, [r7, #16]
 800d640:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d644:	461a      	mov	r2, r3
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	4293      	cmp	r3, r2
 800d64a:	d3b5      	bcc.n	800d5b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d64c:	2300      	movs	r3, #0
 800d64e:	613b      	str	r3, [r7, #16]
 800d650:	e043      	b.n	800d6da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d668:	d118      	bne.n	800d69c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10a      	bne.n	800d686 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	015a      	lsls	r2, r3, #5
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	4413      	add	r3, r2
 800d678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d67c:	461a      	mov	r2, r3
 800d67e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	e013      	b.n	800d6ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	015a      	lsls	r2, r3, #5
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	4413      	add	r3, r2
 800d68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d692:	461a      	mov	r2, r3
 800d694:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	e008      	b.n	800d6ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	015a      	lsls	r2, r3, #5
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	2300      	movs	r3, #0
 800d6be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	015a      	lsls	r2, r3, #5
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d6d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	613b      	str	r3, [r7, #16]
 800d6da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d6de:	461a      	mov	r2, r3
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d3b5      	bcc.n	800d652 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d6f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d706:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d708:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d105      	bne.n	800d71c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	699b      	ldr	r3, [r3, #24]
 800d714:	f043 0210 	orr.w	r2, r3, #16
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	699a      	ldr	r2, [r3, #24]
 800d720:	4b0f      	ldr	r3, [pc, #60]	@ (800d760 <USB_DevInit+0x2b4>)
 800d722:	4313      	orrs	r3, r2
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d728:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d005      	beq.n	800d73c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	f043 0208 	orr.w	r2, r3, #8
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d73c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d740:	2b01      	cmp	r3, #1
 800d742:	d105      	bne.n	800d750 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	699a      	ldr	r2, [r3, #24]
 800d748:	4b06      	ldr	r3, [pc, #24]	@ (800d764 <USB_DevInit+0x2b8>)
 800d74a:	4313      	orrs	r3, r2
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d750:	7dfb      	ldrb	r3, [r7, #23]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d75c:	b004      	add	sp, #16
 800d75e:	4770      	bx	lr
 800d760:	803c3800 	.word	0x803c3800
 800d764:	40000004 	.word	0x40000004

0800d768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d772:	2300      	movs	r3, #0
 800d774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3301      	adds	r3, #1
 800d77a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d782:	d901      	bls.n	800d788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d784:	2303      	movs	r3, #3
 800d786:	e01b      	b.n	800d7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	daf2      	bge.n	800d776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d790:	2300      	movs	r3, #0
 800d792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	019b      	lsls	r3, r3, #6
 800d798:	f043 0220 	orr.w	r2, r3, #32
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7ac:	d901      	bls.n	800d7b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	e006      	b.n	800d7c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b20      	cmp	r3, #32
 800d7bc:	d0f0      	beq.n	800d7a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7e4:	d901      	bls.n	800d7ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e018      	b.n	800d81c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	daf2      	bge.n	800d7d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2210      	movs	r2, #16
 800d7fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	3301      	adds	r3, #1
 800d800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d808:	d901      	bls.n	800d80e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	e006      	b.n	800d81c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	f003 0310 	and.w	r3, r3, #16
 800d816:	2b10      	cmp	r3, #16
 800d818:	d0f0      	beq.n	800d7fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	68f9      	ldr	r1, [r7, #12]
 800d844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d848:	4313      	orrs	r3, r2
 800d84a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b085      	sub	sp, #20
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d874:	f023 0303 	bic.w	r3, r3, #3
 800d878:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d888:	f043 0302 	orr.w	r3, r3, #2
 800d88c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	f003 0301 	and.w	r3, r3, #1
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8d0:	d901      	bls.n	800d8d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e01b      	b.n	800d90e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	daf2      	bge.n	800d8c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	f043 0201 	orr.w	r2, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8fa:	d901      	bls.n	800d900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e006      	b.n	800d90e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d0f0      	beq.n	800d8ee <USB_CoreReset+0x36>

  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b085      	sub	sp, #20
 800d91e:	af00      	add	r7, sp, #0
 800d920:	4603      	mov	r3, r0
 800d922:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d92c:	2b84      	cmp	r3, #132	@ 0x84
 800d92e:	d005      	beq.n	800d93c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d930:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	4413      	add	r3, r2
 800d938:	3303      	adds	r3, #3
 800d93a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d93c:	68fb      	ldr	r3, [r7, #12]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3714      	adds	r7, #20
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d94e:	f000 fafd 	bl	800df4c <vTaskStartScheduler>
  
  return osOK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	bd80      	pop	{r7, pc}

0800d958 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d95a:	b089      	sub	sp, #36	@ 0x24
 800d95c:	af04      	add	r7, sp, #16
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d020      	beq.n	800d9ac <osThreadCreate+0x54>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d01c      	beq.n	800d9ac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	685c      	ldr	r4, [r3, #4]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	691e      	ldr	r6, [r3, #16]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff ffc8 	bl	800d91a <makeFreeRtosPriority>
 800d98a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	695b      	ldr	r3, [r3, #20]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d994:	9202      	str	r2, [sp, #8]
 800d996:	9301      	str	r3, [sp, #4]
 800d998:	9100      	str	r1, [sp, #0]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	4632      	mov	r2, r6
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f000 f8ed 	bl	800db80 <xTaskCreateStatic>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	60fb      	str	r3, [r7, #12]
 800d9aa:	e01c      	b.n	800d9e6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685c      	ldr	r4, [r3, #4]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9b8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff ffaa 	bl	800d91a <makeFreeRtosPriority>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	f107 030c 	add.w	r3, r7, #12
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	9200      	str	r2, [sp, #0]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f000 f932 	bl	800dc40 <xTaskCreate>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d001      	beq.n	800d9e6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e000      	b.n	800d9e8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <osDelay+0x16>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	e000      	b.n	800da08 <osDelay+0x18>
 800da06:	2301      	movs	r3, #1
 800da08:	4618      	mov	r0, r3
 800da0a:	f000 fa69 	bl	800dee0 <vTaskDelay>
  
  return osOK;
 800da0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f103 0208 	add.w	r2, r3, #8
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f04f 32ff 	mov.w	r2, #4294967295
 800da30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f103 0208 	add.w	r2, r3, #8
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f103 0208 	add.w	r2, r3, #8
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800da66:	bf00      	nop
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da72:	b480      	push	{r7}
 800da74:	b085      	sub	sp, #20
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	689a      	ldr	r2, [r3, #8]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	683a      	ldr	r2, [r7, #0]
 800da9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	1c5a      	adds	r2, r3, #1
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	601a      	str	r2, [r3, #0]
}
 800daae:	bf00      	nop
 800dab0:	3714      	adds	r7, #20
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr

0800daba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800daba:	b480      	push	{r7}
 800dabc:	b085      	sub	sp, #20
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad0:	d103      	bne.n	800dada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	e00c      	b.n	800daf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	3308      	adds	r3, #8
 800dade:	60fb      	str	r3, [r7, #12]
 800dae0:	e002      	b.n	800dae8 <vListInsert+0x2e>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	60fb      	str	r3, [r7, #12]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d2f6      	bcs.n	800dae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	685a      	ldr	r2, [r3, #4]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	1c5a      	adds	r2, r3, #1
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	601a      	str	r2, [r3, #0]
}
 800db20:	bf00      	nop
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	6892      	ldr	r2, [r2, #8]
 800db42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	6852      	ldr	r2, [r2, #4]
 800db4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	429a      	cmp	r2, r3
 800db56:	d103      	bne.n	800db60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	689a      	ldr	r2, [r3, #8]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	1e5a      	subs	r2, r3, #1
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3714      	adds	r7, #20
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08e      	sub	sp, #56	@ 0x38
 800db84:	af04      	add	r7, sp, #16
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10b      	bne.n	800dbac <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dba6:	bf00      	nop
 800dba8:	bf00      	nop
 800dbaa:	e7fd      	b.n	800dba8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10b      	bne.n	800dbca <xTaskCreateStatic+0x4a>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	61fb      	str	r3, [r7, #28]
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
 800dbc8:	e7fd      	b.n	800dbc6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dbca:	23a0      	movs	r3, #160	@ 0xa0
 800dbcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	2ba0      	cmp	r3, #160	@ 0xa0
 800dbd2:	d00b      	beq.n	800dbec <xTaskCreateStatic+0x6c>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	61bb      	str	r3, [r7, #24]
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dbec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01e      	beq.n	800dc32 <xTaskCreateStatic+0xb2>
 800dbf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d01b      	beq.n	800dc32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbfc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	2202      	movs	r2, #2
 800dc08:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	9303      	str	r3, [sp, #12]
 800dc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc12:	9302      	str	r3, [sp, #8]
 800dc14:	f107 0314 	add.w	r3, r7, #20
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	68b9      	ldr	r1, [r7, #8]
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f000 f851 	bl	800dccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc2c:	f000 f8ee 	bl	800de0c <prvAddNewTaskToReadyList>
 800dc30:	e001      	b.n	800dc36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc36:	697b      	ldr	r3, [r7, #20]
	}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3728      	adds	r7, #40	@ 0x28
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08c      	sub	sp, #48	@ 0x30
 800dc44:	af04      	add	r7, sp, #16
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	603b      	str	r3, [r7, #0]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc50:	88fb      	ldrh	r3, [r7, #6]
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 feff 	bl	800ea58 <pvPortMalloc>
 800dc5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00e      	beq.n	800dc80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc62:	20a0      	movs	r0, #160	@ 0xa0
 800dc64:	f000 fef8 	bl	800ea58 <pvPortMalloc>
 800dc68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d003      	beq.n	800dc78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc76:	e005      	b.n	800dc84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc78:	6978      	ldr	r0, [r7, #20]
 800dc7a:	f000 ffbb 	bl	800ebf4 <vPortFree>
 800dc7e:	e001      	b.n	800dc84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc80:	2300      	movs	r3, #0
 800dc82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d017      	beq.n	800dcba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc92:	88fa      	ldrh	r2, [r7, #6]
 800dc94:	2300      	movs	r3, #0
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	9302      	str	r3, [sp, #8]
 800dc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc9e:	9301      	str	r3, [sp, #4]
 800dca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f000 f80f 	bl	800dccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcae:	69f8      	ldr	r0, [r7, #28]
 800dcb0:	f000 f8ac 	bl	800de0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	61bb      	str	r3, [r7, #24]
 800dcb8:	e002      	b.n	800dcc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dcba:	f04f 33ff 	mov.w	r3, #4294967295
 800dcbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dcc0:	69bb      	ldr	r3, [r7, #24]
	}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3720      	adds	r7, #32
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
 800dcd8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800dce4:	440b      	add	r3, r1
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4413      	add	r3, r2
 800dcea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	f023 0307 	bic.w	r3, r3, #7
 800dcf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	f003 0307 	and.w	r3, r3, #7
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00b      	beq.n	800dd16 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	617b      	str	r3, [r7, #20]
}
 800dd10:	bf00      	nop
 800dd12:	bf00      	nop
 800dd14:	e7fd      	b.n	800dd12 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d01f      	beq.n	800dd5c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	61fb      	str	r3, [r7, #28]
 800dd20:	e012      	b.n	800dd48 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	4413      	add	r3, r2
 800dd28:	7819      	ldrb	r1, [r3, #0]
 800dd2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	4413      	add	r3, r2
 800dd30:	3334      	adds	r3, #52	@ 0x34
 800dd32:	460a      	mov	r2, r1
 800dd34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d006      	beq.n	800dd50 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	3301      	adds	r3, #1
 800dd46:	61fb      	str	r3, [r7, #28]
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	2b0f      	cmp	r3, #15
 800dd4c:	d9e9      	bls.n	800dd22 <prvInitialiseNewTask+0x56>
 800dd4e:	e000      	b.n	800dd52 <prvInitialiseNewTask+0x86>
			{
				break;
 800dd50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd5a:	e003      	b.n	800dd64 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd66:	2b06      	cmp	r3, #6
 800dd68:	d901      	bls.n	800dd6e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd6a:	2306      	movs	r3, #6
 800dd6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd78:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd82:	3304      	adds	r3, #4
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7ff fe67 	bl	800da58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8c:	3318      	adds	r3, #24
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7ff fe62 	bl	800da58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9c:	f1c3 0207 	rsb	r2, r3, #7
 800dda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dda8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddac:	2200      	movs	r2, #0
 800ddae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ddba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbc:	334c      	adds	r3, #76	@ 0x4c
 800ddbe:	224c      	movs	r2, #76	@ 0x4c
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f001 faec 	bl	800f3a0 <memset>
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddca:	4a0d      	ldr	r2, [pc, #52]	@ (800de00 <prvInitialiseNewTask+0x134>)
 800ddcc:	651a      	str	r2, [r3, #80]	@ 0x50
 800ddce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd0:	4a0c      	ldr	r2, [pc, #48]	@ (800de04 <prvInitialiseNewTask+0x138>)
 800ddd2:	655a      	str	r2, [r3, #84]	@ 0x54
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd6:	4a0c      	ldr	r2, [pc, #48]	@ (800de08 <prvInitialiseNewTask+0x13c>)
 800ddd8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	68f9      	ldr	r1, [r7, #12]
 800ddde:	69b8      	ldr	r0, [r7, #24]
 800dde0:	f000 fc2a 	bl	800e638 <pxPortInitialiseStack>
 800dde4:	4602      	mov	r2, r0
 800dde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ddea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ddf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddf6:	bf00      	nop
 800ddf8:	3720      	adds	r7, #32
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	24054808 	.word	0x24054808
 800de04:	24054870 	.word	0x24054870
 800de08:	240548d8 	.word	0x240548d8

0800de0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de14:	f000 fd40 	bl	800e898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de18:	4b2a      	ldr	r3, [pc, #168]	@ (800dec4 <prvAddNewTaskToReadyList+0xb8>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3301      	adds	r3, #1
 800de1e:	4a29      	ldr	r2, [pc, #164]	@ (800dec4 <prvAddNewTaskToReadyList+0xb8>)
 800de20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de22:	4b29      	ldr	r3, [pc, #164]	@ (800dec8 <prvAddNewTaskToReadyList+0xbc>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d109      	bne.n	800de3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de2a:	4a27      	ldr	r2, [pc, #156]	@ (800dec8 <prvAddNewTaskToReadyList+0xbc>)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de30:	4b24      	ldr	r3, [pc, #144]	@ (800dec4 <prvAddNewTaskToReadyList+0xb8>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d110      	bne.n	800de5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de38:	f000 fad4 	bl	800e3e4 <prvInitialiseTaskLists>
 800de3c:	e00d      	b.n	800de5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de3e:	4b23      	ldr	r3, [pc, #140]	@ (800decc <prvAddNewTaskToReadyList+0xc0>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d109      	bne.n	800de5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de46:	4b20      	ldr	r3, [pc, #128]	@ (800dec8 <prvAddNewTaskToReadyList+0xbc>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de50:	429a      	cmp	r2, r3
 800de52:	d802      	bhi.n	800de5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de54:	4a1c      	ldr	r2, [pc, #112]	@ (800dec8 <prvAddNewTaskToReadyList+0xbc>)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de5a:	4b1d      	ldr	r3, [pc, #116]	@ (800ded0 <prvAddNewTaskToReadyList+0xc4>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	3301      	adds	r3, #1
 800de60:	4a1b      	ldr	r2, [pc, #108]	@ (800ded0 <prvAddNewTaskToReadyList+0xc4>)
 800de62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de68:	2201      	movs	r2, #1
 800de6a:	409a      	lsls	r2, r3
 800de6c:	4b19      	ldr	r3, [pc, #100]	@ (800ded4 <prvAddNewTaskToReadyList+0xc8>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4313      	orrs	r3, r2
 800de72:	4a18      	ldr	r2, [pc, #96]	@ (800ded4 <prvAddNewTaskToReadyList+0xc8>)
 800de74:	6013      	str	r3, [r2, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de7a:	4613      	mov	r3, r2
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4a15      	ldr	r2, [pc, #84]	@ (800ded8 <prvAddNewTaskToReadyList+0xcc>)
 800de84:	441a      	add	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	3304      	adds	r3, #4
 800de8a:	4619      	mov	r1, r3
 800de8c:	4610      	mov	r0, r2
 800de8e:	f7ff fdf0 	bl	800da72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de92:	f000 fd33 	bl	800e8fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de96:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <prvAddNewTaskToReadyList+0xc0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00e      	beq.n	800debc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de9e:	4b0a      	ldr	r3, [pc, #40]	@ (800dec8 <prvAddNewTaskToReadyList+0xbc>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d207      	bcs.n	800debc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800deac:	4b0b      	ldr	r3, [pc, #44]	@ (800dedc <prvAddNewTaskToReadyList+0xd0>)
 800deae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800debc:	bf00      	nop
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	24050bb4 	.word	0x24050bb4
 800dec8:	24050ab4 	.word	0x24050ab4
 800decc:	24050bc0 	.word	0x24050bc0
 800ded0:	24050bd0 	.word	0x24050bd0
 800ded4:	24050bbc 	.word	0x24050bbc
 800ded8:	24050ab8 	.word	0x24050ab8
 800dedc:	e000ed04 	.word	0xe000ed04

0800dee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dee8:	2300      	movs	r3, #0
 800deea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d018      	beq.n	800df24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800def2:	4b14      	ldr	r3, [pc, #80]	@ (800df44 <vTaskDelay+0x64>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00b      	beq.n	800df12 <vTaskDelay+0x32>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	60bb      	str	r3, [r7, #8]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800df12:	f000 f885 	bl	800e020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df16:	2100      	movs	r1, #0
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 fb27 	bl	800e56c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df1e:	f000 f88d 	bl	800e03c <xTaskResumeAll>
 800df22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d107      	bne.n	800df3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800df2a:	4b07      	ldr	r3, [pc, #28]	@ (800df48 <vTaskDelay+0x68>)
 800df2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df30:	601a      	str	r2, [r3, #0]
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df3a:	bf00      	nop
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	24050bdc 	.word	0x24050bdc
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	@ 0x28
 800df50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df5a:	463a      	mov	r2, r7
 800df5c:	1d39      	adds	r1, r7, #4
 800df5e:	f107 0308 	add.w	r3, r7, #8
 800df62:	4618      	mov	r0, r3
 800df64:	f7f2 fd4a 	bl	80009fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	9202      	str	r2, [sp, #8]
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	2300      	movs	r3, #0
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	2300      	movs	r3, #0
 800df78:	460a      	mov	r2, r1
 800df7a:	4921      	ldr	r1, [pc, #132]	@ (800e000 <vTaskStartScheduler+0xb4>)
 800df7c:	4821      	ldr	r0, [pc, #132]	@ (800e004 <vTaskStartScheduler+0xb8>)
 800df7e:	f7ff fdff 	bl	800db80 <xTaskCreateStatic>
 800df82:	4603      	mov	r3, r0
 800df84:	4a20      	ldr	r2, [pc, #128]	@ (800e008 <vTaskStartScheduler+0xbc>)
 800df86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df88:	4b1f      	ldr	r3, [pc, #124]	@ (800e008 <vTaskStartScheduler+0xbc>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df90:	2301      	movs	r3, #1
 800df92:	617b      	str	r3, [r7, #20]
 800df94:	e001      	b.n	800df9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df96:	2300      	movs	r3, #0
 800df98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d11b      	bne.n	800dfd8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800dfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa4:	f383 8811 	msr	BASEPRI, r3
 800dfa8:	f3bf 8f6f 	isb	sy
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	613b      	str	r3, [r7, #16]
}
 800dfb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dfb4:	4b15      	ldr	r3, [pc, #84]	@ (800e00c <vTaskStartScheduler+0xc0>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	334c      	adds	r3, #76	@ 0x4c
 800dfba:	4a15      	ldr	r2, [pc, #84]	@ (800e010 <vTaskStartScheduler+0xc4>)
 800dfbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfbe:	4b15      	ldr	r3, [pc, #84]	@ (800e014 <vTaskStartScheduler+0xc8>)
 800dfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfc6:	4b14      	ldr	r3, [pc, #80]	@ (800e018 <vTaskStartScheduler+0xcc>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfcc:	4b13      	ldr	r3, [pc, #76]	@ (800e01c <vTaskStartScheduler+0xd0>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfd2:	f000 fbbd 	bl	800e750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfd6:	e00f      	b.n	800dff8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfde:	d10b      	bne.n	800dff8 <vTaskStartScheduler+0xac>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe4:	f383 8811 	msr	BASEPRI, r3
 800dfe8:	f3bf 8f6f 	isb	sy
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	60fb      	str	r3, [r7, #12]
}
 800dff2:	bf00      	nop
 800dff4:	bf00      	nop
 800dff6:	e7fd      	b.n	800dff4 <vTaskStartScheduler+0xa8>
}
 800dff8:	bf00      	nop
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	0800fdec 	.word	0x0800fdec
 800e004:	0800e3b5 	.word	0x0800e3b5
 800e008:	24050bd8 	.word	0x24050bd8
 800e00c:	24050ab4 	.word	0x24050ab4
 800e010:	24000018 	.word	0x24000018
 800e014:	24050bd4 	.word	0x24050bd4
 800e018:	24050bc0 	.word	0x24050bc0
 800e01c:	24050bb8 	.word	0x24050bb8

0800e020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e020:	b480      	push	{r7}
 800e022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e024:	4b04      	ldr	r3, [pc, #16]	@ (800e038 <vTaskSuspendAll+0x18>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	3301      	adds	r3, #1
 800e02a:	4a03      	ldr	r2, [pc, #12]	@ (800e038 <vTaskSuspendAll+0x18>)
 800e02c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e02e:	bf00      	nop
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	24050bdc 	.word	0x24050bdc

0800e03c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e042:	2300      	movs	r3, #0
 800e044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e046:	2300      	movs	r3, #0
 800e048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e04a:	4b42      	ldr	r3, [pc, #264]	@ (800e154 <xTaskResumeAll+0x118>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10b      	bne.n	800e06a <xTaskResumeAll+0x2e>
	__asm volatile
 800e052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e056:	f383 8811 	msr	BASEPRI, r3
 800e05a:	f3bf 8f6f 	isb	sy
 800e05e:	f3bf 8f4f 	dsb	sy
 800e062:	603b      	str	r3, [r7, #0]
}
 800e064:	bf00      	nop
 800e066:	bf00      	nop
 800e068:	e7fd      	b.n	800e066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e06a:	f000 fc15 	bl	800e898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e06e:	4b39      	ldr	r3, [pc, #228]	@ (800e154 <xTaskResumeAll+0x118>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3b01      	subs	r3, #1
 800e074:	4a37      	ldr	r2, [pc, #220]	@ (800e154 <xTaskResumeAll+0x118>)
 800e076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e078:	4b36      	ldr	r3, [pc, #216]	@ (800e154 <xTaskResumeAll+0x118>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d161      	bne.n	800e144 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e080:	4b35      	ldr	r3, [pc, #212]	@ (800e158 <xTaskResumeAll+0x11c>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d05d      	beq.n	800e144 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e088:	e02e      	b.n	800e0e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e08a:	4b34      	ldr	r3, [pc, #208]	@ (800e15c <xTaskResumeAll+0x120>)
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3318      	adds	r3, #24
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fd48 	bl	800db2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff fd43 	bl	800db2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	409a      	lsls	r2, r3
 800e0ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e160 <xTaskResumeAll+0x124>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	4a2a      	ldr	r2, [pc, #168]	@ (800e160 <xTaskResumeAll+0x124>)
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0bc:	4613      	mov	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4a27      	ldr	r2, [pc, #156]	@ (800e164 <xTaskResumeAll+0x128>)
 800e0c6:	441a      	add	r2, r3
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3304      	adds	r3, #4
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	f7ff fccf 	bl	800da72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0d8:	4b23      	ldr	r3, [pc, #140]	@ (800e168 <xTaskResumeAll+0x12c>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d302      	bcc.n	800e0e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e0e2:	4b22      	ldr	r3, [pc, #136]	@ (800e16c <xTaskResumeAll+0x130>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e15c <xTaskResumeAll+0x120>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1cc      	bne.n	800e08a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0f6:	f000 fa19 	bl	800e52c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e0fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e170 <xTaskResumeAll+0x134>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d010      	beq.n	800e128 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e106:	f000 f837 	bl	800e178 <xTaskIncrementTick>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e110:	4b16      	ldr	r3, [pc, #88]	@ (800e16c <xTaskResumeAll+0x130>)
 800e112:	2201      	movs	r2, #1
 800e114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3b01      	subs	r3, #1
 800e11a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1f1      	bne.n	800e106 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e122:	4b13      	ldr	r3, [pc, #76]	@ (800e170 <xTaskResumeAll+0x134>)
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e128:	4b10      	ldr	r3, [pc, #64]	@ (800e16c <xTaskResumeAll+0x130>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e130:	2301      	movs	r3, #1
 800e132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e134:	4b0f      	ldr	r3, [pc, #60]	@ (800e174 <xTaskResumeAll+0x138>)
 800e136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e144:	f000 fbda 	bl	800e8fc <vPortExitCritical>

	return xAlreadyYielded;
 800e148:	68bb      	ldr	r3, [r7, #8]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	24050bdc 	.word	0x24050bdc
 800e158:	24050bb4 	.word	0x24050bb4
 800e15c:	24050b74 	.word	0x24050b74
 800e160:	24050bbc 	.word	0x24050bbc
 800e164:	24050ab8 	.word	0x24050ab8
 800e168:	24050ab4 	.word	0x24050ab4
 800e16c:	24050bc8 	.word	0x24050bc8
 800e170:	24050bc4 	.word	0x24050bc4
 800e174:	e000ed04 	.word	0xe000ed04

0800e178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e182:	4b4f      	ldr	r3, [pc, #316]	@ (800e2c0 <xTaskIncrementTick+0x148>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f040 808f 	bne.w	800e2aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e18c:	4b4d      	ldr	r3, [pc, #308]	@ (800e2c4 <xTaskIncrementTick+0x14c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	3301      	adds	r3, #1
 800e192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e194:	4a4b      	ldr	r2, [pc, #300]	@ (800e2c4 <xTaskIncrementTick+0x14c>)
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d121      	bne.n	800e1e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1a0:	4b49      	ldr	r3, [pc, #292]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00b      	beq.n	800e1c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	603b      	str	r3, [r7, #0]
}
 800e1bc:	bf00      	nop
 800e1be:	bf00      	nop
 800e1c0:	e7fd      	b.n	800e1be <xTaskIncrementTick+0x46>
 800e1c2:	4b41      	ldr	r3, [pc, #260]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	4b40      	ldr	r3, [pc, #256]	@ (800e2cc <xTaskIncrementTick+0x154>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a3e      	ldr	r2, [pc, #248]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	4a3e      	ldr	r2, [pc, #248]	@ (800e2cc <xTaskIncrementTick+0x154>)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6013      	str	r3, [r2, #0]
 800e1d6:	4b3e      	ldr	r3, [pc, #248]	@ (800e2d0 <xTaskIncrementTick+0x158>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	4a3c      	ldr	r2, [pc, #240]	@ (800e2d0 <xTaskIncrementTick+0x158>)
 800e1de:	6013      	str	r3, [r2, #0]
 800e1e0:	f000 f9a4 	bl	800e52c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1e4:	4b3b      	ldr	r3, [pc, #236]	@ (800e2d4 <xTaskIncrementTick+0x15c>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d348      	bcc.n	800e280 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ee:	4b36      	ldr	r3, [pc, #216]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d104      	bne.n	800e202 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f8:	4b36      	ldr	r3, [pc, #216]	@ (800e2d4 <xTaskIncrementTick+0x15c>)
 800e1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e1fe:	601a      	str	r2, [r3, #0]
					break;
 800e200:	e03e      	b.n	800e280 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e202:	4b31      	ldr	r3, [pc, #196]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e212:	693a      	ldr	r2, [r7, #16]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	429a      	cmp	r2, r3
 800e218:	d203      	bcs.n	800e222 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e21a:	4a2e      	ldr	r2, [pc, #184]	@ (800e2d4 <xTaskIncrementTick+0x15c>)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e220:	e02e      	b.n	800e280 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	3304      	adds	r3, #4
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff fc80 	bl	800db2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e230:	2b00      	cmp	r3, #0
 800e232:	d004      	beq.n	800e23e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	3318      	adds	r3, #24
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff fc77 	bl	800db2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e242:	2201      	movs	r2, #1
 800e244:	409a      	lsls	r2, r3
 800e246:	4b24      	ldr	r3, [pc, #144]	@ (800e2d8 <xTaskIncrementTick+0x160>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	4a22      	ldr	r2, [pc, #136]	@ (800e2d8 <xTaskIncrementTick+0x160>)
 800e24e:	6013      	str	r3, [r2, #0]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e254:	4613      	mov	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4413      	add	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4a1f      	ldr	r2, [pc, #124]	@ (800e2dc <xTaskIncrementTick+0x164>)
 800e25e:	441a      	add	r2, r3
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	3304      	adds	r3, #4
 800e264:	4619      	mov	r1, r3
 800e266:	4610      	mov	r0, r2
 800e268:	f7ff fc03 	bl	800da72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e270:	4b1b      	ldr	r3, [pc, #108]	@ (800e2e0 <xTaskIncrementTick+0x168>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e276:	429a      	cmp	r2, r3
 800e278:	d3b9      	bcc.n	800e1ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e27a:	2301      	movs	r3, #1
 800e27c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e27e:	e7b6      	b.n	800e1ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e280:	4b17      	ldr	r3, [pc, #92]	@ (800e2e0 <xTaskIncrementTick+0x168>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e286:	4915      	ldr	r1, [pc, #84]	@ (800e2dc <xTaskIncrementTick+0x164>)
 800e288:	4613      	mov	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4413      	add	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	440b      	add	r3, r1
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d901      	bls.n	800e29c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e298:	2301      	movs	r3, #1
 800e29a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e29c:	4b11      	ldr	r3, [pc, #68]	@ (800e2e4 <xTaskIncrementTick+0x16c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d007      	beq.n	800e2b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	e004      	b.n	800e2b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e8 <xTaskIncrementTick+0x170>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	4a0d      	ldr	r2, [pc, #52]	@ (800e2e8 <xTaskIncrementTick+0x170>)
 800e2b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e2b4:	697b      	ldr	r3, [r7, #20]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	24050bdc 	.word	0x24050bdc
 800e2c4:	24050bb8 	.word	0x24050bb8
 800e2c8:	24050b6c 	.word	0x24050b6c
 800e2cc:	24050b70 	.word	0x24050b70
 800e2d0:	24050bcc 	.word	0x24050bcc
 800e2d4:	24050bd4 	.word	0x24050bd4
 800e2d8:	24050bbc 	.word	0x24050bbc
 800e2dc:	24050ab8 	.word	0x24050ab8
 800e2e0:	24050ab4 	.word	0x24050ab4
 800e2e4:	24050bc8 	.word	0x24050bc8
 800e2e8:	24050bc4 	.word	0x24050bc4

0800e2ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b087      	sub	sp, #28
 800e2f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2f2:	4b2a      	ldr	r3, [pc, #168]	@ (800e39c <vTaskSwitchContext+0xb0>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2fa:	4b29      	ldr	r3, [pc, #164]	@ (800e3a0 <vTaskSwitchContext+0xb4>)
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e300:	e045      	b.n	800e38e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e302:	4b27      	ldr	r3, [pc, #156]	@ (800e3a0 <vTaskSwitchContext+0xb4>)
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e308:	4b26      	ldr	r3, [pc, #152]	@ (800e3a4 <vTaskSwitchContext+0xb8>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	fab3 f383 	clz	r3, r3
 800e314:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e316:	7afb      	ldrb	r3, [r7, #11]
 800e318:	f1c3 031f 	rsb	r3, r3, #31
 800e31c:	617b      	str	r3, [r7, #20]
 800e31e:	4922      	ldr	r1, [pc, #136]	@ (800e3a8 <vTaskSwitchContext+0xbc>)
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	440b      	add	r3, r1
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10b      	bne.n	800e34a <vTaskSwitchContext+0x5e>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	607b      	str	r3, [r7, #4]
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop
 800e348:	e7fd      	b.n	800e346 <vTaskSwitchContext+0x5a>
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	4613      	mov	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4a14      	ldr	r2, [pc, #80]	@ (800e3a8 <vTaskSwitchContext+0xbc>)
 800e356:	4413      	add	r3, r2
 800e358:	613b      	str	r3, [r7, #16]
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	685a      	ldr	r2, [r3, #4]
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	605a      	str	r2, [r3, #4]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	685a      	ldr	r2, [r3, #4]
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	3308      	adds	r3, #8
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d104      	bne.n	800e37a <vTaskSwitchContext+0x8e>
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	605a      	str	r2, [r3, #4]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	4a0a      	ldr	r2, [pc, #40]	@ (800e3ac <vTaskSwitchContext+0xc0>)
 800e382:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e384:	4b09      	ldr	r3, [pc, #36]	@ (800e3ac <vTaskSwitchContext+0xc0>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	334c      	adds	r3, #76	@ 0x4c
 800e38a:	4a09      	ldr	r2, [pc, #36]	@ (800e3b0 <vTaskSwitchContext+0xc4>)
 800e38c:	6013      	str	r3, [r2, #0]
}
 800e38e:	bf00      	nop
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	24050bdc 	.word	0x24050bdc
 800e3a0:	24050bc8 	.word	0x24050bc8
 800e3a4:	24050bbc 	.word	0x24050bbc
 800e3a8:	24050ab8 	.word	0x24050ab8
 800e3ac:	24050ab4 	.word	0x24050ab4
 800e3b0:	24000018 	.word	0x24000018

0800e3b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3bc:	f000 f852 	bl	800e464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3c0:	4b06      	ldr	r3, [pc, #24]	@ (800e3dc <prvIdleTask+0x28>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d9f9      	bls.n	800e3bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3c8:	4b05      	ldr	r3, [pc, #20]	@ (800e3e0 <prvIdleTask+0x2c>)
 800e3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ce:	601a      	str	r2, [r3, #0]
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3d8:	e7f0      	b.n	800e3bc <prvIdleTask+0x8>
 800e3da:	bf00      	nop
 800e3dc:	24050ab8 	.word	0x24050ab8
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	607b      	str	r3, [r7, #4]
 800e3ee:	e00c      	b.n	800e40a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4a12      	ldr	r2, [pc, #72]	@ (800e444 <prvInitialiseTaskLists+0x60>)
 800e3fc:	4413      	add	r3, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff fb0a 	bl	800da18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	3301      	adds	r3, #1
 800e408:	607b      	str	r3, [r7, #4]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b06      	cmp	r3, #6
 800e40e:	d9ef      	bls.n	800e3f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e410:	480d      	ldr	r0, [pc, #52]	@ (800e448 <prvInitialiseTaskLists+0x64>)
 800e412:	f7ff fb01 	bl	800da18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e416:	480d      	ldr	r0, [pc, #52]	@ (800e44c <prvInitialiseTaskLists+0x68>)
 800e418:	f7ff fafe 	bl	800da18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e41c:	480c      	ldr	r0, [pc, #48]	@ (800e450 <prvInitialiseTaskLists+0x6c>)
 800e41e:	f7ff fafb 	bl	800da18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e422:	480c      	ldr	r0, [pc, #48]	@ (800e454 <prvInitialiseTaskLists+0x70>)
 800e424:	f7ff faf8 	bl	800da18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e428:	480b      	ldr	r0, [pc, #44]	@ (800e458 <prvInitialiseTaskLists+0x74>)
 800e42a:	f7ff faf5 	bl	800da18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e42e:	4b0b      	ldr	r3, [pc, #44]	@ (800e45c <prvInitialiseTaskLists+0x78>)
 800e430:	4a05      	ldr	r2, [pc, #20]	@ (800e448 <prvInitialiseTaskLists+0x64>)
 800e432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e434:	4b0a      	ldr	r3, [pc, #40]	@ (800e460 <prvInitialiseTaskLists+0x7c>)
 800e436:	4a05      	ldr	r2, [pc, #20]	@ (800e44c <prvInitialiseTaskLists+0x68>)
 800e438:	601a      	str	r2, [r3, #0]
}
 800e43a:	bf00      	nop
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	24050ab8 	.word	0x24050ab8
 800e448:	24050b44 	.word	0x24050b44
 800e44c:	24050b58 	.word	0x24050b58
 800e450:	24050b74 	.word	0x24050b74
 800e454:	24050b88 	.word	0x24050b88
 800e458:	24050ba0 	.word	0x24050ba0
 800e45c:	24050b6c 	.word	0x24050b6c
 800e460:	24050b70 	.word	0x24050b70

0800e464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e46a:	e019      	b.n	800e4a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e46c:	f000 fa14 	bl	800e898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e470:	4b10      	ldr	r3, [pc, #64]	@ (800e4b4 <prvCheckTasksWaitingTermination+0x50>)
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	3304      	adds	r3, #4
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7ff fb55 	bl	800db2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e482:	4b0d      	ldr	r3, [pc, #52]	@ (800e4b8 <prvCheckTasksWaitingTermination+0x54>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3b01      	subs	r3, #1
 800e488:	4a0b      	ldr	r2, [pc, #44]	@ (800e4b8 <prvCheckTasksWaitingTermination+0x54>)
 800e48a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e48c:	4b0b      	ldr	r3, [pc, #44]	@ (800e4bc <prvCheckTasksWaitingTermination+0x58>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3b01      	subs	r3, #1
 800e492:	4a0a      	ldr	r2, [pc, #40]	@ (800e4bc <prvCheckTasksWaitingTermination+0x58>)
 800e494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e496:	f000 fa31 	bl	800e8fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f810 	bl	800e4c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4a0:	4b06      	ldr	r3, [pc, #24]	@ (800e4bc <prvCheckTasksWaitingTermination+0x58>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e1      	bne.n	800e46c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4a8:	bf00      	nop
 800e4aa:	bf00      	nop
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	24050b88 	.word	0x24050b88
 800e4b8:	24050bb4 	.word	0x24050bb4
 800e4bc:	24050b9c 	.word	0x24050b9c

0800e4c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	334c      	adds	r3, #76	@ 0x4c
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f000 ff6f 	bl	800f3b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d108      	bne.n	800e4ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 fb87 	bl	800ebf4 <vPortFree>
				vPortFree( pxTCB );
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fb84 	bl	800ebf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4ec:	e019      	b.n	800e522 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d103      	bne.n	800e500 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fb7b 	bl	800ebf4 <vPortFree>
	}
 800e4fe:	e010      	b.n	800e522 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e506:	2b02      	cmp	r3, #2
 800e508:	d00b      	beq.n	800e522 <prvDeleteTCB+0x62>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	60fb      	str	r3, [r7, #12]
}
 800e51c:	bf00      	nop
 800e51e:	bf00      	nop
 800e520:	e7fd      	b.n	800e51e <prvDeleteTCB+0x5e>
	}
 800e522:	bf00      	nop
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e532:	4b0c      	ldr	r3, [pc, #48]	@ (800e564 <prvResetNextTaskUnblockTime+0x38>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d104      	bne.n	800e546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e53c:	4b0a      	ldr	r3, [pc, #40]	@ (800e568 <prvResetNextTaskUnblockTime+0x3c>)
 800e53e:	f04f 32ff 	mov.w	r2, #4294967295
 800e542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e544:	e008      	b.n	800e558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e546:	4b07      	ldr	r3, [pc, #28]	@ (800e564 <prvResetNextTaskUnblockTime+0x38>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	4a04      	ldr	r2, [pc, #16]	@ (800e568 <prvResetNextTaskUnblockTime+0x3c>)
 800e556:	6013      	str	r3, [r2, #0]
}
 800e558:	bf00      	nop
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	24050b6c 	.word	0x24050b6c
 800e568:	24050bd4 	.word	0x24050bd4

0800e56c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e576:	4b29      	ldr	r3, [pc, #164]	@ (800e61c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e57c:	4b28      	ldr	r3, [pc, #160]	@ (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3304      	adds	r3, #4
 800e582:	4618      	mov	r0, r3
 800e584:	f7ff fad2 	bl	800db2c <uxListRemove>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10b      	bne.n	800e5a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e58e:	4b24      	ldr	r3, [pc, #144]	@ (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e594:	2201      	movs	r2, #1
 800e596:	fa02 f303 	lsl.w	r3, r2, r3
 800e59a:	43da      	mvns	r2, r3
 800e59c:	4b21      	ldr	r3, [pc, #132]	@ (800e624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	4a20      	ldr	r2, [pc, #128]	@ (800e624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e5a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ac:	d10a      	bne.n	800e5c4 <prvAddCurrentTaskToDelayedList+0x58>
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d007      	beq.n	800e5c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5b4:	4b1a      	ldr	r3, [pc, #104]	@ (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	481a      	ldr	r0, [pc, #104]	@ (800e628 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e5be:	f7ff fa58 	bl	800da72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5c2:	e026      	b.n	800e612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5cc:	4b14      	ldr	r3, [pc, #80]	@ (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d209      	bcs.n	800e5f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5dc:	4b13      	ldr	r3, [pc, #76]	@ (800e62c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	4b0f      	ldr	r3, [pc, #60]	@ (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f7ff fa66 	bl	800daba <vListInsert>
}
 800e5ee:	e010      	b.n	800e612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e630 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	3304      	adds	r3, #4
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	f7ff fa5c 	bl	800daba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e602:	4b0c      	ldr	r3, [pc, #48]	@ (800e634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d202      	bcs.n	800e612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e60c:	4a09      	ldr	r2, [pc, #36]	@ (800e634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	6013      	str	r3, [r2, #0]
}
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	24050bb8 	.word	0x24050bb8
 800e620:	24050ab4 	.word	0x24050ab4
 800e624:	24050bbc 	.word	0x24050bbc
 800e628:	24050ba0 	.word	0x24050ba0
 800e62c:	24050b70 	.word	0x24050b70
 800e630:	24050b6c 	.word	0x24050b6c
 800e634:	24050bd4 	.word	0x24050bd4

0800e638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	3b04      	subs	r3, #4
 800e648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3b04      	subs	r3, #4
 800e656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	f023 0201 	bic.w	r2, r3, #1
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	3b04      	subs	r3, #4
 800e666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e668:	4a0c      	ldr	r2, [pc, #48]	@ (800e69c <pxPortInitialiseStack+0x64>)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3b14      	subs	r3, #20
 800e672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3b04      	subs	r3, #4
 800e67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f06f 0202 	mvn.w	r2, #2
 800e686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	3b20      	subs	r3, #32
 800e68c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e68e:	68fb      	ldr	r3, [r7, #12]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3714      	adds	r7, #20
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	0800e6a1 	.word	0x0800e6a1

0800e6a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6aa:	4b13      	ldr	r3, [pc, #76]	@ (800e6f8 <prvTaskExitError+0x58>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b2:	d00b      	beq.n	800e6cc <prvTaskExitError+0x2c>
	__asm volatile
 800e6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b8:	f383 8811 	msr	BASEPRI, r3
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f3bf 8f4f 	dsb	sy
 800e6c4:	60fb      	str	r3, [r7, #12]
}
 800e6c6:	bf00      	nop
 800e6c8:	bf00      	nop
 800e6ca:	e7fd      	b.n	800e6c8 <prvTaskExitError+0x28>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d0:	f383 8811 	msr	BASEPRI, r3
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	60bb      	str	r3, [r7, #8]
}
 800e6de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6e0:	bf00      	nop
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d0fc      	beq.n	800e6e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	24000014 	.word	0x24000014
 800e6fc:	00000000 	.word	0x00000000

0800e700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e700:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <pxCurrentTCBConst2>)
 800e702:	6819      	ldr	r1, [r3, #0]
 800e704:	6808      	ldr	r0, [r1, #0]
 800e706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70a:	f380 8809 	msr	PSP, r0
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	f04f 0000 	mov.w	r0, #0
 800e716:	f380 8811 	msr	BASEPRI, r0
 800e71a:	4770      	bx	lr
 800e71c:	f3af 8000 	nop.w

0800e720 <pxCurrentTCBConst2>:
 800e720:	24050ab4 	.word	0x24050ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop

0800e728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e728:	4808      	ldr	r0, [pc, #32]	@ (800e74c <prvPortStartFirstTask+0x24>)
 800e72a:	6800      	ldr	r0, [r0, #0]
 800e72c:	6800      	ldr	r0, [r0, #0]
 800e72e:	f380 8808 	msr	MSP, r0
 800e732:	f04f 0000 	mov.w	r0, #0
 800e736:	f380 8814 	msr	CONTROL, r0
 800e73a:	b662      	cpsie	i
 800e73c:	b661      	cpsie	f
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	df00      	svc	0
 800e748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e74a:	bf00      	nop
 800e74c:	e000ed08 	.word	0xe000ed08

0800e750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e756:	4b47      	ldr	r3, [pc, #284]	@ (800e874 <xPortStartScheduler+0x124>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a47      	ldr	r2, [pc, #284]	@ (800e878 <xPortStartScheduler+0x128>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d10b      	bne.n	800e778 <xPortStartScheduler+0x28>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	613b      	str	r3, [r7, #16]
}
 800e772:	bf00      	nop
 800e774:	bf00      	nop
 800e776:	e7fd      	b.n	800e774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e778:	4b3e      	ldr	r3, [pc, #248]	@ (800e874 <xPortStartScheduler+0x124>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a3f      	ldr	r2, [pc, #252]	@ (800e87c <xPortStartScheduler+0x12c>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d10b      	bne.n	800e79a <xPortStartScheduler+0x4a>
	__asm volatile
 800e782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	60fb      	str	r3, [r7, #12]
}
 800e794:	bf00      	nop
 800e796:	bf00      	nop
 800e798:	e7fd      	b.n	800e796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e79a:	4b39      	ldr	r3, [pc, #228]	@ (800e880 <xPortStartScheduler+0x130>)
 800e79c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	22ff      	movs	r2, #255	@ 0xff
 800e7aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7b4:	78fb      	ldrb	r3, [r7, #3]
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	4b31      	ldr	r3, [pc, #196]	@ (800e884 <xPortStartScheduler+0x134>)
 800e7c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7c2:	4b31      	ldr	r3, [pc, #196]	@ (800e888 <xPortStartScheduler+0x138>)
 800e7c4:	2207      	movs	r2, #7
 800e7c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7c8:	e009      	b.n	800e7de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e888 <xPortStartScheduler+0x138>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	4a2d      	ldr	r2, [pc, #180]	@ (800e888 <xPortStartScheduler+0x138>)
 800e7d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e7d4:	78fb      	ldrb	r3, [r7, #3]
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7de:	78fb      	ldrb	r3, [r7, #3]
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7e6:	2b80      	cmp	r3, #128	@ 0x80
 800e7e8:	d0ef      	beq.n	800e7ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7ea:	4b27      	ldr	r3, [pc, #156]	@ (800e888 <xPortStartScheduler+0x138>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f1c3 0307 	rsb	r3, r3, #7
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	d00b      	beq.n	800e80e <xPortStartScheduler+0xbe>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	60bb      	str	r3, [r7, #8]
}
 800e808:	bf00      	nop
 800e80a:	bf00      	nop
 800e80c:	e7fd      	b.n	800e80a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e80e:	4b1e      	ldr	r3, [pc, #120]	@ (800e888 <xPortStartScheduler+0x138>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	021b      	lsls	r3, r3, #8
 800e814:	4a1c      	ldr	r2, [pc, #112]	@ (800e888 <xPortStartScheduler+0x138>)
 800e816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e818:	4b1b      	ldr	r3, [pc, #108]	@ (800e888 <xPortStartScheduler+0x138>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e820:	4a19      	ldr	r2, [pc, #100]	@ (800e888 <xPortStartScheduler+0x138>)
 800e822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	b2da      	uxtb	r2, r3
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e82c:	4b17      	ldr	r3, [pc, #92]	@ (800e88c <xPortStartScheduler+0x13c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a16      	ldr	r2, [pc, #88]	@ (800e88c <xPortStartScheduler+0x13c>)
 800e832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e838:	4b14      	ldr	r3, [pc, #80]	@ (800e88c <xPortStartScheduler+0x13c>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a13      	ldr	r2, [pc, #76]	@ (800e88c <xPortStartScheduler+0x13c>)
 800e83e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e844:	f000 f8da 	bl	800e9fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e848:	4b11      	ldr	r3, [pc, #68]	@ (800e890 <xPortStartScheduler+0x140>)
 800e84a:	2200      	movs	r2, #0
 800e84c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e84e:	f000 f8f9 	bl	800ea44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e852:	4b10      	ldr	r3, [pc, #64]	@ (800e894 <xPortStartScheduler+0x144>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a0f      	ldr	r2, [pc, #60]	@ (800e894 <xPortStartScheduler+0x144>)
 800e858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e85c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e85e:	f7ff ff63 	bl	800e728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e862:	f7ff fd43 	bl	800e2ec <vTaskSwitchContext>
	prvTaskExitError();
 800e866:	f7ff ff1b 	bl	800e6a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	e000ed00 	.word	0xe000ed00
 800e878:	410fc271 	.word	0x410fc271
 800e87c:	410fc270 	.word	0x410fc270
 800e880:	e000e400 	.word	0xe000e400
 800e884:	24050be0 	.word	0x24050be0
 800e888:	24050be4 	.word	0x24050be4
 800e88c:	e000ed20 	.word	0xe000ed20
 800e890:	24000014 	.word	0x24000014
 800e894:	e000ef34 	.word	0xe000ef34

0800e898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	607b      	str	r3, [r7, #4]
}
 800e8b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e8b2:	4b10      	ldr	r3, [pc, #64]	@ (800e8f4 <vPortEnterCritical+0x5c>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	4a0e      	ldr	r2, [pc, #56]	@ (800e8f4 <vPortEnterCritical+0x5c>)
 800e8ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f4 <vPortEnterCritical+0x5c>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d110      	bne.n	800e8e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f8 <vPortEnterCritical+0x60>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00b      	beq.n	800e8e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	603b      	str	r3, [r7, #0]
}
 800e8e0:	bf00      	nop
 800e8e2:	bf00      	nop
 800e8e4:	e7fd      	b.n	800e8e2 <vPortEnterCritical+0x4a>
	}
}
 800e8e6:	bf00      	nop
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	24000014 	.word	0x24000014
 800e8f8:	e000ed04 	.word	0xe000ed04

0800e8fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e902:	4b12      	ldr	r3, [pc, #72]	@ (800e94c <vPortExitCritical+0x50>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10b      	bne.n	800e922 <vPortExitCritical+0x26>
	__asm volatile
 800e90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e90e:	f383 8811 	msr	BASEPRI, r3
 800e912:	f3bf 8f6f 	isb	sy
 800e916:	f3bf 8f4f 	dsb	sy
 800e91a:	607b      	str	r3, [r7, #4]
}
 800e91c:	bf00      	nop
 800e91e:	bf00      	nop
 800e920:	e7fd      	b.n	800e91e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e922:	4b0a      	ldr	r3, [pc, #40]	@ (800e94c <vPortExitCritical+0x50>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3b01      	subs	r3, #1
 800e928:	4a08      	ldr	r2, [pc, #32]	@ (800e94c <vPortExitCritical+0x50>)
 800e92a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e92c:	4b07      	ldr	r3, [pc, #28]	@ (800e94c <vPortExitCritical+0x50>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d105      	bne.n	800e940 <vPortExitCritical+0x44>
 800e934:	2300      	movs	r3, #0
 800e936:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e93e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	24000014 	.word	0x24000014

0800e950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e950:	f3ef 8009 	mrs	r0, PSP
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	4b15      	ldr	r3, [pc, #84]	@ (800e9b0 <pxCurrentTCBConst>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	f01e 0f10 	tst.w	lr, #16
 800e960:	bf08      	it	eq
 800e962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96a:	6010      	str	r0, [r2, #0]
 800e96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e974:	f380 8811 	msr	BASEPRI, r0
 800e978:	f3bf 8f4f 	dsb	sy
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f7ff fcb4 	bl	800e2ec <vTaskSwitchContext>
 800e984:	f04f 0000 	mov.w	r0, #0
 800e988:	f380 8811 	msr	BASEPRI, r0
 800e98c:	bc09      	pop	{r0, r3}
 800e98e:	6819      	ldr	r1, [r3, #0]
 800e990:	6808      	ldr	r0, [r1, #0]
 800e992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e996:	f01e 0f10 	tst.w	lr, #16
 800e99a:	bf08      	it	eq
 800e99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e9a0:	f380 8809 	msr	PSP, r0
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	f3af 8000 	nop.w

0800e9b0 <pxCurrentTCBConst>:
 800e9b0:	24050ab4 	.word	0x24050ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9b4:	bf00      	nop
 800e9b6:	bf00      	nop

0800e9b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	607b      	str	r3, [r7, #4]
}
 800e9d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e9d2:	f7ff fbd1 	bl	800e178 <xTaskIncrementTick>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d003      	beq.n	800e9e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9dc:	4b06      	ldr	r3, [pc, #24]	@ (800e9f8 <SysTick_Handler+0x40>)
 800e9de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	f383 8811 	msr	BASEPRI, r3
}
 800e9ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9f0:	bf00      	nop
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	e000ed04 	.word	0xe000ed04

0800e9fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea00:	4b0b      	ldr	r3, [pc, #44]	@ (800ea30 <vPortSetupTimerInterrupt+0x34>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea06:	4b0b      	ldr	r3, [pc, #44]	@ (800ea34 <vPortSetupTimerInterrupt+0x38>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea38 <vPortSetupTimerInterrupt+0x3c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a0a      	ldr	r2, [pc, #40]	@ (800ea3c <vPortSetupTimerInterrupt+0x40>)
 800ea12:	fba2 2303 	umull	r2, r3, r2, r3
 800ea16:	099b      	lsrs	r3, r3, #6
 800ea18:	4a09      	ldr	r2, [pc, #36]	@ (800ea40 <vPortSetupTimerInterrupt+0x44>)
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea1e:	4b04      	ldr	r3, [pc, #16]	@ (800ea30 <vPortSetupTimerInterrupt+0x34>)
 800ea20:	2207      	movs	r2, #7
 800ea22:	601a      	str	r2, [r3, #0]
}
 800ea24:	bf00      	nop
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	e000e010 	.word	0xe000e010
 800ea34:	e000e018 	.word	0xe000e018
 800ea38:	24000004 	.word	0x24000004
 800ea3c:	10624dd3 	.word	0x10624dd3
 800ea40:	e000e014 	.word	0xe000e014

0800ea44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ea54 <vPortEnableVFP+0x10>
 800ea48:	6801      	ldr	r1, [r0, #0]
 800ea4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea4e:	6001      	str	r1, [r0, #0]
 800ea50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea52:	bf00      	nop
 800ea54:	e000ed88 	.word	0xe000ed88

0800ea58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b08a      	sub	sp, #40	@ 0x28
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea60:	2300      	movs	r3, #0
 800ea62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea64:	f7ff fadc 	bl	800e020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea68:	4b5c      	ldr	r3, [pc, #368]	@ (800ebdc <pvPortMalloc+0x184>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea70:	f000 f924 	bl	800ecbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea74:	4b5a      	ldr	r3, [pc, #360]	@ (800ebe0 <pvPortMalloc+0x188>)
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4013      	ands	r3, r2
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f040 8095 	bne.w	800ebac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d01e      	beq.n	800eac6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ea88:	2208      	movs	r2, #8
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f003 0307 	and.w	r3, r3, #7
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d015      	beq.n	800eac6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f023 0307 	bic.w	r3, r3, #7
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f003 0307 	and.w	r3, r3, #7
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00b      	beq.n	800eac6 <pvPortMalloc+0x6e>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	617b      	str	r3, [r7, #20]
}
 800eac0:	bf00      	nop
 800eac2:	bf00      	nop
 800eac4:	e7fd      	b.n	800eac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d06f      	beq.n	800ebac <pvPortMalloc+0x154>
 800eacc:	4b45      	ldr	r3, [pc, #276]	@ (800ebe4 <pvPortMalloc+0x18c>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d86a      	bhi.n	800ebac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ead6:	4b44      	ldr	r3, [pc, #272]	@ (800ebe8 <pvPortMalloc+0x190>)
 800ead8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eada:	4b43      	ldr	r3, [pc, #268]	@ (800ebe8 <pvPortMalloc+0x190>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eae0:	e004      	b.n	800eaec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d903      	bls.n	800eafe <pvPortMalloc+0xa6>
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1f1      	bne.n	800eae2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eafe:	4b37      	ldr	r3, [pc, #220]	@ (800ebdc <pvPortMalloc+0x184>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d051      	beq.n	800ebac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2208      	movs	r2, #8
 800eb0e:	4413      	add	r3, r2
 800eb10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1c:	685a      	ldr	r2, [r3, #4]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	1ad2      	subs	r2, r2, r3
 800eb22:	2308      	movs	r3, #8
 800eb24:	005b      	lsls	r3, r3, #1
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d920      	bls.n	800eb6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4413      	add	r3, r2
 800eb30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	f003 0307 	and.w	r3, r3, #7
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00b      	beq.n	800eb54 <pvPortMalloc+0xfc>
	__asm volatile
 800eb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	613b      	str	r3, [r7, #16]
}
 800eb4e:	bf00      	nop
 800eb50:	bf00      	nop
 800eb52:	e7fd      	b.n	800eb50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	1ad2      	subs	r2, r2, r3
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb66:	69b8      	ldr	r0, [r7, #24]
 800eb68:	f000 f90a 	bl	800ed80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb6c:	4b1d      	ldr	r3, [pc, #116]	@ (800ebe4 <pvPortMalloc+0x18c>)
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe4 <pvPortMalloc+0x18c>)
 800eb78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb7a:	4b1a      	ldr	r3, [pc, #104]	@ (800ebe4 <pvPortMalloc+0x18c>)
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	4b1b      	ldr	r3, [pc, #108]	@ (800ebec <pvPortMalloc+0x194>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d203      	bcs.n	800eb8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb86:	4b17      	ldr	r3, [pc, #92]	@ (800ebe4 <pvPortMalloc+0x18c>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a18      	ldr	r2, [pc, #96]	@ (800ebec <pvPortMalloc+0x194>)
 800eb8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	4b13      	ldr	r3, [pc, #76]	@ (800ebe0 <pvPortMalloc+0x188>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	431a      	orrs	r2, r3
 800eb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9e:	2200      	movs	r2, #0
 800eba0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eba2:	4b13      	ldr	r3, [pc, #76]	@ (800ebf0 <pvPortMalloc+0x198>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	3301      	adds	r3, #1
 800eba8:	4a11      	ldr	r2, [pc, #68]	@ (800ebf0 <pvPortMalloc+0x198>)
 800ebaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ebac:	f7ff fa46 	bl	800e03c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	f003 0307 	and.w	r3, r3, #7
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00b      	beq.n	800ebd2 <pvPortMalloc+0x17a>
	__asm volatile
 800ebba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebbe:	f383 8811 	msr	BASEPRI, r3
 800ebc2:	f3bf 8f6f 	isb	sy
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	60fb      	str	r3, [r7, #12]
}
 800ebcc:	bf00      	nop
 800ebce:	bf00      	nop
 800ebd0:	e7fd      	b.n	800ebce <pvPortMalloc+0x176>
	return pvReturn;
 800ebd2:	69fb      	ldr	r3, [r7, #28]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3728      	adds	r7, #40	@ 0x28
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	240547f0 	.word	0x240547f0
 800ebe0:	24054804 	.word	0x24054804
 800ebe4:	240547f4 	.word	0x240547f4
 800ebe8:	240547e8 	.word	0x240547e8
 800ebec:	240547f8 	.word	0x240547f8
 800ebf0:	240547fc 	.word	0x240547fc

0800ebf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d04f      	beq.n	800eca6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec06:	2308      	movs	r3, #8
 800ec08:	425b      	negs	r3, r3
 800ec0a:	697a      	ldr	r2, [r7, #20]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	685a      	ldr	r2, [r3, #4]
 800ec18:	4b25      	ldr	r3, [pc, #148]	@ (800ecb0 <vPortFree+0xbc>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10b      	bne.n	800ec3a <vPortFree+0x46>
	__asm volatile
 800ec22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	60fb      	str	r3, [r7, #12]
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop
 800ec38:	e7fd      	b.n	800ec36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00b      	beq.n	800ec5a <vPortFree+0x66>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	60bb      	str	r3, [r7, #8]
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop
 800ec58:	e7fd      	b.n	800ec56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	685a      	ldr	r2, [r3, #4]
 800ec5e:	4b14      	ldr	r3, [pc, #80]	@ (800ecb0 <vPortFree+0xbc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4013      	ands	r3, r2
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d01e      	beq.n	800eca6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d11a      	bne.n	800eca6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	4b0e      	ldr	r3, [pc, #56]	@ (800ecb0 <vPortFree+0xbc>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	43db      	mvns	r3, r3
 800ec7a:	401a      	ands	r2, r3
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec80:	f7ff f9ce 	bl	800e020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	685a      	ldr	r2, [r3, #4]
 800ec88:	4b0a      	ldr	r3, [pc, #40]	@ (800ecb4 <vPortFree+0xc0>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	4a09      	ldr	r2, [pc, #36]	@ (800ecb4 <vPortFree+0xc0>)
 800ec90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec92:	6938      	ldr	r0, [r7, #16]
 800ec94:	f000 f874 	bl	800ed80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec98:	4b07      	ldr	r3, [pc, #28]	@ (800ecb8 <vPortFree+0xc4>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	4a06      	ldr	r2, [pc, #24]	@ (800ecb8 <vPortFree+0xc4>)
 800eca0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eca2:	f7ff f9cb 	bl	800e03c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eca6:	bf00      	nop
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	24054804 	.word	0x24054804
 800ecb4:	240547f4 	.word	0x240547f4
 800ecb8:	24054800 	.word	0x24054800

0800ecbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ecc2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ecc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ecc8:	4b27      	ldr	r3, [pc, #156]	@ (800ed68 <prvHeapInit+0xac>)
 800ecca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f003 0307 	and.w	r3, r3, #7
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00c      	beq.n	800ecf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	3307      	adds	r3, #7
 800ecda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f023 0307 	bic.w	r3, r3, #7
 800ece2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	4a1f      	ldr	r2, [pc, #124]	@ (800ed68 <prvHeapInit+0xac>)
 800ecec:	4413      	add	r3, r2
 800ecee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecf4:	4a1d      	ldr	r2, [pc, #116]	@ (800ed6c <prvHeapInit+0xb0>)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ecfa:	4b1c      	ldr	r3, [pc, #112]	@ (800ed6c <prvHeapInit+0xb0>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	4413      	add	r3, r2
 800ed06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed08:	2208      	movs	r2, #8
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	1a9b      	subs	r3, r3, r2
 800ed0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f023 0307 	bic.w	r3, r3, #7
 800ed16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	4a15      	ldr	r2, [pc, #84]	@ (800ed70 <prvHeapInit+0xb4>)
 800ed1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed1e:	4b14      	ldr	r3, [pc, #80]	@ (800ed70 <prvHeapInit+0xb4>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2200      	movs	r2, #0
 800ed24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed26:	4b12      	ldr	r3, [pc, #72]	@ (800ed70 <prvHeapInit+0xb4>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	1ad2      	subs	r2, r2, r3
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ed70 <prvHeapInit+0xb4>)
 800ed3e:	681a      	ldr	r2, [r3, #0]
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	4a0a      	ldr	r2, [pc, #40]	@ (800ed74 <prvHeapInit+0xb8>)
 800ed4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	4a09      	ldr	r2, [pc, #36]	@ (800ed78 <prvHeapInit+0xbc>)
 800ed52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed54:	4b09      	ldr	r3, [pc, #36]	@ (800ed7c <prvHeapInit+0xc0>)
 800ed56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ed5a:	601a      	str	r2, [r3, #0]
}
 800ed5c:	bf00      	nop
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	24050be8 	.word	0x24050be8
 800ed6c:	240547e8 	.word	0x240547e8
 800ed70:	240547f0 	.word	0x240547f0
 800ed74:	240547f8 	.word	0x240547f8
 800ed78:	240547f4 	.word	0x240547f4
 800ed7c:	24054804 	.word	0x24054804

0800ed80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed88:	4b28      	ldr	r3, [pc, #160]	@ (800ee2c <prvInsertBlockIntoFreeList+0xac>)
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	e002      	b.n	800ed94 <prvInsertBlockIntoFreeList+0x14>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	60fb      	str	r3, [r7, #12]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d8f7      	bhi.n	800ed8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	4413      	add	r3, r2
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	429a      	cmp	r2, r3
 800edae:	d108      	bne.n	800edc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	685a      	ldr	r2, [r3, #4]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	441a      	add	r2, r3
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	68ba      	ldr	r2, [r7, #8]
 800edcc:	441a      	add	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d118      	bne.n	800ee08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	4b15      	ldr	r3, [pc, #84]	@ (800ee30 <prvInsertBlockIntoFreeList+0xb0>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d00d      	beq.n	800edfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	441a      	add	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	601a      	str	r2, [r3, #0]
 800edfc:	e008      	b.n	800ee10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800edfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ee30 <prvInsertBlockIntoFreeList+0xb0>)
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	e003      	b.n	800ee10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d002      	beq.n	800ee1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee1e:	bf00      	nop
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	240547e8 	.word	0x240547e8
 800ee30:	240547f0 	.word	0x240547f0

0800ee34 <arm_fir_init_f32>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	9f06      	ldr	r7, [sp, #24]
 800ee38:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 800ee3c:	460e      	mov	r6, r1
 800ee3e:	6082      	str	r2, [r0, #8]
 800ee40:	443c      	add	r4, r7
 800ee42:	4605      	mov	r5, r0
 800ee44:	8006      	strh	r6, [r0, #0]
 800ee46:	2100      	movs	r1, #0
 800ee48:	19a2      	adds	r2, r4, r6
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	0092      	lsls	r2, r2, #2
 800ee4e:	f000 faa7 	bl	800f3a0 <memset>
 800ee52:	6068      	str	r0, [r5, #4]
 800ee54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee56:	bf00      	nop

0800ee58 <arm_fir_f32>:
 800ee58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	ed2d 8b10 	vpush	{d8-d15}
 800ee62:	b08b      	sub	sp, #44	@ 0x2c
 800ee64:	f8b4 8000 	ldrh.w	r8, [r4]
 800ee68:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800ee6c:	9004      	str	r0, [sp, #16]
 800ee6e:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 800ee72:	9305      	str	r3, [sp, #20]
 800ee74:	08db      	lsrs	r3, r3, #3
 800ee76:	4440      	add	r0, r8
 800ee78:	68a4      	ldr	r4, [r4, #8]
 800ee7a:	9301      	str	r3, [sp, #4]
 800ee7c:	eb0a 0580 	add.w	r5, sl, r0, lsl #2
 800ee80:	9402      	str	r4, [sp, #8]
 800ee82:	9500      	str	r5, [sp, #0]
 800ee84:	f000 81f1 	beq.w	800f26a <arm_fir_f32+0x412>
 800ee88:	4620      	mov	r0, r4
 800ee8a:	ea4f 07d8 	mov.w	r7, r8, lsr #3
 800ee8e:	469c      	mov	ip, r3
 800ee90:	4623      	mov	r3, r4
 800ee92:	3020      	adds	r0, #32
 800ee94:	f008 0907 	and.w	r9, r8, #7
 800ee98:	9706      	str	r7, [sp, #24]
 800ee9a:	f10a 0b1c 	add.w	fp, sl, #28
 800ee9e:	9003      	str	r0, [sp, #12]
 800eea0:	0178      	lsls	r0, r7, #5
 800eea2:	9f03      	ldr	r7, [sp, #12]
 800eea4:	f101 0620 	add.w	r6, r1, #32
 800eea8:	4403      	add	r3, r0
 800eeaa:	9007      	str	r0, [sp, #28]
 800eeac:	4407      	add	r7, r0
 800eeae:	f8dd e018 	ldr.w	lr, [sp, #24]
 800eeb2:	4648      	mov	r0, r9
 800eeb4:	f8cd a018 	str.w	sl, [sp, #24]
 800eeb8:	3520      	adds	r5, #32
 800eeba:	f102 0420 	add.w	r4, r2, #32
 800eebe:	4699      	mov	r9, r3
 800eec0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800eec4:	f8cd 8020 	str.w	r8, [sp, #32]
 800eec8:	9209      	str	r2, [sp, #36]	@ 0x24
 800eeca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800eece:	9107      	str	r1, [sp, #28]
 800eed0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800eed4:	465a      	mov	r2, fp
 800eed6:	f845 3c20 	str.w	r3, [r5, #-32]
 800eeda:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800eede:	f845 3c1c 	str.w	r3, [r5, #-28]
 800eee2:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800eee6:	f845 3c18 	str.w	r3, [r5, #-24]
 800eeea:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800eeee:	f845 3c14 	str.w	r3, [r5, #-20]
 800eef2:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800eef6:	f845 3c10 	str.w	r3, [r5, #-16]
 800eefa:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800eefe:	f845 3c0c 	str.w	r3, [r5, #-12]
 800ef02:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800ef06:	f845 3c08 	str.w	r3, [r5, #-8]
 800ef0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef0e:	f845 3c04 	str.w	r3, [r5, #-4]
 800ef12:	ed1b 9a07 	vldr	s18, [fp, #-28]	@ 0xffffffe4
 800ef16:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800ef1a:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800ef1e:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800ef22:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800ef26:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800ef2a:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800ef2e:	f1be 0f00 	cmp.w	lr, #0
 800ef32:	f000 8200 	beq.w	800f336 <arm_fir_f32+0x4de>
 800ef36:	eddf 6af3 	vldr	s13, [pc, #972]	@ 800f304 <arm_fir_f32+0x4ac>
 800ef3a:	f10b 0120 	add.w	r1, fp, #32
 800ef3e:	4653      	mov	r3, sl
 800ef40:	eeb0 ca66 	vmov.f32	s24, s13
 800ef44:	460a      	mov	r2, r1
 800ef46:	eeb0 6a66 	vmov.f32	s12, s13
 800ef4a:	eef0 9a66 	vmov.f32	s19, s13
 800ef4e:	eeb0 aa66 	vmov.f32	s20, s13
 800ef52:	eef0 aa66 	vmov.f32	s21, s13
 800ef56:	eeb0 ba66 	vmov.f32	s22, s13
 800ef5a:	eef0 ba66 	vmov.f32	s23, s13
 800ef5e:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800ef62:	3320      	adds	r3, #32
 800ef64:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800ef68:	3220      	adds	r2, #32
 800ef6a:	ee67 fa09 	vmul.f32	s31, s14, s18
 800ef6e:	ed53 ea0f 	vldr	s29, [r3, #-60]	@ 0xffffffc4
 800ef72:	ee27 da21 	vmul.f32	s26, s14, s3
 800ef76:	ed12 9a0f 	vldr	s18, [r2, #-60]	@ 0xffffffc4
 800ef7a:	ee27 2a01 	vmul.f32	s4, s14, s2
 800ef7e:	ed13 ea0e 	vldr	s28, [r3, #-56]	@ 0xffffffc8
 800ef82:	ee27 3a20 	vmul.f32	s6, s14, s1
 800ef86:	ed53 da0d 	vldr	s27, [r3, #-52]	@ 0xffffffcc
 800ef8a:	ee67 3a00 	vmul.f32	s7, s14, s0
 800ef8e:	ed53 ca0c 	vldr	s25, [r3, #-48]	@ 0xffffffd0
 800ef92:	ee67 5a08 	vmul.f32	s11, s14, s16
 800ef96:	ed53 2a0b 	vldr	s5, [r3, #-44]	@ 0xffffffd4
 800ef9a:	ee27 fa28 	vmul.f32	s30, s14, s17
 800ef9e:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
 800efa2:	ee67 7a24 	vmul.f32	s15, s14, s9
 800efa6:	ed13 5a09 	vldr	s10, [r3, #-36]	@ 0xffffffdc
 800efaa:	ee7f baab 	vadd.f32	s23, s31, s23
 800efae:	429f      	cmp	r7, r3
 800efb0:	ee6e faa1 	vmul.f32	s31, s29, s3
 800efb4:	ed52 1a0e 	vldr	s3, [r2, #-56]	@ 0xffffffc8
 800efb8:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800efbc:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800efc0:	ee2e da81 	vmul.f32	s26, s29, s2
 800efc4:	ee2e 2aa0 	vmul.f32	s4, s29, s1
 800efc8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800efcc:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800efd0:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800efd4:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800efd8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800efdc:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800efe0:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800efe4:	ee24 faae 	vmul.f32	s30, s9, s29
 800efe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efec:	ee6e ea89 	vmul.f32	s29, s29, s18
 800eff0:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800eff4:	ed12 1a0d 	vldr	s2, [r2, #-52]	@ 0xffffffcc
 800eff8:	ee7f baab 	vadd.f32	s23, s31, s23
 800effc:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f000:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f004:	ee2e da20 	vmul.f32	s26, s28, s1
 800f008:	ee2e 2a00 	vmul.f32	s4, s28, s0
 800f00c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f010:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f014:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800f018:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800f01c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f020:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f024:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800f028:	ee29 fa0e 	vmul.f32	s30, s18, s28
 800f02c:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800f030:	ee2e ea21 	vmul.f32	s28, s28, s3
 800f034:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800f038:	ed52 0a0c 	vldr	s1, [r2, #-48]	@ 0xffffffd0
 800f03c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f040:	ee77 ba2b 	vadd.f32	s23, s14, s23
 800f044:	ee2d da80 	vmul.f32	s26, s27, s0
 800f048:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f04c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f050:	ee2d 2a88 	vmul.f32	s4, s27, s16
 800f054:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800f058:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f05c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f060:	ee64 3aad 	vmul.f32	s7, s9, s27
 800f064:	ee69 5a2d 	vmul.f32	s11, s18, s27
 800f068:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f06c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800f070:	ee21 faad 	vmul.f32	s30, s3, s27
 800f074:	ee6d da81 	vmul.f32	s27, s27, s2
 800f078:	ee6c fa80 	vmul.f32	s31, s25, s0
 800f07c:	ed12 0a0b 	vldr	s0, [r2, #-44]	@ 0xffffffd4
 800f080:	ee76 baab 	vadd.f32	s23, s13, s23
 800f084:	ee3d da0b 	vadd.f32	s26, s26, s22
 800f088:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f08c:	ee2c ba88 	vmul.f32	s22, s25, s16
 800f090:	ee2c 2aa8 	vmul.f32	s4, s25, s17
 800f094:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f098:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f09c:	ee24 3aac 	vmul.f32	s6, s9, s25
 800f0a0:	ee69 3a2c 	vmul.f32	s7, s18, s25
 800f0a4:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f0a8:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f0ac:	ee61 5aac 	vmul.f32	s11, s3, s25
 800f0b0:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800f0b4:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800f0b8:	ee6c caa0 	vmul.f32	s25, s25, s1
 800f0bc:	ee62 ea88 	vmul.f32	s29, s5, s16
 800f0c0:	ed12 8a0a 	vldr	s16, [r2, #-40]	@ 0xffffffd8
 800f0c4:	ee3b da0d 	vadd.f32	s26, s22, s26
 800f0c8:	ee7f baab 	vadd.f32	s23, s31, s23
 800f0cc:	ee22 baa8 	vmul.f32	s22, s5, s17
 800f0d0:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f0d4:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f0d8:	ee24 2aa2 	vmul.f32	s4, s9, s5
 800f0dc:	ee29 3a22 	vmul.f32	s6, s18, s5
 800f0e0:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f0e4:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f0e8:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800f0ec:	ee61 5a22 	vmul.f32	s11, s2, s5
 800f0f0:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f0f4:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800f0f8:	ee20 faa2 	vmul.f32	s30, s1, s5
 800f0fc:	ee62 2a80 	vmul.f32	s5, s5, s0
 800f100:	ee7e faab 	vadd.f32	s31, s29, s23
 800f104:	ee3b ba0d 	vadd.f32	s22, s22, s26
 800f108:	ee64 ba28 	vmul.f32	s23, s8, s17
 800f10c:	ed52 8a09 	vldr	s17, [r2, #-36]	@ 0xffffffdc
 800f110:	ee24 da84 	vmul.f32	s26, s9, s8
 800f114:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800f118:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f11c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f120:	ee29 2a04 	vmul.f32	s4, s18, s8
 800f124:	ee21 3a84 	vmul.f32	s6, s3, s8
 800f128:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f12c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f130:	ee61 3a04 	vmul.f32	s7, s2, s8
 800f134:	ee60 5a84 	vmul.f32	s11, s1, s8
 800f138:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800f13c:	ee20 7a04 	vmul.f32	s14, s0, s8
 800f140:	ee64 6a08 	vmul.f32	s13, s8, s16
 800f144:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f148:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f14c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f150:	ee37 7a0c 	vadd.f32	s14, s14, s24
 800f154:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f158:	ee7b baaf 	vadd.f32	s23, s23, s31
 800f15c:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f160:	ee3d ba0b 	vadd.f32	s22, s26, s22
 800f164:	ee29 4a05 	vmul.f32	s8, s18, s10
 800f168:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800f16c:	ee61 2a85 	vmul.f32	s5, s3, s10
 800f170:	ee21 3a05 	vmul.f32	s6, s2, s10
 800f174:	ee60 3a85 	vmul.f32	s7, s1, s10
 800f178:	ee60 5a05 	vmul.f32	s11, s0, s10
 800f17c:	ee28 ca05 	vmul.f32	s24, s16, s10
 800f180:	ee65 7a28 	vmul.f32	s15, s10, s17
 800f184:	ee74 baab 	vadd.f32	s23, s9, s23
 800f188:	ee34 ba0b 	vadd.f32	s22, s8, s22
 800f18c:	ee72 aaaa 	vadd.f32	s21, s5, s21
 800f190:	ee33 aa0a 	vadd.f32	s20, s6, s20
 800f194:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800f198:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f19c:	ee3c ca07 	vadd.f32	s24, s24, s14
 800f1a0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800f1a4:	f47f aedb 	bne.w	800ef5e <arm_fir_f32+0x106>
 800f1a8:	eb0b 0208 	add.w	r2, fp, r8
 800f1ac:	46cb      	mov	fp, r9
 800f1ae:	b3a0      	cbz	r0, 800f21a <arm_fir_f32+0x3c2>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	ecfb 7a01 	vldmia	fp!, {s15}
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	ecf2 5a01 	vldmia	r2!, {s11}
 800f1bc:	ee27 2a89 	vmul.f32	s4, s15, s18
 800f1c0:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800f1c4:	ee27 3a81 	vmul.f32	s6, s15, s2
 800f1c8:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800f1cc:	ee27 4a80 	vmul.f32	s8, s15, s0
 800f1d0:	ee67 4a88 	vmul.f32	s9, s15, s16
 800f1d4:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800f1d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f1dc:	eeb0 9a61 	vmov.f32	s18, s3
 800f1e0:	ee7b ba82 	vadd.f32	s23, s23, s4
 800f1e4:	eef0 1a41 	vmov.f32	s3, s2
 800f1e8:	ee3b ba22 	vadd.f32	s22, s22, s5
 800f1ec:	eeb0 1a60 	vmov.f32	s2, s1
 800f1f0:	ee7a aa83 	vadd.f32	s21, s21, s6
 800f1f4:	eef0 0a40 	vmov.f32	s1, s0
 800f1f8:	ee3a aa23 	vadd.f32	s20, s20, s7
 800f1fc:	eeb0 0a48 	vmov.f32	s0, s16
 800f200:	ee79 9a84 	vadd.f32	s19, s19, s8
 800f204:	eeb0 8a68 	vmov.f32	s16, s17
 800f208:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f20c:	eef0 8a65 	vmov.f32	s17, s11
 800f210:	ee3c ca05 	vadd.f32	s24, s24, s10
 800f214:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f218:	d1cb      	bne.n	800f1b2 <arm_fir_f32+0x35a>
 800f21a:	f1bc 0c01 	subs.w	ip, ip, #1
 800f21e:	ed44 ba08 	vstr	s23, [r4, #-32]	@ 0xffffffe0
 800f222:	ed04 ba07 	vstr	s22, [r4, #-28]	@ 0xffffffe4
 800f226:	f106 0620 	add.w	r6, r6, #32
 800f22a:	ed44 aa06 	vstr	s21, [r4, #-24]	@ 0xffffffe8
 800f22e:	f105 0520 	add.w	r5, r5, #32
 800f232:	ed04 aa05 	vstr	s20, [r4, #-20]	@ 0xffffffec
 800f236:	468b      	mov	fp, r1
 800f238:	ed44 9a04 	vstr	s19, [r4, #-16]
 800f23c:	f104 0420 	add.w	r4, r4, #32
 800f240:	ed04 6a0b 	vstr	s12, [r4, #-44]	@ 0xffffffd4
 800f244:	ed04 ca0a 	vstr	s24, [r4, #-40]	@ 0xffffffd8
 800f248:	ed44 6a09 	vstr	s13, [r4, #-36]	@ 0xffffffdc
 800f24c:	f47f ae40 	bne.w	800eed0 <arm_fir_f32+0x78>
 800f250:	9b01      	ldr	r3, [sp, #4]
 800f252:	9800      	ldr	r0, [sp, #0]
 800f254:	015b      	lsls	r3, r3, #5
 800f256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f25c:	4418      	add	r0, r3
 800f25e:	441a      	add	r2, r3
 800f260:	e9dd a106 	ldrd	sl, r1, [sp, #24]
 800f264:	9000      	str	r0, [sp, #0]
 800f266:	4419      	add	r1, r3
 800f268:	449a      	add	sl, r3
 800f26a:	9b05      	ldr	r3, [sp, #20]
 800f26c:	f013 0c07 	ands.w	ip, r3, #7
 800f270:	d021      	beq.n	800f2b6 <arm_fir_f32+0x45e>
 800f272:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f276:	9e00      	ldr	r6, [sp, #0]
 800f278:	4655      	mov	r5, sl
 800f27a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f27e:	eb01 0e0c 	add.w	lr, r1, ip
 800f282:	f851 7b04 	ldr.w	r7, [r1], #4
 800f286:	4643      	mov	r3, r8
 800f288:	464c      	mov	r4, r9
 800f28a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800f304 <arm_fir_f32+0x4ac>
 800f28e:	4628      	mov	r0, r5
 800f290:	f846 7b04 	str.w	r7, [r6], #4
 800f294:	ecf0 7a01 	vldmia	r0!, {s15}
 800f298:	3b01      	subs	r3, #1
 800f29a:	ecf4 6a01 	vldmia	r4!, {s13}
 800f29e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f2a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2a6:	d1f5      	bne.n	800f294 <arm_fir_f32+0x43c>
 800f2a8:	4571      	cmp	r1, lr
 800f2aa:	eca2 7a01 	vstmia	r2!, {s14}
 800f2ae:	f105 0504 	add.w	r5, r5, #4
 800f2b2:	d1e6      	bne.n	800f282 <arm_fir_f32+0x42a>
 800f2b4:	44e2      	add	sl, ip
 800f2b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f2ba:	9b04      	ldr	r3, [sp, #16]
 800f2bc:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800f2c0:	685d      	ldr	r5, [r3, #4]
 800f2c2:	d021      	beq.n	800f308 <arm_fir_f32+0x4b0>
 800f2c4:	f10a 0210 	add.w	r2, sl, #16
 800f2c8:	f105 0310 	add.w	r3, r5, #16
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f2d2:	3901      	subs	r1, #1
 800f2d4:	f102 0210 	add.w	r2, r2, #16
 800f2d8:	f103 0310 	add.w	r3, r3, #16
 800f2dc:	f843 0c20 	str.w	r0, [r3, #-32]
 800f2e0:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800f2e4:	f843 0c1c 	str.w	r0, [r3, #-28]
 800f2e8:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800f2ec:	f843 0c18 	str.w	r0, [r3, #-24]
 800f2f0:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800f2f4:	f843 0c14 	str.w	r0, [r3, #-20]
 800f2f8:	d1e9      	bne.n	800f2ce <arm_fir_f32+0x476>
 800f2fa:	0124      	lsls	r4, r4, #4
 800f2fc:	44a2      	add	sl, r4
 800f2fe:	4425      	add	r5, r4
 800f300:	e002      	b.n	800f308 <arm_fir_f32+0x4b0>
 800f302:	bf00      	nop
 800f304:	00000000 	.word	0x00000000
 800f308:	f018 0803 	ands.w	r8, r8, #3
 800f30c:	d00e      	beq.n	800f32c <arm_fir_f32+0x4d4>
 800f30e:	f8da 3000 	ldr.w	r3, [sl]
 800f312:	f1b8 0801 	subs.w	r8, r8, #1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	d008      	beq.n	800f32c <arm_fir_f32+0x4d4>
 800f31a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f31e:	f1b8 0f01 	cmp.w	r8, #1
 800f322:	606b      	str	r3, [r5, #4]
 800f324:	d002      	beq.n	800f32c <arm_fir_f32+0x4d4>
 800f326:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f32a:	60ab      	str	r3, [r5, #8]
 800f32c:	b00b      	add	sp, #44	@ 0x2c
 800f32e:	ecbd 8b10 	vpop	{d8-d15}
 800f332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f336:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 800f304 <arm_fir_f32+0x4ac>
 800f33a:	f102 0120 	add.w	r1, r2, #32
 800f33e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f342:	eeb0 ca66 	vmov.f32	s24, s13
 800f346:	eeb0 6a66 	vmov.f32	s12, s13
 800f34a:	eef0 9a66 	vmov.f32	s19, s13
 800f34e:	eeb0 aa66 	vmov.f32	s20, s13
 800f352:	eef0 aa66 	vmov.f32	s21, s13
 800f356:	eeb0 ba66 	vmov.f32	s22, s13
 800f35a:	eef0 ba66 	vmov.f32	s23, s13
 800f35e:	e726      	b.n	800f1ae <arm_fir_f32+0x356>

0800f360 <siprintf>:
 800f360:	b40e      	push	{r1, r2, r3}
 800f362:	b500      	push	{lr}
 800f364:	b09c      	sub	sp, #112	@ 0x70
 800f366:	ab1d      	add	r3, sp, #116	@ 0x74
 800f368:	9002      	str	r0, [sp, #8]
 800f36a:	9006      	str	r0, [sp, #24]
 800f36c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f370:	4809      	ldr	r0, [pc, #36]	@ (800f398 <siprintf+0x38>)
 800f372:	9107      	str	r1, [sp, #28]
 800f374:	9104      	str	r1, [sp, #16]
 800f376:	4909      	ldr	r1, [pc, #36]	@ (800f39c <siprintf+0x3c>)
 800f378:	f853 2b04 	ldr.w	r2, [r3], #4
 800f37c:	9105      	str	r1, [sp, #20]
 800f37e:	6800      	ldr	r0, [r0, #0]
 800f380:	9301      	str	r3, [sp, #4]
 800f382:	a902      	add	r1, sp, #8
 800f384:	f000 f9f8 	bl	800f778 <_svfiprintf_r>
 800f388:	9b02      	ldr	r3, [sp, #8]
 800f38a:	2200      	movs	r2, #0
 800f38c:	701a      	strb	r2, [r3, #0]
 800f38e:	b01c      	add	sp, #112	@ 0x70
 800f390:	f85d eb04 	ldr.w	lr, [sp], #4
 800f394:	b003      	add	sp, #12
 800f396:	4770      	bx	lr
 800f398:	24000018 	.word	0x24000018
 800f39c:	ffff0208 	.word	0xffff0208

0800f3a0 <memset>:
 800f3a0:	4402      	add	r2, r0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d100      	bne.n	800f3aa <memset+0xa>
 800f3a8:	4770      	bx	lr
 800f3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ae:	e7f9      	b.n	800f3a4 <memset+0x4>

0800f3b0 <_reclaim_reent>:
 800f3b0:	4b29      	ldr	r3, [pc, #164]	@ (800f458 <_reclaim_reent+0xa8>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4283      	cmp	r3, r0
 800f3b6:	b570      	push	{r4, r5, r6, lr}
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	d04b      	beq.n	800f454 <_reclaim_reent+0xa4>
 800f3bc:	69c3      	ldr	r3, [r0, #28]
 800f3be:	b1ab      	cbz	r3, 800f3ec <_reclaim_reent+0x3c>
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	b16b      	cbz	r3, 800f3e0 <_reclaim_reent+0x30>
 800f3c4:	2500      	movs	r5, #0
 800f3c6:	69e3      	ldr	r3, [r4, #28]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	5959      	ldr	r1, [r3, r5]
 800f3cc:	2900      	cmp	r1, #0
 800f3ce:	d13b      	bne.n	800f448 <_reclaim_reent+0x98>
 800f3d0:	3504      	adds	r5, #4
 800f3d2:	2d80      	cmp	r5, #128	@ 0x80
 800f3d4:	d1f7      	bne.n	800f3c6 <_reclaim_reent+0x16>
 800f3d6:	69e3      	ldr	r3, [r4, #28]
 800f3d8:	4620      	mov	r0, r4
 800f3da:	68d9      	ldr	r1, [r3, #12]
 800f3dc:	f000 f878 	bl	800f4d0 <_free_r>
 800f3e0:	69e3      	ldr	r3, [r4, #28]
 800f3e2:	6819      	ldr	r1, [r3, #0]
 800f3e4:	b111      	cbz	r1, 800f3ec <_reclaim_reent+0x3c>
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f000 f872 	bl	800f4d0 <_free_r>
 800f3ec:	6961      	ldr	r1, [r4, #20]
 800f3ee:	b111      	cbz	r1, 800f3f6 <_reclaim_reent+0x46>
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f000 f86d 	bl	800f4d0 <_free_r>
 800f3f6:	69e1      	ldr	r1, [r4, #28]
 800f3f8:	b111      	cbz	r1, 800f400 <_reclaim_reent+0x50>
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f000 f868 	bl	800f4d0 <_free_r>
 800f400:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f402:	b111      	cbz	r1, 800f40a <_reclaim_reent+0x5a>
 800f404:	4620      	mov	r0, r4
 800f406:	f000 f863 	bl	800f4d0 <_free_r>
 800f40a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f40c:	b111      	cbz	r1, 800f414 <_reclaim_reent+0x64>
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 f85e 	bl	800f4d0 <_free_r>
 800f414:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f416:	b111      	cbz	r1, 800f41e <_reclaim_reent+0x6e>
 800f418:	4620      	mov	r0, r4
 800f41a:	f000 f859 	bl	800f4d0 <_free_r>
 800f41e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f420:	b111      	cbz	r1, 800f428 <_reclaim_reent+0x78>
 800f422:	4620      	mov	r0, r4
 800f424:	f000 f854 	bl	800f4d0 <_free_r>
 800f428:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f42a:	b111      	cbz	r1, 800f432 <_reclaim_reent+0x82>
 800f42c:	4620      	mov	r0, r4
 800f42e:	f000 f84f 	bl	800f4d0 <_free_r>
 800f432:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f434:	b111      	cbz	r1, 800f43c <_reclaim_reent+0x8c>
 800f436:	4620      	mov	r0, r4
 800f438:	f000 f84a 	bl	800f4d0 <_free_r>
 800f43c:	6a23      	ldr	r3, [r4, #32]
 800f43e:	b14b      	cbz	r3, 800f454 <_reclaim_reent+0xa4>
 800f440:	4620      	mov	r0, r4
 800f442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f446:	4718      	bx	r3
 800f448:	680e      	ldr	r6, [r1, #0]
 800f44a:	4620      	mov	r0, r4
 800f44c:	f000 f840 	bl	800f4d0 <_free_r>
 800f450:	4631      	mov	r1, r6
 800f452:	e7bb      	b.n	800f3cc <_reclaim_reent+0x1c>
 800f454:	bd70      	pop	{r4, r5, r6, pc}
 800f456:	bf00      	nop
 800f458:	24000018 	.word	0x24000018

0800f45c <__errno>:
 800f45c:	4b01      	ldr	r3, [pc, #4]	@ (800f464 <__errno+0x8>)
 800f45e:	6818      	ldr	r0, [r3, #0]
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	24000018 	.word	0x24000018

0800f468 <__libc_init_array>:
 800f468:	b570      	push	{r4, r5, r6, lr}
 800f46a:	4d0d      	ldr	r5, [pc, #52]	@ (800f4a0 <__libc_init_array+0x38>)
 800f46c:	4c0d      	ldr	r4, [pc, #52]	@ (800f4a4 <__libc_init_array+0x3c>)
 800f46e:	1b64      	subs	r4, r4, r5
 800f470:	10a4      	asrs	r4, r4, #2
 800f472:	2600      	movs	r6, #0
 800f474:	42a6      	cmp	r6, r4
 800f476:	d109      	bne.n	800f48c <__libc_init_array+0x24>
 800f478:	4d0b      	ldr	r5, [pc, #44]	@ (800f4a8 <__libc_init_array+0x40>)
 800f47a:	4c0c      	ldr	r4, [pc, #48]	@ (800f4ac <__libc_init_array+0x44>)
 800f47c:	f000 fc66 	bl	800fd4c <_init>
 800f480:	1b64      	subs	r4, r4, r5
 800f482:	10a4      	asrs	r4, r4, #2
 800f484:	2600      	movs	r6, #0
 800f486:	42a6      	cmp	r6, r4
 800f488:	d105      	bne.n	800f496 <__libc_init_array+0x2e>
 800f48a:	bd70      	pop	{r4, r5, r6, pc}
 800f48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f490:	4798      	blx	r3
 800f492:	3601      	adds	r6, #1
 800f494:	e7ee      	b.n	800f474 <__libc_init_array+0xc>
 800f496:	f855 3b04 	ldr.w	r3, [r5], #4
 800f49a:	4798      	blx	r3
 800f49c:	3601      	adds	r6, #1
 800f49e:	e7f2      	b.n	800f486 <__libc_init_array+0x1e>
 800f4a0:	0800feec 	.word	0x0800feec
 800f4a4:	0800feec 	.word	0x0800feec
 800f4a8:	0800feec 	.word	0x0800feec
 800f4ac:	0800fef0 	.word	0x0800fef0

0800f4b0 <__retarget_lock_acquire_recursive>:
 800f4b0:	4770      	bx	lr

0800f4b2 <__retarget_lock_release_recursive>:
 800f4b2:	4770      	bx	lr

0800f4b4 <memcpy>:
 800f4b4:	440a      	add	r2, r1
 800f4b6:	4291      	cmp	r1, r2
 800f4b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4bc:	d100      	bne.n	800f4c0 <memcpy+0xc>
 800f4be:	4770      	bx	lr
 800f4c0:	b510      	push	{r4, lr}
 800f4c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4ca:	4291      	cmp	r1, r2
 800f4cc:	d1f9      	bne.n	800f4c2 <memcpy+0xe>
 800f4ce:	bd10      	pop	{r4, pc}

0800f4d0 <_free_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4605      	mov	r5, r0
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	d041      	beq.n	800f55c <_free_r+0x8c>
 800f4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4dc:	1f0c      	subs	r4, r1, #4
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	bfb8      	it	lt
 800f4e2:	18e4      	addlt	r4, r4, r3
 800f4e4:	f000 f8e0 	bl	800f6a8 <__malloc_lock>
 800f4e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f560 <_free_r+0x90>)
 800f4ea:	6813      	ldr	r3, [r2, #0]
 800f4ec:	b933      	cbnz	r3, 800f4fc <_free_r+0x2c>
 800f4ee:	6063      	str	r3, [r4, #4]
 800f4f0:	6014      	str	r4, [r2, #0]
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f8:	f000 b8dc 	b.w	800f6b4 <__malloc_unlock>
 800f4fc:	42a3      	cmp	r3, r4
 800f4fe:	d908      	bls.n	800f512 <_free_r+0x42>
 800f500:	6820      	ldr	r0, [r4, #0]
 800f502:	1821      	adds	r1, r4, r0
 800f504:	428b      	cmp	r3, r1
 800f506:	bf01      	itttt	eq
 800f508:	6819      	ldreq	r1, [r3, #0]
 800f50a:	685b      	ldreq	r3, [r3, #4]
 800f50c:	1809      	addeq	r1, r1, r0
 800f50e:	6021      	streq	r1, [r4, #0]
 800f510:	e7ed      	b.n	800f4ee <_free_r+0x1e>
 800f512:	461a      	mov	r2, r3
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	b10b      	cbz	r3, 800f51c <_free_r+0x4c>
 800f518:	42a3      	cmp	r3, r4
 800f51a:	d9fa      	bls.n	800f512 <_free_r+0x42>
 800f51c:	6811      	ldr	r1, [r2, #0]
 800f51e:	1850      	adds	r0, r2, r1
 800f520:	42a0      	cmp	r0, r4
 800f522:	d10b      	bne.n	800f53c <_free_r+0x6c>
 800f524:	6820      	ldr	r0, [r4, #0]
 800f526:	4401      	add	r1, r0
 800f528:	1850      	adds	r0, r2, r1
 800f52a:	4283      	cmp	r3, r0
 800f52c:	6011      	str	r1, [r2, #0]
 800f52e:	d1e0      	bne.n	800f4f2 <_free_r+0x22>
 800f530:	6818      	ldr	r0, [r3, #0]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	6053      	str	r3, [r2, #4]
 800f536:	4408      	add	r0, r1
 800f538:	6010      	str	r0, [r2, #0]
 800f53a:	e7da      	b.n	800f4f2 <_free_r+0x22>
 800f53c:	d902      	bls.n	800f544 <_free_r+0x74>
 800f53e:	230c      	movs	r3, #12
 800f540:	602b      	str	r3, [r5, #0]
 800f542:	e7d6      	b.n	800f4f2 <_free_r+0x22>
 800f544:	6820      	ldr	r0, [r4, #0]
 800f546:	1821      	adds	r1, r4, r0
 800f548:	428b      	cmp	r3, r1
 800f54a:	bf04      	itt	eq
 800f54c:	6819      	ldreq	r1, [r3, #0]
 800f54e:	685b      	ldreq	r3, [r3, #4]
 800f550:	6063      	str	r3, [r4, #4]
 800f552:	bf04      	itt	eq
 800f554:	1809      	addeq	r1, r1, r0
 800f556:	6021      	streq	r1, [r4, #0]
 800f558:	6054      	str	r4, [r2, #4]
 800f55a:	e7ca      	b.n	800f4f2 <_free_r+0x22>
 800f55c:	bd38      	pop	{r3, r4, r5, pc}
 800f55e:	bf00      	nop
 800f560:	2405494c 	.word	0x2405494c

0800f564 <sbrk_aligned>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	4e0f      	ldr	r6, [pc, #60]	@ (800f5a4 <sbrk_aligned+0x40>)
 800f568:	460c      	mov	r4, r1
 800f56a:	6831      	ldr	r1, [r6, #0]
 800f56c:	4605      	mov	r5, r0
 800f56e:	b911      	cbnz	r1, 800f576 <sbrk_aligned+0x12>
 800f570:	f000 fba6 	bl	800fcc0 <_sbrk_r>
 800f574:	6030      	str	r0, [r6, #0]
 800f576:	4621      	mov	r1, r4
 800f578:	4628      	mov	r0, r5
 800f57a:	f000 fba1 	bl	800fcc0 <_sbrk_r>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d103      	bne.n	800f58a <sbrk_aligned+0x26>
 800f582:	f04f 34ff 	mov.w	r4, #4294967295
 800f586:	4620      	mov	r0, r4
 800f588:	bd70      	pop	{r4, r5, r6, pc}
 800f58a:	1cc4      	adds	r4, r0, #3
 800f58c:	f024 0403 	bic.w	r4, r4, #3
 800f590:	42a0      	cmp	r0, r4
 800f592:	d0f8      	beq.n	800f586 <sbrk_aligned+0x22>
 800f594:	1a21      	subs	r1, r4, r0
 800f596:	4628      	mov	r0, r5
 800f598:	f000 fb92 	bl	800fcc0 <_sbrk_r>
 800f59c:	3001      	adds	r0, #1
 800f59e:	d1f2      	bne.n	800f586 <sbrk_aligned+0x22>
 800f5a0:	e7ef      	b.n	800f582 <sbrk_aligned+0x1e>
 800f5a2:	bf00      	nop
 800f5a4:	24054948 	.word	0x24054948

0800f5a8 <_malloc_r>:
 800f5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5ac:	1ccd      	adds	r5, r1, #3
 800f5ae:	f025 0503 	bic.w	r5, r5, #3
 800f5b2:	3508      	adds	r5, #8
 800f5b4:	2d0c      	cmp	r5, #12
 800f5b6:	bf38      	it	cc
 800f5b8:	250c      	movcc	r5, #12
 800f5ba:	2d00      	cmp	r5, #0
 800f5bc:	4606      	mov	r6, r0
 800f5be:	db01      	blt.n	800f5c4 <_malloc_r+0x1c>
 800f5c0:	42a9      	cmp	r1, r5
 800f5c2:	d904      	bls.n	800f5ce <_malloc_r+0x26>
 800f5c4:	230c      	movs	r3, #12
 800f5c6:	6033      	str	r3, [r6, #0]
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6a4 <_malloc_r+0xfc>
 800f5d2:	f000 f869 	bl	800f6a8 <__malloc_lock>
 800f5d6:	f8d8 3000 	ldr.w	r3, [r8]
 800f5da:	461c      	mov	r4, r3
 800f5dc:	bb44      	cbnz	r4, 800f630 <_malloc_r+0x88>
 800f5de:	4629      	mov	r1, r5
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7ff ffbf 	bl	800f564 <sbrk_aligned>
 800f5e6:	1c43      	adds	r3, r0, #1
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	d158      	bne.n	800f69e <_malloc_r+0xf6>
 800f5ec:	f8d8 4000 	ldr.w	r4, [r8]
 800f5f0:	4627      	mov	r7, r4
 800f5f2:	2f00      	cmp	r7, #0
 800f5f4:	d143      	bne.n	800f67e <_malloc_r+0xd6>
 800f5f6:	2c00      	cmp	r4, #0
 800f5f8:	d04b      	beq.n	800f692 <_malloc_r+0xea>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	4639      	mov	r1, r7
 800f5fe:	4630      	mov	r0, r6
 800f600:	eb04 0903 	add.w	r9, r4, r3
 800f604:	f000 fb5c 	bl	800fcc0 <_sbrk_r>
 800f608:	4581      	cmp	r9, r0
 800f60a:	d142      	bne.n	800f692 <_malloc_r+0xea>
 800f60c:	6821      	ldr	r1, [r4, #0]
 800f60e:	1a6d      	subs	r5, r5, r1
 800f610:	4629      	mov	r1, r5
 800f612:	4630      	mov	r0, r6
 800f614:	f7ff ffa6 	bl	800f564 <sbrk_aligned>
 800f618:	3001      	adds	r0, #1
 800f61a:	d03a      	beq.n	800f692 <_malloc_r+0xea>
 800f61c:	6823      	ldr	r3, [r4, #0]
 800f61e:	442b      	add	r3, r5
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	f8d8 3000 	ldr.w	r3, [r8]
 800f626:	685a      	ldr	r2, [r3, #4]
 800f628:	bb62      	cbnz	r2, 800f684 <_malloc_r+0xdc>
 800f62a:	f8c8 7000 	str.w	r7, [r8]
 800f62e:	e00f      	b.n	800f650 <_malloc_r+0xa8>
 800f630:	6822      	ldr	r2, [r4, #0]
 800f632:	1b52      	subs	r2, r2, r5
 800f634:	d420      	bmi.n	800f678 <_malloc_r+0xd0>
 800f636:	2a0b      	cmp	r2, #11
 800f638:	d917      	bls.n	800f66a <_malloc_r+0xc2>
 800f63a:	1961      	adds	r1, r4, r5
 800f63c:	42a3      	cmp	r3, r4
 800f63e:	6025      	str	r5, [r4, #0]
 800f640:	bf18      	it	ne
 800f642:	6059      	strne	r1, [r3, #4]
 800f644:	6863      	ldr	r3, [r4, #4]
 800f646:	bf08      	it	eq
 800f648:	f8c8 1000 	streq.w	r1, [r8]
 800f64c:	5162      	str	r2, [r4, r5]
 800f64e:	604b      	str	r3, [r1, #4]
 800f650:	4630      	mov	r0, r6
 800f652:	f000 f82f 	bl	800f6b4 <__malloc_unlock>
 800f656:	f104 000b 	add.w	r0, r4, #11
 800f65a:	1d23      	adds	r3, r4, #4
 800f65c:	f020 0007 	bic.w	r0, r0, #7
 800f660:	1ac2      	subs	r2, r0, r3
 800f662:	bf1c      	itt	ne
 800f664:	1a1b      	subne	r3, r3, r0
 800f666:	50a3      	strne	r3, [r4, r2]
 800f668:	e7af      	b.n	800f5ca <_malloc_r+0x22>
 800f66a:	6862      	ldr	r2, [r4, #4]
 800f66c:	42a3      	cmp	r3, r4
 800f66e:	bf0c      	ite	eq
 800f670:	f8c8 2000 	streq.w	r2, [r8]
 800f674:	605a      	strne	r2, [r3, #4]
 800f676:	e7eb      	b.n	800f650 <_malloc_r+0xa8>
 800f678:	4623      	mov	r3, r4
 800f67a:	6864      	ldr	r4, [r4, #4]
 800f67c:	e7ae      	b.n	800f5dc <_malloc_r+0x34>
 800f67e:	463c      	mov	r4, r7
 800f680:	687f      	ldr	r7, [r7, #4]
 800f682:	e7b6      	b.n	800f5f2 <_malloc_r+0x4a>
 800f684:	461a      	mov	r2, r3
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	42a3      	cmp	r3, r4
 800f68a:	d1fb      	bne.n	800f684 <_malloc_r+0xdc>
 800f68c:	2300      	movs	r3, #0
 800f68e:	6053      	str	r3, [r2, #4]
 800f690:	e7de      	b.n	800f650 <_malloc_r+0xa8>
 800f692:	230c      	movs	r3, #12
 800f694:	6033      	str	r3, [r6, #0]
 800f696:	4630      	mov	r0, r6
 800f698:	f000 f80c 	bl	800f6b4 <__malloc_unlock>
 800f69c:	e794      	b.n	800f5c8 <_malloc_r+0x20>
 800f69e:	6005      	str	r5, [r0, #0]
 800f6a0:	e7d6      	b.n	800f650 <_malloc_r+0xa8>
 800f6a2:	bf00      	nop
 800f6a4:	2405494c 	.word	0x2405494c

0800f6a8 <__malloc_lock>:
 800f6a8:	4801      	ldr	r0, [pc, #4]	@ (800f6b0 <__malloc_lock+0x8>)
 800f6aa:	f7ff bf01 	b.w	800f4b0 <__retarget_lock_acquire_recursive>
 800f6ae:	bf00      	nop
 800f6b0:	24054944 	.word	0x24054944

0800f6b4 <__malloc_unlock>:
 800f6b4:	4801      	ldr	r0, [pc, #4]	@ (800f6bc <__malloc_unlock+0x8>)
 800f6b6:	f7ff befc 	b.w	800f4b2 <__retarget_lock_release_recursive>
 800f6ba:	bf00      	nop
 800f6bc:	24054944 	.word	0x24054944

0800f6c0 <__ssputs_r>:
 800f6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c4:	688e      	ldr	r6, [r1, #8]
 800f6c6:	461f      	mov	r7, r3
 800f6c8:	42be      	cmp	r6, r7
 800f6ca:	680b      	ldr	r3, [r1, #0]
 800f6cc:	4682      	mov	sl, r0
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	4690      	mov	r8, r2
 800f6d2:	d82d      	bhi.n	800f730 <__ssputs_r+0x70>
 800f6d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f6dc:	d026      	beq.n	800f72c <__ssputs_r+0x6c>
 800f6de:	6965      	ldr	r5, [r4, #20]
 800f6e0:	6909      	ldr	r1, [r1, #16]
 800f6e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6e6:	eba3 0901 	sub.w	r9, r3, r1
 800f6ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6ee:	1c7b      	adds	r3, r7, #1
 800f6f0:	444b      	add	r3, r9
 800f6f2:	106d      	asrs	r5, r5, #1
 800f6f4:	429d      	cmp	r5, r3
 800f6f6:	bf38      	it	cc
 800f6f8:	461d      	movcc	r5, r3
 800f6fa:	0553      	lsls	r3, r2, #21
 800f6fc:	d527      	bpl.n	800f74e <__ssputs_r+0x8e>
 800f6fe:	4629      	mov	r1, r5
 800f700:	f7ff ff52 	bl	800f5a8 <_malloc_r>
 800f704:	4606      	mov	r6, r0
 800f706:	b360      	cbz	r0, 800f762 <__ssputs_r+0xa2>
 800f708:	6921      	ldr	r1, [r4, #16]
 800f70a:	464a      	mov	r2, r9
 800f70c:	f7ff fed2 	bl	800f4b4 <memcpy>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	6126      	str	r6, [r4, #16]
 800f71e:	6165      	str	r5, [r4, #20]
 800f720:	444e      	add	r6, r9
 800f722:	eba5 0509 	sub.w	r5, r5, r9
 800f726:	6026      	str	r6, [r4, #0]
 800f728:	60a5      	str	r5, [r4, #8]
 800f72a:	463e      	mov	r6, r7
 800f72c:	42be      	cmp	r6, r7
 800f72e:	d900      	bls.n	800f732 <__ssputs_r+0x72>
 800f730:	463e      	mov	r6, r7
 800f732:	6820      	ldr	r0, [r4, #0]
 800f734:	4632      	mov	r2, r6
 800f736:	4641      	mov	r1, r8
 800f738:	f000 faa8 	bl	800fc8c <memmove>
 800f73c:	68a3      	ldr	r3, [r4, #8]
 800f73e:	1b9b      	subs	r3, r3, r6
 800f740:	60a3      	str	r3, [r4, #8]
 800f742:	6823      	ldr	r3, [r4, #0]
 800f744:	4433      	add	r3, r6
 800f746:	6023      	str	r3, [r4, #0]
 800f748:	2000      	movs	r0, #0
 800f74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f74e:	462a      	mov	r2, r5
 800f750:	f000 fac6 	bl	800fce0 <_realloc_r>
 800f754:	4606      	mov	r6, r0
 800f756:	2800      	cmp	r0, #0
 800f758:	d1e0      	bne.n	800f71c <__ssputs_r+0x5c>
 800f75a:	6921      	ldr	r1, [r4, #16]
 800f75c:	4650      	mov	r0, sl
 800f75e:	f7ff feb7 	bl	800f4d0 <_free_r>
 800f762:	230c      	movs	r3, #12
 800f764:	f8ca 3000 	str.w	r3, [sl]
 800f768:	89a3      	ldrh	r3, [r4, #12]
 800f76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f76e:	81a3      	strh	r3, [r4, #12]
 800f770:	f04f 30ff 	mov.w	r0, #4294967295
 800f774:	e7e9      	b.n	800f74a <__ssputs_r+0x8a>
	...

0800f778 <_svfiprintf_r>:
 800f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	4698      	mov	r8, r3
 800f77e:	898b      	ldrh	r3, [r1, #12]
 800f780:	061b      	lsls	r3, r3, #24
 800f782:	b09d      	sub	sp, #116	@ 0x74
 800f784:	4607      	mov	r7, r0
 800f786:	460d      	mov	r5, r1
 800f788:	4614      	mov	r4, r2
 800f78a:	d510      	bpl.n	800f7ae <_svfiprintf_r+0x36>
 800f78c:	690b      	ldr	r3, [r1, #16]
 800f78e:	b973      	cbnz	r3, 800f7ae <_svfiprintf_r+0x36>
 800f790:	2140      	movs	r1, #64	@ 0x40
 800f792:	f7ff ff09 	bl	800f5a8 <_malloc_r>
 800f796:	6028      	str	r0, [r5, #0]
 800f798:	6128      	str	r0, [r5, #16]
 800f79a:	b930      	cbnz	r0, 800f7aa <_svfiprintf_r+0x32>
 800f79c:	230c      	movs	r3, #12
 800f79e:	603b      	str	r3, [r7, #0]
 800f7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a4:	b01d      	add	sp, #116	@ 0x74
 800f7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7aa:	2340      	movs	r3, #64	@ 0x40
 800f7ac:	616b      	str	r3, [r5, #20]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b2:	2320      	movs	r3, #32
 800f7b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7bc:	2330      	movs	r3, #48	@ 0x30
 800f7be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f95c <_svfiprintf_r+0x1e4>
 800f7c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7c6:	f04f 0901 	mov.w	r9, #1
 800f7ca:	4623      	mov	r3, r4
 800f7cc:	469a      	mov	sl, r3
 800f7ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7d2:	b10a      	cbz	r2, 800f7d8 <_svfiprintf_r+0x60>
 800f7d4:	2a25      	cmp	r2, #37	@ 0x25
 800f7d6:	d1f9      	bne.n	800f7cc <_svfiprintf_r+0x54>
 800f7d8:	ebba 0b04 	subs.w	fp, sl, r4
 800f7dc:	d00b      	beq.n	800f7f6 <_svfiprintf_r+0x7e>
 800f7de:	465b      	mov	r3, fp
 800f7e0:	4622      	mov	r2, r4
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	4638      	mov	r0, r7
 800f7e6:	f7ff ff6b 	bl	800f6c0 <__ssputs_r>
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	f000 80a7 	beq.w	800f93e <_svfiprintf_r+0x1c6>
 800f7f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7f2:	445a      	add	r2, fp
 800f7f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7f6:	f89a 3000 	ldrb.w	r3, [sl]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 809f 	beq.w	800f93e <_svfiprintf_r+0x1c6>
 800f800:	2300      	movs	r3, #0
 800f802:	f04f 32ff 	mov.w	r2, #4294967295
 800f806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f80a:	f10a 0a01 	add.w	sl, sl, #1
 800f80e:	9304      	str	r3, [sp, #16]
 800f810:	9307      	str	r3, [sp, #28]
 800f812:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f816:	931a      	str	r3, [sp, #104]	@ 0x68
 800f818:	4654      	mov	r4, sl
 800f81a:	2205      	movs	r2, #5
 800f81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f820:	484e      	ldr	r0, [pc, #312]	@ (800f95c <_svfiprintf_r+0x1e4>)
 800f822:	f7f0 fd65 	bl	80002f0 <memchr>
 800f826:	9a04      	ldr	r2, [sp, #16]
 800f828:	b9d8      	cbnz	r0, 800f862 <_svfiprintf_r+0xea>
 800f82a:	06d0      	lsls	r0, r2, #27
 800f82c:	bf44      	itt	mi
 800f82e:	2320      	movmi	r3, #32
 800f830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f834:	0711      	lsls	r1, r2, #28
 800f836:	bf44      	itt	mi
 800f838:	232b      	movmi	r3, #43	@ 0x2b
 800f83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f83e:	f89a 3000 	ldrb.w	r3, [sl]
 800f842:	2b2a      	cmp	r3, #42	@ 0x2a
 800f844:	d015      	beq.n	800f872 <_svfiprintf_r+0xfa>
 800f846:	9a07      	ldr	r2, [sp, #28]
 800f848:	4654      	mov	r4, sl
 800f84a:	2000      	movs	r0, #0
 800f84c:	f04f 0c0a 	mov.w	ip, #10
 800f850:	4621      	mov	r1, r4
 800f852:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f856:	3b30      	subs	r3, #48	@ 0x30
 800f858:	2b09      	cmp	r3, #9
 800f85a:	d94b      	bls.n	800f8f4 <_svfiprintf_r+0x17c>
 800f85c:	b1b0      	cbz	r0, 800f88c <_svfiprintf_r+0x114>
 800f85e:	9207      	str	r2, [sp, #28]
 800f860:	e014      	b.n	800f88c <_svfiprintf_r+0x114>
 800f862:	eba0 0308 	sub.w	r3, r0, r8
 800f866:	fa09 f303 	lsl.w	r3, r9, r3
 800f86a:	4313      	orrs	r3, r2
 800f86c:	9304      	str	r3, [sp, #16]
 800f86e:	46a2      	mov	sl, r4
 800f870:	e7d2      	b.n	800f818 <_svfiprintf_r+0xa0>
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	1d19      	adds	r1, r3, #4
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	9103      	str	r1, [sp, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	bfbb      	ittet	lt
 800f87e:	425b      	neglt	r3, r3
 800f880:	f042 0202 	orrlt.w	r2, r2, #2
 800f884:	9307      	strge	r3, [sp, #28]
 800f886:	9307      	strlt	r3, [sp, #28]
 800f888:	bfb8      	it	lt
 800f88a:	9204      	strlt	r2, [sp, #16]
 800f88c:	7823      	ldrb	r3, [r4, #0]
 800f88e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f890:	d10a      	bne.n	800f8a8 <_svfiprintf_r+0x130>
 800f892:	7863      	ldrb	r3, [r4, #1]
 800f894:	2b2a      	cmp	r3, #42	@ 0x2a
 800f896:	d132      	bne.n	800f8fe <_svfiprintf_r+0x186>
 800f898:	9b03      	ldr	r3, [sp, #12]
 800f89a:	1d1a      	adds	r2, r3, #4
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	9203      	str	r2, [sp, #12]
 800f8a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8a4:	3402      	adds	r4, #2
 800f8a6:	9305      	str	r3, [sp, #20]
 800f8a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f96c <_svfiprintf_r+0x1f4>
 800f8ac:	7821      	ldrb	r1, [r4, #0]
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	4650      	mov	r0, sl
 800f8b2:	f7f0 fd1d 	bl	80002f0 <memchr>
 800f8b6:	b138      	cbz	r0, 800f8c8 <_svfiprintf_r+0x150>
 800f8b8:	9b04      	ldr	r3, [sp, #16]
 800f8ba:	eba0 000a 	sub.w	r0, r0, sl
 800f8be:	2240      	movs	r2, #64	@ 0x40
 800f8c0:	4082      	lsls	r2, r0
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	3401      	adds	r4, #1
 800f8c6:	9304      	str	r3, [sp, #16]
 800f8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8cc:	4824      	ldr	r0, [pc, #144]	@ (800f960 <_svfiprintf_r+0x1e8>)
 800f8ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8d2:	2206      	movs	r2, #6
 800f8d4:	f7f0 fd0c 	bl	80002f0 <memchr>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d036      	beq.n	800f94a <_svfiprintf_r+0x1d2>
 800f8dc:	4b21      	ldr	r3, [pc, #132]	@ (800f964 <_svfiprintf_r+0x1ec>)
 800f8de:	bb1b      	cbnz	r3, 800f928 <_svfiprintf_r+0x1b0>
 800f8e0:	9b03      	ldr	r3, [sp, #12]
 800f8e2:	3307      	adds	r3, #7
 800f8e4:	f023 0307 	bic.w	r3, r3, #7
 800f8e8:	3308      	adds	r3, #8
 800f8ea:	9303      	str	r3, [sp, #12]
 800f8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ee:	4433      	add	r3, r6
 800f8f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8f2:	e76a      	b.n	800f7ca <_svfiprintf_r+0x52>
 800f8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8f8:	460c      	mov	r4, r1
 800f8fa:	2001      	movs	r0, #1
 800f8fc:	e7a8      	b.n	800f850 <_svfiprintf_r+0xd8>
 800f8fe:	2300      	movs	r3, #0
 800f900:	3401      	adds	r4, #1
 800f902:	9305      	str	r3, [sp, #20]
 800f904:	4619      	mov	r1, r3
 800f906:	f04f 0c0a 	mov.w	ip, #10
 800f90a:	4620      	mov	r0, r4
 800f90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f910:	3a30      	subs	r2, #48	@ 0x30
 800f912:	2a09      	cmp	r2, #9
 800f914:	d903      	bls.n	800f91e <_svfiprintf_r+0x1a6>
 800f916:	2b00      	cmp	r3, #0
 800f918:	d0c6      	beq.n	800f8a8 <_svfiprintf_r+0x130>
 800f91a:	9105      	str	r1, [sp, #20]
 800f91c:	e7c4      	b.n	800f8a8 <_svfiprintf_r+0x130>
 800f91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f922:	4604      	mov	r4, r0
 800f924:	2301      	movs	r3, #1
 800f926:	e7f0      	b.n	800f90a <_svfiprintf_r+0x192>
 800f928:	ab03      	add	r3, sp, #12
 800f92a:	9300      	str	r3, [sp, #0]
 800f92c:	462a      	mov	r2, r5
 800f92e:	4b0e      	ldr	r3, [pc, #56]	@ (800f968 <_svfiprintf_r+0x1f0>)
 800f930:	a904      	add	r1, sp, #16
 800f932:	4638      	mov	r0, r7
 800f934:	f3af 8000 	nop.w
 800f938:	1c42      	adds	r2, r0, #1
 800f93a:	4606      	mov	r6, r0
 800f93c:	d1d6      	bne.n	800f8ec <_svfiprintf_r+0x174>
 800f93e:	89ab      	ldrh	r3, [r5, #12]
 800f940:	065b      	lsls	r3, r3, #25
 800f942:	f53f af2d 	bmi.w	800f7a0 <_svfiprintf_r+0x28>
 800f946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f948:	e72c      	b.n	800f7a4 <_svfiprintf_r+0x2c>
 800f94a:	ab03      	add	r3, sp, #12
 800f94c:	9300      	str	r3, [sp, #0]
 800f94e:	462a      	mov	r2, r5
 800f950:	4b05      	ldr	r3, [pc, #20]	@ (800f968 <_svfiprintf_r+0x1f0>)
 800f952:	a904      	add	r1, sp, #16
 800f954:	4638      	mov	r0, r7
 800f956:	f000 f879 	bl	800fa4c <_printf_i>
 800f95a:	e7ed      	b.n	800f938 <_svfiprintf_r+0x1c0>
 800f95c:	0800feb0 	.word	0x0800feb0
 800f960:	0800feba 	.word	0x0800feba
 800f964:	00000000 	.word	0x00000000
 800f968:	0800f6c1 	.word	0x0800f6c1
 800f96c:	0800feb6 	.word	0x0800feb6

0800f970 <_printf_common>:
 800f970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f974:	4616      	mov	r6, r2
 800f976:	4698      	mov	r8, r3
 800f978:	688a      	ldr	r2, [r1, #8]
 800f97a:	690b      	ldr	r3, [r1, #16]
 800f97c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f980:	4293      	cmp	r3, r2
 800f982:	bfb8      	it	lt
 800f984:	4613      	movlt	r3, r2
 800f986:	6033      	str	r3, [r6, #0]
 800f988:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f98c:	4607      	mov	r7, r0
 800f98e:	460c      	mov	r4, r1
 800f990:	b10a      	cbz	r2, 800f996 <_printf_common+0x26>
 800f992:	3301      	adds	r3, #1
 800f994:	6033      	str	r3, [r6, #0]
 800f996:	6823      	ldr	r3, [r4, #0]
 800f998:	0699      	lsls	r1, r3, #26
 800f99a:	bf42      	ittt	mi
 800f99c:	6833      	ldrmi	r3, [r6, #0]
 800f99e:	3302      	addmi	r3, #2
 800f9a0:	6033      	strmi	r3, [r6, #0]
 800f9a2:	6825      	ldr	r5, [r4, #0]
 800f9a4:	f015 0506 	ands.w	r5, r5, #6
 800f9a8:	d106      	bne.n	800f9b8 <_printf_common+0x48>
 800f9aa:	f104 0a19 	add.w	sl, r4, #25
 800f9ae:	68e3      	ldr	r3, [r4, #12]
 800f9b0:	6832      	ldr	r2, [r6, #0]
 800f9b2:	1a9b      	subs	r3, r3, r2
 800f9b4:	42ab      	cmp	r3, r5
 800f9b6:	dc26      	bgt.n	800fa06 <_printf_common+0x96>
 800f9b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f9bc:	6822      	ldr	r2, [r4, #0]
 800f9be:	3b00      	subs	r3, #0
 800f9c0:	bf18      	it	ne
 800f9c2:	2301      	movne	r3, #1
 800f9c4:	0692      	lsls	r2, r2, #26
 800f9c6:	d42b      	bmi.n	800fa20 <_printf_common+0xb0>
 800f9c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f9cc:	4641      	mov	r1, r8
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	47c8      	blx	r9
 800f9d2:	3001      	adds	r0, #1
 800f9d4:	d01e      	beq.n	800fa14 <_printf_common+0xa4>
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	6922      	ldr	r2, [r4, #16]
 800f9da:	f003 0306 	and.w	r3, r3, #6
 800f9de:	2b04      	cmp	r3, #4
 800f9e0:	bf02      	ittt	eq
 800f9e2:	68e5      	ldreq	r5, [r4, #12]
 800f9e4:	6833      	ldreq	r3, [r6, #0]
 800f9e6:	1aed      	subeq	r5, r5, r3
 800f9e8:	68a3      	ldr	r3, [r4, #8]
 800f9ea:	bf0c      	ite	eq
 800f9ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9f0:	2500      	movne	r5, #0
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	bfc4      	itt	gt
 800f9f6:	1a9b      	subgt	r3, r3, r2
 800f9f8:	18ed      	addgt	r5, r5, r3
 800f9fa:	2600      	movs	r6, #0
 800f9fc:	341a      	adds	r4, #26
 800f9fe:	42b5      	cmp	r5, r6
 800fa00:	d11a      	bne.n	800fa38 <_printf_common+0xc8>
 800fa02:	2000      	movs	r0, #0
 800fa04:	e008      	b.n	800fa18 <_printf_common+0xa8>
 800fa06:	2301      	movs	r3, #1
 800fa08:	4652      	mov	r2, sl
 800fa0a:	4641      	mov	r1, r8
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	47c8      	blx	r9
 800fa10:	3001      	adds	r0, #1
 800fa12:	d103      	bne.n	800fa1c <_printf_common+0xac>
 800fa14:	f04f 30ff 	mov.w	r0, #4294967295
 800fa18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa1c:	3501      	adds	r5, #1
 800fa1e:	e7c6      	b.n	800f9ae <_printf_common+0x3e>
 800fa20:	18e1      	adds	r1, r4, r3
 800fa22:	1c5a      	adds	r2, r3, #1
 800fa24:	2030      	movs	r0, #48	@ 0x30
 800fa26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa2a:	4422      	add	r2, r4
 800fa2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa34:	3302      	adds	r3, #2
 800fa36:	e7c7      	b.n	800f9c8 <_printf_common+0x58>
 800fa38:	2301      	movs	r3, #1
 800fa3a:	4622      	mov	r2, r4
 800fa3c:	4641      	mov	r1, r8
 800fa3e:	4638      	mov	r0, r7
 800fa40:	47c8      	blx	r9
 800fa42:	3001      	adds	r0, #1
 800fa44:	d0e6      	beq.n	800fa14 <_printf_common+0xa4>
 800fa46:	3601      	adds	r6, #1
 800fa48:	e7d9      	b.n	800f9fe <_printf_common+0x8e>
	...

0800fa4c <_printf_i>:
 800fa4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa50:	7e0f      	ldrb	r7, [r1, #24]
 800fa52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa54:	2f78      	cmp	r7, #120	@ 0x78
 800fa56:	4691      	mov	r9, r2
 800fa58:	4680      	mov	r8, r0
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	469a      	mov	sl, r3
 800fa5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fa62:	d807      	bhi.n	800fa74 <_printf_i+0x28>
 800fa64:	2f62      	cmp	r7, #98	@ 0x62
 800fa66:	d80a      	bhi.n	800fa7e <_printf_i+0x32>
 800fa68:	2f00      	cmp	r7, #0
 800fa6a:	f000 80d2 	beq.w	800fc12 <_printf_i+0x1c6>
 800fa6e:	2f58      	cmp	r7, #88	@ 0x58
 800fa70:	f000 80b9 	beq.w	800fbe6 <_printf_i+0x19a>
 800fa74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fa7c:	e03a      	b.n	800faf4 <_printf_i+0xa8>
 800fa7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fa82:	2b15      	cmp	r3, #21
 800fa84:	d8f6      	bhi.n	800fa74 <_printf_i+0x28>
 800fa86:	a101      	add	r1, pc, #4	@ (adr r1, 800fa8c <_printf_i+0x40>)
 800fa88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa8c:	0800fae5 	.word	0x0800fae5
 800fa90:	0800faf9 	.word	0x0800faf9
 800fa94:	0800fa75 	.word	0x0800fa75
 800fa98:	0800fa75 	.word	0x0800fa75
 800fa9c:	0800fa75 	.word	0x0800fa75
 800faa0:	0800fa75 	.word	0x0800fa75
 800faa4:	0800faf9 	.word	0x0800faf9
 800faa8:	0800fa75 	.word	0x0800fa75
 800faac:	0800fa75 	.word	0x0800fa75
 800fab0:	0800fa75 	.word	0x0800fa75
 800fab4:	0800fa75 	.word	0x0800fa75
 800fab8:	0800fbf9 	.word	0x0800fbf9
 800fabc:	0800fb23 	.word	0x0800fb23
 800fac0:	0800fbb3 	.word	0x0800fbb3
 800fac4:	0800fa75 	.word	0x0800fa75
 800fac8:	0800fa75 	.word	0x0800fa75
 800facc:	0800fc1b 	.word	0x0800fc1b
 800fad0:	0800fa75 	.word	0x0800fa75
 800fad4:	0800fb23 	.word	0x0800fb23
 800fad8:	0800fa75 	.word	0x0800fa75
 800fadc:	0800fa75 	.word	0x0800fa75
 800fae0:	0800fbbb 	.word	0x0800fbbb
 800fae4:	6833      	ldr	r3, [r6, #0]
 800fae6:	1d1a      	adds	r2, r3, #4
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	6032      	str	r2, [r6, #0]
 800faec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800faf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800faf4:	2301      	movs	r3, #1
 800faf6:	e09d      	b.n	800fc34 <_printf_i+0x1e8>
 800faf8:	6833      	ldr	r3, [r6, #0]
 800fafa:	6820      	ldr	r0, [r4, #0]
 800fafc:	1d19      	adds	r1, r3, #4
 800fafe:	6031      	str	r1, [r6, #0]
 800fb00:	0606      	lsls	r6, r0, #24
 800fb02:	d501      	bpl.n	800fb08 <_printf_i+0xbc>
 800fb04:	681d      	ldr	r5, [r3, #0]
 800fb06:	e003      	b.n	800fb10 <_printf_i+0xc4>
 800fb08:	0645      	lsls	r5, r0, #25
 800fb0a:	d5fb      	bpl.n	800fb04 <_printf_i+0xb8>
 800fb0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb10:	2d00      	cmp	r5, #0
 800fb12:	da03      	bge.n	800fb1c <_printf_i+0xd0>
 800fb14:	232d      	movs	r3, #45	@ 0x2d
 800fb16:	426d      	negs	r5, r5
 800fb18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb1c:	4859      	ldr	r0, [pc, #356]	@ (800fc84 <_printf_i+0x238>)
 800fb1e:	230a      	movs	r3, #10
 800fb20:	e011      	b.n	800fb46 <_printf_i+0xfa>
 800fb22:	6821      	ldr	r1, [r4, #0]
 800fb24:	6833      	ldr	r3, [r6, #0]
 800fb26:	0608      	lsls	r0, r1, #24
 800fb28:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb2c:	d402      	bmi.n	800fb34 <_printf_i+0xe8>
 800fb2e:	0649      	lsls	r1, r1, #25
 800fb30:	bf48      	it	mi
 800fb32:	b2ad      	uxthmi	r5, r5
 800fb34:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb36:	4853      	ldr	r0, [pc, #332]	@ (800fc84 <_printf_i+0x238>)
 800fb38:	6033      	str	r3, [r6, #0]
 800fb3a:	bf14      	ite	ne
 800fb3c:	230a      	movne	r3, #10
 800fb3e:	2308      	moveq	r3, #8
 800fb40:	2100      	movs	r1, #0
 800fb42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb46:	6866      	ldr	r6, [r4, #4]
 800fb48:	60a6      	str	r6, [r4, #8]
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	bfa2      	ittt	ge
 800fb4e:	6821      	ldrge	r1, [r4, #0]
 800fb50:	f021 0104 	bicge.w	r1, r1, #4
 800fb54:	6021      	strge	r1, [r4, #0]
 800fb56:	b90d      	cbnz	r5, 800fb5c <_printf_i+0x110>
 800fb58:	2e00      	cmp	r6, #0
 800fb5a:	d04b      	beq.n	800fbf4 <_printf_i+0x1a8>
 800fb5c:	4616      	mov	r6, r2
 800fb5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fb62:	fb03 5711 	mls	r7, r3, r1, r5
 800fb66:	5dc7      	ldrb	r7, [r0, r7]
 800fb68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fb6c:	462f      	mov	r7, r5
 800fb6e:	42bb      	cmp	r3, r7
 800fb70:	460d      	mov	r5, r1
 800fb72:	d9f4      	bls.n	800fb5e <_printf_i+0x112>
 800fb74:	2b08      	cmp	r3, #8
 800fb76:	d10b      	bne.n	800fb90 <_printf_i+0x144>
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	07df      	lsls	r7, r3, #31
 800fb7c:	d508      	bpl.n	800fb90 <_printf_i+0x144>
 800fb7e:	6923      	ldr	r3, [r4, #16]
 800fb80:	6861      	ldr	r1, [r4, #4]
 800fb82:	4299      	cmp	r1, r3
 800fb84:	bfde      	ittt	le
 800fb86:	2330      	movle	r3, #48	@ 0x30
 800fb88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fb8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fb90:	1b92      	subs	r2, r2, r6
 800fb92:	6122      	str	r2, [r4, #16]
 800fb94:	f8cd a000 	str.w	sl, [sp]
 800fb98:	464b      	mov	r3, r9
 800fb9a:	aa03      	add	r2, sp, #12
 800fb9c:	4621      	mov	r1, r4
 800fb9e:	4640      	mov	r0, r8
 800fba0:	f7ff fee6 	bl	800f970 <_printf_common>
 800fba4:	3001      	adds	r0, #1
 800fba6:	d14a      	bne.n	800fc3e <_printf_i+0x1f2>
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	b004      	add	sp, #16
 800fbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb2:	6823      	ldr	r3, [r4, #0]
 800fbb4:	f043 0320 	orr.w	r3, r3, #32
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	4833      	ldr	r0, [pc, #204]	@ (800fc88 <_printf_i+0x23c>)
 800fbbc:	2778      	movs	r7, #120	@ 0x78
 800fbbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	6831      	ldr	r1, [r6, #0]
 800fbc6:	061f      	lsls	r7, r3, #24
 800fbc8:	f851 5b04 	ldr.w	r5, [r1], #4
 800fbcc:	d402      	bmi.n	800fbd4 <_printf_i+0x188>
 800fbce:	065f      	lsls	r7, r3, #25
 800fbd0:	bf48      	it	mi
 800fbd2:	b2ad      	uxthmi	r5, r5
 800fbd4:	6031      	str	r1, [r6, #0]
 800fbd6:	07d9      	lsls	r1, r3, #31
 800fbd8:	bf44      	itt	mi
 800fbda:	f043 0320 	orrmi.w	r3, r3, #32
 800fbde:	6023      	strmi	r3, [r4, #0]
 800fbe0:	b11d      	cbz	r5, 800fbea <_printf_i+0x19e>
 800fbe2:	2310      	movs	r3, #16
 800fbe4:	e7ac      	b.n	800fb40 <_printf_i+0xf4>
 800fbe6:	4827      	ldr	r0, [pc, #156]	@ (800fc84 <_printf_i+0x238>)
 800fbe8:	e7e9      	b.n	800fbbe <_printf_i+0x172>
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	f023 0320 	bic.w	r3, r3, #32
 800fbf0:	6023      	str	r3, [r4, #0]
 800fbf2:	e7f6      	b.n	800fbe2 <_printf_i+0x196>
 800fbf4:	4616      	mov	r6, r2
 800fbf6:	e7bd      	b.n	800fb74 <_printf_i+0x128>
 800fbf8:	6833      	ldr	r3, [r6, #0]
 800fbfa:	6825      	ldr	r5, [r4, #0]
 800fbfc:	6961      	ldr	r1, [r4, #20]
 800fbfe:	1d18      	adds	r0, r3, #4
 800fc00:	6030      	str	r0, [r6, #0]
 800fc02:	062e      	lsls	r6, r5, #24
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	d501      	bpl.n	800fc0c <_printf_i+0x1c0>
 800fc08:	6019      	str	r1, [r3, #0]
 800fc0a:	e002      	b.n	800fc12 <_printf_i+0x1c6>
 800fc0c:	0668      	lsls	r0, r5, #25
 800fc0e:	d5fb      	bpl.n	800fc08 <_printf_i+0x1bc>
 800fc10:	8019      	strh	r1, [r3, #0]
 800fc12:	2300      	movs	r3, #0
 800fc14:	6123      	str	r3, [r4, #16]
 800fc16:	4616      	mov	r6, r2
 800fc18:	e7bc      	b.n	800fb94 <_printf_i+0x148>
 800fc1a:	6833      	ldr	r3, [r6, #0]
 800fc1c:	1d1a      	adds	r2, r3, #4
 800fc1e:	6032      	str	r2, [r6, #0]
 800fc20:	681e      	ldr	r6, [r3, #0]
 800fc22:	6862      	ldr	r2, [r4, #4]
 800fc24:	2100      	movs	r1, #0
 800fc26:	4630      	mov	r0, r6
 800fc28:	f7f0 fb62 	bl	80002f0 <memchr>
 800fc2c:	b108      	cbz	r0, 800fc32 <_printf_i+0x1e6>
 800fc2e:	1b80      	subs	r0, r0, r6
 800fc30:	6060      	str	r0, [r4, #4]
 800fc32:	6863      	ldr	r3, [r4, #4]
 800fc34:	6123      	str	r3, [r4, #16]
 800fc36:	2300      	movs	r3, #0
 800fc38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc3c:	e7aa      	b.n	800fb94 <_printf_i+0x148>
 800fc3e:	6923      	ldr	r3, [r4, #16]
 800fc40:	4632      	mov	r2, r6
 800fc42:	4649      	mov	r1, r9
 800fc44:	4640      	mov	r0, r8
 800fc46:	47d0      	blx	sl
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d0ad      	beq.n	800fba8 <_printf_i+0x15c>
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	079b      	lsls	r3, r3, #30
 800fc50:	d413      	bmi.n	800fc7a <_printf_i+0x22e>
 800fc52:	68e0      	ldr	r0, [r4, #12]
 800fc54:	9b03      	ldr	r3, [sp, #12]
 800fc56:	4298      	cmp	r0, r3
 800fc58:	bfb8      	it	lt
 800fc5a:	4618      	movlt	r0, r3
 800fc5c:	e7a6      	b.n	800fbac <_printf_i+0x160>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	4632      	mov	r2, r6
 800fc62:	4649      	mov	r1, r9
 800fc64:	4640      	mov	r0, r8
 800fc66:	47d0      	blx	sl
 800fc68:	3001      	adds	r0, #1
 800fc6a:	d09d      	beq.n	800fba8 <_printf_i+0x15c>
 800fc6c:	3501      	adds	r5, #1
 800fc6e:	68e3      	ldr	r3, [r4, #12]
 800fc70:	9903      	ldr	r1, [sp, #12]
 800fc72:	1a5b      	subs	r3, r3, r1
 800fc74:	42ab      	cmp	r3, r5
 800fc76:	dcf2      	bgt.n	800fc5e <_printf_i+0x212>
 800fc78:	e7eb      	b.n	800fc52 <_printf_i+0x206>
 800fc7a:	2500      	movs	r5, #0
 800fc7c:	f104 0619 	add.w	r6, r4, #25
 800fc80:	e7f5      	b.n	800fc6e <_printf_i+0x222>
 800fc82:	bf00      	nop
 800fc84:	0800fec1 	.word	0x0800fec1
 800fc88:	0800fed2 	.word	0x0800fed2

0800fc8c <memmove>:
 800fc8c:	4288      	cmp	r0, r1
 800fc8e:	b510      	push	{r4, lr}
 800fc90:	eb01 0402 	add.w	r4, r1, r2
 800fc94:	d902      	bls.n	800fc9c <memmove+0x10>
 800fc96:	4284      	cmp	r4, r0
 800fc98:	4623      	mov	r3, r4
 800fc9a:	d807      	bhi.n	800fcac <memmove+0x20>
 800fc9c:	1e43      	subs	r3, r0, #1
 800fc9e:	42a1      	cmp	r1, r4
 800fca0:	d008      	beq.n	800fcb4 <memmove+0x28>
 800fca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcaa:	e7f8      	b.n	800fc9e <memmove+0x12>
 800fcac:	4402      	add	r2, r0
 800fcae:	4601      	mov	r1, r0
 800fcb0:	428a      	cmp	r2, r1
 800fcb2:	d100      	bne.n	800fcb6 <memmove+0x2a>
 800fcb4:	bd10      	pop	{r4, pc}
 800fcb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcbe:	e7f7      	b.n	800fcb0 <memmove+0x24>

0800fcc0 <_sbrk_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	4d06      	ldr	r5, [pc, #24]	@ (800fcdc <_sbrk_r+0x1c>)
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	4608      	mov	r0, r1
 800fcca:	602b      	str	r3, [r5, #0]
 800fccc:	f7f1 fb02 	bl	80012d4 <_sbrk>
 800fcd0:	1c43      	adds	r3, r0, #1
 800fcd2:	d102      	bne.n	800fcda <_sbrk_r+0x1a>
 800fcd4:	682b      	ldr	r3, [r5, #0]
 800fcd6:	b103      	cbz	r3, 800fcda <_sbrk_r+0x1a>
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	bd38      	pop	{r3, r4, r5, pc}
 800fcdc:	24054940 	.word	0x24054940

0800fce0 <_realloc_r>:
 800fce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce4:	4680      	mov	r8, r0
 800fce6:	4615      	mov	r5, r2
 800fce8:	460c      	mov	r4, r1
 800fcea:	b921      	cbnz	r1, 800fcf6 <_realloc_r+0x16>
 800fcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	f7ff bc59 	b.w	800f5a8 <_malloc_r>
 800fcf6:	b92a      	cbnz	r2, 800fd04 <_realloc_r+0x24>
 800fcf8:	f7ff fbea 	bl	800f4d0 <_free_r>
 800fcfc:	2400      	movs	r4, #0
 800fcfe:	4620      	mov	r0, r4
 800fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd04:	f000 f81a 	bl	800fd3c <_malloc_usable_size_r>
 800fd08:	4285      	cmp	r5, r0
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	d802      	bhi.n	800fd14 <_realloc_r+0x34>
 800fd0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fd12:	d8f4      	bhi.n	800fcfe <_realloc_r+0x1e>
 800fd14:	4629      	mov	r1, r5
 800fd16:	4640      	mov	r0, r8
 800fd18:	f7ff fc46 	bl	800f5a8 <_malloc_r>
 800fd1c:	4607      	mov	r7, r0
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d0ec      	beq.n	800fcfc <_realloc_r+0x1c>
 800fd22:	42b5      	cmp	r5, r6
 800fd24:	462a      	mov	r2, r5
 800fd26:	4621      	mov	r1, r4
 800fd28:	bf28      	it	cs
 800fd2a:	4632      	movcs	r2, r6
 800fd2c:	f7ff fbc2 	bl	800f4b4 <memcpy>
 800fd30:	4621      	mov	r1, r4
 800fd32:	4640      	mov	r0, r8
 800fd34:	f7ff fbcc 	bl	800f4d0 <_free_r>
 800fd38:	463c      	mov	r4, r7
 800fd3a:	e7e0      	b.n	800fcfe <_realloc_r+0x1e>

0800fd3c <_malloc_usable_size_r>:
 800fd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd40:	1f18      	subs	r0, r3, #4
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	bfbc      	itt	lt
 800fd46:	580b      	ldrlt	r3, [r1, r0]
 800fd48:	18c0      	addlt	r0, r0, r3
 800fd4a:	4770      	bx	lr

0800fd4c <_init>:
 800fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4e:	bf00      	nop
 800fd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd52:	bc08      	pop	{r3}
 800fd54:	469e      	mov	lr, r3
 800fd56:	4770      	bx	lr

0800fd58 <_fini>:
 800fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5a:	bf00      	nop
 800fd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd5e:	bc08      	pop	{r3}
 800fd60:	469e      	mov	lr, r3
 800fd62:	4770      	bx	lr
