
Dpp_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6f0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800c990  0800c990  0000d990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ca64  0800ca64  0000da64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca6c  0800ca6c  0000da6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ca70  0800ca70  0000da70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800ca74  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004800  24000064  0800cad8  0000e064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004864  0800cad8  0000e864  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027277  00000000  00000000  0000e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c4e  00000000  00000000  00035309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d28  00000000  00000000  00039f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001693  00000000  00000000  0003bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc14  00000000  00000000  0003d313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028867  00000000  00000000  00079f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00181ea7  00000000  00000000  000a278e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00224635  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007ef0  00000000  00000000  00224678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0022c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c978 	.word	0x0800c978

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800c978 	.word	0x0800c978

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f4:	4b2f      	ldr	r3, [pc, #188]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 80005f6:	4a30      	ldr	r2, [pc, #192]	@ (80006b8 <MX_ADC1_Init+0xe8>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fa:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000600:	4b2c      	ldr	r3, [pc, #176]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800060e:	2204      	movs	r2, #4
 8000610:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000614:	2200      	movs	r2, #0
 8000616:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800061a:	2201      	movs	r2, #1
 800061c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000620:	2201      	movs	r2, #1
 8000622:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000636:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	4818      	ldr	r0, [pc, #96]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 8000652:	f001 f837 	bl	80016c4 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800065c:	f000 fb3c 	bl	8000cd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800066c:	f001 fe5a 	bl	8002324 <HAL_ADCEx_MultiModeConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000676:	f000 fb2f 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <MX_ADC1_Init+0xec>)
 800067c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800068a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068c:	2304      	movs	r3, #4
 800068e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_ADC1_Init+0xe4>)
 800069e:	f001 f9b3 	bl	8001a08 <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006a8:	f000 fb16 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	@ 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	24000080 	.word	0x24000080
 80006b8:	40022000 	.word	0x40022000
 80006bc:	3ef08000 	.word	0x3ef08000

080006c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0ba      	sub	sp, #232	@ 0xe8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	22c0      	movs	r2, #192	@ 0xc0
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f00c f86f 	bl	800c7c4 <memset>
  if(adcHandle->Instance==ADC1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a49      	ldr	r2, [pc, #292]	@ (8000810 <HAL_ADC_MspInit+0x150>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	f040 808a 	bne.w	8000806 <HAL_ADC_MspInit+0x146>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006f2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000706:	2308      	movs	r3, #8
 8000708:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000712:	23c0      	movs	r3, #192	@ 0xc0
 8000714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4618      	mov	r0, r3
 800072a:	f005 fd4b 	bl	80061c4 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000734:	f000 fad0 	bl	8000cd8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 800073a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800073e:	4a35      	ldr	r2, [pc, #212]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000748:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 800074a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800074e:	f003 0320 	and.w	r3, r3, #32
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075c:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <HAL_ADC_MspInit+0x154>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077a:	2303      	movs	r3, #3
 800077c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800078a:	4619      	mov	r1, r3
 800078c:	4822      	ldr	r0, [pc, #136]	@ (8000818 <HAL_ADC_MspInit+0x158>)
 800078e:	f004 f9ad 	bl	8004aec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000792:	4b22      	ldr	r3, [pc, #136]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 8000794:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <HAL_ADC_MspInit+0x160>)
 8000796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 800079a:	2209      	movs	r2, #9
 800079c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007d0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007da:	2203      	movs	r2, #3
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007ec:	f001 ff58 	bl	80026a0 <HAL_DMA_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_ADC_MspInit+0x13a>
    {
      Error_Handler();
 80007f6:	f000 fa6f 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a07      	ldr	r2, [pc, #28]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 80007fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000800:	4a06      	ldr	r2, [pc, #24]	@ (800081c <HAL_ADC_MspInit+0x15c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	37e8      	adds	r7, #232	@ 0xe8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000
 800081c:	240000e4 	.word	0x240000e4
 8000820:	40020010 	.word	0x40020010

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <MX_DMA_Init+0x3c>)
 800082c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000830:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <MX_DMA_Init+0x3c>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_DMA_Init+0x3c>)
 800083c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2105      	movs	r1, #5
 800084c:	200b      	movs	r0, #11
 800084e:	f001 feff 	bl	8002650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000852:	200b      	movs	r0, #11
 8000854:	f001 ff16 	bl	8002684 <HAL_NVIC_EnableIRQ>

}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024400 	.word	0x58024400

08000864 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <vApplicationGetIdleTaskMemory+0x2c>)
 8000874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <vApplicationGetIdleTaskMemory+0x30>)
 800087a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	24000168 	.word	0x24000168
 8000894:	24000208 	.word	0x24000208

08000898 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b096      	sub	sp, #88	@ 0x58
 800089c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800089e:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_FREERTOS_Init+0x7c>)
 80008a0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80008a4:	461d      	mov	r5, r3
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80008b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00a fd17 	bl	800b2ec <osThreadCreate>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_FREERTOS_Init+0x80>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of samplingTask */
  osThreadDef(samplingTask, StartSamplingTask, osPriorityNormal, 0, 128);
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_FREERTOS_Init+0x84>)
 80008c6:	f107 0420 	add.w	r4, r7, #32
 80008ca:	461d      	mov	r5, r3
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  samplingTaskHandle = osThreadCreate(osThread(samplingTask), NULL);
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00a fd04 	bl	800b2ec <osThreadCreate>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <MX_FREERTOS_Init+0x88>)
 80008e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, StartSerialTask, osPriorityNormal, 0, 128);
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_FREERTOS_Init+0x8c>)
 80008ec:	1d3c      	adds	r4, r7, #4
 80008ee:	461d      	mov	r5, r3
 80008f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f00a fcf3 	bl	800b2ec <osThreadCreate>
 8000906:	4603      	mov	r3, r0
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <MX_FREERTOS_Init+0x90>)
 800090a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800090c:	bf00      	nop
 800090e:	3758      	adds	r7, #88	@ 0x58
 8000910:	46bd      	mov	sp, r7
 8000912:	bdb0      	pop	{r4, r5, r7, pc}
 8000914:	0800c99c 	.word	0x0800c99c
 8000918:	2400015c 	.word	0x2400015c
 800091c:	0800c9c8 	.word	0x0800c9c8
 8000920:	24000160 	.word	0x24000160
 8000924:	0800c9f0 	.word	0x0800c9f0
 8000928:	24000164 	.word	0x24000164

0800092c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f00a fd25 	bl	800b384 <osDelay>
 800093a:	e7fb      	b.n	8000934 <StartDefaultTask+0x8>

0800093c <StartSamplingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSamplingTask */
void StartSamplingTask(void const * argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSamplingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f00a fd1d 	bl	800b384 <osDelay>
 800094a:	e7fb      	b.n	8000944 <StartSamplingTask+0x8>

0800094c <StartSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void const * argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
  /* Infinite loop */
  for(;;)
  {

	  HAL_UART_Transmit(&huart3, "HELLO FABIAN\n", 13, 0xFF);
 8000954:	23ff      	movs	r3, #255	@ 0xff
 8000956:	220d      	movs	r2, #13
 8000958:	4904      	ldr	r1, [pc, #16]	@ (800096c <StartSerialTask+0x20>)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <StartSerialTask+0x24>)
 800095c:	f008 fc4e 	bl	80091fc <HAL_UART_Transmit>



    osDelay(2000);
 8000960:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000964:	f00a fd0e 	bl	800b384 <osDelay>
	  HAL_UART_Transmit(&huart3, "HELLO FABIAN\n", 13, 0xFF);
 8000968:	bf00      	nop
 800096a:	e7f3      	b.n	8000954 <StartSerialTask+0x8>
 800096c:	0800ca0c 	.word	0x0800ca0c
 8000970:	24000454 	.word	0x24000454

08000974 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b62      	ldr	r3, [pc, #392]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a60      	ldr	r2, [pc, #384]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a59      	ldr	r2, [pc, #356]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b56      	ldr	r3, [pc, #344]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b53      	ldr	r3, [pc, #332]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a51      	ldr	r2, [pc, #324]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b4b      	ldr	r3, [pc, #300]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a4a      	ldr	r2, [pc, #296]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b47      	ldr	r3, [pc, #284]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b44      	ldr	r3, [pc, #272]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a42      	ldr	r2, [pc, #264]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b40      	ldr	r3, [pc, #256]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a20:	4b3c      	ldr	r3, [pc, #240]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a3b      	ldr	r2, [pc, #236]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a44:	4a33      	ldr	r2, [pc, #204]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4e:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a62:	482d      	ldr	r0, [pc, #180]	@ (8000b18 <MX_GPIO_Init+0x1a4>)
 8000a64:	f004 f9f2 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a6e:	482b      	ldr	r0, [pc, #172]	@ (8000b1c <MX_GPIO_Init+0x1a8>)
 8000a70:	f004 f9ec 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	4829      	ldr	r0, [pc, #164]	@ (8000b20 <MX_GPIO_Init+0x1ac>)
 8000a7a:	f004 f9e7 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4824      	ldr	r0, [pc, #144]	@ (8000b24 <MX_GPIO_Init+0x1b0>)
 8000a94:	f004 f82a 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a98:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <MX_GPIO_Init+0x1a4>)
 8000ab2:	f004 f81b 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <MX_GPIO_Init+0x1a8>)
 8000ad0:	f004 f80c 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <MX_GPIO_Init+0x1b4>)
 8000aea:	f003 ffff 	bl	8004aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <MX_GPIO_Init+0x1ac>)
 8000b06:	f003 fff1 	bl	8004aec <HAL_GPIO_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3730      	adds	r7, #48	@ 0x30
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020400 	.word	0x58020400
 8000b1c:	58020c00 	.word	0x58020c00
 8000b20:	58021000 	.word	0x58021000
 8000b24:	58020800 	.word	0x58020800
 8000b28:	58021800 	.word	0x58021800

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 fbb0 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f810 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f7ff ff1c 	bl	8000974 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3c:	f7ff fe72 	bl	8000824 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b40:	f000 fad0 	bl	80010e4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000b44:	f7ff fd44 	bl	80005d0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000b48:	f000 fa0e 	bl	8000f68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b4c:	f7ff fea4 	bl	8000898 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b50:	f00a fbc5 	bl	800b2de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <main+0x28>

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09e      	sub	sp, #120	@ 0x78
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b62:	224c      	movs	r2, #76	@ 0x4c
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00b fe2c 	bl	800c7c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2220      	movs	r2, #32
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00b fe25 	bl	800c7c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f004 fab0 	bl	80050e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b48      	ldr	r3, [pc, #288]	@ (8000ca8 <SystemClock_Config+0x150>)
 8000b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b88:	4a47      	ldr	r2, [pc, #284]	@ (8000ca8 <SystemClock_Config+0x150>)
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b90:	4b45      	ldr	r3, [pc, #276]	@ (8000ca8 <SystemClock_Config+0x150>)
 8000b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b44      	ldr	r3, [pc, #272]	@ (8000cac <SystemClock_Config+0x154>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a43      	ldr	r2, [pc, #268]	@ (8000cac <SystemClock_Config+0x154>)
 8000ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <SystemClock_Config+0x154>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bb2:	bf00      	nop
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cac <SystemClock_Config+0x154>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bc0:	d1f8      	bne.n	8000bb4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb0 <SystemClock_Config+0x158>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bc8:	4a39      	ldr	r2, [pc, #228]	@ (8000cb0 <SystemClock_Config+0x158>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bd2:	4b37      	ldr	r3, [pc, #220]	@ (8000cb0 <SystemClock_Config+0x158>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4b31      	ldr	r3, [pc, #196]	@ (8000cac <SystemClock_Config+0x154>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a30      	ldr	r2, [pc, #192]	@ (8000cac <SystemClock_Config+0x154>)
 8000bea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000cac <SystemClock_Config+0x154>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <SystemClock_Config+0x150>)
 8000bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca8 <SystemClock_Config+0x150>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c06:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <SystemClock_Config+0x150>)
 8000c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c12:	bf00      	nop
 8000c14:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <SystemClock_Config+0x154>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c20:	d1f8      	bne.n	8000c14 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c26:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c30:	2302      	movs	r3, #2
 8000c32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c38:	2378      	movs	r3, #120	@ 0x78
 8000c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000c40:	230f      	movs	r3, #15
 8000c42:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fa8b 	bl	8005174 <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000c64:	f000 f838 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	233f      	movs	r3, #63	@ 0x3f
 8000c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c74:	2308      	movs	r3, #8
 8000c76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c78:	2340      	movs	r3, #64	@ 0x40
 8000c7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c7c:	2340      	movs	r3, #64	@ 0x40
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c86:	2340      	movs	r3, #64	@ 0x40
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 fec9 	bl	8005a28 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000c9c:	f000 f81c 	bl	8000cd8 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3778      	adds	r7, #120	@ 0x78
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58000400 	.word	0x58000400
 8000cac:	58024800 	.word	0x58024800
 8000cb0:	58024400 	.word	0x58024400

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc6:	f000 fb21 	bl	800130c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <HAL_MspInit+0x38>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_MspInit+0x38>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_MspInit+0x38>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f06f 0001 	mvn.w	r0, #1
 8000d10:	f001 fc9e 	bl	8002650 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58024400 	.word	0x58024400

08000d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	@ 0x38
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b0f      	cmp	r3, #15
 8000d2c:	d844      	bhi.n	8000db8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	2019      	movs	r0, #25
 8000d34:	f001 fc8c 	bl	8002650 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d38:	2019      	movs	r0, #25
 8000d3a:	f001 fca3 	bl	8002684 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d3e:	4a24      	ldr	r2, [pc, #144]	@ (8000dd0 <HAL_InitTick+0xb0>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d44:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <HAL_InitTick+0xb4>)
 8000d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d4a:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <HAL_InitTick+0xb4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d54:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <HAL_InitTick+0xb4>)
 8000d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d62:	f107 020c 	add.w	r2, r7, #12
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f005 f9e7 	bl	8006140 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d72:	f005 f9cf 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 8000d76:	4603      	mov	r3, r0
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7e:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <HAL_InitTick+0xb8>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	0c9b      	lsrs	r3, r3, #18
 8000d86:	3b01      	subs	r3, #1
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <HAL_InitTick+0xbc>)
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <HAL_InitTick+0xc0>)
 8000d8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0xbc>)
 8000d92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d96:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d98:	4a10      	ldr	r2, [pc, #64]	@ (8000ddc <HAL_InitTick+0xbc>)
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d9c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_InitTick+0xbc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_InitTick+0xbc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000daa:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <HAL_InitTick+0xbc>)
 8000dac:	f007 ff08 	bl	8008bc0 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d107      	bne.n	8000dc6 <HAL_InitTick+0xa6>
 8000db6:	e001      	b.n	8000dbc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e005      	b.n	8000dc8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <HAL_InitTick+0xbc>)
 8000dbe:	f007 ff61 	bl	8008c84 <HAL_TIM_Base_Start_IT>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3738      	adds	r7, #56	@ 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000008 	.word	0x24000008
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	24000408 	.word	0x24000408
 8000de0:	40010000 	.word	0x40010000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <DMA1_Stream0_IRQHandler+0x10>)
 8000e22:	f002 fcfd 	bl	8003820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	240000e4 	.word	0x240000e4

08000e30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <TIM1_UP_IRQHandler+0x10>)
 8000e36:	f007 ff9d 	bl	8008d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000408 	.word	0x24000408

08000e44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <USART3_IRQHandler+0x10>)
 8000e4a:	f008 fa65 	bl	8009318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000454 	.word	0x24000454

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <SystemInit+0xe4>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a36      	ldr	r2, [pc, #216]	@ (8000f3c <SystemInit+0xe4>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6c:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <SystemInit+0xe8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d807      	bhi.n	8000e88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <SystemInit+0xe8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <SystemInit+0xe8>)
 8000e82:	f043 0307 	orr.w	r3, r3, #7
 8000e86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <SystemInit+0xec>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f44 <SystemInit+0xec>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <SystemInit+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <SystemInit+0xec>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4929      	ldr	r1, [pc, #164]	@ (8000f44 <SystemInit+0xec>)
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <SystemInit+0xf0>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <SystemInit+0xe8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <SystemInit+0xe8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 030f 	bic.w	r3, r3, #15
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <SystemInit+0xe8>)
 8000ebc:	f043 0307 	orr.w	r3, r3, #7
 8000ec0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <SystemInit+0xec>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <SystemInit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <SystemInit+0xec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <SystemInit+0xec>)
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <SystemInit+0xf4>)
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <SystemInit+0xec>)
 8000edc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <SystemInit+0xf8>)
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <SystemInit+0xec>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <SystemInit+0xfc>)
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <SystemInit+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <SystemInit+0xec>)
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <SystemInit+0xfc>)
 8000ef0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <SystemInit+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <SystemInit+0xec>)
 8000efa:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <SystemInit+0xfc>)
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <SystemInit+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <SystemInit+0xec>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <SystemInit+0xec>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <SystemInit+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <SystemInit+0x100>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <SystemInit+0x104>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f22:	d202      	bcs.n	8000f2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <SystemInit+0x108>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <SystemInit+0x10c>)
 8000f2c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	52002000 	.word	0x52002000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f4c:	02020200 	.word	0x02020200
 8000f50:	01ff0000 	.word	0x01ff0000
 8000f54:	01010280 	.word	0x01010280
 8000f58:	5c001000 	.word	0x5c001000
 8000f5c:	ffff0000 	.word	0xffff0000
 8000f60:	51008108 	.word	0x51008108
 8000f64:	52004000 	.word	0x52004000

08000f68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f6e:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <MX_USART3_UART_Init+0x94>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb0:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fb2:	f008 f8d3 	bl	800915c <HAL_UART_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fbc:	f7ff fe8c 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fc4:	f009 fda2 	bl	800ab0c <HAL_UARTEx_SetTxFifoThreshold>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fce:	f7ff fe83 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fd6:	f009 fdd7 	bl	800ab88 <HAL_UARTEx_SetRxFifoThreshold>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f7ff fe7a 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fe6:	f009 fd58 	bl	800aa9a <HAL_UARTEx_DisableFifoMode>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f7ff fe72 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	24000454 	.word	0x24000454
 8000ffc:	40004800 	.word	0x40004800

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ba      	sub	sp, #232	@ 0xe8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22c0      	movs	r2, #192	@ 0xc0
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f00b fbcf 	bl	800c7c4 <memset>
  if(uartHandle->Instance==USART3)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a2b      	ldr	r2, [pc, #172]	@ (80010d8 <HAL_UART_MspInit+0xd8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d14e      	bne.n	80010ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001030:	f04f 0202 	mov.w	r2, #2
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4618      	mov	r0, r3
 8001048:	f005 f8bc 	bl	80061c4 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001052:	f7ff fe41 	bl	8000cd8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <HAL_UART_MspInit+0xdc>)
 8001058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105c:	4a1f      	ldr	r2, [pc, #124]	@ (80010dc <HAL_UART_MspInit+0xdc>)
 800105e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001062:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <HAL_UART_MspInit+0xdc>)
 8001068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800106c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_UART_MspInit+0xdc>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <HAL_UART_MspInit+0xdc>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_UART_MspInit+0xdc>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001092:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ac:	2307      	movs	r3, #7
 80010ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <HAL_UART_MspInit+0xe0>)
 80010ba:	f003 fd17 	bl	8004aec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2105      	movs	r1, #5
 80010c2:	2027      	movs	r0, #39	@ 0x27
 80010c4:	f001 fac4 	bl	8002650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010c8:	2027      	movs	r0, #39	@ 0x27
 80010ca:	f001 fadb 	bl	8002684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	37e8      	adds	r7, #232	@ 0xe8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004800 	.word	0x40004800
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58020c00 	.word	0x58020c00

080010e4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ea:	4a16      	ldr	r2, [pc, #88]	@ (8001144 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80010ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f0:	2209      	movs	r2, #9
 80010f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001102:	2202      	movs	r2, #2
 8001104:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001108:	2201      	movs	r2, #1
 800110a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800110e:	2200      	movs	r2, #0
 8001110:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001114:	2200      	movs	r2, #0
 8001116:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800111a:	2201      	movs	r2, #1
 800111c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001120:	2201      	movs	r2, #1
 8001122:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001126:	2200      	movs	r2, #0
 8001128:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800112c:	f003 fea7 	bl	8004e7e <HAL_PCD_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001136:	f7ff fdcf 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	240004e8 	.word	0x240004e8
 8001144:	40080000 	.word	0x40080000

08001148 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0ba      	sub	sp, #232	@ 0xe8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	22c0      	movs	r2, #192	@ 0xc0
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f00b fb2b 	bl	800c7c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a30      	ldr	r2, [pc, #192]	@ (8001234 <HAL_PCD_MspInit+0xec>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d159      	bne.n	800122c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001178:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001184:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4618      	mov	r0, r3
 8001192:	f005 f817 	bl	80061c4 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800119c:	f7ff fd9c 	bl	8000cd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011a0:	f003 ffd8 	bl	8005154 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <HAL_PCD_MspInit+0xf0>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	4a23      	ldr	r2, [pc, #140]	@ (8001238 <HAL_PCD_MspInit+0xf0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b4:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <HAL_PCD_MspInit+0xf0>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011c2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80011c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011dc:	230a      	movs	r3, #10
 80011de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4814      	ldr	r0, [pc, #80]	@ (800123c <HAL_PCD_MspInit+0xf4>)
 80011ea:	f003 fc7f 	bl	8004aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <HAL_PCD_MspInit+0xf4>)
 800120a:	f003 fc6f 	bl	8004aec <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_PCD_MspInit+0xf0>)
 8001210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001214:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_PCD_MspInit+0xf0>)
 8001216:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800121a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_PCD_MspInit+0xf0>)
 8001220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	37e8      	adds	r7, #232	@ 0xe8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40080000 	.word	0x40080000
 8001238:	58024400 	.word	0x58024400
 800123c:	58020000 	.word	0x58020000

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001278 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff fe08 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	@ (8001280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	@ (800128c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f00b fb07 	bl	800c880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fc5b 	bl	8000b2c <main>
  bx  lr
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800127c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001280:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001284:	0800ca74 	.word	0x0800ca74
  ldr r2, =_sbss
 8001288:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800128c:	24004864 	.word	0x24004864

08001290 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC3_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f001 f9cd 	bl	800263a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a0:	f004 fd78 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4913      	ldr	r1, [pc, #76]	@ (8001300 <HAL_Init+0x6c>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_Init+0x6c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_Init+0x70>)
 80012d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <HAL_Init+0x74>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012de:	200f      	movs	r0, #15
 80012e0:	f7ff fd1e 	bl	8000d20 <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e002      	b.n	80012f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ee:	f7ff fcf9 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400
 8001300:	0800ca24 	.word	0x0800ca24
 8001304:	24000004 	.word	0x24000004
 8001308:	24000000 	.word	0x24000000

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2400000c 	.word	0x2400000c
 8001330:	240009cc 	.word	0x240009cc

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	240009cc 	.word	0x240009cc

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2400000c 	.word	0x2400000c

08001394 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <HAL_GetREVID+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0c1b      	lsrs	r3, r3, #16
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	5c001000 	.word	0x5c001000

080013ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3360      	adds	r3, #96	@ 0x60
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	430b      	orrs	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001448:	bf00      	nop
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	611a      	str	r2, [r3, #16]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001486:	b480      	push	{r7}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3360      	adds	r3, #96	@ 0x60
 8001496:	461a      	mov	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]
  }
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3330      	adds	r3, #48	@ 0x30
 80014cc:	461a      	mov	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	4413      	add	r3, r2
 80014da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	211f      	movs	r1, #31
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0e9b      	lsrs	r3, r3, #26
 80014f4:	f003 011f 	and.w	r1, r3, #31
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	431a      	orrs	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3314      	adds	r3, #20
 8001524:	461a      	mov	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	0e5b      	lsrs	r3, r3, #25
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	0d1b      	lsrs	r3, r3, #20
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2107      	movs	r1, #7
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	0d1b      	lsrs	r3, r3, #20
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001584:	43db      	mvns	r3, r3
 8001586:	401a      	ands	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0318 	and.w	r3, r3, #24
 800158e:	4908      	ldr	r1, [pc, #32]	@ (80015b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001590:	40d9      	lsrs	r1, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	400b      	ands	r3, r1
 8001596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800159a:	431a      	orrs	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	000fffff 	.word	0x000fffff

080015b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6093      	str	r3, [r2, #8]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	5fffffc0 	.word	0x5fffffc0

080015d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <LL_ADC_EnableInternalRegulator+0x24>)
 800160e:	4013      	ands	r3, r2
 8001610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	6fffffc0 	.word	0x6fffffc0

08001628 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800163c:	d101      	bne.n	8001642 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <LL_ADC_IsEnabled+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_ADC_IsEnabled+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b04      	cmp	r3, #4
 8001688:	d101      	bne.n	800168e <LL_ADC_REG_IsConversionOngoing+0x18>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d101      	bne.n	80016b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e18f      	b.n	80019fe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7fe ffe7 	bl	80006c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff67 	bl	80015d8 <LL_ADC_IsDeepPowerDownEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff4d 	bl	80015b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff82 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d114      	bne.n	8001754 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff66 	bl	8001600 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001734:	4b87      	ldr	r3, [pc, #540]	@ (8001954 <HAL_ADC_Init+0x290>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	4a87      	ldr	r2, [pc, #540]	@ (8001958 <HAL_ADC_Init+0x294>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	3301      	adds	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001746:	e002      	b.n	800174e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	3b01      	subs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f9      	bne.n	8001748 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff65 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10d      	bne.n	8001780 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001768:	f043 0210 	orr.w	r2, r3, #16
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff76 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 800178a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 8129 	bne.w	80019ec <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 8125 	bne.w	80019ec <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017aa:	f043 0202 	orr.w	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff4a 	bl	8001650 <LL_ADC_IsEnabled>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d136      	bne.n	8001830 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a65      	ldr	r2, [pc, #404]	@ (800195c <HAL_ADC_Init+0x298>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_ADC_Init+0x112>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a63      	ldr	r2, [pc, #396]	@ (8001960 <HAL_ADC_Init+0x29c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10e      	bne.n	80017f4 <HAL_ADC_Init+0x130>
 80017d6:	4861      	ldr	r0, [pc, #388]	@ (800195c <HAL_ADC_Init+0x298>)
 80017d8:	f7ff ff3a 	bl	8001650 <LL_ADC_IsEnabled>
 80017dc:	4604      	mov	r4, r0
 80017de:	4860      	ldr	r0, [pc, #384]	@ (8001960 <HAL_ADC_Init+0x29c>)
 80017e0:	f7ff ff36 	bl	8001650 <LL_ADC_IsEnabled>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4323      	orrs	r3, r4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e008      	b.n	8001806 <HAL_ADC_Init+0x142>
 80017f4:	485b      	ldr	r0, [pc, #364]	@ (8001964 <HAL_ADC_Init+0x2a0>)
 80017f6:	f7ff ff2b 	bl	8001650 <LL_ADC_IsEnabled>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d012      	beq.n	8001830 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a53      	ldr	r2, [pc, #332]	@ (800195c <HAL_ADC_Init+0x298>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_ADC_Init+0x15a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a51      	ldr	r2, [pc, #324]	@ (8001960 <HAL_ADC_Init+0x29c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x15e>
 800181e:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <HAL_ADC_Init+0x2a4>)
 8001820:	e000      	b.n	8001824 <HAL_ADC_Init+0x160>
 8001822:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_ADC_Init+0x2a8>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f7ff fdbe 	bl	80013ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001830:	f7ff fdb0 	bl	8001394 <HAL_GetREVID>
 8001834:	4603      	mov	r3, r0
 8001836:	f241 0203 	movw	r2, #4099	@ 0x1003
 800183a:	4293      	cmp	r3, r2
 800183c:	d914      	bls.n	8001868 <HAL_ADC_Init+0x1a4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b10      	cmp	r3, #16
 8001844:	d110      	bne.n	8001868 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7d5b      	ldrb	r3, [r3, #21]
 800184a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001850:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001856:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7f1b      	ldrb	r3, [r3, #28]
 800185c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800185e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001860:	f043 030c 	orr.w	r3, r3, #12
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	e00d      	b.n	8001884 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7d5b      	ldrb	r3, [r3, #21]
 800186c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001872:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001878:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7f1b      	ldrb	r3, [r3, #28]
 800187e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7f1b      	ldrb	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	3b01      	subs	r3, #1
 8001892:	045b      	lsls	r3, r3, #17
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <HAL_ADC_Init+0x2ac>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fed1 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 80018d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fede 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 80018e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d15f      	bne.n	80019a8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d15c      	bne.n	80019a8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7d1b      	ldrb	r3, [r3, #20]
 80018f2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_ADC_Init+0x2b0>)
 8001904:	4013      	ands	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	430b      	orrs	r3, r1
 800190e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001916:	2b01      	cmp	r3, #1
 8001918:	d130      	bne.n	800197c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <HAL_ADC_Init+0x2b4>)
 8001928:	4013      	ands	r3, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800192e:	3a01      	subs	r2, #1
 8001930:	0411      	lsls	r1, r2, #16
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001942:	430a      	orrs	r2, r1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	e01c      	b.n	800198c <HAL_ADC_Init+0x2c8>
 8001952:	bf00      	nop
 8001954:	24000000 	.word	0x24000000
 8001958:	053e2d63 	.word	0x053e2d63
 800195c:	40022000 	.word	0x40022000
 8001960:	40022100 	.word	0x40022100
 8001964:	58026000 	.word	0x58026000
 8001968:	40022300 	.word	0x40022300
 800196c:	58026300 	.word	0x58026300
 8001970:	fff0c003 	.word	0xfff0c003
 8001974:	ffffbffc 	.word	0xffffbffc
 8001978:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fb8c 	bl	80020c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d10c      	bne.n	80019ca <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f023 010f 	bic.w	r1, r3, #15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	1e5a      	subs	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019c8:	e007      	b.n	80019da <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 020f 	bic.w	r2, r2, #15
 80019d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	f023 0303 	bic.w	r3, r3, #3
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80019ea:	e007      	b.n	80019fc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f0:	f043 0210 	orr.w	r2, r3, #16
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	bf00      	nop

08001a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b0a1      	sub	sp, #132	@ 0x84
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a65      	ldr	r2, [pc, #404]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x1b0>)
 8001a22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x2a>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e32e      	b.n	8002090 <HAL_ADC_ConfigChannel+0x688>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fe19 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 8313 	bne.w	8002072 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db2c      	blt.n	8001aae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d108      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x6a>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0e9b      	lsrs	r3, r3, #26
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	e016      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x98>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a82:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	e003      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001a8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	69d1      	ldr	r1, [r2, #28]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f7ff fcfe 	bl	80014bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fdd6 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001aca:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fde3 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 8001ad6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 80b8 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80b4 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f7ff fd0d 	bl	8001514 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001afa:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <HAL_ADC_ConfigChannel+0x1b4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x118>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	e01d      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x154>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10b      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x13e>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	e00a      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x154>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d02c      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6919      	ldr	r1, [r3, #16]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b74:	f7ff fc4e 	bl	8001414 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6919      	ldr	r1, [r3, #16]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	7e5b      	ldrb	r3, [r3, #25]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d102      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x186>
 8001b88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x188>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	461a      	mov	r2, r3
 8001b92:	f7ff fc78 	bl	8001486 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6919      	ldr	r1, [r3, #16]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	7e1b      	ldrb	r3, [r3, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1a4>
 8001ba6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001baa:	e000      	b.n	8001bae <HAL_ADC_ConfigChannel+0x1a6>
 8001bac:	2300      	movs	r3, #0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f7ff fc50 	bl	8001454 <LL_ADC_SetDataRightShift>
 8001bb4:	e04c      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x248>
 8001bb6:	bf00      	nop
 8001bb8:	47ff0000 	.word	0x47ff0000
 8001bbc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	069b      	lsls	r3, r3, #26
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d107      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001be2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	069b      	lsls	r3, r3, #26
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d107      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c06:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	069b      	lsls	r3, r3, #26
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c2a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	069b      	lsls	r3, r3, #26
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c4e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fcfb 	bl	8001650 <LL_ADC_IsEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 8211 	bne.w	8002084 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f7ff fc7c 	bl	800156c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4aa1      	ldr	r2, [pc, #644]	@ (8001f00 <HAL_ADC_ConfigChannel+0x4f8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	f040 812e 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x2a0>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e019      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x2d4>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e003      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2b09      	cmp	r3, #9
 8001cd4:	bf94      	ite	ls
 8001cd6:	2301      	movls	r3, #1
 8001cd8:	2300      	movhi	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d079      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x2f4>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	069b      	lsls	r3, r3, #26
 8001cf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cfa:	e015      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x320>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d0c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e003      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	069b      	lsls	r3, r3, #26
 8001d24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x340>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	e017      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x370>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d58:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e003      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	ea42 0103 	orr.w	r1, r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x396>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	051b      	lsls	r3, r3, #20
 8001d9c:	e018      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x3c8>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001db6:	2320      	movs	r3, #32
 8001db8:	e003      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	e07e      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x3e8>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	3301      	adds	r3, #1
 8001de8:	069b      	lsls	r3, r3, #26
 8001dea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dee:	e015      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x414>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	069b      	lsls	r3, r3, #26
 8001e18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x434>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	e017      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x464>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	61bb      	str	r3, [r7, #24]
  return result;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	ea42 0103 	orr.w	r1, r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x490>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	3301      	adds	r3, #1
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b1e      	subs	r3, #30
 8001e90:	051b      	lsls	r3, r3, #20
 8001e92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	e01b      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x4c8>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
  return result;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e003      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f003 021f 	and.w	r2, r3, #31
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b1e      	subs	r3, #30
 8001eca:	051b      	lsls	r3, r3, #20
 8001ecc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	6892      	ldr	r2, [r2, #8]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7ff fb1c 	bl	8001514 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f280 80cf 	bge.w	8002084 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a06      	ldr	r2, [pc, #24]	@ (8001f04 <HAL_ADC_ConfigChannel+0x4fc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d004      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x4f2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_ADC_ConfigChannel+0x500>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10a      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x508>
 8001efa:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <HAL_ADC_ConfigChannel+0x504>)
 8001efc:	e009      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x50a>
 8001efe:	bf00      	nop
 8001f00:	47ff0000 	.word	0x47ff0000
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40022100 	.word	0x40022100
 8001f0c:	40022300 	.word	0x40022300
 8001f10:	4b61      	ldr	r3, [pc, #388]	@ (8002098 <HAL_ADC_ConfigChannel+0x690>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fa70 	bl	80013f8 <LL_ADC_GetCommonPathInternalCh>
 8001f18:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5f      	ldr	r2, [pc, #380]	@ (800209c <HAL_ADC_ConfigChannel+0x694>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x526>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5d      	ldr	r2, [pc, #372]	@ (80020a0 <HAL_ADC_ConfigChannel+0x698>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10e      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x544>
 8001f2e:	485b      	ldr	r0, [pc, #364]	@ (800209c <HAL_ADC_ConfigChannel+0x694>)
 8001f30:	f7ff fb8e 	bl	8001650 <LL_ADC_IsEnabled>
 8001f34:	4604      	mov	r4, r0
 8001f36:	485a      	ldr	r0, [pc, #360]	@ (80020a0 <HAL_ADC_ConfigChannel+0x698>)
 8001f38:	f7ff fb8a 	bl	8001650 <LL_ADC_IsEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e008      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x556>
 8001f4c:	4855      	ldr	r0, [pc, #340]	@ (80020a4 <HAL_ADC_ConfigChannel+0x69c>)
 8001f4e:	f7ff fb7f 	bl	8001650 <LL_ADC_IsEnabled>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d07d      	beq.n	800205e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a50      	ldr	r2, [pc, #320]	@ (80020a8 <HAL_ADC_ConfigChannel+0x6a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d130      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x5c6>
 8001f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d12b      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a4a      	ldr	r2, [pc, #296]	@ (80020a4 <HAL_ADC_ConfigChannel+0x69c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	f040 8081 	bne.w	8002084 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a45      	ldr	r2, [pc, #276]	@ (800209c <HAL_ADC_ConfigChannel+0x694>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_ADC_ConfigChannel+0x58e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a43      	ldr	r2, [pc, #268]	@ (80020a0 <HAL_ADC_ConfigChannel+0x698>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x592>
 8001f96:	4a45      	ldr	r2, [pc, #276]	@ (80020ac <HAL_ADC_ConfigChannel+0x6a4>)
 8001f98:	e000      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x594>
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002098 <HAL_ADC_ConfigChannel+0x690>)
 8001f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f7ff fa14 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001faa:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <HAL_ADC_ConfigChannel+0x6a8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	4a40      	ldr	r2, [pc, #256]	@ (80020b4 <HAL_ADC_ConfigChannel+0x6ac>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	3301      	adds	r3, #1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fbe:	e002      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f9      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fcc:	e05a      	b.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a39      	ldr	r2, [pc, #228]	@ (80020b8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d11e      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x60e>
 8001fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d119      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80020a4 <HAL_ADC_ConfigChannel+0x69c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d14b      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800209c <HAL_ADC_ConfigChannel+0x694>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_ADC_ConfigChannel+0x5f8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a29      	ldr	r2, [pc, #164]	@ (80020a0 <HAL_ADC_ConfigChannel+0x698>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x5fc>
 8002000:	4a2a      	ldr	r2, [pc, #168]	@ (80020ac <HAL_ADC_ConfigChannel+0x6a4>)
 8002002:	e000      	b.n	8002006 <HAL_ADC_ConfigChannel+0x5fe>
 8002004:	4a24      	ldr	r2, [pc, #144]	@ (8002098 <HAL_ADC_ConfigChannel+0x690>)
 8002006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f7ff f9df 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002014:	e036      	b.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a28      	ldr	r2, [pc, #160]	@ (80020bc <HAL_ADC_ConfigChannel+0x6b4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d131      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
 8002020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d12c      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1d      	ldr	r2, [pc, #116]	@ (80020a4 <HAL_ADC_ConfigChannel+0x69c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d127      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a18      	ldr	r2, [pc, #96]	@ (800209c <HAL_ADC_ConfigChannel+0x694>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_ADC_ConfigChannel+0x640>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a17      	ldr	r2, [pc, #92]	@ (80020a0 <HAL_ADC_ConfigChannel+0x698>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x644>
 8002048:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <HAL_ADC_ConfigChannel+0x6a4>)
 800204a:	e000      	b.n	800204e <HAL_ADC_ConfigChannel+0x646>
 800204c:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <HAL_ADC_ConfigChannel+0x690>)
 800204e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f7ff f9bb 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
 800205c:	e012      	b.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f043 0220 	orr.w	r2, r3, #32
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002070:	e008      	b.n	8002084 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800208c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002090:	4618      	mov	r0, r3
 8002092:	3784      	adds	r7, #132	@ 0x84
 8002094:	46bd      	mov	sp, r7
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	58026300 	.word	0x58026300
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022100 	.word	0x40022100
 80020a4:	58026000 	.word	0x58026000
 80020a8:	cb840000 	.word	0xcb840000
 80020ac:	40022300 	.word	0x40022300
 80020b0:	24000000 	.word	0x24000000
 80020b4:	053e2d63 	.word	0x053e2d63
 80020b8:	c7520000 	.word	0xc7520000
 80020bc:	cfb80000 	.word	0xcfb80000

080020c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a7a      	ldr	r2, [pc, #488]	@ (80022b8 <ADC_ConfigureBoostMode+0x1f8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <ADC_ConfigureBoostMode+0x1c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a79      	ldr	r2, [pc, #484]	@ (80022bc <ADC_ConfigureBoostMode+0x1fc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d109      	bne.n	80020f0 <ADC_ConfigureBoostMode+0x30>
 80020dc:	4b78      	ldr	r3, [pc, #480]	@ (80022c0 <ADC_ConfigureBoostMode+0x200>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e008      	b.n	8002102 <ADC_ConfigureBoostMode+0x42>
 80020f0:	4b74      	ldr	r3, [pc, #464]	@ (80022c4 <ADC_ConfigureBoostMode+0x204>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01c      	beq.n	8002140 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002106:	f003 ffbf 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 800210a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002114:	d010      	beq.n	8002138 <ADC_ConfigureBoostMode+0x78>
 8002116:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800211a:	d873      	bhi.n	8002204 <ADC_ConfigureBoostMode+0x144>
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002120:	d002      	beq.n	8002128 <ADC_ConfigureBoostMode+0x68>
 8002122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002126:	d16d      	bne.n	8002204 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	60fb      	str	r3, [r7, #12]
        break;
 8002136:	e068      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	60fb      	str	r3, [r7, #12]
        break;
 800213e:	e064      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002140:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	f005 fa46 	bl	80075d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800214c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002156:	d051      	beq.n	80021fc <ADC_ConfigureBoostMode+0x13c>
 8002158:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800215c:	d854      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 800215e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002162:	d047      	beq.n	80021f4 <ADC_ConfigureBoostMode+0x134>
 8002164:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002168:	d84e      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 800216a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800216e:	d03d      	beq.n	80021ec <ADC_ConfigureBoostMode+0x12c>
 8002170:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002174:	d848      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 8002176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800217a:	d033      	beq.n	80021e4 <ADC_ConfigureBoostMode+0x124>
 800217c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002180:	d842      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 8002182:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002186:	d029      	beq.n	80021dc <ADC_ConfigureBoostMode+0x11c>
 8002188:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800218c:	d83c      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 800218e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002192:	d01a      	beq.n	80021ca <ADC_ConfigureBoostMode+0x10a>
 8002194:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002198:	d836      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 800219a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800219e:	d014      	beq.n	80021ca <ADC_ConfigureBoostMode+0x10a>
 80021a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80021a4:	d830      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 80021a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021aa:	d00e      	beq.n	80021ca <ADC_ConfigureBoostMode+0x10a>
 80021ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021b0:	d82a      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 80021b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80021b6:	d008      	beq.n	80021ca <ADC_ConfigureBoostMode+0x10a>
 80021b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80021bc:	d824      	bhi.n	8002208 <ADC_ConfigureBoostMode+0x148>
 80021be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80021c2:	d002      	beq.n	80021ca <ADC_ConfigureBoostMode+0x10a>
 80021c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80021c8:	d11e      	bne.n	8002208 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	60fb      	str	r3, [r7, #12]
        break;
 80021da:	e016      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	60fb      	str	r3, [r7, #12]
        break;
 80021e2:	e012      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	60fb      	str	r3, [r7, #12]
        break;
 80021ea:	e00e      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	60fb      	str	r3, [r7, #12]
        break;
 80021f2:	e00a      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	09db      	lsrs	r3, r3, #7
 80021f8:	60fb      	str	r3, [r7, #12]
        break;
 80021fa:	e006      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	60fb      	str	r3, [r7, #12]
        break;
 8002202:	e002      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002208:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800220a:	f7ff f8c3 	bl	8001394 <HAL_GetREVID>
 800220e:	4603      	mov	r3, r0
 8002210:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002214:	4293      	cmp	r3, r2
 8002216:	d815      	bhi.n	8002244 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a2b      	ldr	r2, [pc, #172]	@ (80022c8 <ADC_ConfigureBoostMode+0x208>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d908      	bls.n	8002232 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800222e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002230:	e03e      	b.n	80022b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002240:	609a      	str	r2, [r3, #8]
}
 8002242:	e035      	b.n	80022b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <ADC_ConfigureBoostMode+0x20c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d808      	bhi.n	8002264 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002260:	609a      	str	r2, [r3, #8]
}
 8002262:	e025      	b.n	80022b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <ADC_ConfigureBoostMode+0x210>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d80a      	bhi.n	8002282 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800227e:	609a      	str	r2, [r3, #8]
}
 8002280:	e016      	b.n	80022b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <ADC_ConfigureBoostMode+0x214>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d80a      	bhi.n	80022a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229c:	609a      	str	r2, [r3, #8]
}
 800229e:	e007      	b.n	80022b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80022ae:	609a      	str	r2, [r3, #8]
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40022100 	.word	0x40022100
 80022c0:	40022300 	.word	0x40022300
 80022c4:	58026300 	.word	0x58026300
 80022c8:	01312d00 	.word	0x01312d00
 80022cc:	005f5e10 	.word	0x005f5e10
 80022d0:	00bebc20 	.word	0x00bebc20
 80022d4:	017d7840 	.word	0x017d7840

080022d8 <LL_ADC_IsEnabled>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <LL_ADC_IsEnabled+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_ADC_IsEnabled+0x1a>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_REG_IsConversionOngoing>:
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d101      	bne.n	8002316 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b09f      	sub	sp, #124	@ 0x7c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800233e:	2302      	movs	r3, #2
 8002340:	e0be      	b.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800234e:	2300      	movs	r3, #0
 8002350:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5c      	ldr	r2, [pc, #368]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d102      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800235c:	4b5b      	ldr	r3, [pc, #364]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	e001      	b.n	8002366 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10b      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e09d      	b.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ffb9 	bl	80022fe <LL_ADC_REG_IsConversionOngoing>
 800238c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ffb3 	bl	80022fe <LL_ADC_REG_IsConversionOngoing>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d17f      	bne.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800239e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d17c      	bne.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a47      	ldr	r2, [pc, #284]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a46      	ldr	r2, [pc, #280]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80023b8:	4b45      	ldr	r3, [pc, #276]	@ (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80023ba:	e000      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80023bc:	4b45      	ldr	r3, [pc, #276]	@ (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80023be:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d039      	beq.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80023c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023d8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3a      	ldr	r2, [pc, #232]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a38      	ldr	r2, [pc, #224]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10e      	bne.n	800240c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80023ee:	4836      	ldr	r0, [pc, #216]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023f0:	f7ff ff72 	bl	80022d8 <LL_ADC_IsEnabled>
 80023f4:	4604      	mov	r4, r0
 80023f6:	4835      	ldr	r0, [pc, #212]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023f8:	f7ff ff6e 	bl	80022d8 <LL_ADC_IsEnabled>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4323      	orrs	r3, r4
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e008      	b.n	800241e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800240c:	4832      	ldr	r0, [pc, #200]	@ (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800240e:	f7ff ff63 	bl	80022d8 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d047      	beq.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002428:	4013      	ands	r3, r2
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6811      	ldr	r1, [r2, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	430a      	orrs	r2, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002438:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800243a:	e03a      	b.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800243c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002446:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10e      	bne.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800245c:	481a      	ldr	r0, [pc, #104]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800245e:	f7ff ff3b 	bl	80022d8 <LL_ADC_IsEnabled>
 8002462:	4604      	mov	r4, r0
 8002464:	4819      	ldr	r0, [pc, #100]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002466:	f7ff ff37 	bl	80022d8 <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	4323      	orrs	r3, r4
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	e008      	b.n	800248c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800247a:	4817      	ldr	r0, [pc, #92]	@ (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800247c:	f7ff ff2c 	bl	80022d8 <LL_ADC_IsEnabled>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002496:	4013      	ands	r3, r2
 8002498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800249a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800249c:	e009      	b.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	f043 0220 	orr.w	r2, r3, #32
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80024b0:	e000      	b.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	377c      	adds	r7, #124	@ 0x7c
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40022100 	.word	0x40022100
 80024d0:	40022300 	.word	0x40022300
 80024d4:	58026300 	.word	0x58026300
 80024d8:	58026000 	.word	0x58026000
 80024dc:	fffff0e0 	.word	0xfffff0e0

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <__NVIC_SetPriorityGrouping+0x40>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	4313      	orrs	r3, r2
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <__NVIC_SetPriorityGrouping+0x40>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00
 8002524:	05fa0000 	.word	0x05fa0000

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4907      	ldr	r1, [pc, #28]	@ (800257c <__NVIC_EnableIRQ+0x38>)
 800255e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	@ (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	@ (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	@ 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	@ 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff4c 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800265e:	f7ff ff63 	bl	8002528 <__NVIC_GetPriorityGrouping>
 8002662:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	f7ff ffb3 	bl	80025d4 <NVIC_EncodePriority>
 800266e:	4602      	mov	r2, r0
 8002670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff82 	bl	8002580 <__NVIC_SetPriority>
}
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff56 	bl	8002544 <__NVIC_EnableIRQ>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7fe fe44 	bl	8001334 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e316      	b.n	8002ce6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a66      	ldr	r2, [pc, #408]	@ (8002858 <HAL_DMA_Init+0x1b8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d04a      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a65      	ldr	r2, [pc, #404]	@ (800285c <HAL_DMA_Init+0x1bc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d045      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a63      	ldr	r2, [pc, #396]	@ (8002860 <HAL_DMA_Init+0x1c0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d040      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a62      	ldr	r2, [pc, #392]	@ (8002864 <HAL_DMA_Init+0x1c4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d03b      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a60      	ldr	r2, [pc, #384]	@ (8002868 <HAL_DMA_Init+0x1c8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d036      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5f      	ldr	r2, [pc, #380]	@ (800286c <HAL_DMA_Init+0x1cc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d031      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002870 <HAL_DMA_Init+0x1d0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d02c      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5c      	ldr	r2, [pc, #368]	@ (8002874 <HAL_DMA_Init+0x1d4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d027      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5a      	ldr	r2, [pc, #360]	@ (8002878 <HAL_DMA_Init+0x1d8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d022      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a59      	ldr	r2, [pc, #356]	@ (800287c <HAL_DMA_Init+0x1dc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d01d      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a57      	ldr	r2, [pc, #348]	@ (8002880 <HAL_DMA_Init+0x1e0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a56      	ldr	r2, [pc, #344]	@ (8002884 <HAL_DMA_Init+0x1e4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a54      	ldr	r2, [pc, #336]	@ (8002888 <HAL_DMA_Init+0x1e8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00e      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a53      	ldr	r2, [pc, #332]	@ (800288c <HAL_DMA_Init+0x1ec>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a51      	ldr	r2, [pc, #324]	@ (8002890 <HAL_DMA_Init+0x1f0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_DMA_Init+0xb8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a50      	ldr	r2, [pc, #320]	@ (8002894 <HAL_DMA_Init+0x1f4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_DMA_Init+0xbc>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_DMA_Init+0xbe>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 813b 	beq.w	80029da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a37      	ldr	r2, [pc, #220]	@ (8002858 <HAL_DMA_Init+0x1b8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04a      	beq.n	8002814 <HAL_DMA_Init+0x174>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a36      	ldr	r2, [pc, #216]	@ (800285c <HAL_DMA_Init+0x1bc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d045      	beq.n	8002814 <HAL_DMA_Init+0x174>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a34      	ldr	r2, [pc, #208]	@ (8002860 <HAL_DMA_Init+0x1c0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d040      	beq.n	8002814 <HAL_DMA_Init+0x174>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a33      	ldr	r2, [pc, #204]	@ (8002864 <HAL_DMA_Init+0x1c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d03b      	beq.n	8002814 <HAL_DMA_Init+0x174>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a31      	ldr	r2, [pc, #196]	@ (8002868 <HAL_DMA_Init+0x1c8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d036      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a30      	ldr	r2, [pc, #192]	@ (800286c <HAL_DMA_Init+0x1cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d031      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002870 <HAL_DMA_Init+0x1d0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02c      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2d      	ldr	r2, [pc, #180]	@ (8002874 <HAL_DMA_Init+0x1d4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d027      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <HAL_DMA_Init+0x1d8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2a      	ldr	r2, [pc, #168]	@ (800287c <HAL_DMA_Init+0x1dc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01d      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a28      	ldr	r2, [pc, #160]	@ (8002880 <HAL_DMA_Init+0x1e0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_DMA_Init+0x1e4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a25      	ldr	r2, [pc, #148]	@ (8002888 <HAL_DMA_Init+0x1e8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_DMA_Init+0x174>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a24      	ldr	r2, [pc, #144]	@ (800288c <HAL_DMA_Init+0x1ec>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_DMA_Init+0x174>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a22      	ldr	r2, [pc, #136]	@ (8002890 <HAL_DMA_Init+0x1f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Init+0x174>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <HAL_DMA_Init+0x1f4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d108      	bne.n	8002826 <HAL_DMA_Init+0x186>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e007      	b.n	8002836 <HAL_DMA_Init+0x196>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002836:	e02f      	b.n	8002898 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002838:	f7fe fd7c 	bl	8001334 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b05      	cmp	r3, #5
 8002844:	d928      	bls.n	8002898 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e246      	b.n	8002ce6 <HAL_DMA_Init+0x646>
 8002858:	40020010 	.word	0x40020010
 800285c:	40020028 	.word	0x40020028
 8002860:	40020040 	.word	0x40020040
 8002864:	40020058 	.word	0x40020058
 8002868:	40020070 	.word	0x40020070
 800286c:	40020088 	.word	0x40020088
 8002870:	400200a0 	.word	0x400200a0
 8002874:	400200b8 	.word	0x400200b8
 8002878:	40020410 	.word	0x40020410
 800287c:	40020428 	.word	0x40020428
 8002880:	40020440 	.word	0x40020440
 8002884:	40020458 	.word	0x40020458
 8002888:	40020470 	.word	0x40020470
 800288c:	40020488 	.word	0x40020488
 8002890:	400204a0 	.word	0x400204a0
 8002894:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1c8      	bne.n	8002838 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4b83      	ldr	r3, [pc, #524]	@ (8002ac0 <HAL_DMA_Init+0x420>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80028be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d107      	bne.n	80028fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	4313      	orrs	r3, r2
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028fc:	4b71      	ldr	r3, [pc, #452]	@ (8002ac4 <HAL_DMA_Init+0x424>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b71      	ldr	r3, [pc, #452]	@ (8002ac8 <HAL_DMA_Init+0x428>)
 8002902:	4013      	ands	r3, r2
 8002904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002908:	d328      	bcc.n	800295c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b28      	cmp	r3, #40	@ 0x28
 8002910:	d903      	bls.n	800291a <HAL_DMA_Init+0x27a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b2e      	cmp	r3, #46	@ 0x2e
 8002918:	d917      	bls.n	800294a <HAL_DMA_Init+0x2aa>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002920:	d903      	bls.n	800292a <HAL_DMA_Init+0x28a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b42      	cmp	r3, #66	@ 0x42
 8002928:	d90f      	bls.n	800294a <HAL_DMA_Init+0x2aa>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b46      	cmp	r3, #70	@ 0x46
 8002930:	d903      	bls.n	800293a <HAL_DMA_Init+0x29a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b48      	cmp	r3, #72	@ 0x48
 8002938:	d907      	bls.n	800294a <HAL_DMA_Init+0x2aa>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002940:	d905      	bls.n	800294e <HAL_DMA_Init+0x2ae>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b52      	cmp	r3, #82	@ 0x52
 8002948:	d801      	bhi.n	800294e <HAL_DMA_Init+0x2ae>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_DMA_Init+0x2b0>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800295a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	2b04      	cmp	r3, #4
 8002984:	d117      	bne.n	80029b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f001 ff1d 	bl	80047d8 <DMA_CheckFifoParam>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2240      	movs	r2, #64	@ 0x40
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e197      	b.n	8002ce6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f001 fe58 	bl	8004674 <DMA_CalcBaseAndBitshift>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	223f      	movs	r2, #63	@ 0x3f
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e0cd      	b.n	8002b76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3b      	ldr	r2, [pc, #236]	@ (8002acc <HAL_DMA_Init+0x42c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_DMA_Init+0x38a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a39      	ldr	r2, [pc, #228]	@ (8002ad0 <HAL_DMA_Init+0x430>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_Init+0x38a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a38      	ldr	r2, [pc, #224]	@ (8002ad4 <HAL_DMA_Init+0x434>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_DMA_Init+0x38a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a36      	ldr	r2, [pc, #216]	@ (8002ad8 <HAL_DMA_Init+0x438>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_DMA_Init+0x38a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a35      	ldr	r2, [pc, #212]	@ (8002adc <HAL_DMA_Init+0x43c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Init+0x38a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a33      	ldr	r2, [pc, #204]	@ (8002ae0 <HAL_DMA_Init+0x440>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_DMA_Init+0x38a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ae4 <HAL_DMA_Init+0x444>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_DMA_Init+0x38a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a30      	ldr	r2, [pc, #192]	@ (8002ae8 <HAL_DMA_Init+0x448>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_DMA_Init+0x38e>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_DMA_Init+0x390>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8097 	beq.w	8002b64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a24      	ldr	r2, [pc, #144]	@ (8002acc <HAL_DMA_Init+0x42c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d021      	beq.n	8002a84 <HAL_DMA_Init+0x3e4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <HAL_DMA_Init+0x430>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01c      	beq.n	8002a84 <HAL_DMA_Init+0x3e4>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ad4 <HAL_DMA_Init+0x434>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d017      	beq.n	8002a84 <HAL_DMA_Init+0x3e4>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad8 <HAL_DMA_Init+0x438>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d012      	beq.n	8002a84 <HAL_DMA_Init+0x3e4>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1e      	ldr	r2, [pc, #120]	@ (8002adc <HAL_DMA_Init+0x43c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00d      	beq.n	8002a84 <HAL_DMA_Init+0x3e4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <HAL_DMA_Init+0x440>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d008      	beq.n	8002a84 <HAL_DMA_Init+0x3e4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae4 <HAL_DMA_Init+0x444>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <HAL_DMA_Init+0x3e4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	@ (8002ae8 <HAL_DMA_Init+0x448>)
 8002a82:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_DMA_Init+0x44c>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b40      	cmp	r3, #64	@ 0x40
 8002aaa:	d021      	beq.n	8002af0 <HAL_DMA_Init+0x450>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b80      	cmp	r3, #128	@ 0x80
 8002ab2:	d102      	bne.n	8002aba <HAL_DMA_Init+0x41a>
 8002ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ab8:	e01b      	b.n	8002af2 <HAL_DMA_Init+0x452>
 8002aba:	2300      	movs	r3, #0
 8002abc:	e019      	b.n	8002af2 <HAL_DMA_Init+0x452>
 8002abe:	bf00      	nop
 8002ac0:	fe10803f 	.word	0xfe10803f
 8002ac4:	5c001000 	.word	0x5c001000
 8002ac8:	ffff0000 	.word	0xffff0000
 8002acc:	58025408 	.word	0x58025408
 8002ad0:	5802541c 	.word	0x5802541c
 8002ad4:	58025430 	.word	0x58025430
 8002ad8:	58025444 	.word	0x58025444
 8002adc:	58025458 	.word	0x58025458
 8002ae0:	5802546c 	.word	0x5802546c
 8002ae4:	58025480 	.word	0x58025480
 8002ae8:	58025494 	.word	0x58025494
 8002aec:	fffe000f 	.word	0xfffe000f
 8002af0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68d2      	ldr	r2, [r2, #12]
 8002af6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b6e      	ldr	r3, [pc, #440]	@ (8002cf0 <HAL_DMA_Init+0x650>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf4 <HAL_DMA_Init+0x654>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	009a      	lsls	r2, r3, #2
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f001 fd93 	bl	8004674 <DMA_CalcBaseAndBitshift>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	e008      	b.n	8002b76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2240      	movs	r2, #64	@ 0x40
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0b7      	b.n	8002ce6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a5f      	ldr	r2, [pc, #380]	@ (8002cf8 <HAL_DMA_Init+0x658>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d072      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5d      	ldr	r2, [pc, #372]	@ (8002cfc <HAL_DMA_Init+0x65c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d06d      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002d00 <HAL_DMA_Init+0x660>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d068      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5a      	ldr	r2, [pc, #360]	@ (8002d04 <HAL_DMA_Init+0x664>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d063      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a59      	ldr	r2, [pc, #356]	@ (8002d08 <HAL_DMA_Init+0x668>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d05e      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a57      	ldr	r2, [pc, #348]	@ (8002d0c <HAL_DMA_Init+0x66c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d059      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a56      	ldr	r2, [pc, #344]	@ (8002d10 <HAL_DMA_Init+0x670>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d054      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a54      	ldr	r2, [pc, #336]	@ (8002d14 <HAL_DMA_Init+0x674>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d04f      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a53      	ldr	r2, [pc, #332]	@ (8002d18 <HAL_DMA_Init+0x678>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d04a      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a51      	ldr	r2, [pc, #324]	@ (8002d1c <HAL_DMA_Init+0x67c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d045      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a50      	ldr	r2, [pc, #320]	@ (8002d20 <HAL_DMA_Init+0x680>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d040      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4e      	ldr	r2, [pc, #312]	@ (8002d24 <HAL_DMA_Init+0x684>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d03b      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8002d28 <HAL_DMA_Init+0x688>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d036      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8002d2c <HAL_DMA_Init+0x68c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d031      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a4a      	ldr	r2, [pc, #296]	@ (8002d30 <HAL_DMA_Init+0x690>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d02c      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a48      	ldr	r2, [pc, #288]	@ (8002d34 <HAL_DMA_Init+0x694>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d027      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a47      	ldr	r2, [pc, #284]	@ (8002d38 <HAL_DMA_Init+0x698>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a45      	ldr	r2, [pc, #276]	@ (8002d3c <HAL_DMA_Init+0x69c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01d      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a44      	ldr	r2, [pc, #272]	@ (8002d40 <HAL_DMA_Init+0x6a0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a42      	ldr	r2, [pc, #264]	@ (8002d44 <HAL_DMA_Init+0x6a4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a41      	ldr	r2, [pc, #260]	@ (8002d48 <HAL_DMA_Init+0x6a8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d4c <HAL_DMA_Init+0x6ac>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3e      	ldr	r2, [pc, #248]	@ (8002d50 <HAL_DMA_Init+0x6b0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_Init+0x5c6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3c      	ldr	r2, [pc, #240]	@ (8002d54 <HAL_DMA_Init+0x6b4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Init+0x5ca>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_Init+0x5cc>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d032      	beq.n	8002cd6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f001 fe2d 	bl	80048d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b80      	cmp	r3, #128	@ 0x80
 8002c7c:	d102      	bne.n	8002c84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_DMA_Init+0x624>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d80c      	bhi.n	8002cc4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f001 feaa 	bl	8004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	e008      	b.n	8002cd6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	a7fdabf8 	.word	0xa7fdabf8
 8002cf4:	cccccccd 	.word	0xcccccccd
 8002cf8:	40020010 	.word	0x40020010
 8002cfc:	40020028 	.word	0x40020028
 8002d00:	40020040 	.word	0x40020040
 8002d04:	40020058 	.word	0x40020058
 8002d08:	40020070 	.word	0x40020070
 8002d0c:	40020088 	.word	0x40020088
 8002d10:	400200a0 	.word	0x400200a0
 8002d14:	400200b8 	.word	0x400200b8
 8002d18:	40020410 	.word	0x40020410
 8002d1c:	40020428 	.word	0x40020428
 8002d20:	40020440 	.word	0x40020440
 8002d24:	40020458 	.word	0x40020458
 8002d28:	40020470 	.word	0x40020470
 8002d2c:	40020488 	.word	0x40020488
 8002d30:	400204a0 	.word	0x400204a0
 8002d34:	400204b8 	.word	0x400204b8
 8002d38:	58025408 	.word	0x58025408
 8002d3c:	5802541c 	.word	0x5802541c
 8002d40:	58025430 	.word	0x58025430
 8002d44:	58025444 	.word	0x58025444
 8002d48:	58025458 	.word	0x58025458
 8002d4c:	5802546c 	.word	0x5802546c
 8002d50:	58025480 	.word	0x58025480
 8002d54:	58025494 	.word	0x58025494

08002d58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7fe fae8 	bl	8001334 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e2dc      	b.n	800332a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2280      	movs	r2, #128	@ 0x80
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e2cd      	b.n	800332a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a76      	ldr	r2, [pc, #472]	@ (8002f6c <HAL_DMA_Abort+0x214>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d04a      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a74      	ldr	r2, [pc, #464]	@ (8002f70 <HAL_DMA_Abort+0x218>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d045      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a73      	ldr	r2, [pc, #460]	@ (8002f74 <HAL_DMA_Abort+0x21c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d040      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a71      	ldr	r2, [pc, #452]	@ (8002f78 <HAL_DMA_Abort+0x220>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d03b      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a70      	ldr	r2, [pc, #448]	@ (8002f7c <HAL_DMA_Abort+0x224>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d036      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6e      	ldr	r2, [pc, #440]	@ (8002f80 <HAL_DMA_Abort+0x228>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6d      	ldr	r2, [pc, #436]	@ (8002f84 <HAL_DMA_Abort+0x22c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d02c      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6b      	ldr	r2, [pc, #428]	@ (8002f88 <HAL_DMA_Abort+0x230>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d027      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6a      	ldr	r2, [pc, #424]	@ (8002f8c <HAL_DMA_Abort+0x234>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a68      	ldr	r2, [pc, #416]	@ (8002f90 <HAL_DMA_Abort+0x238>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01d      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a67      	ldr	r2, [pc, #412]	@ (8002f94 <HAL_DMA_Abort+0x23c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a65      	ldr	r2, [pc, #404]	@ (8002f98 <HAL_DMA_Abort+0x240>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a64      	ldr	r2, [pc, #400]	@ (8002f9c <HAL_DMA_Abort+0x244>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a62      	ldr	r2, [pc, #392]	@ (8002fa0 <HAL_DMA_Abort+0x248>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a61      	ldr	r2, [pc, #388]	@ (8002fa4 <HAL_DMA_Abort+0x24c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_DMA_Abort+0xd6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa8 <HAL_DMA_Abort+0x250>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_DMA_Abort+0xda>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_DMA_Abort+0xdc>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 021e 	bic.w	r2, r2, #30
 8002e46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e00a      	b.n	8002e76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f6c <HAL_DMA_Abort+0x214>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d072      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3a      	ldr	r2, [pc, #232]	@ (8002f70 <HAL_DMA_Abort+0x218>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d06d      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a39      	ldr	r2, [pc, #228]	@ (8002f74 <HAL_DMA_Abort+0x21c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d068      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a37      	ldr	r2, [pc, #220]	@ (8002f78 <HAL_DMA_Abort+0x220>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d063      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a36      	ldr	r2, [pc, #216]	@ (8002f7c <HAL_DMA_Abort+0x224>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d05e      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a34      	ldr	r2, [pc, #208]	@ (8002f80 <HAL_DMA_Abort+0x228>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d059      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a33      	ldr	r2, [pc, #204]	@ (8002f84 <HAL_DMA_Abort+0x22c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d054      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a31      	ldr	r2, [pc, #196]	@ (8002f88 <HAL_DMA_Abort+0x230>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d04f      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a30      	ldr	r2, [pc, #192]	@ (8002f8c <HAL_DMA_Abort+0x234>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d04a      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8002f90 <HAL_DMA_Abort+0x238>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d045      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2d      	ldr	r2, [pc, #180]	@ (8002f94 <HAL_DMA_Abort+0x23c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d040      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <HAL_DMA_Abort+0x240>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d03b      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f9c <HAL_DMA_Abort+0x244>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d036      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a28      	ldr	r2, [pc, #160]	@ (8002fa0 <HAL_DMA_Abort+0x248>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d031      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a27      	ldr	r2, [pc, #156]	@ (8002fa4 <HAL_DMA_Abort+0x24c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d02c      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a25      	ldr	r2, [pc, #148]	@ (8002fa8 <HAL_DMA_Abort+0x250>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d027      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a24      	ldr	r2, [pc, #144]	@ (8002fac <HAL_DMA_Abort+0x254>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d022      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <HAL_DMA_Abort+0x258>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01d      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a21      	ldr	r2, [pc, #132]	@ (8002fb4 <HAL_DMA_Abort+0x25c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d018      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_DMA_Abort+0x260>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1e      	ldr	r2, [pc, #120]	@ (8002fbc <HAL_DMA_Abort+0x264>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00e      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc0 <HAL_DMA_Abort+0x268>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc4 <HAL_DMA_Abort+0x26c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d004      	beq.n	8002f66 <HAL_DMA_Abort+0x20e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <HAL_DMA_Abort+0x270>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d132      	bne.n	8002fcc <HAL_DMA_Abort+0x274>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e031      	b.n	8002fce <HAL_DMA_Abort+0x276>
 8002f6a:	bf00      	nop
 8002f6c:	40020010 	.word	0x40020010
 8002f70:	40020028 	.word	0x40020028
 8002f74:	40020040 	.word	0x40020040
 8002f78:	40020058 	.word	0x40020058
 8002f7c:	40020070 	.word	0x40020070
 8002f80:	40020088 	.word	0x40020088
 8002f84:	400200a0 	.word	0x400200a0
 8002f88:	400200b8 	.word	0x400200b8
 8002f8c:	40020410 	.word	0x40020410
 8002f90:	40020428 	.word	0x40020428
 8002f94:	40020440 	.word	0x40020440
 8002f98:	40020458 	.word	0x40020458
 8002f9c:	40020470 	.word	0x40020470
 8002fa0:	40020488 	.word	0x40020488
 8002fa4:	400204a0 	.word	0x400204a0
 8002fa8:	400204b8 	.word	0x400204b8
 8002fac:	58025408 	.word	0x58025408
 8002fb0:	5802541c 	.word	0x5802541c
 8002fb4:	58025430 	.word	0x58025430
 8002fb8:	58025444 	.word	0x58025444
 8002fbc:	58025458 	.word	0x58025458
 8002fc0:	5802546c 	.word	0x5802546c
 8002fc4:	58025480 	.word	0x58025480
 8002fc8:	58025494 	.word	0x58025494
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800319c <HAL_DMA_Abort+0x444>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d04a      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80031a0 <HAL_DMA_Abort+0x448>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d045      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80031a4 <HAL_DMA_Abort+0x44c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d040      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a68      	ldr	r2, [pc, #416]	@ (80031a8 <HAL_DMA_Abort+0x450>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d03b      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a67      	ldr	r2, [pc, #412]	@ (80031ac <HAL_DMA_Abort+0x454>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d036      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a65      	ldr	r2, [pc, #404]	@ (80031b0 <HAL_DMA_Abort+0x458>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d031      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a64      	ldr	r2, [pc, #400]	@ (80031b4 <HAL_DMA_Abort+0x45c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d02c      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a62      	ldr	r2, [pc, #392]	@ (80031b8 <HAL_DMA_Abort+0x460>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d027      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a61      	ldr	r2, [pc, #388]	@ (80031bc <HAL_DMA_Abort+0x464>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5f      	ldr	r2, [pc, #380]	@ (80031c0 <HAL_DMA_Abort+0x468>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01d      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5e      	ldr	r2, [pc, #376]	@ (80031c4 <HAL_DMA_Abort+0x46c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d018      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5c      	ldr	r2, [pc, #368]	@ (80031c8 <HAL_DMA_Abort+0x470>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5b      	ldr	r2, [pc, #364]	@ (80031cc <HAL_DMA_Abort+0x474>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00e      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a59      	ldr	r2, [pc, #356]	@ (80031d0 <HAL_DMA_Abort+0x478>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d009      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a58      	ldr	r2, [pc, #352]	@ (80031d4 <HAL_DMA_Abort+0x47c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_DMA_Abort+0x32a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a56      	ldr	r2, [pc, #344]	@ (80031d8 <HAL_DMA_Abort+0x480>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d108      	bne.n	8003094 <HAL_DMA_Abort+0x33c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e007      	b.n	80030a4 <HAL_DMA_Abort+0x34c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030a4:	e013      	b.n	80030ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030a6:	f7fe f945 	bl	8001334 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d90c      	bls.n	80030ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2203      	movs	r2, #3
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e12d      	b.n	800332a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e5      	bne.n	80030a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2f      	ldr	r2, [pc, #188]	@ (800319c <HAL_DMA_Abort+0x444>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04a      	beq.n	800317a <HAL_DMA_Abort+0x422>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2d      	ldr	r2, [pc, #180]	@ (80031a0 <HAL_DMA_Abort+0x448>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d045      	beq.n	800317a <HAL_DMA_Abort+0x422>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2c      	ldr	r2, [pc, #176]	@ (80031a4 <HAL_DMA_Abort+0x44c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_DMA_Abort+0x422>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <HAL_DMA_Abort+0x450>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d03b      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a29      	ldr	r2, [pc, #164]	@ (80031ac <HAL_DMA_Abort+0x454>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d036      	beq.n	800317a <HAL_DMA_Abort+0x422>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_DMA_Abort+0x458>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a26      	ldr	r2, [pc, #152]	@ (80031b4 <HAL_DMA_Abort+0x45c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d02c      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a24      	ldr	r2, [pc, #144]	@ (80031b8 <HAL_DMA_Abort+0x460>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <HAL_DMA_Abort+0x422>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a23      	ldr	r2, [pc, #140]	@ (80031bc <HAL_DMA_Abort+0x464>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_DMA_Abort+0x468>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_DMA_Abort+0x422>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a20      	ldr	r2, [pc, #128]	@ (80031c4 <HAL_DMA_Abort+0x46c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1e      	ldr	r2, [pc, #120]	@ (80031c8 <HAL_DMA_Abort+0x470>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <HAL_DMA_Abort+0x474>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_DMA_Abort+0x422>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <HAL_DMA_Abort+0x478>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1a      	ldr	r2, [pc, #104]	@ (80031d4 <HAL_DMA_Abort+0x47c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort+0x422>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a18      	ldr	r2, [pc, #96]	@ (80031d8 <HAL_DMA_Abort+0x480>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_DMA_Abort+0x426>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_DMA_Abort+0x428>
 800317e:	2300      	movs	r3, #0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02b      	beq.n	80031dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	223f      	movs	r2, #63	@ 0x3f
 8003194:	409a      	lsls	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	e02a      	b.n	80031f2 <HAL_DMA_Abort+0x49a>
 800319c:	40020010 	.word	0x40020010
 80031a0:	40020028 	.word	0x40020028
 80031a4:	40020040 	.word	0x40020040
 80031a8:	40020058 	.word	0x40020058
 80031ac:	40020070 	.word	0x40020070
 80031b0:	40020088 	.word	0x40020088
 80031b4:	400200a0 	.word	0x400200a0
 80031b8:	400200b8 	.word	0x400200b8
 80031bc:	40020410 	.word	0x40020410
 80031c0:	40020428 	.word	0x40020428
 80031c4:	40020440 	.word	0x40020440
 80031c8:	40020458 	.word	0x40020458
 80031cc:	40020470 	.word	0x40020470
 80031d0:	40020488 	.word	0x40020488
 80031d4:	400204a0 	.word	0x400204a0
 80031d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2201      	movs	r2, #1
 80031ec:	409a      	lsls	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003334 <HAL_DMA_Abort+0x5dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d072      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a4d      	ldr	r2, [pc, #308]	@ (8003338 <HAL_DMA_Abort+0x5e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d06d      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4c      	ldr	r2, [pc, #304]	@ (800333c <HAL_DMA_Abort+0x5e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d068      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a4a      	ldr	r2, [pc, #296]	@ (8003340 <HAL_DMA_Abort+0x5e8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d063      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a49      	ldr	r2, [pc, #292]	@ (8003344 <HAL_DMA_Abort+0x5ec>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d05e      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a47      	ldr	r2, [pc, #284]	@ (8003348 <HAL_DMA_Abort+0x5f0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d059      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a46      	ldr	r2, [pc, #280]	@ (800334c <HAL_DMA_Abort+0x5f4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d054      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a44      	ldr	r2, [pc, #272]	@ (8003350 <HAL_DMA_Abort+0x5f8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d04f      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a43      	ldr	r2, [pc, #268]	@ (8003354 <HAL_DMA_Abort+0x5fc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d04a      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a41      	ldr	r2, [pc, #260]	@ (8003358 <HAL_DMA_Abort+0x600>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d045      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a40      	ldr	r2, [pc, #256]	@ (800335c <HAL_DMA_Abort+0x604>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d040      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3e      	ldr	r2, [pc, #248]	@ (8003360 <HAL_DMA_Abort+0x608>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d03b      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3d      	ldr	r2, [pc, #244]	@ (8003364 <HAL_DMA_Abort+0x60c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d036      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3b      	ldr	r2, [pc, #236]	@ (8003368 <HAL_DMA_Abort+0x610>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d031      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3a      	ldr	r2, [pc, #232]	@ (800336c <HAL_DMA_Abort+0x614>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d02c      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a38      	ldr	r2, [pc, #224]	@ (8003370 <HAL_DMA_Abort+0x618>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a37      	ldr	r2, [pc, #220]	@ (8003374 <HAL_DMA_Abort+0x61c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a35      	ldr	r2, [pc, #212]	@ (8003378 <HAL_DMA_Abort+0x620>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a34      	ldr	r2, [pc, #208]	@ (800337c <HAL_DMA_Abort+0x624>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a32      	ldr	r2, [pc, #200]	@ (8003380 <HAL_DMA_Abort+0x628>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a31      	ldr	r2, [pc, #196]	@ (8003384 <HAL_DMA_Abort+0x62c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003388 <HAL_DMA_Abort+0x630>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2e      	ldr	r2, [pc, #184]	@ (800338c <HAL_DMA_Abort+0x634>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_Abort+0x58a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <HAL_DMA_Abort+0x638>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_DMA_Abort+0x58e>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_DMA_Abort+0x590>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80032f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00c      	beq.n	8003318 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800330c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003316:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40020010 	.word	0x40020010
 8003338:	40020028 	.word	0x40020028
 800333c:	40020040 	.word	0x40020040
 8003340:	40020058 	.word	0x40020058
 8003344:	40020070 	.word	0x40020070
 8003348:	40020088 	.word	0x40020088
 800334c:	400200a0 	.word	0x400200a0
 8003350:	400200b8 	.word	0x400200b8
 8003354:	40020410 	.word	0x40020410
 8003358:	40020428 	.word	0x40020428
 800335c:	40020440 	.word	0x40020440
 8003360:	40020458 	.word	0x40020458
 8003364:	40020470 	.word	0x40020470
 8003368:	40020488 	.word	0x40020488
 800336c:	400204a0 	.word	0x400204a0
 8003370:	400204b8 	.word	0x400204b8
 8003374:	58025408 	.word	0x58025408
 8003378:	5802541c 	.word	0x5802541c
 800337c:	58025430 	.word	0x58025430
 8003380:	58025444 	.word	0x58025444
 8003384:	58025458 	.word	0x58025458
 8003388:	5802546c 	.word	0x5802546c
 800338c:	58025480 	.word	0x58025480
 8003390:	58025494 	.word	0x58025494

08003394 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e237      	b.n	8003816 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d004      	beq.n	80033bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2280      	movs	r2, #128	@ 0x80
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e22c      	b.n	8003816 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003534 <HAL_DMA_Abort_IT+0x1a0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d04a      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003538 <HAL_DMA_Abort_IT+0x1a4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d045      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a59      	ldr	r2, [pc, #356]	@ (800353c <HAL_DMA_Abort_IT+0x1a8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d040      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a58      	ldr	r2, [pc, #352]	@ (8003540 <HAL_DMA_Abort_IT+0x1ac>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d03b      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a56      	ldr	r2, [pc, #344]	@ (8003544 <HAL_DMA_Abort_IT+0x1b0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d036      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a55      	ldr	r2, [pc, #340]	@ (8003548 <HAL_DMA_Abort_IT+0x1b4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d031      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a53      	ldr	r2, [pc, #332]	@ (800354c <HAL_DMA_Abort_IT+0x1b8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02c      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a52      	ldr	r2, [pc, #328]	@ (8003550 <HAL_DMA_Abort_IT+0x1bc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d027      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a50      	ldr	r2, [pc, #320]	@ (8003554 <HAL_DMA_Abort_IT+0x1c0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d022      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4f      	ldr	r2, [pc, #316]	@ (8003558 <HAL_DMA_Abort_IT+0x1c4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d01d      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4d      	ldr	r2, [pc, #308]	@ (800355c <HAL_DMA_Abort_IT+0x1c8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d018      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a4c      	ldr	r2, [pc, #304]	@ (8003560 <HAL_DMA_Abort_IT+0x1cc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4a      	ldr	r2, [pc, #296]	@ (8003564 <HAL_DMA_Abort_IT+0x1d0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a49      	ldr	r2, [pc, #292]	@ (8003568 <HAL_DMA_Abort_IT+0x1d4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a47      	ldr	r2, [pc, #284]	@ (800356c <HAL_DMA_Abort_IT+0x1d8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_DMA_Abort_IT+0xc8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a46      	ldr	r2, [pc, #280]	@ (8003570 <HAL_DMA_Abort_IT+0x1dc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_DMA_Abort_IT+0xcc>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_DMA_Abort_IT+0xce>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8086 	beq.w	8003574 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2204      	movs	r2, #4
 800346c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2f      	ldr	r2, [pc, #188]	@ (8003534 <HAL_DMA_Abort_IT+0x1a0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d04a      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2e      	ldr	r2, [pc, #184]	@ (8003538 <HAL_DMA_Abort_IT+0x1a4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d045      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2c      	ldr	r2, [pc, #176]	@ (800353c <HAL_DMA_Abort_IT+0x1a8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d040      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2b      	ldr	r2, [pc, #172]	@ (8003540 <HAL_DMA_Abort_IT+0x1ac>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d03b      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a29      	ldr	r2, [pc, #164]	@ (8003544 <HAL_DMA_Abort_IT+0x1b0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d036      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a28      	ldr	r2, [pc, #160]	@ (8003548 <HAL_DMA_Abort_IT+0x1b4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d031      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a26      	ldr	r2, [pc, #152]	@ (800354c <HAL_DMA_Abort_IT+0x1b8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d02c      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a25      	ldr	r2, [pc, #148]	@ (8003550 <HAL_DMA_Abort_IT+0x1bc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d027      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a23      	ldr	r2, [pc, #140]	@ (8003554 <HAL_DMA_Abort_IT+0x1c0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d022      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a22      	ldr	r2, [pc, #136]	@ (8003558 <HAL_DMA_Abort_IT+0x1c4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d01d      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a20      	ldr	r2, [pc, #128]	@ (800355c <HAL_DMA_Abort_IT+0x1c8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d018      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003560 <HAL_DMA_Abort_IT+0x1cc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <HAL_DMA_Abort_IT+0x1d0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00e      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <HAL_DMA_Abort_IT+0x1d4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d009      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <HAL_DMA_Abort_IT+0x1d8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_DMA_Abort_IT+0x17c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_DMA_Abort_IT+0x1dc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d108      	bne.n	8003522 <HAL_DMA_Abort_IT+0x18e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e178      	b.n	8003814 <HAL_DMA_Abort_IT+0x480>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e16f      	b.n	8003814 <HAL_DMA_Abort_IT+0x480>
 8003534:	40020010 	.word	0x40020010
 8003538:	40020028 	.word	0x40020028
 800353c:	40020040 	.word	0x40020040
 8003540:	40020058 	.word	0x40020058
 8003544:	40020070 	.word	0x40020070
 8003548:	40020088 	.word	0x40020088
 800354c:	400200a0 	.word	0x400200a0
 8003550:	400200b8 	.word	0x400200b8
 8003554:	40020410 	.word	0x40020410
 8003558:	40020428 	.word	0x40020428
 800355c:	40020440 	.word	0x40020440
 8003560:	40020458 	.word	0x40020458
 8003564:	40020470 	.word	0x40020470
 8003568:	40020488 	.word	0x40020488
 800356c:	400204a0 	.word	0x400204a0
 8003570:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 020e 	bic.w	r2, r2, #14
 8003582:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6c      	ldr	r2, [pc, #432]	@ (800373c <HAL_DMA_Abort_IT+0x3a8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04a      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6b      	ldr	r2, [pc, #428]	@ (8003740 <HAL_DMA_Abort_IT+0x3ac>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d045      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a69      	ldr	r2, [pc, #420]	@ (8003744 <HAL_DMA_Abort_IT+0x3b0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d040      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a68      	ldr	r2, [pc, #416]	@ (8003748 <HAL_DMA_Abort_IT+0x3b4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d03b      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a66      	ldr	r2, [pc, #408]	@ (800374c <HAL_DMA_Abort_IT+0x3b8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a65      	ldr	r2, [pc, #404]	@ (8003750 <HAL_DMA_Abort_IT+0x3bc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d031      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a63      	ldr	r2, [pc, #396]	@ (8003754 <HAL_DMA_Abort_IT+0x3c0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a62      	ldr	r2, [pc, #392]	@ (8003758 <HAL_DMA_Abort_IT+0x3c4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a60      	ldr	r2, [pc, #384]	@ (800375c <HAL_DMA_Abort_IT+0x3c8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003760 <HAL_DMA_Abort_IT+0x3cc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003764 <HAL_DMA_Abort_IT+0x3d0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003768 <HAL_DMA_Abort_IT+0x3d4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5a      	ldr	r2, [pc, #360]	@ (800376c <HAL_DMA_Abort_IT+0x3d8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a59      	ldr	r2, [pc, #356]	@ (8003770 <HAL_DMA_Abort_IT+0x3dc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a57      	ldr	r2, [pc, #348]	@ (8003774 <HAL_DMA_Abort_IT+0x3e0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_DMA_Abort_IT+0x290>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a56      	ldr	r2, [pc, #344]	@ (8003778 <HAL_DMA_Abort_IT+0x3e4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d108      	bne.n	8003636 <HAL_DMA_Abort_IT+0x2a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e007      	b.n	8003646 <HAL_DMA_Abort_IT+0x2b2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3c      	ldr	r2, [pc, #240]	@ (800373c <HAL_DMA_Abort_IT+0x3a8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d072      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3a      	ldr	r2, [pc, #232]	@ (8003740 <HAL_DMA_Abort_IT+0x3ac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d06d      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a39      	ldr	r2, [pc, #228]	@ (8003744 <HAL_DMA_Abort_IT+0x3b0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d068      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a37      	ldr	r2, [pc, #220]	@ (8003748 <HAL_DMA_Abort_IT+0x3b4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d063      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a36      	ldr	r2, [pc, #216]	@ (800374c <HAL_DMA_Abort_IT+0x3b8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d05e      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a34      	ldr	r2, [pc, #208]	@ (8003750 <HAL_DMA_Abort_IT+0x3bc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d059      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a33      	ldr	r2, [pc, #204]	@ (8003754 <HAL_DMA_Abort_IT+0x3c0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d054      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a31      	ldr	r2, [pc, #196]	@ (8003758 <HAL_DMA_Abort_IT+0x3c4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04f      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a30      	ldr	r2, [pc, #192]	@ (800375c <HAL_DMA_Abort_IT+0x3c8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d04a      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003760 <HAL_DMA_Abort_IT+0x3cc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d045      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003764 <HAL_DMA_Abort_IT+0x3d0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d040      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003768 <HAL_DMA_Abort_IT+0x3d4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d03b      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2a      	ldr	r2, [pc, #168]	@ (800376c <HAL_DMA_Abort_IT+0x3d8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d036      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a28      	ldr	r2, [pc, #160]	@ (8003770 <HAL_DMA_Abort_IT+0x3dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d031      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a27      	ldr	r2, [pc, #156]	@ (8003774 <HAL_DMA_Abort_IT+0x3e0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d02c      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a25      	ldr	r2, [pc, #148]	@ (8003778 <HAL_DMA_Abort_IT+0x3e4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d027      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a24      	ldr	r2, [pc, #144]	@ (800377c <HAL_DMA_Abort_IT+0x3e8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a22      	ldr	r2, [pc, #136]	@ (8003780 <HAL_DMA_Abort_IT+0x3ec>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01d      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a21      	ldr	r2, [pc, #132]	@ (8003784 <HAL_DMA_Abort_IT+0x3f0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	@ (8003788 <HAL_DMA_Abort_IT+0x3f4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1e      	ldr	r2, [pc, #120]	@ (800378c <HAL_DMA_Abort_IT+0x3f8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	@ (8003790 <HAL_DMA_Abort_IT+0x3fc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <HAL_DMA_Abort_IT+0x400>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_DMA_Abort_IT+0x3a2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <HAL_DMA_Abort_IT+0x404>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d132      	bne.n	800379c <HAL_DMA_Abort_IT+0x408>
 8003736:	2301      	movs	r3, #1
 8003738:	e031      	b.n	800379e <HAL_DMA_Abort_IT+0x40a>
 800373a:	bf00      	nop
 800373c:	40020010 	.word	0x40020010
 8003740:	40020028 	.word	0x40020028
 8003744:	40020040 	.word	0x40020040
 8003748:	40020058 	.word	0x40020058
 800374c:	40020070 	.word	0x40020070
 8003750:	40020088 	.word	0x40020088
 8003754:	400200a0 	.word	0x400200a0
 8003758:	400200b8 	.word	0x400200b8
 800375c:	40020410 	.word	0x40020410
 8003760:	40020428 	.word	0x40020428
 8003764:	40020440 	.word	0x40020440
 8003768:	40020458 	.word	0x40020458
 800376c:	40020470 	.word	0x40020470
 8003770:	40020488 	.word	0x40020488
 8003774:	400204a0 	.word	0x400204a0
 8003778:	400204b8 	.word	0x400204b8
 800377c:	58025408 	.word	0x58025408
 8003780:	5802541c 	.word	0x5802541c
 8003784:	58025430 	.word	0x58025430
 8003788:	58025444 	.word	0x58025444
 800378c:	58025458 	.word	0x58025458
 8003790:	5802546c 	.word	0x5802546c
 8003794:	58025480 	.word	0x58025480
 8003798:	58025494 	.word	0x58025494
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d028      	beq.n	80037f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	2201      	movs	r2, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00c      	beq.n	80037f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	@ 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800382c:	4b67      	ldr	r3, [pc, #412]	@ (80039cc <HAL_DMA_IRQHandler+0x1ac>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a67      	ldr	r2, [pc, #412]	@ (80039d0 <HAL_DMA_IRQHandler+0x1b0>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a5f      	ldr	r2, [pc, #380]	@ (80039d4 <HAL_DMA_IRQHandler+0x1b4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a5d      	ldr	r2, [pc, #372]	@ (80039d8 <HAL_DMA_IRQHandler+0x1b8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a5c      	ldr	r2, [pc, #368]	@ (80039dc <HAL_DMA_IRQHandler+0x1bc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5a      	ldr	r2, [pc, #360]	@ (80039e0 <HAL_DMA_IRQHandler+0x1c0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a59      	ldr	r2, [pc, #356]	@ (80039e4 <HAL_DMA_IRQHandler+0x1c4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a57      	ldr	r2, [pc, #348]	@ (80039e8 <HAL_DMA_IRQHandler+0x1c8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a56      	ldr	r2, [pc, #344]	@ (80039ec <HAL_DMA_IRQHandler+0x1cc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a54      	ldr	r2, [pc, #336]	@ (80039f0 <HAL_DMA_IRQHandler+0x1d0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a53      	ldr	r2, [pc, #332]	@ (80039f4 <HAL_DMA_IRQHandler+0x1d4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a51      	ldr	r2, [pc, #324]	@ (80039f8 <HAL_DMA_IRQHandler+0x1d8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a50      	ldr	r2, [pc, #320]	@ (80039fc <HAL_DMA_IRQHandler+0x1dc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003a00 <HAL_DMA_IRQHandler+0x1e0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a4d      	ldr	r2, [pc, #308]	@ (8003a04 <HAL_DMA_IRQHandler+0x1e4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a08 <HAL_DMA_IRQHandler+0x1e8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a0c <HAL_DMA_IRQHandler+0x1ec>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xd2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a48      	ldr	r2, [pc, #288]	@ (8003a10 <HAL_DMA_IRQHandler+0x1f0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_DMA_IRQHandler+0xd6>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_DMA_IRQHandler+0xd8>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 842b 	beq.w	8004154 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2208      	movs	r2, #8
 8003908:	409a      	lsls	r2, r3
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80a2 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2e      	ldr	r2, [pc, #184]	@ (80039d4 <HAL_DMA_IRQHandler+0x1b4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d04a      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2d      	ldr	r2, [pc, #180]	@ (80039d8 <HAL_DMA_IRQHandler+0x1b8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d045      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2b      	ldr	r2, [pc, #172]	@ (80039dc <HAL_DMA_IRQHandler+0x1bc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d040      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2a      	ldr	r2, [pc, #168]	@ (80039e0 <HAL_DMA_IRQHandler+0x1c0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d03b      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a28      	ldr	r2, [pc, #160]	@ (80039e4 <HAL_DMA_IRQHandler+0x1c4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d036      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <HAL_DMA_IRQHandler+0x1c8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d031      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a25      	ldr	r2, [pc, #148]	@ (80039ec <HAL_DMA_IRQHandler+0x1cc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d02c      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a24      	ldr	r2, [pc, #144]	@ (80039f0 <HAL_DMA_IRQHandler+0x1d0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d027      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a22      	ldr	r2, [pc, #136]	@ (80039f4 <HAL_DMA_IRQHandler+0x1d4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d022      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a21      	ldr	r2, [pc, #132]	@ (80039f8 <HAL_DMA_IRQHandler+0x1d8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d01d      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1f      	ldr	r2, [pc, #124]	@ (80039fc <HAL_DMA_IRQHandler+0x1dc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d018      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <HAL_DMA_IRQHandler+0x1e0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1c      	ldr	r2, [pc, #112]	@ (8003a04 <HAL_DMA_IRQHandler+0x1e4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00e      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a08 <HAL_DMA_IRQHandler+0x1e8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d009      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a19      	ldr	r2, [pc, #100]	@ (8003a0c <HAL_DMA_IRQHandler+0x1ec>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x194>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a18      	ldr	r2, [pc, #96]	@ (8003a10 <HAL_DMA_IRQHandler+0x1f0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d12f      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x1f4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf14      	ite	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	2300      	moveq	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e02e      	b.n	8003a28 <HAL_DMA_IRQHandler+0x208>
 80039ca:	bf00      	nop
 80039cc:	24000000 	.word	0x24000000
 80039d0:	1b4e81b5 	.word	0x1b4e81b5
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0204 	bic.w	r2, r2, #4
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2208      	movs	r2, #8
 8003a46:	409a      	lsls	r2, r3
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	f043 0201 	orr.w	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d06e      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <HAL_DMA_IRQHandler+0x3f8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d04a      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a67      	ldr	r2, [pc, #412]	@ (8003c1c <HAL_DMA_IRQHandler+0x3fc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d045      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a66      	ldr	r2, [pc, #408]	@ (8003c20 <HAL_DMA_IRQHandler+0x400>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d040      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a64      	ldr	r2, [pc, #400]	@ (8003c24 <HAL_DMA_IRQHandler+0x404>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d03b      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a63      	ldr	r2, [pc, #396]	@ (8003c28 <HAL_DMA_IRQHandler+0x408>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d036      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a61      	ldr	r2, [pc, #388]	@ (8003c2c <HAL_DMA_IRQHandler+0x40c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d031      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a60      	ldr	r2, [pc, #384]	@ (8003c30 <HAL_DMA_IRQHandler+0x410>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d02c      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c34 <HAL_DMA_IRQHandler+0x414>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d027      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5d      	ldr	r2, [pc, #372]	@ (8003c38 <HAL_DMA_IRQHandler+0x418>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a5b      	ldr	r2, [pc, #364]	@ (8003c3c <HAL_DMA_IRQHandler+0x41c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5a      	ldr	r2, [pc, #360]	@ (8003c40 <HAL_DMA_IRQHandler+0x420>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d018      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	@ (8003c44 <HAL_DMA_IRQHandler+0x424>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a57      	ldr	r2, [pc, #348]	@ (8003c48 <HAL_DMA_IRQHandler+0x428>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a55      	ldr	r2, [pc, #340]	@ (8003c4c <HAL_DMA_IRQHandler+0x42c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a54      	ldr	r2, [pc, #336]	@ (8003c50 <HAL_DMA_IRQHandler+0x430>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x2ee>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a52      	ldr	r2, [pc, #328]	@ (8003c54 <HAL_DMA_IRQHandler+0x434>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10a      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x304>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e003      	b.n	8003b2c <HAL_DMA_IRQHandler+0x30c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00d      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	f043 0202 	orr.w	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2204      	movs	r2, #4
 8003b56:	409a      	lsls	r2, r3
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 808f 	beq.w	8003c80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <HAL_DMA_IRQHandler+0x3f8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d04a      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <HAL_DMA_IRQHandler+0x3fc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d045      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a29      	ldr	r2, [pc, #164]	@ (8003c20 <HAL_DMA_IRQHandler+0x400>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d040      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a27      	ldr	r2, [pc, #156]	@ (8003c24 <HAL_DMA_IRQHandler+0x404>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d03b      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a26      	ldr	r2, [pc, #152]	@ (8003c28 <HAL_DMA_IRQHandler+0x408>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d036      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a24      	ldr	r2, [pc, #144]	@ (8003c2c <HAL_DMA_IRQHandler+0x40c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d031      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a23      	ldr	r2, [pc, #140]	@ (8003c30 <HAL_DMA_IRQHandler+0x410>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d02c      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a21      	ldr	r2, [pc, #132]	@ (8003c34 <HAL_DMA_IRQHandler+0x414>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d027      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a20      	ldr	r2, [pc, #128]	@ (8003c38 <HAL_DMA_IRQHandler+0x418>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d022      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c3c <HAL_DMA_IRQHandler+0x41c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01d      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <HAL_DMA_IRQHandler+0x420>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c44 <HAL_DMA_IRQHandler+0x424>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1a      	ldr	r2, [pc, #104]	@ (8003c48 <HAL_DMA_IRQHandler+0x428>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a18      	ldr	r2, [pc, #96]	@ (8003c4c <HAL_DMA_IRQHandler+0x42c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <HAL_DMA_IRQHandler+0x430>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x3e2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <HAL_DMA_IRQHandler+0x434>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d12a      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x438>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e023      	b.n	8003c60 <HAL_DMA_IRQHandler+0x440>
 8003c18:	40020010 	.word	0x40020010
 8003c1c:	40020028 	.word	0x40020028
 8003c20:	40020040 	.word	0x40020040
 8003c24:	40020058 	.word	0x40020058
 8003c28:	40020070 	.word	0x40020070
 8003c2c:	40020088 	.word	0x40020088
 8003c30:	400200a0 	.word	0x400200a0
 8003c34:	400200b8 	.word	0x400200b8
 8003c38:	40020410 	.word	0x40020410
 8003c3c:	40020428 	.word	0x40020428
 8003c40:	40020440 	.word	0x40020440
 8003c44:	40020458 	.word	0x40020458
 8003c48:	40020470 	.word	0x40020470
 8003c4c:	40020488 	.word	0x40020488
 8003c50:	400204a0 	.word	0x400204a0
 8003c54:	400204b8 	.word	0x400204b8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c78:	f043 0204 	orr.w	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2210      	movs	r2, #16
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a6 	beq.w	8003de2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a85      	ldr	r2, [pc, #532]	@ (8003eb0 <HAL_DMA_IRQHandler+0x690>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04a      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a83      	ldr	r2, [pc, #524]	@ (8003eb4 <HAL_DMA_IRQHandler+0x694>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d045      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a82      	ldr	r2, [pc, #520]	@ (8003eb8 <HAL_DMA_IRQHandler+0x698>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d040      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a80      	ldr	r2, [pc, #512]	@ (8003ebc <HAL_DMA_IRQHandler+0x69c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d03b      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ec0 <HAL_DMA_IRQHandler+0x6a0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d036      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7d      	ldr	r2, [pc, #500]	@ (8003ec4 <HAL_DMA_IRQHandler+0x6a4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d031      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ec8 <HAL_DMA_IRQHandler+0x6a8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d02c      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a7a      	ldr	r2, [pc, #488]	@ (8003ecc <HAL_DMA_IRQHandler+0x6ac>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d027      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a79      	ldr	r2, [pc, #484]	@ (8003ed0 <HAL_DMA_IRQHandler+0x6b0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a77      	ldr	r2, [pc, #476]	@ (8003ed4 <HAL_DMA_IRQHandler+0x6b4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a76      	ldr	r2, [pc, #472]	@ (8003ed8 <HAL_DMA_IRQHandler+0x6b8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a74      	ldr	r2, [pc, #464]	@ (8003edc <HAL_DMA_IRQHandler+0x6bc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a73      	ldr	r2, [pc, #460]	@ (8003ee0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a71      	ldr	r2, [pc, #452]	@ (8003ee4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a70      	ldr	r2, [pc, #448]	@ (8003ee8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x516>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6e      	ldr	r2, [pc, #440]	@ (8003eec <HAL_DMA_IRQHandler+0x6cc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10a      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x52c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e009      	b.n	8003d60 <HAL_DMA_IRQHandler+0x540>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d03e      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d108      	bne.n	8003da2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d024      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
 8003da0:	e01f      	b.n	8003de2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01b      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
 8003db2:	e016      	b.n	8003de2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0208 	bic.w	r2, r2, #8
 8003dd0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2220      	movs	r2, #32
 8003dec:	409a      	lsls	r2, r3
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8110 	beq.w	8004018 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb0 <HAL_DMA_IRQHandler+0x690>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d04a      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb4 <HAL_DMA_IRQHandler+0x694>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d045      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <HAL_DMA_IRQHandler+0x698>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d040      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a28      	ldr	r2, [pc, #160]	@ (8003ebc <HAL_DMA_IRQHandler+0x69c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d03b      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a26      	ldr	r2, [pc, #152]	@ (8003ec0 <HAL_DMA_IRQHandler+0x6a0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d036      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a25      	ldr	r2, [pc, #148]	@ (8003ec4 <HAL_DMA_IRQHandler+0x6a4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d031      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a23      	ldr	r2, [pc, #140]	@ (8003ec8 <HAL_DMA_IRQHandler+0x6a8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02c      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a22      	ldr	r2, [pc, #136]	@ (8003ecc <HAL_DMA_IRQHandler+0x6ac>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d027      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	@ (8003ed0 <HAL_DMA_IRQHandler+0x6b0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d022      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed4 <HAL_DMA_IRQHandler+0x6b4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d01d      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed8 <HAL_DMA_IRQHandler+0x6b8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003edc <HAL_DMA_IRQHandler+0x6bc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ee4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a17      	ldr	r2, [pc, #92]	@ (8003ee8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x678>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a16      	ldr	r2, [pc, #88]	@ (8003eec <HAL_DMA_IRQHandler+0x6cc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d12b      	bne.n	8003ef0 <HAL_DMA_IRQHandler+0x6d0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bf14      	ite	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	2300      	moveq	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	e02a      	b.n	8003f04 <HAL_DMA_IRQHandler+0x6e4>
 8003eae:	bf00      	nop
 8003eb0:	40020010 	.word	0x40020010
 8003eb4:	40020028 	.word	0x40020028
 8003eb8:	40020040 	.word	0x40020040
 8003ebc:	40020058 	.word	0x40020058
 8003ec0:	40020070 	.word	0x40020070
 8003ec4:	40020088 	.word	0x40020088
 8003ec8:	400200a0 	.word	0x400200a0
 8003ecc:	400200b8 	.word	0x400200b8
 8003ed0:	40020410 	.word	0x40020410
 8003ed4:	40020428 	.word	0x40020428
 8003ed8:	40020440 	.word	0x40020440
 8003edc:	40020458 	.word	0x40020458
 8003ee0:	40020470 	.word	0x40020470
 8003ee4:	40020488 	.word	0x40020488
 8003ee8:	400204a0 	.word	0x400204a0
 8003eec:	400204b8 	.word	0x400204b8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf14      	ite	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	2300      	moveq	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8087 	beq.w	8004018 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	2220      	movs	r2, #32
 8003f14:	409a      	lsls	r2, r3
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d139      	bne.n	8003f9a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0216 	bic.w	r2, r2, #22
 8003f34:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f44:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_DMA_IRQHandler+0x736>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0208 	bic.w	r2, r2, #8
 8003f64:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	223f      	movs	r2, #63	@ 0x3f
 8003f70:	409a      	lsls	r2, r3
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 834a 	beq.w	8004624 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
          }
          return;
 8003f98:	e344      	b.n	8004624 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d018      	beq.n	8003fda <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02c      	beq.n	8004018 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
 8003fc6:	e027      	b.n	8004018 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d023      	beq.n	8004018 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e01e      	b.n	8004018 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0210 	bic.w	r2, r2, #16
 8003ff6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8306 	beq.w	800462e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8088 	beq.w	8004140 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2204      	movs	r2, #4
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a7a      	ldr	r2, [pc, #488]	@ (8004228 <HAL_DMA_IRQHandler+0xa08>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a79      	ldr	r2, [pc, #484]	@ (800422c <HAL_DMA_IRQHandler+0xa0c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a77      	ldr	r2, [pc, #476]	@ (8004230 <HAL_DMA_IRQHandler+0xa10>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a76      	ldr	r2, [pc, #472]	@ (8004234 <HAL_DMA_IRQHandler+0xa14>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a74      	ldr	r2, [pc, #464]	@ (8004238 <HAL_DMA_IRQHandler+0xa18>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a73      	ldr	r2, [pc, #460]	@ (800423c <HAL_DMA_IRQHandler+0xa1c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a71      	ldr	r2, [pc, #452]	@ (8004240 <HAL_DMA_IRQHandler+0xa20>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a70      	ldr	r2, [pc, #448]	@ (8004244 <HAL_DMA_IRQHandler+0xa24>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6e      	ldr	r2, [pc, #440]	@ (8004248 <HAL_DMA_IRQHandler+0xa28>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6d      	ldr	r2, [pc, #436]	@ (800424c <HAL_DMA_IRQHandler+0xa2c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004250 <HAL_DMA_IRQHandler+0xa30>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004254 <HAL_DMA_IRQHandler+0xa34>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a68      	ldr	r2, [pc, #416]	@ (8004258 <HAL_DMA_IRQHandler+0xa38>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a67      	ldr	r2, [pc, #412]	@ (800425c <HAL_DMA_IRQHandler+0xa3c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a65      	ldr	r2, [pc, #404]	@ (8004260 <HAL_DMA_IRQHandler+0xa40>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x8b8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a64      	ldr	r2, [pc, #400]	@ (8004264 <HAL_DMA_IRQHandler+0xa44>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <HAL_DMA_IRQHandler+0x8ca>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e007      	b.n	80040fa <HAL_DMA_IRQHandler+0x8da>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3301      	adds	r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004102:	429a      	cmp	r2, r3
 8004104:	d307      	bcc.n	8004116 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f2      	bne.n	80040fa <HAL_DMA_IRQHandler+0x8da>
 8004114:	e000      	b.n	8004118 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004116:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800412e:	e003      	b.n	8004138 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8272 	beq.w	800462e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
 8004152:	e26c      	b.n	800462e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a43      	ldr	r2, [pc, #268]	@ (8004268 <HAL_DMA_IRQHandler+0xa48>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x984>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a42      	ldr	r2, [pc, #264]	@ (800426c <HAL_DMA_IRQHandler+0xa4c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01d      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x984>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a40      	ldr	r2, [pc, #256]	@ (8004270 <HAL_DMA_IRQHandler+0xa50>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x984>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3f      	ldr	r2, [pc, #252]	@ (8004274 <HAL_DMA_IRQHandler+0xa54>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x984>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a3d      	ldr	r2, [pc, #244]	@ (8004278 <HAL_DMA_IRQHandler+0xa58>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x984>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3c      	ldr	r2, [pc, #240]	@ (800427c <HAL_DMA_IRQHandler+0xa5c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x984>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3a      	ldr	r2, [pc, #232]	@ (8004280 <HAL_DMA_IRQHandler+0xa60>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x984>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a39      	ldr	r2, [pc, #228]	@ (8004284 <HAL_DMA_IRQHandler+0xa64>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x988>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_DMA_IRQHandler+0x98a>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 823f 	beq.w	800462e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2204      	movs	r2, #4
 80041c2:	409a      	lsls	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80cd 	beq.w	8004368 <HAL_DMA_IRQHandler+0xb48>
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80c7 	beq.w	8004368 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2204      	movs	r2, #4
 80041e4:	409a      	lsls	r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d049      	beq.n	8004288 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8210 	beq.w	8004628 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004210:	e20a      	b.n	8004628 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8206 	beq.w	8004628 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004224:	e200      	b.n	8004628 <HAL_DMA_IRQHandler+0xe08>
 8004226:	bf00      	nop
 8004228:	40020010 	.word	0x40020010
 800422c:	40020028 	.word	0x40020028
 8004230:	40020040 	.word	0x40020040
 8004234:	40020058 	.word	0x40020058
 8004238:	40020070 	.word	0x40020070
 800423c:	40020088 	.word	0x40020088
 8004240:	400200a0 	.word	0x400200a0
 8004244:	400200b8 	.word	0x400200b8
 8004248:	40020410 	.word	0x40020410
 800424c:	40020428 	.word	0x40020428
 8004250:	40020440 	.word	0x40020440
 8004254:	40020458 	.word	0x40020458
 8004258:	40020470 	.word	0x40020470
 800425c:	40020488 	.word	0x40020488
 8004260:	400204a0 	.word	0x400204a0
 8004264:	400204b8 	.word	0x400204b8
 8004268:	58025408 	.word	0x58025408
 800426c:	5802541c 	.word	0x5802541c
 8004270:	58025430 	.word	0x58025430
 8004274:	58025444 	.word	0x58025444
 8004278:	58025458 	.word	0x58025458
 800427c:	5802546c 	.word	0x5802546c
 8004280:	58025480 	.word	0x58025480
 8004284:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d160      	bne.n	8004354 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7f      	ldr	r2, [pc, #508]	@ (8004494 <HAL_DMA_IRQHandler+0xc74>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d04a      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004498 <HAL_DMA_IRQHandler+0xc78>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d045      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7c      	ldr	r2, [pc, #496]	@ (800449c <HAL_DMA_IRQHandler+0xc7c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d040      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a7a      	ldr	r2, [pc, #488]	@ (80044a0 <HAL_DMA_IRQHandler+0xc80>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d03b      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a79      	ldr	r2, [pc, #484]	@ (80044a4 <HAL_DMA_IRQHandler+0xc84>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d036      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a77      	ldr	r2, [pc, #476]	@ (80044a8 <HAL_DMA_IRQHandler+0xc88>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d031      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a76      	ldr	r2, [pc, #472]	@ (80044ac <HAL_DMA_IRQHandler+0xc8c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d02c      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a74      	ldr	r2, [pc, #464]	@ (80044b0 <HAL_DMA_IRQHandler+0xc90>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d027      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a73      	ldr	r2, [pc, #460]	@ (80044b4 <HAL_DMA_IRQHandler+0xc94>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d022      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a71      	ldr	r2, [pc, #452]	@ (80044b8 <HAL_DMA_IRQHandler+0xc98>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01d      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a70      	ldr	r2, [pc, #448]	@ (80044bc <HAL_DMA_IRQHandler+0xc9c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d018      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6e      	ldr	r2, [pc, #440]	@ (80044c0 <HAL_DMA_IRQHandler+0xca0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a6d      	ldr	r2, [pc, #436]	@ (80044c4 <HAL_DMA_IRQHandler+0xca4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6b      	ldr	r2, [pc, #428]	@ (80044c8 <HAL_DMA_IRQHandler+0xca8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6a      	ldr	r2, [pc, #424]	@ (80044cc <HAL_DMA_IRQHandler+0xcac>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_DMA_IRQHandler+0xb12>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a68      	ldr	r2, [pc, #416]	@ (80044d0 <HAL_DMA_IRQHandler+0xcb0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d108      	bne.n	8004344 <HAL_DMA_IRQHandler+0xb24>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0208 	bic.w	r2, r2, #8
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e007      	b.n	8004354 <HAL_DMA_IRQHandler+0xb34>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0204 	bic.w	r2, r2, #4
 8004352:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8165 	beq.w	8004628 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004366:	e15f      	b.n	8004628 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2202      	movs	r2, #2
 8004372:	409a      	lsls	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80c5 	beq.w	8004508 <HAL_DMA_IRQHandler+0xce8>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80bf 	beq.w	8004508 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2202      	movs	r2, #2
 8004394:	409a      	lsls	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d018      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 813a 	beq.w	800462c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c0:	e134      	b.n	800462c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8130 	beq.w	800462c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d4:	e12a      	b.n	800462c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 8089 	bne.w	80044f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <HAL_DMA_IRQHandler+0xc74>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a29      	ldr	r2, [pc, #164]	@ (8004498 <HAL_DMA_IRQHandler+0xc78>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a28      	ldr	r2, [pc, #160]	@ (800449c <HAL_DMA_IRQHandler+0xc7c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a26      	ldr	r2, [pc, #152]	@ (80044a0 <HAL_DMA_IRQHandler+0xc80>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a25      	ldr	r2, [pc, #148]	@ (80044a4 <HAL_DMA_IRQHandler+0xc84>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a23      	ldr	r2, [pc, #140]	@ (80044a8 <HAL_DMA_IRQHandler+0xc88>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a22      	ldr	r2, [pc, #136]	@ (80044ac <HAL_DMA_IRQHandler+0xc8c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a20      	ldr	r2, [pc, #128]	@ (80044b0 <HAL_DMA_IRQHandler+0xc90>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <HAL_DMA_IRQHandler+0xc94>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1d      	ldr	r2, [pc, #116]	@ (80044b8 <HAL_DMA_IRQHandler+0xc98>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <HAL_DMA_IRQHandler+0xc9c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1a      	ldr	r2, [pc, #104]	@ (80044c0 <HAL_DMA_IRQHandler+0xca0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <HAL_DMA_IRQHandler+0xca4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <HAL_DMA_IRQHandler+0xca8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <HAL_DMA_IRQHandler+0xcac>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_IRQHandler+0xc62>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a14      	ldr	r2, [pc, #80]	@ (80044d0 <HAL_DMA_IRQHandler+0xcb0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d128      	bne.n	80044d4 <HAL_DMA_IRQHandler+0xcb4>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0214 	bic.w	r2, r2, #20
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e027      	b.n	80044e4 <HAL_DMA_IRQHandler+0xcc4>
 8004494:	40020010 	.word	0x40020010
 8004498:	40020028 	.word	0x40020028
 800449c:	40020040 	.word	0x40020040
 80044a0:	40020058 	.word	0x40020058
 80044a4:	40020070 	.word	0x40020070
 80044a8:	40020088 	.word	0x40020088
 80044ac:	400200a0 	.word	0x400200a0
 80044b0:	400200b8 	.word	0x400200b8
 80044b4:	40020410 	.word	0x40020410
 80044b8:	40020428 	.word	0x40020428
 80044bc:	40020440 	.word	0x40020440
 80044c0:	40020458 	.word	0x40020458
 80044c4:	40020470 	.word	0x40020470
 80044c8:	40020488 	.word	0x40020488
 80044cc:	400204a0 	.word	0x400204a0
 80044d0:	400204b8 	.word	0x400204b8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 020a 	bic.w	r2, r2, #10
 80044e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8097 	beq.w	800462c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004506:	e091      	b.n	800462c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2208      	movs	r2, #8
 8004512:	409a      	lsls	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8088 	beq.w	800462e <HAL_DMA_IRQHandler+0xe0e>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8082 	beq.w	800462e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a41      	ldr	r2, [pc, #260]	@ (8004634 <HAL_DMA_IRQHandler+0xe14>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d04a      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3f      	ldr	r2, [pc, #252]	@ (8004638 <HAL_DMA_IRQHandler+0xe18>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d045      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a3e      	ldr	r2, [pc, #248]	@ (800463c <HAL_DMA_IRQHandler+0xe1c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d040      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a3c      	ldr	r2, [pc, #240]	@ (8004640 <HAL_DMA_IRQHandler+0xe20>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d03b      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3b      	ldr	r2, [pc, #236]	@ (8004644 <HAL_DMA_IRQHandler+0xe24>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d036      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a39      	ldr	r2, [pc, #228]	@ (8004648 <HAL_DMA_IRQHandler+0xe28>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d031      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a38      	ldr	r2, [pc, #224]	@ (800464c <HAL_DMA_IRQHandler+0xe2c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d02c      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a36      	ldr	r2, [pc, #216]	@ (8004650 <HAL_DMA_IRQHandler+0xe30>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d027      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a35      	ldr	r2, [pc, #212]	@ (8004654 <HAL_DMA_IRQHandler+0xe34>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a33      	ldr	r2, [pc, #204]	@ (8004658 <HAL_DMA_IRQHandler+0xe38>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01d      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a32      	ldr	r2, [pc, #200]	@ (800465c <HAL_DMA_IRQHandler+0xe3c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a30      	ldr	r2, [pc, #192]	@ (8004660 <HAL_DMA_IRQHandler+0xe40>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004664 <HAL_DMA_IRQHandler+0xe44>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004668 <HAL_DMA_IRQHandler+0xe48>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2c      	ldr	r2, [pc, #176]	@ (800466c <HAL_DMA_IRQHandler+0xe4c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_DMA_IRQHandler+0xdaa>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004670 <HAL_DMA_IRQHandler+0xe50>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <HAL_DMA_IRQHandler+0xdbc>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 021c 	bic.w	r2, r2, #28
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e007      	b.n	80045ec <HAL_DMA_IRQHandler+0xdcc>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 020e 	bic.w	r2, r2, #14
 80045ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2201      	movs	r2, #1
 80045f6:	409a      	lsls	r2, r3
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4798      	blx	r3
 8004622:	e004      	b.n	800462e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004624:	bf00      	nop
 8004626:	e002      	b.n	800462e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800462e:	3728      	adds	r7, #40	@ 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	40020040 	.word	0x40020040
 8004640:	40020058 	.word	0x40020058
 8004644:	40020070 	.word	0x40020070
 8004648:	40020088 	.word	0x40020088
 800464c:	400200a0 	.word	0x400200a0
 8004650:	400200b8 	.word	0x400200b8
 8004654:	40020410 	.word	0x40020410
 8004658:	40020428 	.word	0x40020428
 800465c:	40020440 	.word	0x40020440
 8004660:	40020458 	.word	0x40020458
 8004664:	40020470 	.word	0x40020470
 8004668:	40020488 	.word	0x40020488
 800466c:	400204a0 	.word	0x400204a0
 8004670:	400204b8 	.word	0x400204b8

08004674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a42      	ldr	r2, [pc, #264]	@ (800478c <DMA_CalcBaseAndBitshift+0x118>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d04a      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a41      	ldr	r2, [pc, #260]	@ (8004790 <DMA_CalcBaseAndBitshift+0x11c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d045      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <DMA_CalcBaseAndBitshift+0x120>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d040      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3e      	ldr	r2, [pc, #248]	@ (8004798 <DMA_CalcBaseAndBitshift+0x124>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d03b      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3c      	ldr	r2, [pc, #240]	@ (800479c <DMA_CalcBaseAndBitshift+0x128>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d036      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3b      	ldr	r2, [pc, #236]	@ (80047a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d031      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a39      	ldr	r2, [pc, #228]	@ (80047a4 <DMA_CalcBaseAndBitshift+0x130>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d02c      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a38      	ldr	r2, [pc, #224]	@ (80047a8 <DMA_CalcBaseAndBitshift+0x134>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d027      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a36      	ldr	r2, [pc, #216]	@ (80047ac <DMA_CalcBaseAndBitshift+0x138>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d022      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a35      	ldr	r2, [pc, #212]	@ (80047b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d01d      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a33      	ldr	r2, [pc, #204]	@ (80047b4 <DMA_CalcBaseAndBitshift+0x140>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a32      	ldr	r2, [pc, #200]	@ (80047b8 <DMA_CalcBaseAndBitshift+0x144>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a30      	ldr	r2, [pc, #192]	@ (80047bc <DMA_CalcBaseAndBitshift+0x148>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2f      	ldr	r2, [pc, #188]	@ (80047c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <DMA_CalcBaseAndBitshift+0x150>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <DMA_CalcBaseAndBitshift+0xa8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <DMA_CalcBaseAndBitshift+0x154>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <DMA_CalcBaseAndBitshift+0xac>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <DMA_CalcBaseAndBitshift+0xae>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d024      	beq.n	8004770 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3b10      	subs	r3, #16
 800472e:	4a27      	ldr	r2, [pc, #156]	@ (80047cc <DMA_CalcBaseAndBitshift+0x158>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	4a24      	ldr	r2, [pc, #144]	@ (80047d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d908      	bls.n	8004760 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	4b1f      	ldr	r3, [pc, #124]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x160>)
 8004756:	4013      	ands	r3, r2
 8004758:	1d1a      	adds	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	659a      	str	r2, [r3, #88]	@ 0x58
 800475e:	e00d      	b.n	800477c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x160>)
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6593      	str	r3, [r2, #88]	@ 0x58
 800476e:	e005      	b.n	800477c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40020010 	.word	0x40020010
 8004790:	40020028 	.word	0x40020028
 8004794:	40020040 	.word	0x40020040
 8004798:	40020058 	.word	0x40020058
 800479c:	40020070 	.word	0x40020070
 80047a0:	40020088 	.word	0x40020088
 80047a4:	400200a0 	.word	0x400200a0
 80047a8:	400200b8 	.word	0x400200b8
 80047ac:	40020410 	.word	0x40020410
 80047b0:	40020428 	.word	0x40020428
 80047b4:	40020440 	.word	0x40020440
 80047b8:	40020458 	.word	0x40020458
 80047bc:	40020470 	.word	0x40020470
 80047c0:	40020488 	.word	0x40020488
 80047c4:	400204a0 	.word	0x400204a0
 80047c8:	400204b8 	.word	0x400204b8
 80047cc:	aaaaaaab 	.word	0xaaaaaaab
 80047d0:	0800ca34 	.word	0x0800ca34
 80047d4:	fffffc00 	.word	0xfffffc00

080047d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d120      	bne.n	800482e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d858      	bhi.n	80048a6 <DMA_CheckFifoParam+0xce>
 80047f4:	a201      	add	r2, pc, #4	@ (adr r2, 80047fc <DMA_CheckFifoParam+0x24>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	0800481f 	.word	0x0800481f
 8004804:	0800480d 	.word	0x0800480d
 8004808:	080048a7 	.word	0x080048a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d048      	beq.n	80048aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800481c:	e045      	b.n	80048aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004826:	d142      	bne.n	80048ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800482c:	e03f      	b.n	80048ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004836:	d123      	bne.n	8004880 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	2b03      	cmp	r3, #3
 800483e:	d838      	bhi.n	80048b2 <DMA_CheckFifoParam+0xda>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <DMA_CheckFifoParam+0x70>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004859 	.word	0x08004859
 800484c:	0800485f 	.word	0x0800485f
 8004850:	08004859 	.word	0x08004859
 8004854:	08004871 	.word	0x08004871
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
        break;
 800485c:	e030      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d025      	beq.n	80048b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800486e:	e022      	b.n	80048b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004878:	d11f      	bne.n	80048ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800487e:	e01c      	b.n	80048ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <DMA_CheckFifoParam+0xb6>
 8004888:	2b03      	cmp	r3, #3
 800488a:	d003      	beq.n	8004894 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800488c:	e018      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	73fb      	strb	r3, [r7, #15]
        break;
 8004892:	e015      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
    break;
 80048a4:	e00b      	b.n	80048be <DMA_CheckFifoParam+0xe6>
        break;
 80048a6:	bf00      	nop
 80048a8:	e00a      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
        break;
 80048aa:	bf00      	nop
 80048ac:	e008      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
        break;
 80048ae:	bf00      	nop
 80048b0:	e006      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
        break;
 80048b2:	bf00      	nop
 80048b4:	e004      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
        break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
        break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
    break;
 80048be:	bf00      	nop
    }
  }

  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a38      	ldr	r2, [pc, #224]	@ (80049c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a36      	ldr	r2, [pc, #216]	@ (80049c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a35      	ldr	r2, [pc, #212]	@ (80049cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a33      	ldr	r2, [pc, #204]	@ (80049d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a32      	ldr	r2, [pc, #200]	@ (80049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a30      	ldr	r2, [pc, #192]	@ (80049d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2f      	ldr	r2, [pc, #188]	@ (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a2d      	ldr	r2, [pc, #180]	@ (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01a      	beq.n	800496e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	3b08      	subs	r3, #8
 8004940:	4a28      	ldr	r2, [pc, #160]	@ (80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4b26      	ldr	r3, [pc, #152]	@ (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	461a      	mov	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a24      	ldr	r2, [pc, #144]	@ (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800495c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2201      	movs	r2, #1
 8004966:	409a      	lsls	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800496c:	e024      	b.n	80049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	3b10      	subs	r3, #16
 8004976:	4a1e      	ldr	r2, [pc, #120]	@ (80049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d806      	bhi.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4a1b      	ldr	r2, [pc, #108]	@ (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d902      	bls.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3308      	adds	r3, #8
 8004994:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4b18      	ldr	r3, [pc, #96]	@ (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	461a      	mov	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	@ (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2201      	movs	r2, #1
 80049b2:	409a      	lsls	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	58025408 	.word	0x58025408
 80049c8:	5802541c 	.word	0x5802541c
 80049cc:	58025430 	.word	0x58025430
 80049d0:	58025444 	.word	0x58025444
 80049d4:	58025458 	.word	0x58025458
 80049d8:	5802546c 	.word	0x5802546c
 80049dc:	58025480 	.word	0x58025480
 80049e0:	58025494 	.word	0x58025494
 80049e4:	cccccccd 	.word	0xcccccccd
 80049e8:	16009600 	.word	0x16009600
 80049ec:	58025880 	.word	0x58025880
 80049f0:	aaaaaaab 	.word	0xaaaaaaab
 80049f4:	400204b8 	.word	0x400204b8
 80049f8:	4002040f 	.word	0x4002040f
 80049fc:	10008200 	.word	0x10008200
 8004a00:	40020880 	.word	0x40020880

08004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d04a      	beq.n	8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d847      	bhi.n	8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a25      	ldr	r2, [pc, #148]	@ (8004abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d022      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a24      	ldr	r2, [pc, #144]	@ (8004ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d01d      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a22      	ldr	r2, [pc, #136]	@ (8004ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a21      	ldr	r2, [pc, #132]	@ (8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	461a      	mov	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004a8e:	e009      	b.n	8004aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a11      	ldr	r2, [pc, #68]	@ (8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004aa2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	58025408 	.word	0x58025408
 8004ac0:	5802541c 	.word	0x5802541c
 8004ac4:	58025430 	.word	0x58025430
 8004ac8:	58025444 	.word	0x58025444
 8004acc:	58025458 	.word	0x58025458
 8004ad0:	5802546c 	.word	0x5802546c
 8004ad4:	58025480 	.word	0x58025480
 8004ad8:	58025494 	.word	0x58025494
 8004adc:	1600963f 	.word	0x1600963f
 8004ae0:	58025940 	.word	0x58025940
 8004ae4:	1000823f 	.word	0x1000823f
 8004ae8:	40020940 	.word	0x40020940

08004aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004afa:	4b89      	ldr	r3, [pc, #548]	@ (8004d20 <HAL_GPIO_Init+0x234>)
 8004afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004afe:	e194      	b.n	8004e2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8186 	beq.w	8004e24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d005      	beq.n	8004b30 <HAL_GPIO_Init+0x44>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d130      	bne.n	8004b92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b66:	2201      	movs	r2, #1
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 0201 	and.w	r2, r3, #1
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d017      	beq.n	8004bce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	2203      	movs	r2, #3
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d123      	bne.n	8004c22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	08da      	lsrs	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3208      	adds	r2, #8
 8004be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	08da      	lsrs	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80e0 	beq.w	8004e24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c64:	4b2f      	ldr	r3, [pc, #188]	@ (8004d24 <HAL_GPIO_Init+0x238>)
 8004c66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004d24 <HAL_GPIO_Init+0x238>)
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004c74:	4b2b      	ldr	r3, [pc, #172]	@ (8004d24 <HAL_GPIO_Init+0x238>)
 8004c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c82:	4a29      	ldr	r2, [pc, #164]	@ (8004d28 <HAL_GPIO_Init+0x23c>)
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	3302      	adds	r3, #2
 8004c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	220f      	movs	r2, #15
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a20      	ldr	r2, [pc, #128]	@ (8004d2c <HAL_GPIO_Init+0x240>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d052      	beq.n	8004d54 <HAL_GPIO_Init+0x268>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d30 <HAL_GPIO_Init+0x244>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d031      	beq.n	8004d1a <HAL_GPIO_Init+0x22e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d34 <HAL_GPIO_Init+0x248>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02b      	beq.n	8004d16 <HAL_GPIO_Init+0x22a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d38 <HAL_GPIO_Init+0x24c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d025      	beq.n	8004d12 <HAL_GPIO_Init+0x226>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d3c <HAL_GPIO_Init+0x250>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01f      	beq.n	8004d0e <HAL_GPIO_Init+0x222>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d40 <HAL_GPIO_Init+0x254>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d019      	beq.n	8004d0a <HAL_GPIO_Init+0x21e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8004d44 <HAL_GPIO_Init+0x258>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_GPIO_Init+0x21a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_GPIO_Init+0x25c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00d      	beq.n	8004d02 <HAL_GPIO_Init+0x216>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_GPIO_Init+0x260>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <HAL_GPIO_Init+0x212>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a17      	ldr	r2, [pc, #92]	@ (8004d50 <HAL_GPIO_Init+0x264>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_GPIO_Init+0x20e>
 8004cf6:	2309      	movs	r3, #9
 8004cf8:	e02d      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004cfa:	230a      	movs	r3, #10
 8004cfc:	e02b      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004cfe:	2308      	movs	r3, #8
 8004d00:	e029      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d02:	2307      	movs	r3, #7
 8004d04:	e027      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d06:	2306      	movs	r3, #6
 8004d08:	e025      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d0a:	2305      	movs	r3, #5
 8004d0c:	e023      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d0e:	2304      	movs	r3, #4
 8004d10:	e021      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d12:	2303      	movs	r3, #3
 8004d14:	e01f      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e01d      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e01b      	b.n	8004d56 <HAL_GPIO_Init+0x26a>
 8004d1e:	bf00      	nop
 8004d20:	58000080 	.word	0x58000080
 8004d24:	58024400 	.word	0x58024400
 8004d28:	58000400 	.word	0x58000400
 8004d2c:	58020000 	.word	0x58020000
 8004d30:	58020400 	.word	0x58020400
 8004d34:	58020800 	.word	0x58020800
 8004d38:	58020c00 	.word	0x58020c00
 8004d3c:	58021000 	.word	0x58021000
 8004d40:	58021400 	.word	0x58021400
 8004d44:	58021800 	.word	0x58021800
 8004d48:	58021c00 	.word	0x58021c00
 8004d4c:	58022000 	.word	0x58022000
 8004d50:	58022400 	.word	0x58022400
 8004d54:	2300      	movs	r3, #0
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	f002 0203 	and.w	r2, r2, #3
 8004d5c:	0092      	lsls	r2, r2, #2
 8004d5e:	4093      	lsls	r3, r2
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d66:	4938      	ldr	r1, [pc, #224]	@ (8004e48 <HAL_GPIO_Init+0x35c>)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004dc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	3301      	adds	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f ae63 	bne.w	8004b00 <HAL_GPIO_Init+0x14>
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	3724      	adds	r7, #36	@ 0x24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	58000400 	.word	0x58000400

08004e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	807b      	strh	r3, [r7, #2]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e5c:	787b      	ldrb	r3, [r7, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e68:	e003      	b.n	8004e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e6a:	887b      	ldrh	r3, [r7, #2]
 8004e6c:	041a      	lsls	r2, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	619a      	str	r2, [r3, #24]
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af02      	add	r7, sp, #8
 8004e84:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0fe      	b.n	800508e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d106      	bne.n	8004eaa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7fc f94f 	bl	8001148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2203      	movs	r2, #3
 8004eae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f005 ff64 	bl	800ad84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7c1a      	ldrb	r2, [r3, #16]
 8004ec4:	f88d 2000 	strb.w	r2, [sp]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ecc:	f005 fee8 	bl	800aca0 <USB_CoreInit>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0d5      	b.n	800508e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f005 ff5c 	bl	800ada6 <USB_SetCurrentMode>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0c6      	b.n	800508e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e04a      	b.n	8004f9c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	3315      	adds	r3, #21
 8004f16:	2201      	movs	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3314      	adds	r3, #20
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	b298      	uxth	r0, r3
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	332e      	adds	r3, #46	@ 0x2e
 8004f42:	4602      	mov	r2, r0
 8004f44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3318      	adds	r3, #24
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	331c      	adds	r3, #28
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f6e:	7bfa      	ldrb	r2, [r7, #15]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3320      	adds	r3, #32
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3324      	adds	r3, #36	@ 0x24
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	791b      	ldrb	r3, [r3, #4]
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3af      	bcc.n	8004f06 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e044      	b.n	8005036 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fee:	7bfa      	ldrb	r2, [r7, #15]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	3301      	adds	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	791b      	ldrb	r3, [r3, #4]
 800503a:	7bfa      	ldrb	r2, [r7, #15]
 800503c:	429a      	cmp	r2, r3
 800503e:	d3b5      	bcc.n	8004fac <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7c1a      	ldrb	r2, [r3, #16]
 8005048:	f88d 2000 	strb.w	r2, [sp]
 800504c:	3304      	adds	r3, #4
 800504e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005050:	f005 fef6 	bl	800ae40 <USB_DevInit>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e013      	b.n	800508e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	7b1b      	ldrb	r3, [r3, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d102      	bne.n	8005082 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f80b 	bl	8005098 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f006 f8b1 	bl	800b1ee <USB_DevDisconnect>

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <HAL_PCDEx_ActivateLPM+0x44>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	10000003 	.word	0x10000003

080050e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050e8:	4b19      	ldr	r3, [pc, #100]	@ (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d00a      	beq.n	800510a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050f4:	4b16      	ldr	r3, [pc, #88]	@ (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d001      	beq.n	8005106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e01f      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e01d      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800510a:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f023 0207 	bic.w	r2, r3, #7
 8005112:	490f      	ldr	r1, [pc, #60]	@ (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4313      	orrs	r3, r2
 8005118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800511a:	f7fc f90b 	bl	8001334 <HAL_GetTick>
 800511e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005120:	e009      	b.n	8005136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005122:	f7fc f907 	bl	8001334 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005130:	d901      	bls.n	8005136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e007      	b.n	8005146 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_PWREx_ConfigSupply+0x70>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005142:	d1ee      	bne.n	8005122 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	58024800 	.word	0x58024800

08005154 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005158:	4b05      	ldr	r3, [pc, #20]	@ (8005170 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a04      	ldr	r2, [pc, #16]	@ (8005170 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005162:	60d3      	str	r3, [r2, #12]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	58024800 	.word	0x58024800

08005174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08c      	sub	sp, #48	@ 0x30
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f000 bc48 	b.w	8005a18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8088 	beq.w	80052a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005196:	4b99      	ldr	r3, [pc, #612]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051a0:	4b96      	ldr	r3, [pc, #600]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d007      	beq.n	80051bc <HAL_RCC_OscConfig+0x48>
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	2b18      	cmp	r3, #24
 80051b0:	d111      	bne.n	80051d6 <HAL_RCC_OscConfig+0x62>
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d10c      	bne.n	80051d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	4b8f      	ldr	r3, [pc, #572]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d06d      	beq.n	80052a4 <HAL_RCC_OscConfig+0x130>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d169      	bne.n	80052a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f000 bc21 	b.w	8005a18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051de:	d106      	bne.n	80051ee <HAL_RCC_OscConfig+0x7a>
 80051e0:	4b86      	ldr	r3, [pc, #536]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a85      	ldr	r2, [pc, #532]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80051e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e02e      	b.n	800524c <HAL_RCC_OscConfig+0xd8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10c      	bne.n	8005210 <HAL_RCC_OscConfig+0x9c>
 80051f6:	4b81      	ldr	r3, [pc, #516]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a80      	ldr	r2, [pc, #512]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80051fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	4b7e      	ldr	r3, [pc, #504]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7d      	ldr	r2, [pc, #500]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e01d      	b.n	800524c <HAL_RCC_OscConfig+0xd8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0xc0>
 800521a:	4b78      	ldr	r3, [pc, #480]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a77      	ldr	r2, [pc, #476]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	4b75      	ldr	r3, [pc, #468]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a74      	ldr	r2, [pc, #464]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e00b      	b.n	800524c <HAL_RCC_OscConfig+0xd8>
 8005234:	4b71      	ldr	r3, [pc, #452]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a70      	ldr	r2, [pc, #448]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 800523a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4b6e      	ldr	r3, [pc, #440]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6d      	ldr	r2, [pc, #436]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800524a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d013      	beq.n	800527c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fc f86e 	bl	8001334 <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800525c:	f7fc f86a 	bl	8001334 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	@ 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e3d4      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800526e:	4b63      	ldr	r3, [pc, #396]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0xe8>
 800527a:	e014      	b.n	80052a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fc f85a 	bl	8001334 <HAL_GetTick>
 8005280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005284:	f7fc f856 	bl	8001334 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	@ 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e3c0      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005296:	4b59      	ldr	r3, [pc, #356]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x110>
 80052a2:	e000      	b.n	80052a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80ca 	beq.w	8005448 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b4:	4b51      	ldr	r3, [pc, #324]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052be:	4b4f      	ldr	r3, [pc, #316]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <HAL_RCC_OscConfig+0x166>
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	2b18      	cmp	r3, #24
 80052ce:	d156      	bne.n	800537e <HAL_RCC_OscConfig+0x20a>
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d151      	bne.n	800537e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052da:	4b48      	ldr	r3, [pc, #288]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_RCC_OscConfig+0x17e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e392      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052f2:	4b42      	ldr	r3, [pc, #264]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 0219 	bic.w	r2, r3, #25
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	493f      	ldr	r1, [pc, #252]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fc f816 	bl	8001334 <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530c:	f7fc f812 	bl	8001334 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e37c      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800531e:	4b37      	ldr	r3, [pc, #220]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532a:	f7fc f833 	bl	8001394 <HAL_GetREVID>
 800532e:	4603      	mov	r3, r0
 8005330:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005334:	4293      	cmp	r3, r2
 8005336:	d817      	bhi.n	8005368 <HAL_RCC_OscConfig+0x1f4>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b40      	cmp	r3, #64	@ 0x40
 800533e:	d108      	bne.n	8005352 <HAL_RCC_OscConfig+0x1de>
 8005340:	4b2e      	ldr	r3, [pc, #184]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005348:	4a2c      	ldr	r2, [pc, #176]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005350:	e07a      	b.n	8005448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005352:	4b2a      	ldr	r3, [pc, #168]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	031b      	lsls	r3, r3, #12
 8005360:	4926      	ldr	r1, [pc, #152]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005366:	e06f      	b.n	8005448 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005368:	4b24      	ldr	r3, [pc, #144]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	4921      	ldr	r1, [pc, #132]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800537c:	e064      	b.n	8005448 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d047      	beq.n	8005416 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005386:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 0219 	bic.w	r2, r3, #25
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	491a      	ldr	r1, [pc, #104]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fb ffcc 	bl	8001334 <HAL_GetTick>
 800539c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a0:	f7fb ffc8 	bl	8001334 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e332      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b2:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f0      	beq.n	80053a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	f7fb ffe9 	bl	8001394 <HAL_GetREVID>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d819      	bhi.n	8005400 <HAL_RCC_OscConfig+0x28c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b40      	cmp	r3, #64	@ 0x40
 80053d2:	d108      	bne.n	80053e6 <HAL_RCC_OscConfig+0x272>
 80053d4:	4b09      	ldr	r3, [pc, #36]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80053dc:	4a07      	ldr	r2, [pc, #28]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80053de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e2:	6053      	str	r3, [r2, #4]
 80053e4:	e030      	b.n	8005448 <HAL_RCC_OscConfig+0x2d4>
 80053e6:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	031b      	lsls	r3, r3, #12
 80053f4:	4901      	ldr	r1, [pc, #4]	@ (80053fc <HAL_RCC_OscConfig+0x288>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	604b      	str	r3, [r1, #4]
 80053fa:	e025      	b.n	8005448 <HAL_RCC_OscConfig+0x2d4>
 80053fc:	58024400 	.word	0x58024400
 8005400:	4b9a      	ldr	r3, [pc, #616]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	4997      	ldr	r1, [pc, #604]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
 8005414:	e018      	b.n	8005448 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005416:	4b95      	ldr	r3, [pc, #596]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a94      	ldr	r2, [pc, #592]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005422:	f7fb ff87 	bl	8001334 <HAL_GetTick>
 8005426:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542a:	f7fb ff83 	bl	8001334 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e2ed      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800543c:	4b8b      	ldr	r3, [pc, #556]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80a9 	beq.w	80055a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005456:	4b85      	ldr	r3, [pc, #532]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800545e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005460:	4b82      	ldr	r3, [pc, #520]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005464:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d007      	beq.n	800547c <HAL_RCC_OscConfig+0x308>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b18      	cmp	r3, #24
 8005470:	d13a      	bne.n	80054e8 <HAL_RCC_OscConfig+0x374>
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d135      	bne.n	80054e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800547c:	4b7b      	ldr	r3, [pc, #492]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_OscConfig+0x320>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b80      	cmp	r3, #128	@ 0x80
 800548e:	d001      	beq.n	8005494 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e2c1      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005494:	f7fb ff7e 	bl	8001394 <HAL_GetREVID>
 8005498:	4603      	mov	r3, r0
 800549a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800549e:	4293      	cmp	r3, r2
 80054a0:	d817      	bhi.n	80054d2 <HAL_RCC_OscConfig+0x35e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d108      	bne.n	80054bc <HAL_RCC_OscConfig+0x348>
 80054aa:	4b70      	ldr	r3, [pc, #448]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80054b2:	4a6e      	ldr	r2, [pc, #440]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ba:	e075      	b.n	80055a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054bc:	4b6b      	ldr	r3, [pc, #428]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	069b      	lsls	r3, r3, #26
 80054ca:	4968      	ldr	r1, [pc, #416]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054d0:	e06a      	b.n	80055a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054d2:	4b66      	ldr	r3, [pc, #408]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	061b      	lsls	r3, r3, #24
 80054e0:	4962      	ldr	r1, [pc, #392]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054e6:	e05f      	b.n	80055a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d042      	beq.n	8005576 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054f0:	4b5e      	ldr	r3, [pc, #376]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5d      	ldr	r2, [pc, #372]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80054f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fb ff1a 	bl	8001334 <HAL_GetTick>
 8005500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005504:	f7fb ff16 	bl	8001334 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e280      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005516:	4b55      	ldr	r3, [pc, #340]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005522:	f7fb ff37 	bl	8001394 <HAL_GetREVID>
 8005526:	4603      	mov	r3, r0
 8005528:	f241 0203 	movw	r2, #4099	@ 0x1003
 800552c:	4293      	cmp	r3, r2
 800552e:	d817      	bhi.n	8005560 <HAL_RCC_OscConfig+0x3ec>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	2b20      	cmp	r3, #32
 8005536:	d108      	bne.n	800554a <HAL_RCC_OscConfig+0x3d6>
 8005538:	4b4c      	ldr	r3, [pc, #304]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005540:	4a4a      	ldr	r2, [pc, #296]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005546:	6053      	str	r3, [r2, #4]
 8005548:	e02e      	b.n	80055a8 <HAL_RCC_OscConfig+0x434>
 800554a:	4b48      	ldr	r3, [pc, #288]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	069b      	lsls	r3, r3, #26
 8005558:	4944      	ldr	r1, [pc, #272]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800555a:	4313      	orrs	r3, r2
 800555c:	604b      	str	r3, [r1, #4]
 800555e:	e023      	b.n	80055a8 <HAL_RCC_OscConfig+0x434>
 8005560:	4b42      	ldr	r3, [pc, #264]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	061b      	lsls	r3, r3, #24
 800556e:	493f      	ldr	r1, [pc, #252]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005570:	4313      	orrs	r3, r2
 8005572:	60cb      	str	r3, [r1, #12]
 8005574:	e018      	b.n	80055a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005576:	4b3d      	ldr	r3, [pc, #244]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a3c      	ldr	r2, [pc, #240]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800557c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fb fed7 	bl	8001334 <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800558a:	f7fb fed3 	bl	8001334 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e23d      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800559c:	4b33      	ldr	r3, [pc, #204]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d036      	beq.n	8005622 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d019      	beq.n	80055f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055bc:	4b2b      	ldr	r3, [pc, #172]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80055be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c0:	4a2a      	ldr	r2, [pc, #168]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fb feb4 	bl	8001334 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d0:	f7fb feb0 	bl	8001334 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e21a      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80055e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0x45c>
 80055ee:	e018      	b.n	8005622 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f0:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f4:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fb fe9a 	bl	8001334 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005604:	f7fb fe96 	bl	8001334 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e200      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005616:	4b15      	ldr	r3, [pc, #84]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d039      	beq.n	80056a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01c      	beq.n	8005670 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a0c      	ldr	r2, [pc, #48]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800563c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005642:	f7fb fe77 	bl	8001334 <HAL_GetTick>
 8005646:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800564a:	f7fb fe73 	bl	8001334 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e1dd      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800565c:	4b03      	ldr	r3, [pc, #12]	@ (800566c <HAL_RCC_OscConfig+0x4f8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x4d6>
 8005668:	e01b      	b.n	80056a2 <HAL_RCC_OscConfig+0x52e>
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005670:	4b9b      	ldr	r3, [pc, #620]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a9a      	ldr	r2, [pc, #616]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800567a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800567c:	f7fb fe5a 	bl	8001334 <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005684:	f7fb fe56 	bl	8001334 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e1c0      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005696:	4b92      	ldr	r3, [pc, #584]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 8081 	beq.w	80057b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056b0:	4b8c      	ldr	r3, [pc, #560]	@ (80058e4 <HAL_RCC_OscConfig+0x770>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a8b      	ldr	r2, [pc, #556]	@ (80058e4 <HAL_RCC_OscConfig+0x770>)
 80056b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056bc:	f7fb fe3a 	bl	8001334 <HAL_GetTick>
 80056c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c4:	f7fb fe36 	bl	8001334 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b64      	cmp	r3, #100	@ 0x64
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e1a0      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d6:	4b83      	ldr	r3, [pc, #524]	@ (80058e4 <HAL_RCC_OscConfig+0x770>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_OscConfig+0x584>
 80056ea:	4b7d      	ldr	r3, [pc, #500]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ee:	4a7c      	ldr	r2, [pc, #496]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f6:	e02d      	b.n	8005754 <HAL_RCC_OscConfig+0x5e0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10c      	bne.n	800571a <HAL_RCC_OscConfig+0x5a6>
 8005700:	4b77      	ldr	r3, [pc, #476]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005704:	4a76      	ldr	r2, [pc, #472]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	6713      	str	r3, [r2, #112]	@ 0x70
 800570c:	4b74      	ldr	r3, [pc, #464]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005710:	4a73      	ldr	r2, [pc, #460]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005712:	f023 0304 	bic.w	r3, r3, #4
 8005716:	6713      	str	r3, [r2, #112]	@ 0x70
 8005718:	e01c      	b.n	8005754 <HAL_RCC_OscConfig+0x5e0>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b05      	cmp	r3, #5
 8005720:	d10c      	bne.n	800573c <HAL_RCC_OscConfig+0x5c8>
 8005722:	4b6f      	ldr	r3, [pc, #444]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005726:	4a6e      	ldr	r2, [pc, #440]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005728:	f043 0304 	orr.w	r3, r3, #4
 800572c:	6713      	str	r3, [r2, #112]	@ 0x70
 800572e:	4b6c      	ldr	r3, [pc, #432]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005732:	4a6b      	ldr	r2, [pc, #428]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	6713      	str	r3, [r2, #112]	@ 0x70
 800573a:	e00b      	b.n	8005754 <HAL_RCC_OscConfig+0x5e0>
 800573c:	4b68      	ldr	r3, [pc, #416]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005740:	4a67      	ldr	r2, [pc, #412]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	6713      	str	r3, [r2, #112]	@ 0x70
 8005748:	4b65      	ldr	r3, [pc, #404]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574c:	4a64      	ldr	r2, [pc, #400]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800574e:	f023 0304 	bic.w	r3, r3, #4
 8005752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575c:	f7fb fdea 	bl	8001334 <HAL_GetTick>
 8005760:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005762:	e00a      	b.n	800577a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005764:	f7fb fde6 	bl	8001334 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e14e      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800577a:	4b59      	ldr	r3, [pc, #356]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0ee      	beq.n	8005764 <HAL_RCC_OscConfig+0x5f0>
 8005786:	e014      	b.n	80057b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fb fdd4 	bl	8001334 <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005790:	f7fb fdd0 	bl	8001334 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e138      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057a6:	4b4e      	ldr	r3, [pc, #312]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1ee      	bne.n	8005790 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 812d 	beq.w	8005a16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057bc:	4b48      	ldr	r3, [pc, #288]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c4:	2b18      	cmp	r3, #24
 80057c6:	f000 80bd 	beq.w	8005944 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	f040 809e 	bne.w	8005910 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d4:	4b42      	ldr	r3, [pc, #264]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a41      	ldr	r2, [pc, #260]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80057da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fb fda8 	bl	8001334 <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fb fda4 	bl	8001334 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e10e      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057fa:	4b39      	ldr	r3, [pc, #228]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005806:	4b36      	ldr	r3, [pc, #216]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800580a:	4b37      	ldr	r3, [pc, #220]	@ (80058e8 <HAL_RCC_OscConfig+0x774>)
 800580c:	4013      	ands	r3, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005816:	0112      	lsls	r2, r2, #4
 8005818:	430a      	orrs	r2, r1
 800581a:	4931      	ldr	r1, [pc, #196]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	3b01      	subs	r3, #1
 8005826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	3b01      	subs	r3, #1
 8005830:	025b      	lsls	r3, r3, #9
 8005832:	b29b      	uxth	r3, r3
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	3b01      	subs	r3, #1
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005848:	3b01      	subs	r3, #1
 800584a:	061b      	lsls	r3, r3, #24
 800584c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005850:	4923      	ldr	r1, [pc, #140]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005852:	4313      	orrs	r3, r2
 8005854:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005856:	4b22      	ldr	r3, [pc, #136]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	4a21      	ldr	r2, [pc, #132]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005862:	4b1f      	ldr	r3, [pc, #124]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005866:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <HAL_RCC_OscConfig+0x778>)
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800586e:	00d2      	lsls	r2, r2, #3
 8005870:	491b      	ldr	r1, [pc, #108]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005872:	4313      	orrs	r3, r2
 8005874:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005876:	4b1a      	ldr	r3, [pc, #104]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	f023 020c 	bic.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	4917      	ldr	r1, [pc, #92]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005884:	4313      	orrs	r3, r2
 8005886:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005888:	4b15      	ldr	r3, [pc, #84]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	f023 0202 	bic.w	r2, r3, #2
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	4912      	ldr	r1, [pc, #72]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 8005896:	4313      	orrs	r3, r2
 8005898:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800589a:	4b11      	ldr	r3, [pc, #68]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 800589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589e:	4a10      	ldr	r2, [pc, #64]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a6:	4b0e      	ldr	r3, [pc, #56]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	4a0d      	ldr	r2, [pc, #52]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058b2:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	4a0a      	ldr	r2, [pc, #40]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058be:	4b08      	ldr	r3, [pc, #32]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c2:	4a07      	ldr	r2, [pc, #28]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ca:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a04      	ldr	r2, [pc, #16]	@ (80058e0 <HAL_RCC_OscConfig+0x76c>)
 80058d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fb fd2d 	bl	8001334 <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058dc:	e011      	b.n	8005902 <HAL_RCC_OscConfig+0x78e>
 80058de:	bf00      	nop
 80058e0:	58024400 	.word	0x58024400
 80058e4:	58024800 	.word	0x58024800
 80058e8:	fffffc0c 	.word	0xfffffc0c
 80058ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fb fd20 	bl	8001334 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e08a      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005902:	4b47      	ldr	r3, [pc, #284]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x77c>
 800590e:	e082      	b.n	8005a16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b43      	ldr	r3, [pc, #268]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a42      	ldr	r2, [pc, #264]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800591a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fb fd0a 	bl	8001334 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fb fd06 	bl	8001334 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e070      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005936:	4b3a      	ldr	r3, [pc, #232]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x7b0>
 8005942:	e068      	b.n	8005a16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005944:	4b36      	ldr	r3, [pc, #216]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800594a:	4b35      	ldr	r3, [pc, #212]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	2b01      	cmp	r3, #1
 8005956:	d031      	beq.n	80059bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f003 0203 	and.w	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d12a      	bne.n	80059bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d122      	bne.n	80059bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d11a      	bne.n	80059bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	0a5b      	lsrs	r3, r3, #9
 800598a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005992:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005994:	429a      	cmp	r2, r3
 8005996:	d111      	bne.n	80059bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d108      	bne.n	80059bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	0e1b      	lsrs	r3, r3, #24
 80059ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e02b      	b.n	8005a18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80059c0:	4b17      	ldr	r3, [pc, #92]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 80059c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d01f      	beq.n	8005a16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80059d6:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	4a11      	ldr	r2, [pc, #68]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059e2:	f7fb fca7 	bl	8001334 <HAL_GetTick>
 80059e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80059e8:	bf00      	nop
 80059ea:	f7fb fca3 	bl	8001334 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d0f9      	beq.n	80059ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 80059f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <HAL_RCC_OscConfig+0x8b0>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a02:	00d2      	lsls	r2, r2, #3
 8005a04:	4906      	ldr	r1, [pc, #24]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005a0a:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	4a04      	ldr	r2, [pc, #16]	@ (8005a20 <HAL_RCC_OscConfig+0x8ac>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3730      	adds	r7, #48	@ 0x30
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	58024400 	.word	0x58024400
 8005a24:	ffff0007 	.word	0xffff0007

08005a28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e19c      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d910      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b87      	ldr	r3, [pc, #540]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 020f 	bic.w	r2, r3, #15
 8005a52:	4985      	ldr	r1, [pc, #532]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b83      	ldr	r3, [pc, #524]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e184      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d908      	bls.n	8005a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a88:	4b78      	ldr	r3, [pc, #480]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	4975      	ldr	r1, [pc, #468]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d010      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	4b70      	ldr	r3, [pc, #448]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d908      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	496a      	ldr	r1, [pc, #424]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	4b64      	ldr	r3, [pc, #400]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d908      	bls.n	8005af6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ae4:	4b61      	ldr	r3, [pc, #388]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	495e      	ldr	r1, [pc, #376]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	4b59      	ldr	r3, [pc, #356]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d908      	bls.n	8005b24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b12:	4b56      	ldr	r3, [pc, #344]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4953      	ldr	r1, [pc, #332]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d010      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	4b4d      	ldr	r3, [pc, #308]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d908      	bls.n	8005b52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b40:	4b4a      	ldr	r3, [pc, #296]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f023 020f 	bic.w	r2, r3, #15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4947      	ldr	r1, [pc, #284]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d055      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b5e:	4b43      	ldr	r3, [pc, #268]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4940      	ldr	r1, [pc, #256]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d107      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b78:	4b3c      	ldr	r3, [pc, #240]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d121      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0f6      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b90:	4b36      	ldr	r3, [pc, #216]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d115      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0ea      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d107      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ba8:	4b30      	ldr	r3, [pc, #192]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0de      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0d6      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bc8:	4b28      	ldr	r3, [pc, #160]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f023 0207 	bic.w	r2, r3, #7
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4925      	ldr	r1, [pc, #148]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bda:	f7fb fbab 	bl	8001334 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be0:	e00a      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be2:	f7fb fba7 	bl	8001334 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e0be      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d1eb      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	4b14      	ldr	r3, [pc, #80]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d208      	bcs.n	8005c38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c26:	4b11      	ldr	r3, [pc, #68]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f023 020f 	bic.w	r2, r3, #15
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	490e      	ldr	r1, [pc, #56]	@ (8005c6c <HAL_RCC_ClockConfig+0x244>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c38:	4b0b      	ldr	r3, [pc, #44]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d214      	bcs.n	8005c70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	4b08      	ldr	r3, [pc, #32]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 020f 	bic.w	r2, r3, #15
 8005c4e:	4906      	ldr	r1, [pc, #24]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b04      	ldr	r3, [pc, #16]	@ (8005c68 <HAL_RCC_ClockConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d005      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e086      	b.n	8005d76 <HAL_RCC_ClockConfig+0x34e>
 8005c68:	52002000 	.word	0x52002000
 8005c6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d010      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	4b3f      	ldr	r3, [pc, #252]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d208      	bcs.n	8005c9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	4939      	ldr	r1, [pc, #228]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d010      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	4b34      	ldr	r3, [pc, #208]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d208      	bcs.n	8005ccc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cba:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	492e      	ldr	r1, [pc, #184]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d010      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	4b28      	ldr	r3, [pc, #160]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d208      	bcs.n	8005cfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ce8:	4b25      	ldr	r3, [pc, #148]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	4922      	ldr	r1, [pc, #136]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d010      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d208      	bcs.n	8005d28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d16:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	4917      	ldr	r1, [pc, #92]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d28:	f000 f834 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	4912      	ldr	r1, [pc, #72]	@ (8005d84 <HAL_RCC_ClockConfig+0x35c>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
 8005d44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d46:	4b0e      	ldr	r3, [pc, #56]	@ (8005d80 <HAL_RCC_ClockConfig+0x358>)
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d84 <HAL_RCC_ClockConfig+0x35c>)
 8005d50:	5cd3      	ldrb	r3, [r2, r3]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d88 <HAL_RCC_ClockConfig+0x360>)
 8005d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d60:	4a0a      	ldr	r2, [pc, #40]	@ (8005d8c <HAL_RCC_ClockConfig+0x364>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d66:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <HAL_RCC_ClockConfig+0x368>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fa ffd8 	bl	8000d20 <HAL_InitTick>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	0800ca24 	.word	0x0800ca24
 8005d88:	24000004 	.word	0x24000004
 8005d8c:	24000000 	.word	0x24000000
 8005d90:	24000008 	.word	0x24000008

08005d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	@ 0x24
 8005d98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d9a:	4bb3      	ldr	r3, [pc, #716]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005da2:	2b18      	cmp	r3, #24
 8005da4:	f200 8155 	bhi.w	8006052 <HAL_RCC_GetSysClockFreq+0x2be>
 8005da8:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08006053 	.word	0x08006053
 8005db8:	08006053 	.word	0x08006053
 8005dbc:	08006053 	.word	0x08006053
 8005dc0:	08006053 	.word	0x08006053
 8005dc4:	08006053 	.word	0x08006053
 8005dc8:	08006053 	.word	0x08006053
 8005dcc:	08006053 	.word	0x08006053
 8005dd0:	08005e3b 	.word	0x08005e3b
 8005dd4:	08006053 	.word	0x08006053
 8005dd8:	08006053 	.word	0x08006053
 8005ddc:	08006053 	.word	0x08006053
 8005de0:	08006053 	.word	0x08006053
 8005de4:	08006053 	.word	0x08006053
 8005de8:	08006053 	.word	0x08006053
 8005dec:	08006053 	.word	0x08006053
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08006053 	.word	0x08006053
 8005df8:	08006053 	.word	0x08006053
 8005dfc:	08006053 	.word	0x08006053
 8005e00:	08006053 	.word	0x08006053
 8005e04:	08006053 	.word	0x08006053
 8005e08:	08006053 	.word	0x08006053
 8005e0c:	08006053 	.word	0x08006053
 8005e10:	08005e47 	.word	0x08005e47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e14:	4b94      	ldr	r3, [pc, #592]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e20:	4b91      	ldr	r3, [pc, #580]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	08db      	lsrs	r3, r3, #3
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	4a90      	ldr	r2, [pc, #576]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e32:	e111      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e34:	4b8d      	ldr	r3, [pc, #564]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e36:	61bb      	str	r3, [r7, #24]
      break;
 8005e38:	e10e      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e3c:	61bb      	str	r3, [r7, #24]
      break;
 8005e3e:	e10b      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e40:	4b8c      	ldr	r3, [pc, #560]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e42:	61bb      	str	r3, [r7, #24]
      break;
 8005e44:	e108      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e46:	4b88      	ldr	r3, [pc, #544]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e50:	4b85      	ldr	r3, [pc, #532]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e5c:	4b82      	ldr	r3, [pc, #520]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e66:	4b80      	ldr	r3, [pc, #512]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6a:	08db      	lsrs	r3, r3, #3
 8005e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80e1 	beq.w	800604c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	f000 8083 	beq.w	8005f98 <HAL_RCC_GetSysClockFreq+0x204>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f200 80a1 	bhi.w	8005fdc <HAL_RCC_GetSysClockFreq+0x248>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d056      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ea6:	e099      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d02d      	beq.n	8005f10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	08db      	lsrs	r3, r3, #3
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	4a6b      	ldr	r2, [pc, #428]	@ (800606c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ede:	4b62      	ldr	r3, [pc, #392]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f0e:	e087      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800607c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	4b51      	ldr	r3, [pc, #324]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f52:	e065      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f66:	4b40      	ldr	r3, [pc, #256]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f96:	e043      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006084 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005faa:	4b2f      	ldr	r3, [pc, #188]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fda:	e021      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006080 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fee:	4b1e      	ldr	r3, [pc, #120]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006002:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006078 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800601e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006020:	4b11      	ldr	r3, [pc, #68]	@ (8006068 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	0a5b      	lsrs	r3, r3, #9
 8006026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800602a:	3301      	adds	r3, #1
 800602c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006038:	edd7 6a07 	vldr	s13, [r7, #28]
 800603c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006044:	ee17 3a90 	vmov	r3, s15
 8006048:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800604a:	e005      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
      break;
 8006050:	e002      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006052:	4b07      	ldr	r3, [pc, #28]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006054:	61bb      	str	r3, [r7, #24]
      break;
 8006056:	bf00      	nop
  }

  return sysclockfreq;
 8006058:	69bb      	ldr	r3, [r7, #24]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3724      	adds	r7, #36	@ 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	58024400 	.word	0x58024400
 800606c:	03d09000 	.word	0x03d09000
 8006070:	003d0900 	.word	0x003d0900
 8006074:	007a1200 	.word	0x007a1200
 8006078:	46000000 	.word	0x46000000
 800607c:	4c742400 	.word	0x4c742400
 8006080:	4a742400 	.word	0x4a742400
 8006084:	4af42400 	.word	0x4af42400

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800608e:	f7ff fe81 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8006092:	4602      	mov	r2, r0
 8006094:	4b10      	ldr	r3, [pc, #64]	@ (80060d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	490f      	ldr	r1, [pc, #60]	@ (80060dc <HAL_RCC_GetHCLKFreq+0x54>)
 80060a0:	5ccb      	ldrb	r3, [r1, r3]
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	fa22 f303 	lsr.w	r3, r2, r3
 80060aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060ac:	4b0a      	ldr	r3, [pc, #40]	@ (80060d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	4a09      	ldr	r2, [pc, #36]	@ (80060dc <HAL_RCC_GetHCLKFreq+0x54>)
 80060b6:	5cd3      	ldrb	r3, [r2, r3]
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	4a07      	ldr	r2, [pc, #28]	@ (80060e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80060c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060c6:	4a07      	ldr	r2, [pc, #28]	@ (80060e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060cc:	4b04      	ldr	r3, [pc, #16]	@ (80060e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	58024400 	.word	0x58024400
 80060dc:	0800ca24 	.word	0x0800ca24
 80060e0:	24000004 	.word	0x24000004
 80060e4:	24000000 	.word	0x24000000

080060e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060ec:	f7ff ffcc 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b06      	ldr	r3, [pc, #24]	@ (800610c <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	4904      	ldr	r1, [pc, #16]	@ (8006110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060fe:	5ccb      	ldrb	r3, [r1, r3]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd80      	pop	{r7, pc}
 800610c:	58024400 	.word	0x58024400
 8006110:	0800ca24 	.word	0x0800ca24

08006114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006118:	f7ff ffb6 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4904      	ldr	r1, [pc, #16]	@ (800613c <HAL_RCC_GetPCLK2Freq+0x28>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}
 8006138:	58024400 	.word	0x58024400
 800613c:	0800ca24 	.word	0x0800ca24

08006140 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	223f      	movs	r2, #63	@ 0x3f
 800614e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006150:	4b1a      	ldr	r3, [pc, #104]	@ (80061bc <HAL_RCC_GetClockConfig+0x7c>)
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f003 0207 	and.w	r2, r3, #7
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800615c:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <HAL_RCC_GetClockConfig+0x7c>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <HAL_RCC_GetClockConfig+0x7c>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006174:	4b11      	ldr	r3, [pc, #68]	@ (80061bc <HAL_RCC_GetClockConfig+0x7c>)
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006180:	4b0e      	ldr	r3, [pc, #56]	@ (80061bc <HAL_RCC_GetClockConfig+0x7c>)
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800618c:	4b0b      	ldr	r3, [pc, #44]	@ (80061bc <HAL_RCC_GetClockConfig+0x7c>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006198:	4b08      	ldr	r3, [pc, #32]	@ (80061bc <HAL_RCC_GetClockConfig+0x7c>)
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061a4:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <HAL_RCC_GetClockConfig+0x80>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 020f 	and.w	r2, r3, #15
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	601a      	str	r2, [r3, #0]
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	58024400 	.word	0x58024400
 80061c0:	52002000 	.word	0x52002000

080061c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c8:	b0ca      	sub	sp, #296	@ 0x128
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061d6:	2300      	movs	r3, #0
 80061d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80061e8:	2500      	movs	r5, #0
 80061ea:	ea54 0305 	orrs.w	r3, r4, r5
 80061ee:	d049      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061fa:	d02f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006200:	d828      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006206:	d01a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800620c:	d822      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006216:	d007      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006218:	e01c      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621a:	4bb8      	ldr	r3, [pc, #736]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	4ab7      	ldr	r2, [pc, #732]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006226:	e01a      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622c:	3308      	adds	r3, #8
 800622e:	2102      	movs	r1, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f002 fb61 	bl	80088f8 <RCCEx_PLL2_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800623c:	e00f      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	3328      	adds	r3, #40	@ 0x28
 8006244:	2102      	movs	r1, #2
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fc08 	bl	8008a5c <RCCEx_PLL3_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006266:	4ba5      	ldr	r3, [pc, #660]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800626a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006274:	4aa1      	ldr	r2, [pc, #644]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6513      	str	r3, [r2, #80]	@ 0x50
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006290:	f04f 0900 	mov.w	r9, #0
 8006294:	ea58 0309 	orrs.w	r3, r8, r9
 8006298:	d047      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d82a      	bhi.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062a4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062c1 	.word	0x080062c1
 80062b0:	080062cf 	.word	0x080062cf
 80062b4:	080062e5 	.word	0x080062e5
 80062b8:	08006303 	.word	0x08006303
 80062bc:	08006303 	.word	0x08006303
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c0:	4b8e      	ldr	r3, [pc, #568]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c4:	4a8d      	ldr	r2, [pc, #564]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062cc:	e01a      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d2:	3308      	adds	r3, #8
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f002 fb0e 	bl	80088f8 <RCCEx_PLL2_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e2:	e00f      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e8:	3328      	adds	r3, #40	@ 0x28
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f002 fbb5 	bl	8008a5c <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062f8:	e004      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006300:	e000      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800630c:	4b7b      	ldr	r3, [pc, #492]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800630e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006310:	f023 0107 	bic.w	r1, r3, #7
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631a:	4a78      	ldr	r2, [pc, #480]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800631c:	430b      	orrs	r3, r1
 800631e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006320:	e003      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006336:	f04f 0b00 	mov.w	fp, #0
 800633a:	ea5a 030b 	orrs.w	r3, sl, fp
 800633e:	d04c      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634a:	d030      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800634c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006350:	d829      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006352:	2bc0      	cmp	r3, #192	@ 0xc0
 8006354:	d02d      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006356:	2bc0      	cmp	r3, #192	@ 0xc0
 8006358:	d825      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800635a:	2b80      	cmp	r3, #128	@ 0x80
 800635c:	d018      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800635e:	2b80      	cmp	r3, #128	@ 0x80
 8006360:	d821      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006366:	2b40      	cmp	r3, #64	@ 0x40
 8006368:	d007      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800636a:	e01c      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636c:	4b63      	ldr	r3, [pc, #396]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	4a62      	ldr	r2, [pc, #392]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006378:	e01c      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	3308      	adds	r3, #8
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f002 fab8 	bl	80088f8 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800638e:	e011      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	3328      	adds	r3, #40	@ 0x28
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f002 fb5f 	bl	8008a5c <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80063a4:	e006      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ac:	e002      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063ae:	bf00      	nop
 80063b0:	e000      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063bc:	4b4f      	ldr	r3, [pc, #316]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ca:	4a4c      	ldr	r2, [pc, #304]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063cc:	430b      	orrs	r3, r1
 80063ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80063d0:	e003      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80063e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80063ea:	2300      	movs	r3, #0
 80063ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80063f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80063f4:	460b      	mov	r3, r1
 80063f6:	4313      	orrs	r3, r2
 80063f8:	d053      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006402:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006406:	d035      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800640c:	d82e      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800640e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006412:	d031      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006414:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006418:	d828      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800641e:	d01a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006424:	d822      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800642a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800642e:	d007      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006430:	e01c      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006432:	4b32      	ldr	r3, [pc, #200]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	4a31      	ldr	r2, [pc, #196]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800643c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800643e:	e01c      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	3308      	adds	r3, #8
 8006446:	2100      	movs	r1, #0
 8006448:	4618      	mov	r0, r3
 800644a:	f002 fa55 	bl	80088f8 <RCCEx_PLL2_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006454:	e011      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	3328      	adds	r3, #40	@ 0x28
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f002 fafc 	bl	8008a5c <RCCEx_PLL3_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800646a:	e006      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006472:	e002      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006482:	4b1e      	ldr	r3, [pc, #120]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006486:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006492:	4a1a      	ldr	r2, [pc, #104]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006494:	430b      	orrs	r3, r1
 8006496:	6593      	str	r3, [r2, #88]	@ 0x58
 8006498:	e003      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064b2:	2300      	movs	r3, #0
 80064b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80064b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80064bc:	460b      	mov	r3, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	d056      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064ce:	d038      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d4:	d831      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064da:	d034      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80064dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064e0:	d82b      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064e6:	d01d      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ec:	d825      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d006      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80064f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064f8:	e01f      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064fa:	bf00      	nop
 80064fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006500:	4ba2      	ldr	r3, [pc, #648]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	4aa1      	ldr	r2, [pc, #644]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800650a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800650c:	e01c      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	3308      	adds	r3, #8
 8006514:	2100      	movs	r1, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f002 f9ee 	bl	80088f8 <RCCEx_PLL2_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006522:	e011      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006528:	3328      	adds	r3, #40	@ 0x28
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fa95 	bl	8008a5c <RCCEx_PLL3_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006538:	e006      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006540:	e002      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10b      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006550:	4b8e      	ldr	r3, [pc, #568]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006554:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006560:	4a8a      	ldr	r2, [pc, #552]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006562:	430b      	orrs	r3, r1
 8006564:	6593      	str	r3, [r2, #88]	@ 0x58
 8006566:	e003      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800657c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006586:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d03a      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006596:	2b30      	cmp	r3, #48	@ 0x30
 8006598:	d01f      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800659a:	2b30      	cmp	r3, #48	@ 0x30
 800659c:	d819      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d00c      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d815      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d019      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	d111      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ae:	4b77      	ldr	r3, [pc, #476]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	4a76      	ldr	r2, [pc, #472]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065ba:	e011      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c0:	3308      	adds	r3, #8
 80065c2:	2102      	movs	r1, #2
 80065c4:	4618      	mov	r0, r3
 80065c6:	f002 f997 	bl	80088f8 <RCCEx_PLL2_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065d0:	e006      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065d8:	e002      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065da:	bf00      	nop
 80065dc:	e000      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065e8:	4b68      	ldr	r3, [pc, #416]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f6:	4a65      	ldr	r2, [pc, #404]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065fc:	e003      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006612:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006616:	2300      	movs	r3, #0
 8006618:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800661c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d051      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800662c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006630:	d035      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006636:	d82e      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006638:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800663c:	d031      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800663e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006642:	d828      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006648:	d01a      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800664e:	d822      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006658:	d007      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800665a:	e01c      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665c:	4b4b      	ldr	r3, [pc, #300]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	4a4a      	ldr	r2, [pc, #296]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006668:	e01c      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666e:	3308      	adds	r3, #8
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f002 f940 	bl	80088f8 <RCCEx_PLL2_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800667e:	e011      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006684:	3328      	adds	r3, #40	@ 0x28
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f002 f9e7 	bl	8008a5c <RCCEx_PLL3_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006694:	e006      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800669c:	e002      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800669e:	bf00      	nop
 80066a0:	e000      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80066a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066ac:	4b37      	ldr	r3, [pc, #220]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ba:	4a34      	ldr	r2, [pc, #208]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	6513      	str	r3, [r2, #80]	@ 0x50
 80066c0:	e003      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80066d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066da:	2300      	movs	r3, #0
 80066dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80066e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80066e4:	460b      	mov	r3, r1
 80066e6:	4313      	orrs	r3, r2
 80066e8:	d056      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066f4:	d033      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066fa:	d82c      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006700:	d02f      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006706:	d826      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006708:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800670c:	d02b      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800670e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006712:	d820      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006718:	d012      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800671a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800671e:	d81a      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d022      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006728:	d115      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672e:	3308      	adds	r3, #8
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f002 f8e0 	bl	80088f8 <RCCEx_PLL2_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800673e:	e015      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006744:	3328      	adds	r3, #40	@ 0x28
 8006746:	2101      	movs	r1, #1
 8006748:	4618      	mov	r0, r3
 800674a:	f002 f987 	bl	8008a5c <RCCEx_PLL3_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006754:	e00a      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800675c:	e006      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800675e:	bf00      	nop
 8006760:	e004      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006762:	bf00      	nop
 8006764:	e002      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006766:	bf00      	nop
 8006768:	e000      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800676a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10d      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006774:	4b05      	ldr	r3, [pc, #20]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006778:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006782:	4a02      	ldr	r2, [pc, #8]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006784:	430b      	orrs	r3, r1
 8006786:	6513      	str	r3, [r2, #80]	@ 0x50
 8006788:	e006      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800678a:	bf00      	nop
 800678c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80067a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d055      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c4:	d033      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80067c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067ca:	d82c      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d0:	d02f      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d6:	d826      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067dc:	d02b      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80067de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067e2:	d820      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e8:	d012      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80067ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ee:	d81a      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d022      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80067f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067f8:	d115      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	3308      	adds	r3, #8
 8006800:	2101      	movs	r1, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f002 f878 	bl	80088f8 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800680e:	e015      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006814:	3328      	adds	r3, #40	@ 0x28
 8006816:	2101      	movs	r1, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f002 f91f 	bl	8008a5c <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006824:	e00a      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800682c:	e006      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800683a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10b      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006844:	4ba3      	ldr	r3, [pc, #652]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006848:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006854:	4a9f      	ldr	r2, [pc, #636]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006856:	430b      	orrs	r3, r1
 8006858:	6593      	str	r3, [r2, #88]	@ 0x58
 800685a:	e003      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006860:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006874:	2300      	movs	r3, #0
 8006876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800687a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800687e:	460b      	mov	r3, r1
 8006880:	4313      	orrs	r3, r2
 8006882:	d037      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800688e:	d00e      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006894:	d816      	bhi.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d018      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800689a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800689e:	d111      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a0:	4b8c      	ldr	r3, [pc, #560]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a4:	4a8b      	ldr	r2, [pc, #556]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068ac:	e00f      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b2:	3308      	adds	r3, #8
 80068b4:	2101      	movs	r1, #1
 80068b6:	4618      	mov	r0, r3
 80068b8:	f002 f81e 	bl	80088f8 <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068c2:	e004      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ca:	e000      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80068cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068d6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e4:	4a7b      	ldr	r2, [pc, #492]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e6:	430b      	orrs	r3, r1
 80068e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80068ea:	e003      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006904:	2300      	movs	r3, #0
 8006906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800690a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800690e:	460b      	mov	r3, r1
 8006910:	4313      	orrs	r3, r2
 8006912:	d039      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800691a:	2b03      	cmp	r3, #3
 800691c:	d81c      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800691e:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006961 	.word	0x08006961
 8006928:	08006935 	.word	0x08006935
 800692c:	08006943 	.word	0x08006943
 8006930:	08006961 	.word	0x08006961
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006934:	4b67      	ldr	r3, [pc, #412]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	4a66      	ldr	r2, [pc, #408]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800693a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800693e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006940:	e00f      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	3308      	adds	r3, #8
 8006948:	2102      	movs	r1, #2
 800694a:	4618      	mov	r0, r3
 800694c:	f001 ffd4 	bl	80088f8 <RCCEx_PLL2_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006956:	e004      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800696a:	4b5a      	ldr	r3, [pc, #360]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800696c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696e:	f023 0103 	bic.w	r1, r3, #3
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006978:	4a56      	ldr	r2, [pc, #344]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697a:	430b      	orrs	r3, r1
 800697c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800697e:	e003      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800699e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f000 809f 	beq.w	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069aa:	4b4b      	ldr	r3, [pc, #300]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069b6:	f7fa fcbd 	bl	8001334 <HAL_GetTick>
 80069ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069be:	e00b      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c0:	f7fa fcb8 	bl	8001334 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b64      	cmp	r3, #100	@ 0x64
 80069ce:	d903      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e005      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069d8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0ed      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80069e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d179      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069ec:	4b39      	ldr	r3, [pc, #228]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069f8:	4053      	eors	r3, r2
 80069fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d015      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a02:	4b34      	ldr	r3, [pc, #208]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a0e:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a12:	4a30      	ldr	r2, [pc, #192]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a26:	4a2b      	ldr	r2, [pc, #172]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3a:	d118      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3c:	f7fa fc7a 	bl	8001334 <HAL_GetTick>
 8006a40:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a44:	e00d      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a46:	f7fa fc75 	bl	8001334 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006a50:	1ad2      	subs	r2, r2, r3
 8006a52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d903      	bls.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006a60:	e005      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a62:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0eb      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d129      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a86:	d10e      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a88:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a98:	091a      	lsrs	r2, r3, #4
 8006a9a:	4b10      	ldr	r3, [pc, #64]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6113      	str	r3, [r2, #16]
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ab0:	6113      	str	r3, [r2, #16]
 8006ab2:	4b08      	ldr	r3, [pc, #32]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac2:	4a04      	ldr	r2, [pc, #16]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac8:	e00e      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006ad2:	e009      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	58024800 	.word	0x58024800
 8006adc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f002 0301 	and.w	r3, r2, #1
 8006af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006af8:	2300      	movs	r3, #0
 8006afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006afe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f000 8089 	beq.w	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b10:	2b28      	cmp	r3, #40	@ 0x28
 8006b12:	d86b      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006b14:	a201      	add	r2, pc, #4	@ (adr r2, 8006b1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006bf5 	.word	0x08006bf5
 8006b20:	08006bed 	.word	0x08006bed
 8006b24:	08006bed 	.word	0x08006bed
 8006b28:	08006bed 	.word	0x08006bed
 8006b2c:	08006bed 	.word	0x08006bed
 8006b30:	08006bed 	.word	0x08006bed
 8006b34:	08006bed 	.word	0x08006bed
 8006b38:	08006bed 	.word	0x08006bed
 8006b3c:	08006bc1 	.word	0x08006bc1
 8006b40:	08006bed 	.word	0x08006bed
 8006b44:	08006bed 	.word	0x08006bed
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006bed 	.word	0x08006bed
 8006b50:	08006bed 	.word	0x08006bed
 8006b54:	08006bed 	.word	0x08006bed
 8006b58:	08006bed 	.word	0x08006bed
 8006b5c:	08006bd7 	.word	0x08006bd7
 8006b60:	08006bed 	.word	0x08006bed
 8006b64:	08006bed 	.word	0x08006bed
 8006b68:	08006bed 	.word	0x08006bed
 8006b6c:	08006bed 	.word	0x08006bed
 8006b70:	08006bed 	.word	0x08006bed
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bed 	.word	0x08006bed
 8006b7c:	08006bf5 	.word	0x08006bf5
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bed 	.word	0x08006bed
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006bed 	.word	0x08006bed
 8006ba4:	08006bed 	.word	0x08006bed
 8006ba8:	08006bed 	.word	0x08006bed
 8006bac:	08006bed 	.word	0x08006bed
 8006bb0:	08006bed 	.word	0x08006bed
 8006bb4:	08006bed 	.word	0x08006bed
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006bf5 	.word	0x08006bf5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fe95 	bl	80088f8 <RCCEx_PLL2_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bd4:	e00f      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	3328      	adds	r3, #40	@ 0x28
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 ff3c 	bl	8008a5c <RCCEx_PLL3_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bea:	e004      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bfe:	4bbf      	ldr	r3, [pc, #764]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c0c:	4abb      	ldr	r2, [pc, #748]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c12:	e003      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f002 0302 	and.w	r3, r2, #2
 8006c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006c36:	460b      	mov	r3, r1
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	d041      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d824      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006c46:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c99 	.word	0x08006c99
 8006c50:	08006c65 	.word	0x08006c65
 8006c54:	08006c7b 	.word	0x08006c7b
 8006c58:	08006c99 	.word	0x08006c99
 8006c5c:	08006c99 	.word	0x08006c99
 8006c60:	08006c99 	.word	0x08006c99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 fe43 	bl	80088f8 <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c78:	e00f      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	3328      	adds	r3, #40	@ 0x28
 8006c80:	2101      	movs	r1, #1
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 feea 	bl	8008a5c <RCCEx_PLL3_Config>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c8e:	e004      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c96:	e000      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ca2:	4b96      	ldr	r3, [pc, #600]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca6:	f023 0107 	bic.w	r1, r3, #7
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cb0:	4a92      	ldr	r2, [pc, #584]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cb6:	e003      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f002 0304 	and.w	r3, r2, #4
 8006ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	d044      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	d825      	bhi.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006cec:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d0d 	.word	0x08006d0d
 8006cfc:	08006d23 	.word	0x08006d23
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d41 	.word	0x08006d41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d10:	3308      	adds	r3, #8
 8006d12:	2101      	movs	r1, #1
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 fdef 	bl	80088f8 <RCCEx_PLL2_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d20:	e00f      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d26:	3328      	adds	r3, #40	@ 0x28
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 fe96 	bl	8008a5c <RCCEx_PLL3_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d36:	e004      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d3e:	e000      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4e:	f023 0107 	bic.w	r1, r3, #7
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d5a:	4a68      	ldr	r2, [pc, #416]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d60:	e003      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f002 0320 	and.w	r3, r2, #32
 8006d76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d84:	460b      	mov	r3, r1
 8006d86:	4313      	orrs	r3, r2
 8006d88:	d055      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d96:	d033      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9c:	d82c      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da2:	d02f      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da8:	d826      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006daa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dae:	d02b      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006db0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006db4:	d820      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dba:	d012      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc0:	d81a      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d022      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dca:	d115      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fd8f 	bl	80088f8 <RCCEx_PLL2_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006de0:	e015      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	3328      	adds	r3, #40	@ 0x28
 8006de8:	2102      	movs	r1, #2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fe36 	bl	8008a5c <RCCEx_PLL3_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006df6:	e00a      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dfe:	e006      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e00:	bf00      	nop
 8006e02:	e004      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e04:	bf00      	nop
 8006e06:	e002      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e16:	4b39      	ldr	r3, [pc, #228]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e26:	4a35      	ldr	r2, [pc, #212]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e2c:	e003      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e46:	2300      	movs	r3, #0
 8006e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d058      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e62:	d033      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006e64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e68:	d82c      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6e:	d02f      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e74:	d826      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e7a:	d02b      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006e7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e80:	d820      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e86:	d012      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e8c:	d81a      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d022      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e96:	d115      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fd29 	bl	80088f8 <RCCEx_PLL2_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006eac:	e015      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	3328      	adds	r3, #40	@ 0x28
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fdd0 	bl	8008a5c <RCCEx_PLL3_Config>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ec2:	e00a      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eca:	e006      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ecc:	bf00      	nop
 8006ece:	e004      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10e      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ee2:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ef2:	4a02      	ldr	r2, [pc, #8]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ef8:	e006      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006efa:	bf00      	nop
 8006efc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006f22:	460b      	mov	r3, r1
 8006f24:	4313      	orrs	r3, r2
 8006f26:	d055      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f34:	d033      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006f36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f3a:	d82c      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f40:	d02f      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f46:	d826      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f4c:	d02b      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006f4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f52:	d820      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f58:	d012      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006f5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f5e:	d81a      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f68:	d115      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	3308      	adds	r3, #8
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fcc0 	bl	80088f8 <RCCEx_PLL2_Config>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f7e:	e015      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	3328      	adds	r3, #40	@ 0x28
 8006f86:	2102      	movs	r1, #2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fd67 	bl	8008a5c <RCCEx_PLL3_Config>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f94:	e00a      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f9c:	e006      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f9e:	bf00      	nop
 8006fa0:	e004      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fa2:	bf00      	nop
 8006fa4:	e002      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fa6:	bf00      	nop
 8006fa8:	e000      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fc4:	4a9d      	ldr	r2, [pc, #628]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fca:	e003      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f002 0308 	and.w	r3, r2, #8
 8006fe0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	d01e      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007000:	d10c      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	3328      	adds	r3, #40	@ 0x28
 8007008:	2102      	movs	r1, #2
 800700a:	4618      	mov	r0, r3
 800700c:	f001 fd26 	bl	8008a5c <RCCEx_PLL3_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800701c:	4b87      	ldr	r3, [pc, #540]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800701e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007020:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800702c:	4a83      	ldr	r2, [pc, #524]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800702e:	430b      	orrs	r3, r1
 8007030:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f002 0310 	and.w	r3, r2, #16
 800703e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007042:	2300      	movs	r3, #0
 8007044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007048:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800704c:	460b      	mov	r3, r1
 800704e:	4313      	orrs	r3, r2
 8007050:	d01e      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800705a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705e:	d10c      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007064:	3328      	adds	r3, #40	@ 0x28
 8007066:	2102      	movs	r1, #2
 8007068:	4618      	mov	r0, r3
 800706a:	f001 fcf7 	bl	8008a5c <RCCEx_PLL3_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800707a:	4b70      	ldr	r3, [pc, #448]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800707c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800708a:	4a6c      	ldr	r2, [pc, #432]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800708c:	430b      	orrs	r3, r1
 800708e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800709c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	d03e      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070bc:	d022      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80070be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c2:	d81b      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070cc:	d00b      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80070ce:	e015      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d4:	3308      	adds	r3, #8
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fc0d 	bl	80088f8 <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070e4:	e00f      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ea:	3328      	adds	r3, #40	@ 0x28
 80070ec:	2102      	movs	r1, #2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 fcb4 	bl	8008a5c <RCCEx_PLL3_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070fa:	e004      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007102:	e000      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800710e:	4b4b      	ldr	r3, [pc, #300]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007112:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800711e:	4a47      	ldr	r2, [pc, #284]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007120:	430b      	orrs	r3, r1
 8007122:	6593      	str	r3, [r2, #88]	@ 0x58
 8007124:	e003      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800713a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800713c:	2300      	movs	r3, #0
 800713e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007140:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007144:	460b      	mov	r3, r1
 8007146:	4313      	orrs	r3, r2
 8007148:	d03b      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007156:	d01f      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007158:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800715c:	d818      	bhi.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800715e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007168:	d007      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800716a:	e011      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716c:	4b33      	ldr	r3, [pc, #204]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4a32      	ldr	r2, [pc, #200]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007178:	e00f      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	3328      	adds	r3, #40	@ 0x28
 8007180:	2101      	movs	r1, #1
 8007182:	4618      	mov	r0, r3
 8007184:	f001 fc6a 	bl	8008a5c <RCCEx_PLL3_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800718e:	e004      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007196:	e000      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a2:	4b26      	ldr	r3, [pc, #152]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b2:	4a22      	ldr	r2, [pc, #136]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b4:	430b      	orrs	r3, r1
 80071b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80071b8:	e003      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80071ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80071d0:	2300      	movs	r3, #0
 80071d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80071d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80071d8:	460b      	mov	r3, r1
 80071da:	4313      	orrs	r3, r2
 80071dc:	d034      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80071e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ec:	d007      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80071ee:	e011      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f0:	4b12      	ldr	r3, [pc, #72]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	4a11      	ldr	r2, [pc, #68]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071fc:	e00e      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007202:	3308      	adds	r3, #8
 8007204:	2102      	movs	r1, #2
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fb76 	bl	80088f8 <RCCEx_PLL2_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800721a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10d      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007224:	4b05      	ldr	r3, [pc, #20]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007232:	4a02      	ldr	r2, [pc, #8]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007234:	430b      	orrs	r3, r1
 8007236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007238:	e006      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800723a:	bf00      	nop
 800723c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007256:	2300      	movs	r3, #0
 8007258:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800725a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800725e:	460b      	mov	r3, r1
 8007260:	4313      	orrs	r3, r2
 8007262:	d00c      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007268:	3328      	adds	r3, #40	@ 0x28
 800726a:	2102      	movs	r1, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f001 fbf5 	bl	8008a5c <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800727e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800728a:	663b      	str	r3, [r7, #96]	@ 0x60
 800728c:	2300      	movs	r3, #0
 800728e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007290:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007294:	460b      	mov	r3, r1
 8007296:	4313      	orrs	r3, r2
 8007298:	d038      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800729a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072a6:	d018      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80072a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ac:	d811      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b2:	d014      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80072b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b8:	d80b      	bhi.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d011      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d106      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c4:	4bc3      	ldr	r3, [pc, #780]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	4ac2      	ldr	r2, [pc, #776]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80072d0:	e008      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d8:	e004      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072da:	bf00      	nop
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072de:	bf00      	nop
 80072e0:	e000      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10b      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072ec:	4bb9      	ldr	r3, [pc, #740]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072fc:	4ab5      	ldr	r2, [pc, #724]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072fe:	430b      	orrs	r3, r1
 8007300:	6553      	str	r3, [r2, #84]	@ 0x54
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007318:	65bb      	str	r3, [r7, #88]	@ 0x58
 800731a:	2300      	movs	r3, #0
 800731c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800731e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007328:	4baa      	ldr	r3, [pc, #680]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007336:	4aa7      	ldr	r2, [pc, #668]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007338:	430b      	orrs	r3, r1
 800733a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007348:	653b      	str	r3, [r7, #80]	@ 0x50
 800734a:	2300      	movs	r3, #0
 800734c:	657b      	str	r3, [r7, #84]	@ 0x54
 800734e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007352:	460b      	mov	r3, r1
 8007354:	4313      	orrs	r3, r2
 8007356:	d00a      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007358:	4b9e      	ldr	r3, [pc, #632]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007364:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007368:	4a9a      	ldr	r2, [pc, #616]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800736a:	430b      	orrs	r3, r1
 800736c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800737a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800737c:	2300      	movs	r3, #0
 800737e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007380:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007384:	460b      	mov	r3, r1
 8007386:	4313      	orrs	r3, r2
 8007388:	d009      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800738a:	4b92      	ldr	r3, [pc, #584]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800738c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007398:	4a8e      	ldr	r2, [pc, #568]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800739a:	430b      	orrs	r3, r1
 800739c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80073aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ac:	2300      	movs	r3, #0
 80073ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80073b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d00e      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073ba:	4b86      	ldr	r3, [pc, #536]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	4a85      	ldr	r2, [pc, #532]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073c4:	6113      	str	r3, [r2, #16]
 80073c6:	4b83      	ldr	r3, [pc, #524]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c8:	6919      	ldr	r1, [r3, #16]
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80073d2:	4a80      	ldr	r2, [pc, #512]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073d4:	430b      	orrs	r3, r1
 80073d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80073e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073e6:	2300      	movs	r3, #0
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073ee:	460b      	mov	r3, r1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073f4:	4b77      	ldr	r3, [pc, #476]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007402:	4a74      	ldr	r2, [pc, #464]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007404:	430b      	orrs	r3, r1
 8007406:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007414:	633b      	str	r3, [r7, #48]	@ 0x30
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
 800741a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800741e:	460b      	mov	r3, r1
 8007420:	4313      	orrs	r3, r2
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007424:	4b6b      	ldr	r3, [pc, #428]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007434:	4a67      	ldr	r2, [pc, #412]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007436:	430b      	orrs	r3, r1
 8007438:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	2100      	movs	r1, #0
 8007444:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800744c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007450:	460b      	mov	r3, r1
 8007452:	4313      	orrs	r3, r2
 8007454:	d011      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	3308      	adds	r3, #8
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fa4a 	bl	80088f8 <RCCEx_PLL2_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	2100      	movs	r1, #0
 8007484:	6239      	str	r1, [r7, #32]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	627b      	str	r3, [r7, #36]	@ 0x24
 800748c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007490:	460b      	mov	r3, r1
 8007492:	4313      	orrs	r3, r2
 8007494:	d011      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749a:	3308      	adds	r3, #8
 800749c:	2101      	movs	r1, #1
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 fa2a 	bl	80088f8 <RCCEx_PLL2_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80074ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	2100      	movs	r1, #0
 80074c4:	61b9      	str	r1, [r7, #24]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80074d0:	460b      	mov	r3, r1
 80074d2:	4313      	orrs	r3, r2
 80074d4:	d011      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074da:	3308      	adds	r3, #8
 80074dc:	2102      	movs	r1, #2
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 fa0a 	bl	80088f8 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	2100      	movs	r1, #0
 8007504:	6139      	str	r1, [r7, #16]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007510:	460b      	mov	r3, r1
 8007512:	4313      	orrs	r3, r2
 8007514:	d011      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	3328      	adds	r3, #40	@ 0x28
 800751c:	2100      	movs	r1, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f001 fa9c 	bl	8008a5c <RCCEx_PLL3_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800752a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800753a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	2100      	movs	r1, #0
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d011      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755a:	3328      	adds	r3, #40	@ 0x28
 800755c:	2101      	movs	r1, #1
 800755e:	4618      	mov	r0, r3
 8007560:	f001 fa7c 	bl	8008a5c <RCCEx_PLL3_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800756a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	2100      	movs	r1, #0
 8007584:	6039      	str	r1, [r7, #0]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	607b      	str	r3, [r7, #4]
 800758c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007590:	460b      	mov	r3, r1
 8007592:	4313      	orrs	r3, r2
 8007594:	d011      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	3328      	adds	r3, #40	@ 0x28
 800759c:	2102      	movs	r1, #2
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fa5c 	bl	8008a5c <RCCEx_PLL3_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80075ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e000      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80075ce:	46bd      	mov	sp, r7
 80075d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075d4:	58024400 	.word	0x58024400

080075d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b090      	sub	sp, #64	@ 0x40
 80075dc:	af00      	add	r7, sp, #0
 80075de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80075ea:	430b      	orrs	r3, r1
 80075ec:	f040 8094 	bne.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80075f0:	4b9e      	ldr	r3, [pc, #632]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	f200 8087 	bhi.w	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007602:	a201      	add	r2, pc, #4	@ (adr r2, 8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007608:	0800761d 	.word	0x0800761d
 800760c:	08007645 	.word	0x08007645
 8007610:	0800766d 	.word	0x0800766d
 8007614:	08007709 	.word	0x08007709
 8007618:	08007695 	.word	0x08007695
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800761c:	4b93      	ldr	r3, [pc, #588]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007628:	d108      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800762a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800762e:	4618      	mov	r0, r3
 8007630:	f001 f810 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007638:	f000 bd45 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007640:	f000 bd41 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007644:	4b89      	ldr	r3, [pc, #548]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800764c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007650:	d108      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007652:	f107 0318 	add.w	r3, r7, #24
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fd54 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007660:	f000 bd31 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007668:	f000 bd2d 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800766c:	4b7f      	ldr	r3, [pc, #508]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007678:	d108      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800767a:	f107 030c 	add.w	r3, r7, #12
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fe94 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007688:	f000 bd1d 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007690:	f000 bd19 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007694:	4b75      	ldr	r3, [pc, #468]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007698:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800769c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800769e:	4b73      	ldr	r3, [pc, #460]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d10c      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80076aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d109      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076b0:	4b6e      	ldr	r3, [pc, #440]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	08db      	lsrs	r3, r3, #3
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	4a6d      	ldr	r2, [pc, #436]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076bc:	fa22 f303 	lsr.w	r3, r2, r3
 80076c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c2:	e01f      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076c4:	4b69      	ldr	r3, [pc, #420]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d0:	d106      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80076d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d8:	d102      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076da:	4b66      	ldr	r3, [pc, #408]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076de:	e011      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076e0:	4b62      	ldr	r3, [pc, #392]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076ec:	d106      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80076ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f4:	d102      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076f6:	4b60      	ldr	r3, [pc, #384]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076fa:	e003      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007700:	f000 bce1 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007704:	f000 bcdf 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007708:	4b5c      	ldr	r3, [pc, #368]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770c:	f000 bcdb 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007714:	f000 bcd7 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007720:	430b      	orrs	r3, r1
 8007722:	f040 80ad 	bne.w	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007726:	4b51      	ldr	r3, [pc, #324]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007736:	d056      	beq.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773e:	f200 8090 	bhi.w	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2bc0      	cmp	r3, #192	@ 0xc0
 8007746:	f000 8088 	beq.w	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	2bc0      	cmp	r3, #192	@ 0xc0
 800774e:	f200 8088 	bhi.w	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	2b80      	cmp	r3, #128	@ 0x80
 8007756:	d032      	beq.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	2b80      	cmp	r3, #128	@ 0x80
 800775c:	f200 8081 	bhi.w	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	2b40      	cmp	r3, #64	@ 0x40
 800776a:	d014      	beq.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800776c:	e079      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800776e:	4b3f      	ldr	r3, [pc, #252]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007776:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800777a:	d108      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800777c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007780:	4618      	mov	r0, r3
 8007782:	f000 ff67 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800778a:	f000 bc9c 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007792:	f000 bc98 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007796:	4b35      	ldr	r3, [pc, #212]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800779e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077a2:	d108      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a4:	f107 0318 	add.w	r3, r7, #24
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fcab 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b2:	f000 bc88 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ba:	f000 bc84 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077be:	4b2b      	ldr	r3, [pc, #172]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ca:	d108      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fdeb 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077da:	f000 bc74 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e2:	f000 bc70 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077e6:	4b21      	ldr	r3, [pc, #132]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077f0:	4b1e      	ldr	r3, [pc, #120]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d10c      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80077fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d109      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007802:	4b1a      	ldr	r3, [pc, #104]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	08db      	lsrs	r3, r3, #3
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800780e:	fa22 f303 	lsr.w	r3, r2, r3
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007814:	e01f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007816:	4b15      	ldr	r3, [pc, #84]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007822:	d106      	bne.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800782a:	d102      	bne.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800782c:	4b11      	ldr	r3, [pc, #68]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007830:	e011      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007832:	4b0e      	ldr	r3, [pc, #56]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800783a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800783e:	d106      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007846:	d102      	bne.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007848:	4b0b      	ldr	r3, [pc, #44]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800784a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800784c:	e003      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007852:	f000 bc38 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007856:	f000 bc36 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800785a:	4b08      	ldr	r3, [pc, #32]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785e:	f000 bc32 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007866:	f000 bc2e 	b.w	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
 8007870:	03d09000 	.word	0x03d09000
 8007874:	003d0900 	.word	0x003d0900
 8007878:	007a1200 	.word	0x007a1200
 800787c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007884:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007888:	430b      	orrs	r3, r1
 800788a:	f040 809c 	bne.w	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800788e:	4b9e      	ldr	r3, [pc, #632]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007892:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800789e:	d054      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078a6:	f200 808b 	bhi.w	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078b0:	f000 8083 	beq.w	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078ba:	f200 8081 	bhi.w	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078c4:	d02f      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078cc:	d878      	bhi.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80078d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078da:	d012      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80078dc:	e070      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078de:	4b8a      	ldr	r3, [pc, #552]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ea:	d107      	bne.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 feaf 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078fa:	e3e4      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007900:	e3e1      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007902:	4b81      	ldr	r3, [pc, #516]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800790a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790e:	d107      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007910:	f107 0318 	add.w	r3, r7, #24
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fbf5 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800791e:	e3d2      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007924:	e3cf      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007926:	4b78      	ldr	r3, [pc, #480]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800792e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007932:	d107      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fd37 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007942:	e3c0      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007948:	e3bd      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800794a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007954:	4b6c      	ldr	r3, [pc, #432]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b04      	cmp	r3, #4
 800795e:	d10c      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007966:	4b68      	ldr	r3, [pc, #416]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	08db      	lsrs	r3, r3, #3
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	4a66      	ldr	r2, [pc, #408]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007972:	fa22 f303 	lsr.w	r3, r2, r3
 8007976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007978:	e01e      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800797a:	4b63      	ldr	r3, [pc, #396]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007986:	d106      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800798e:	d102      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007990:	4b5f      	ldr	r3, [pc, #380]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007994:	e010      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007996:	4b5c      	ldr	r3, [pc, #368]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800799e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079a2:	d106      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80079a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079aa:	d102      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079ac:	4b59      	ldr	r3, [pc, #356]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b0:	e002      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80079b6:	e386      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079b8:	e385      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079ba:	4b57      	ldr	r3, [pc, #348]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80079bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079be:	e382      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c4:	e37f      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80079c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80079ce:	430b      	orrs	r3, r1
 80079d0:	f040 80a7 	bne.w	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80079d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80079dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079e4:	d055      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079ec:	f200 8096 	bhi.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079f6:	f000 8084 	beq.w	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a00:	f200 808c 	bhi.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a0a:	d030      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a12:	f200 8083 	bhi.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a22:	d012      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007a24:	e07a      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a26:	4b38      	ldr	r3, [pc, #224]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a32:	d107      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fe0b 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a42:	e340      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e33d      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a58:	f107 0318 	add.w	r3, r7, #24
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fb51 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a66:	e32e      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6c:	e32b      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a6e:	4b26      	ldr	r3, [pc, #152]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a7a:	d107      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fc93 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8a:	e31c      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a90:	e319      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a92:	4b1d      	ldr	r3, [pc, #116]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d10c      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aae:	4b16      	ldr	r3, [pc, #88]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	08db      	lsrs	r3, r3, #3
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	4a14      	ldr	r2, [pc, #80]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007aba:	fa22 f303 	lsr.w	r3, r2, r3
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac0:	e01e      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ac2:	4b11      	ldr	r3, [pc, #68]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ace:	d106      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad6:	d102      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007adc:	e010      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ade:	4b0a      	ldr	r3, [pc, #40]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aea:	d106      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af2:	d102      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007af4:	4b07      	ldr	r3, [pc, #28]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af8:	e002      	b.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007afe:	e2e2      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b00:	e2e1      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b02:	4b05      	ldr	r3, [pc, #20]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b06:	e2de      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	03d09000 	.word	0x03d09000
 8007b10:	003d0900 	.word	0x003d0900
 8007b14:	007a1200 	.word	0x007a1200
 8007b18:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b20:	e2d1      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b26:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	f040 809c 	bne.w	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007b30:	4b93      	ldr	r3, [pc, #588]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b34:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007b38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b40:	d054      	beq.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b48:	f200 808b 	bhi.w	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b52:	f000 8083 	beq.w	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b5c:	f200 8081 	bhi.w	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b66:	d02f      	beq.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b6e:	d878      	bhi.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b7c:	d012      	beq.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007b7e:	e070      	b.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b80:	4b7f      	ldr	r3, [pc, #508]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b8c:	d107      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fd5e 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b9c:	e293      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba2:	e290      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ba4:	4b76      	ldr	r3, [pc, #472]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bb0:	d107      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 faa4 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc0:	e281      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc6:	e27e      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bc8:	4b6d      	ldr	r3, [pc, #436]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fbe6 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be4:	e26f      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bea:	e26c      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bec:	4b64      	ldr	r3, [pc, #400]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007bf4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bf6:	4b62      	ldr	r3, [pc, #392]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d109      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c08:	4b5d      	ldr	r3, [pc, #372]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	08db      	lsrs	r3, r3, #3
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	4a5c      	ldr	r2, [pc, #368]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c14:	fa22 f303 	lsr.w	r3, r2, r3
 8007c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c1a:	e01e      	b.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c1c:	4b58      	ldr	r3, [pc, #352]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c28:	d106      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c30:	d102      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c32:	4b55      	ldr	r3, [pc, #340]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c36:	e010      	b.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c38:	4b51      	ldr	r3, [pc, #324]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c44:	d106      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c52:	e002      	b.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c58:	e235      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c5a:	e234      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c60:	e231      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c66:	e22e      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007c70:	430b      	orrs	r3, r1
 8007c72:	f040 808f 	bne.w	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007c76:	4b42      	ldr	r3, [pc, #264]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c7a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c86:	d06b      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c8e:	d874      	bhi.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c96:	d056      	beq.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c9e:	d86c      	bhi.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ca6:	d03b      	beq.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cae:	d864      	bhi.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cb6:	d021      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cbe:	d85c      	bhi.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d004      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ccc:	d004      	beq.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007cce:	e054      	b.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fe fa0a 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 8007cd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cd6:	e1f6      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd8:	4b29      	ldr	r3, [pc, #164]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ce4:	d107      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce6:	f107 0318 	add.w	r3, r7, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fa0a 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf4:	e1e7      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfa:	e1e4      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cfc:	4b20      	ldr	r3, [pc, #128]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d08:	d107      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fb4c 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d18:	e1d5      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1e:	e1d2      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d20:	4b17      	ldr	r3, [pc, #92]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d109      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d2c:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	08db      	lsrs	r3, r3, #3
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	4a13      	ldr	r2, [pc, #76]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007d38:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d3e:	e1c2      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d44:	e1bf      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007d46:	4b0e      	ldr	r3, [pc, #56]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d52:	d102      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007d54:	4b0c      	ldr	r3, [pc, #48]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d58:	e1b5      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d5e:	e1b2      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d60:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d6c:	d102      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007d6e:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d72:	e1a8      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d78:	e1a5      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d7e:	e1a2      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d80:	58024400 	.word	0x58024400
 8007d84:	03d09000 	.word	0x03d09000
 8007d88:	003d0900 	.word	0x003d0900
 8007d8c:	007a1200 	.word	0x007a1200
 8007d90:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d98:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	d173      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007da0:	4b9c      	ldr	r3, [pc, #624]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007da8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007db0:	d02f      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007db8:	d863      	bhi.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc6:	d012      	beq.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007dc8:	e05b      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dca:	4b92      	ldr	r3, [pc, #584]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dd6:	d107      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dd8:	f107 0318 	add.w	r3, r7, #24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f991 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007de6:	e16e      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dec:	e16b      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dee:	4b89      	ldr	r3, [pc, #548]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dfa:	d107      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfc:	f107 030c 	add.w	r3, r7, #12
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fad3 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0a:	e15c      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e10:	e159      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e12:	4b80      	ldr	r3, [pc, #512]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e1c:	4b7d      	ldr	r3, [pc, #500]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d10c      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e2e:	4b79      	ldr	r3, [pc, #484]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	08db      	lsrs	r3, r3, #3
 8007e34:	f003 0303 	and.w	r3, r3, #3
 8007e38:	4a77      	ldr	r2, [pc, #476]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e40:	e01e      	b.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e42:	4b74      	ldr	r3, [pc, #464]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e4e:	d106      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e56:	d102      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e58:	4b70      	ldr	r3, [pc, #448]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e5c:	e010      	b.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6a:	d106      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e72:	d102      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e74:	4b6a      	ldr	r3, [pc, #424]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e78:	e002      	b.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e7e:	e122      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e80:	e121      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e86:	e11e      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007e90:	430b      	orrs	r3, r1
 8007e92:	d133      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007e94:	4b5f      	ldr	r3, [pc, #380]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eaa:	d012      	beq.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007eac:	e023      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007eae:	4b59      	ldr	r3, [pc, #356]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eba:	d107      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fbc7 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eca:	e0fc      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed0:	e0f9      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ed2:	4b50      	ldr	r3, [pc, #320]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ede:	d107      	bne.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee0:	f107 0318 	add.w	r3, r7, #24
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f90d 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eee:	e0ea      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef4:	e0e7      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efa:	e0e4      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f00:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007f04:	430b      	orrs	r3, r1
 8007f06:	f040 808d 	bne.w	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007f0a:	4b42      	ldr	r3, [pc, #264]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f0e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007f12:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f1a:	d06b      	beq.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f22:	d874      	bhi.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f2a:	d056      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f32:	d86c      	bhi.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f3a:	d03b      	beq.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f42:	d864      	bhi.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f4a:	d021      	beq.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f52:	d85c      	bhi.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f60:	d004      	beq.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007f62:	e054      	b.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f64:	f000 f8b8 	bl	80080d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f68:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f6a:	e0ac      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f6c:	4b29      	ldr	r3, [pc, #164]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f78:	d107      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7a:	f107 0318 	add.w	r3, r7, #24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f8c0 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f88:	e09d      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8e:	e09a      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f90:	4b20      	ldr	r3, [pc, #128]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f9c:	d107      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f9e:	f107 030c 	add.w	r3, r7, #12
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fa02 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fac:	e08b      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb2:	e088      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fb4:	4b17      	ldr	r3, [pc, #92]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d109      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fc0:	4b14      	ldr	r3, [pc, #80]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	08db      	lsrs	r3, r3, #3
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	4a13      	ldr	r2, [pc, #76]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd2:	e078      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd8:	e075      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007fda:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fe6:	d102      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fec:	e06b      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff2:	e068      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ff4:	4b07      	ldr	r3, [pc, #28]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008000:	d102      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008002:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008006:	e05e      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800800c:	e05b      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008012:	e058      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008014:	58024400 	.word	0x58024400
 8008018:	03d09000 	.word	0x03d09000
 800801c:	003d0900 	.word	0x003d0900
 8008020:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008028:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800802c:	430b      	orrs	r3, r1
 800802e:	d148      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008030:	4b27      	ldr	r3, [pc, #156]	@ (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008038:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008040:	d02a      	beq.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008048:	d838      	bhi.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804c:	2b00      	cmp	r3, #0
 800804e:	d004      	beq.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008056:	d00d      	beq.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008058:	e030      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800805a:	4b1d      	ldr	r3, [pc, #116]	@ (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008062:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008066:	d102      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008068:	4b1a      	ldr	r3, [pc, #104]	@ (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800806a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800806c:	e02b      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008072:	e028      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008074:	4b16      	ldr	r3, [pc, #88]	@ (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800807c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008080:	d107      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fae4 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800808c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008090:	e019      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008096:	e016      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008098:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a4:	d107      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a6:	f107 0318 	add.w	r3, r7, #24
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f82a 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b4:	e007      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ba:	e004      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c0:	e001      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80080c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3740      	adds	r7, #64	@ 0x40
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	58024400 	.word	0x58024400
 80080d4:	007a1200 	.word	0x007a1200

080080d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080dc:	f7fd ffd4 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80080e0:	4602      	mov	r2, r0
 80080e2:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	091b      	lsrs	r3, r3, #4
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	4904      	ldr	r1, [pc, #16]	@ (8008100 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080ee:	5ccb      	ldrb	r3, [r1, r3]
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	58024400 	.word	0x58024400
 8008100:	0800ca24 	.word	0x0800ca24

08008104 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008104:	b480      	push	{r7}
 8008106:	b089      	sub	sp, #36	@ 0x24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800810c:	4ba1      	ldr	r3, [pc, #644]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800810e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008116:	4b9f      	ldr	r3, [pc, #636]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	0b1b      	lsrs	r3, r3, #12
 800811c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008120:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008122:	4b9c      	ldr	r3, [pc, #624]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008126:	091b      	lsrs	r3, r3, #4
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800812e:	4b99      	ldr	r3, [pc, #612]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008132:	08db      	lsrs	r3, r3, #3
 8008134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	fb02 f303 	mul.w	r3, r2, r3
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8111 	beq.w	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b02      	cmp	r3, #2
 8008156:	f000 8083 	beq.w	8008260 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b02      	cmp	r3, #2
 800815e:	f200 80a1 	bhi.w	80082a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d056      	beq.n	800821c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800816e:	e099      	b.n	80082a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008170:	4b88      	ldr	r3, [pc, #544]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d02d      	beq.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800817c:	4b85      	ldr	r3, [pc, #532]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	08db      	lsrs	r3, r3, #3
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	4a84      	ldr	r2, [pc, #528]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008188:	fa22 f303 	lsr.w	r3, r2, r3
 800818c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	ee07 3a90 	vmov	s15, r3
 8008194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a6:	4b7b      	ldr	r3, [pc, #492]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081d6:	e087      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80081e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80081fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800820e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800821a:	e065      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008226:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800822a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800822e:	4b59      	ldr	r3, [pc, #356]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008242:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800824a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800825e:	e043      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800826e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008272:	4b48      	ldr	r3, [pc, #288]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008282:	ed97 6a03 	vldr	s12, [r7, #12]
 8008286:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800828a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082a2:	e021      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b6:	4b37      	ldr	r3, [pc, #220]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80082e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	0a5b      	lsrs	r3, r3, #9
 80082ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008302:	edd7 6a07 	vldr	s13, [r7, #28]
 8008306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800830e:	ee17 2a90 	vmov	r2, s15
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008316:	4b1f      	ldr	r3, [pc, #124]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831a:	0c1b      	lsrs	r3, r3, #16
 800831c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800832c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008330:	edd7 6a07 	vldr	s13, [r7, #28]
 8008334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800833c:	ee17 2a90 	vmov	r2, s15
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008344:	4b13      	ldr	r3, [pc, #76]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800835a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800835e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836a:	ee17 2a90 	vmov	r2, s15
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008372:	e008      	b.n	8008386 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	609a      	str	r2, [r3, #8]
}
 8008386:	bf00      	nop
 8008388:	3724      	adds	r7, #36	@ 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	58024400 	.word	0x58024400
 8008398:	03d09000 	.word	0x03d09000
 800839c:	46000000 	.word	0x46000000
 80083a0:	4c742400 	.word	0x4c742400
 80083a4:	4a742400 	.word	0x4a742400
 80083a8:	4af42400 	.word	0x4af42400

080083ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b089      	sub	sp, #36	@ 0x24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083b4:	4ba1      	ldr	r3, [pc, #644]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083be:	4b9f      	ldr	r3, [pc, #636]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c2:	0d1b      	lsrs	r3, r3, #20
 80083c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083ca:	4b9c      	ldr	r3, [pc, #624]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	0a1b      	lsrs	r3, r3, #8
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80083d6:	4b99      	ldr	r3, [pc, #612]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	fb02 f303 	mul.w	r3, r2, r3
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8111 	beq.w	800861c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	f000 8083 	beq.w	8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b02      	cmp	r3, #2
 8008406:	f200 80a1 	bhi.w	800854c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d056      	beq.n	80084c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008416:	e099      	b.n	800854c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008418:	4b88      	ldr	r3, [pc, #544]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d02d      	beq.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008424:	4b85      	ldr	r3, [pc, #532]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	08db      	lsrs	r3, r3, #3
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	4a84      	ldr	r2, [pc, #528]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b7b      	ldr	r3, [pc, #492]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008462:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800847e:	e087      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800848e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008492:	4b6a      	ldr	r3, [pc, #424]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c2:	e065      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800864c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d6:	4b59      	ldr	r3, [pc, #356]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008506:	e043      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851a:	4b48      	ldr	r3, [pc, #288]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852a:	ed97 6a03 	vldr	s12, [r7, #12]
 800852e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800853e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800854a:	e021      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008556:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800864c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855e:	4b37      	ldr	r3, [pc, #220]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008572:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800858e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008590:	4b2a      	ldr	r3, [pc, #168]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	0a5b      	lsrs	r3, r3, #9
 8008596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b6:	ee17 2a90 	vmov	r2, s15
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085be:	4b1f      	ldr	r3, [pc, #124]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c2:	0c1b      	lsrs	r3, r3, #16
 80085c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e4:	ee17 2a90 	vmov	r2, s15
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80085ec:	4b13      	ldr	r3, [pc, #76]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f0:	0e1b      	lsrs	r3, r3, #24
 80085f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008606:	edd7 6a07 	vldr	s13, [r7, #28]
 800860a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800860e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008612:	ee17 2a90 	vmov	r2, s15
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800861a:	e008      	b.n	800862e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	609a      	str	r2, [r3, #8]
}
 800862e:	bf00      	nop
 8008630:	3724      	adds	r7, #36	@ 0x24
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	58024400 	.word	0x58024400
 8008640:	03d09000 	.word	0x03d09000
 8008644:	46000000 	.word	0x46000000
 8008648:	4c742400 	.word	0x4c742400
 800864c:	4a742400 	.word	0x4a742400
 8008650:	4af42400 	.word	0x4af42400

08008654 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008654:	b480      	push	{r7}
 8008656:	b089      	sub	sp, #36	@ 0x24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800865c:	4ba0      	ldr	r3, [pc, #640]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800865e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008666:	4b9e      	ldr	r3, [pc, #632]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866a:	091b      	lsrs	r3, r3, #4
 800866c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008670:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008672:	4b9b      	ldr	r3, [pc, #620]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800867c:	4b98      	ldr	r3, [pc, #608]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800867e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008680:	08db      	lsrs	r3, r3, #3
 8008682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	fb02 f303 	mul.w	r3, r2, r3
 800868c:	ee07 3a90 	vmov	s15, r3
 8008690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008694:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 8111 	beq.w	80088c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	f000 8083 	beq.w	80087ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	f200 80a1 	bhi.w	80087f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d056      	beq.n	800876a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80086bc:	e099      	b.n	80087f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086be:	4b88      	ldr	r3, [pc, #544]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d02d      	beq.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086ca:	4b85      	ldr	r3, [pc, #532]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	08db      	lsrs	r3, r3, #3
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	4a83      	ldr	r2, [pc, #524]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80086d6:	fa22 f303 	lsr.w	r3, r2, r3
 80086da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	ee07 3a90 	vmov	s15, r3
 80086ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f4:	4b7a      	ldr	r3, [pc, #488]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008704:	ed97 6a03 	vldr	s12, [r7, #12]
 8008708:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800870c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008720:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008724:	e087      	b.n	8008836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008730:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008738:	4b69      	ldr	r3, [pc, #420]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800873a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008740:	ee07 3a90 	vmov	s15, r3
 8008744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008748:	ed97 6a03 	vldr	s12, [r7, #12]
 800874c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800875c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008764:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008768:	e065      	b.n	8008836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	ee07 3a90 	vmov	s15, r3
 8008770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008774:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800877c:	4b58      	ldr	r3, [pc, #352]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800877e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008790:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800879c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ac:	e043      	b.n	8008836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80087bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c0:	4b47      	ldr	r3, [pc, #284]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087f0:	e021      	b.n	8008836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	ee07 3a90 	vmov	s15, r3
 80087f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008804:	4b36      	ldr	r3, [pc, #216]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008814:	ed97 6a03 	vldr	s12, [r7, #12]
 8008818:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800881c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800882c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008834:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008836:	4b2a      	ldr	r3, [pc, #168]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883a:	0a5b      	lsrs	r3, r3, #9
 800883c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008840:	ee07 3a90 	vmov	s15, r3
 8008844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008848:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800884c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008850:	edd7 6a07 	vldr	s13, [r7, #28]
 8008854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800885c:	ee17 2a90 	vmov	r2, s15
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008864:	4b1e      	ldr	r3, [pc, #120]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008868:	0c1b      	lsrs	r3, r3, #16
 800886a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800887a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800887e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888a:	ee17 2a90 	vmov	r2, s15
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008892:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008896:	0e1b      	lsrs	r3, r3, #24
 8008898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b8:	ee17 2a90 	vmov	r2, s15
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80088c0:	e008      	b.n	80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	609a      	str	r2, [r3, #8]
}
 80088d4:	bf00      	nop
 80088d6:	3724      	adds	r7, #36	@ 0x24
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	58024400 	.word	0x58024400
 80088e4:	03d09000 	.word	0x03d09000
 80088e8:	46000000 	.word	0x46000000
 80088ec:	4c742400 	.word	0x4c742400
 80088f0:	4a742400 	.word	0x4a742400
 80088f4:	4af42400 	.word	0x4af42400

080088f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008906:	4b53      	ldr	r3, [pc, #332]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b03      	cmp	r3, #3
 8008910:	d101      	bne.n	8008916 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e099      	b.n	8008a4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008916:	4b4f      	ldr	r3, [pc, #316]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a4e      	ldr	r2, [pc, #312]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 800891c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008922:	f7f8 fd07 	bl	8001334 <HAL_GetTick>
 8008926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008928:	e008      	b.n	800893c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800892a:	f7f8 fd03 	bl	8001334 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e086      	b.n	8008a4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800893c:	4b45      	ldr	r3, [pc, #276]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f0      	bne.n	800892a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008948:	4b42      	ldr	r3, [pc, #264]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 800894a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	031b      	lsls	r3, r3, #12
 8008956:	493f      	ldr	r1, [pc, #252]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	628b      	str	r3, [r1, #40]	@ 0x28
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	3b01      	subs	r3, #1
 8008962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	3b01      	subs	r3, #1
 800896c:	025b      	lsls	r3, r3, #9
 800896e:	b29b      	uxth	r3, r3
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	3b01      	subs	r3, #1
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	3b01      	subs	r3, #1
 8008986:	061b      	lsls	r3, r3, #24
 8008988:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800898c:	4931      	ldr	r1, [pc, #196]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 800898e:	4313      	orrs	r3, r2
 8008990:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008992:	4b30      	ldr	r3, [pc, #192]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008996:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	492d      	ldr	r1, [pc, #180]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80089a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a8:	f023 0220 	bic.w	r2, r3, #32
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	4928      	ldr	r1, [pc, #160]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089b6:	4b27      	ldr	r3, [pc, #156]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ba:	4a26      	ldr	r2, [pc, #152]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089bc:	f023 0310 	bic.w	r3, r3, #16
 80089c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089c2:	4b24      	ldr	r3, [pc, #144]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089c6:	4b24      	ldr	r3, [pc, #144]	@ (8008a58 <RCCEx_PLL2_Config+0x160>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	69d2      	ldr	r2, [r2, #28]
 80089ce:	00d2      	lsls	r2, r2, #3
 80089d0:	4920      	ldr	r1, [pc, #128]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089da:	4a1e      	ldr	r2, [pc, #120]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089dc:	f043 0310 	orr.w	r3, r3, #16
 80089e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ec:	4a19      	ldr	r2, [pc, #100]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089f4:	e00f      	b.n	8008a16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d106      	bne.n	8008a0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089fc:	4b15      	ldr	r3, [pc, #84]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	4a14      	ldr	r2, [pc, #80]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a08:	e005      	b.n	8008a16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a0a:	4b12      	ldr	r3, [pc, #72]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	4a11      	ldr	r2, [pc, #68]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008a10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a16:	4b0f      	ldr	r3, [pc, #60]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008a1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a22:	f7f8 fc87 	bl	8001334 <HAL_GetTick>
 8008a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a28:	e008      	b.n	8008a3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a2a:	f7f8 fc83 	bl	8001334 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d901      	bls.n	8008a3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e006      	b.n	8008a4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a3c:	4b05      	ldr	r3, [pc, #20]	@ (8008a54 <RCCEx_PLL2_Config+0x15c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0f0      	beq.n	8008a2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	58024400 	.word	0x58024400
 8008a58:	ffff0007 	.word	0xffff0007

08008a5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a6a:	4b53      	ldr	r3, [pc, #332]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d101      	bne.n	8008a7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e099      	b.n	8008bae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008a80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a86:	f7f8 fc55 	bl	8001334 <HAL_GetTick>
 8008a8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a8c:	e008      	b.n	8008aa0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a8e:	f7f8 fc51 	bl	8001334 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d901      	bls.n	8008aa0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e086      	b.n	8008bae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aa0:	4b45      	ldr	r3, [pc, #276]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1f0      	bne.n	8008a8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008aac:	4b42      	ldr	r3, [pc, #264]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	051b      	lsls	r3, r3, #20
 8008aba:	493f      	ldr	r1, [pc, #252]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	025b      	lsls	r3, r3, #9
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	061b      	lsls	r3, r3, #24
 8008aec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008af0:	4931      	ldr	r1, [pc, #196]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008af6:	4b30      	ldr	r3, [pc, #192]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	492d      	ldr	r1, [pc, #180]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b08:	4b2b      	ldr	r3, [pc, #172]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	4928      	ldr	r1, [pc, #160]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b1a:	4b27      	ldr	r3, [pc, #156]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1e:	4a26      	ldr	r2, [pc, #152]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b26:	4b24      	ldr	r3, [pc, #144]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b2a:	4b24      	ldr	r3, [pc, #144]	@ (8008bbc <RCCEx_PLL3_Config+0x160>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	69d2      	ldr	r2, [r2, #28]
 8008b32:	00d2      	lsls	r2, r2, #3
 8008b34:	4920      	ldr	r1, [pc, #128]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d106      	bne.n	8008b5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b50:	4a19      	ldr	r2, [pc, #100]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b58:	e00f      	b.n	8008b7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d106      	bne.n	8008b6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b60:	4b15      	ldr	r3, [pc, #84]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b64:	4a14      	ldr	r2, [pc, #80]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b6c:	e005      	b.n	8008b7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b6e:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b72:	4a11      	ldr	r2, [pc, #68]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b86:	f7f8 fbd5 	bl	8001334 <HAL_GetTick>
 8008b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b8c:	e008      	b.n	8008ba0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b8e:	f7f8 fbd1 	bl	8001334 <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d901      	bls.n	8008ba0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e006      	b.n	8008bae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ba0:	4b05      	ldr	r3, [pc, #20]	@ (8008bb8 <RCCEx_PLL3_Config+0x15c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0f0      	beq.n	8008b8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	ffff0007 	.word	0xffff0007

08008bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e049      	b.n	8008c66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f841 	bl	8008c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f000 f9e8 	bl	8008fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
	...

08008c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d001      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e054      	b.n	8008d46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a26      	ldr	r2, [pc, #152]	@ (8008d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d022      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0x80>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc6:	d01d      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0x80>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a22      	ldr	r2, [pc, #136]	@ (8008d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d018      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0x80>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a21      	ldr	r2, [pc, #132]	@ (8008d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d013      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0x80>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8008d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00e      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0x80>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a1e      	ldr	r2, [pc, #120]	@ (8008d64 <HAL_TIM_Base_Start_IT+0xe0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d009      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0x80>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d68 <HAL_TIM_Base_Start_IT+0xe4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d004      	beq.n	8008d04 <HAL_TIM_Base_Start_IT+0x80>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8008d6c <HAL_TIM_Base_Start_IT+0xe8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d115      	bne.n	8008d30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689a      	ldr	r2, [r3, #8]
 8008d0a:	4b19      	ldr	r3, [pc, #100]	@ (8008d70 <HAL_TIM_Base_Start_IT+0xec>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b06      	cmp	r3, #6
 8008d14:	d015      	beq.n	8008d42 <HAL_TIM_Base_Start_IT+0xbe>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d1c:	d011      	beq.n	8008d42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f042 0201 	orr.w	r2, r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d2e:	e008      	b.n	8008d42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e000      	b.n	8008d44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800
 8008d60:	40000c00 	.word	0x40000c00
 8008d64:	40010400 	.word	0x40010400
 8008d68:	40001800 	.word	0x40001800
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	00010007 	.word	0x00010007

08008d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d020      	beq.n	8008dd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01b      	beq.n	8008dd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f06f 0202 	mvn.w	r2, #2
 8008da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f8e9 	bl	8008f96 <HAL_TIM_IC_CaptureCallback>
 8008dc4:	e005      	b.n	8008dd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8db 	bl	8008f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f8ec 	bl	8008faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d020      	beq.n	8008e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01b      	beq.n	8008e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f06f 0204 	mvn.w	r2, #4
 8008df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f8c3 	bl	8008f96 <HAL_TIM_IC_CaptureCallback>
 8008e10:	e005      	b.n	8008e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f8b5 	bl	8008f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f8c6 	bl	8008faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d020      	beq.n	8008e70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f003 0308 	and.w	r3, r3, #8
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01b      	beq.n	8008e70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0208 	mvn.w	r2, #8
 8008e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2204      	movs	r2, #4
 8008e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f89d 	bl	8008f96 <HAL_TIM_IC_CaptureCallback>
 8008e5c:	e005      	b.n	8008e6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f88f 	bl	8008f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f8a0 	bl	8008faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f003 0310 	and.w	r3, r3, #16
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d020      	beq.n	8008ebc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01b      	beq.n	8008ebc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f06f 0210 	mvn.w	r2, #16
 8008e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2208      	movs	r2, #8
 8008e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f877 	bl	8008f96 <HAL_TIM_IC_CaptureCallback>
 8008ea8:	e005      	b.n	8008eb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f869 	bl	8008f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f87a 	bl	8008faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00c      	beq.n	8008ee0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d007      	beq.n	8008ee0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0201 	mvn.w	r2, #1
 8008ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7f7 feea 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d104      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00c      	beq.n	8008f0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d007      	beq.n	8008f0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f913 	bl	8009134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00c      	beq.n	8008f32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d007      	beq.n	8008f32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f90b 	bl	8009148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00c      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f834 	bl	8008fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f003 0320 	and.w	r3, r3, #32
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00c      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d007      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f06f 0220 	mvn.w	r2, #32
 8008f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f8d3 	bl	8009120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f7a:	bf00      	nop
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a46      	ldr	r2, [pc, #280]	@ (8009100 <TIM_Base_SetConfig+0x12c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d013      	beq.n	8009014 <TIM_Base_SetConfig+0x40>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff2:	d00f      	beq.n	8009014 <TIM_Base_SetConfig+0x40>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a43      	ldr	r2, [pc, #268]	@ (8009104 <TIM_Base_SetConfig+0x130>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d00b      	beq.n	8009014 <TIM_Base_SetConfig+0x40>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a42      	ldr	r2, [pc, #264]	@ (8009108 <TIM_Base_SetConfig+0x134>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d007      	beq.n	8009014 <TIM_Base_SetConfig+0x40>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a41      	ldr	r2, [pc, #260]	@ (800910c <TIM_Base_SetConfig+0x138>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d003      	beq.n	8009014 <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a40      	ldr	r2, [pc, #256]	@ (8009110 <TIM_Base_SetConfig+0x13c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d108      	bne.n	8009026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800901a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a35      	ldr	r2, [pc, #212]	@ (8009100 <TIM_Base_SetConfig+0x12c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d01f      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009034:	d01b      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a32      	ldr	r2, [pc, #200]	@ (8009104 <TIM_Base_SetConfig+0x130>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d017      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a31      	ldr	r2, [pc, #196]	@ (8009108 <TIM_Base_SetConfig+0x134>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d013      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a30      	ldr	r2, [pc, #192]	@ (800910c <TIM_Base_SetConfig+0x138>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00f      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a2f      	ldr	r2, [pc, #188]	@ (8009110 <TIM_Base_SetConfig+0x13c>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d00b      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a2e      	ldr	r2, [pc, #184]	@ (8009114 <TIM_Base_SetConfig+0x140>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d007      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a2d      	ldr	r2, [pc, #180]	@ (8009118 <TIM_Base_SetConfig+0x144>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d003      	beq.n	800906e <TIM_Base_SetConfig+0x9a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a2c      	ldr	r2, [pc, #176]	@ (800911c <TIM_Base_SetConfig+0x148>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d108      	bne.n	8009080 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4313      	orrs	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a16      	ldr	r2, [pc, #88]	@ (8009100 <TIM_Base_SetConfig+0x12c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d00f      	beq.n	80090cc <TIM_Base_SetConfig+0xf8>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a18      	ldr	r2, [pc, #96]	@ (8009110 <TIM_Base_SetConfig+0x13c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00b      	beq.n	80090cc <TIM_Base_SetConfig+0xf8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a17      	ldr	r2, [pc, #92]	@ (8009114 <TIM_Base_SetConfig+0x140>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d007      	beq.n	80090cc <TIM_Base_SetConfig+0xf8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a16      	ldr	r2, [pc, #88]	@ (8009118 <TIM_Base_SetConfig+0x144>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d003      	beq.n	80090cc <TIM_Base_SetConfig+0xf8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a15      	ldr	r2, [pc, #84]	@ (800911c <TIM_Base_SetConfig+0x148>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d103      	bne.n	80090d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d105      	bne.n	80090f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	f023 0201 	bic.w	r2, r3, #1
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	611a      	str	r2, [r3, #16]
  }
}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	40010000 	.word	0x40010000
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40000c00 	.word	0x40000c00
 8009110:	40010400 	.word	0x40010400
 8009114:	40014000 	.word	0x40014000
 8009118:	40014400 	.word	0x40014400
 800911c:	40014800 	.word	0x40014800

08009120 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e042      	b.n	80091f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7f7 ff3d 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2224      	movs	r2, #36	@ 0x24
 800918a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0201 	bic.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f001 f9f8 	bl	800a59c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fc8d 	bl	8009acc <UART_SetConfig>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e01b      	b.n	80091f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 fa77 	bl	800a6e0 <UART_CheckIdleState>
 80091f2:	4603      	mov	r3, r0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	4613      	mov	r3, r2
 800920a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009212:	2b20      	cmp	r3, #32
 8009214:	d17b      	bne.n	800930e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <HAL_UART_Transmit+0x26>
 800921c:	88fb      	ldrh	r3, [r7, #6]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e074      	b.n	8009310 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2221      	movs	r2, #33	@ 0x21
 8009232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009236:	f7f8 f87d 	bl	8001334 <HAL_GetTick>
 800923a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	88fa      	ldrh	r2, [r7, #6]
 8009240:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	88fa      	ldrh	r2, [r7, #6]
 8009248:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009254:	d108      	bne.n	8009268 <HAL_UART_Transmit+0x6c>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d104      	bne.n	8009268 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e003      	b.n	8009270 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009270:	e030      	b.n	80092d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	2180      	movs	r1, #128	@ 0x80
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f001 fad9 	bl	800a834 <UART_WaitOnFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2220      	movs	r2, #32
 800928c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e03d      	b.n	8009310 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10b      	bne.n	80092b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	3302      	adds	r3, #2
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	e007      	b.n	80092c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	781a      	ldrb	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	3301      	adds	r3, #1
 80092c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1c8      	bne.n	8009272 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2200      	movs	r2, #0
 80092e8:	2140      	movs	r1, #64	@ 0x40
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f001 faa2 	bl	800a834 <UART_WaitOnFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e006      	b.n	8009310 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	e000      	b.n	8009310 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800930e:	2302      	movs	r3, #2
  }
}
 8009310:	4618      	mov	r0, r3
 8009312:	3720      	adds	r7, #32
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b0ba      	sub	sp, #232	@ 0xe8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800933e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009342:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009346:	4013      	ands	r3, r2
 8009348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800934c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d11b      	bne.n	800938c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b00      	cmp	r3, #0
 800935e:	d015      	beq.n	800938c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800936c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d009      	beq.n	800938c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 8377 	beq.w	8009a70 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
      }
      return;
 800938a:	e371      	b.n	8009a70 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800938c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8123 	beq.w	80095dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800939a:	4b8d      	ldr	r3, [pc, #564]	@ (80095d0 <HAL_UART_IRQHandler+0x2b8>)
 800939c:	4013      	ands	r3, r2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d106      	bne.n	80093b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80093a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80093a6:	4b8b      	ldr	r3, [pc, #556]	@ (80095d4 <HAL_UART_IRQHandler+0x2bc>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8116 	beq.w	80095dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d011      	beq.n	80093e0 <HAL_UART_IRQHandler+0xc8>
 80093bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2201      	movs	r2, #1
 80093ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d6:	f043 0201 	orr.w	r2, r3, #1
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d011      	beq.n	8009410 <HAL_UART_IRQHandler+0xf8>
 80093ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2202      	movs	r2, #2
 80093fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009406:	f043 0204 	orr.w	r2, r3, #4
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b00      	cmp	r3, #0
 800941a:	d011      	beq.n	8009440 <HAL_UART_IRQHandler+0x128>
 800941c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2204      	movs	r2, #4
 800942e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009436:	f043 0202 	orr.w	r2, r3, #2
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009444:	f003 0308 	and.w	r3, r3, #8
 8009448:	2b00      	cmp	r3, #0
 800944a:	d017      	beq.n	800947c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800944c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d105      	bne.n	8009464 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800945c:	4b5c      	ldr	r3, [pc, #368]	@ (80095d0 <HAL_UART_IRQHandler+0x2b8>)
 800945e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2208      	movs	r2, #8
 800946a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009472:	f043 0208 	orr.w	r2, r3, #8
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800947c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009484:	2b00      	cmp	r3, #0
 8009486:	d012      	beq.n	80094ae <HAL_UART_IRQHandler+0x196>
 8009488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800948c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00c      	beq.n	80094ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800949c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a4:	f043 0220 	orr.w	r2, r3, #32
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 82dd 	beq.w	8009a74 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d013      	beq.n	80094ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009502:	2b40      	cmp	r3, #64	@ 0x40
 8009504:	d005      	beq.n	8009512 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800950a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800950e:	2b00      	cmp	r3, #0
 8009510:	d054      	beq.n	80095bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 f9fc 	bl	800a910 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009522:	2b40      	cmp	r3, #64	@ 0x40
 8009524:	d146      	bne.n	80095b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3308      	adds	r3, #8
 800952c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800953c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3308      	adds	r3, #8
 800954e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800955e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800956a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1d9      	bne.n	8009526 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009578:	2b00      	cmp	r3, #0
 800957a:	d017      	beq.n	80095ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009582:	4a15      	ldr	r2, [pc, #84]	@ (80095d8 <HAL_UART_IRQHandler+0x2c0>)
 8009584:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800958c:	4618      	mov	r0, r3
 800958e:	f7f9 ff01 	bl	8003394 <HAL_DMA_Abort_IT>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d019      	beq.n	80095cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800959e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80095a6:	4610      	mov	r0, r2
 80095a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095aa:	e00f      	b.n	80095cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa77 	bl	8009aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b2:	e00b      	b.n	80095cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fa73 	bl	8009aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ba:	e007      	b.n	80095cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa6f 	bl	8009aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80095ca:	e253      	b.n	8009a74 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095cc:	bf00      	nop
    return;
 80095ce:	e251      	b.n	8009a74 <HAL_UART_IRQHandler+0x75c>
 80095d0:	10000001 	.word	0x10000001
 80095d4:	04000120 	.word	0x04000120
 80095d8:	0800a9dd 	.word	0x0800a9dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	f040 81e7 	bne.w	80099b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ea:	f003 0310 	and.w	r3, r3, #16
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 81e0 	beq.w	80099b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f8:	f003 0310 	and.w	r3, r3, #16
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 81d9 	beq.w	80099b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2210      	movs	r2, #16
 8009608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009614:	2b40      	cmp	r3, #64	@ 0x40
 8009616:	f040 8151 	bne.w	80098bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a96      	ldr	r2, [pc, #600]	@ (800987c <HAL_UART_IRQHandler+0x564>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d068      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a93      	ldr	r2, [pc, #588]	@ (8009880 <HAL_UART_IRQHandler+0x568>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d061      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a91      	ldr	r2, [pc, #580]	@ (8009884 <HAL_UART_IRQHandler+0x56c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d05a      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a8e      	ldr	r2, [pc, #568]	@ (8009888 <HAL_UART_IRQHandler+0x570>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d053      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a8c      	ldr	r2, [pc, #560]	@ (800988c <HAL_UART_IRQHandler+0x574>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d04c      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a89      	ldr	r2, [pc, #548]	@ (8009890 <HAL_UART_IRQHandler+0x578>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d045      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a87      	ldr	r2, [pc, #540]	@ (8009894 <HAL_UART_IRQHandler+0x57c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d03e      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a84      	ldr	r2, [pc, #528]	@ (8009898 <HAL_UART_IRQHandler+0x580>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d037      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a82      	ldr	r2, [pc, #520]	@ (800989c <HAL_UART_IRQHandler+0x584>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d030      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a7f      	ldr	r2, [pc, #508]	@ (80098a0 <HAL_UART_IRQHandler+0x588>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d029      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a7d      	ldr	r2, [pc, #500]	@ (80098a4 <HAL_UART_IRQHandler+0x58c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d022      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a7a      	ldr	r2, [pc, #488]	@ (80098a8 <HAL_UART_IRQHandler+0x590>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d01b      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a78      	ldr	r2, [pc, #480]	@ (80098ac <HAL_UART_IRQHandler+0x594>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d014      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a75      	ldr	r2, [pc, #468]	@ (80098b0 <HAL_UART_IRQHandler+0x598>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00d      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a73      	ldr	r2, [pc, #460]	@ (80098b4 <HAL_UART_IRQHandler+0x59c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d006      	beq.n	80096fa <HAL_UART_IRQHandler+0x3e2>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a70      	ldr	r2, [pc, #448]	@ (80098b8 <HAL_UART_IRQHandler+0x5a0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d106      	bne.n	8009708 <HAL_UART_IRQHandler+0x3f0>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	b29b      	uxth	r3, r3
 8009706:	e005      	b.n	8009714 <HAL_UART_IRQHandler+0x3fc>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	b29b      	uxth	r3, r3
 8009714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 81ab 	beq.w	8009a78 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800972c:	429a      	cmp	r2, r3
 800972e:	f080 81a3 	bcs.w	8009a78 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009748:	f000 8087 	beq.w	800985a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	461a      	mov	r2, r3
 8009772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800977a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009782:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800978e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1da      	bne.n	800974c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3308      	adds	r3, #8
 800979c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80097be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80097c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e1      	bne.n	8009796 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3308      	adds	r3, #8
 80097d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3308      	adds	r3, #8
 80097f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e3      	bne.n	80097d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009828:	f023 0310 	bic.w	r3, r3, #16
 800982c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800983a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800983c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009840:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e4      	bne.n	8009818 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009854:	4618      	mov	r0, r3
 8009856:	f7f9 fa7f 	bl	8002d58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2202      	movs	r2, #2
 800985e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800986c:	b29b      	uxth	r3, r3
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	b29b      	uxth	r3, r3
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f91d 	bl	8009ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800987a:	e0fd      	b.n	8009a78 <HAL_UART_IRQHandler+0x760>
 800987c:	40020010 	.word	0x40020010
 8009880:	40020028 	.word	0x40020028
 8009884:	40020040 	.word	0x40020040
 8009888:	40020058 	.word	0x40020058
 800988c:	40020070 	.word	0x40020070
 8009890:	40020088 	.word	0x40020088
 8009894:	400200a0 	.word	0x400200a0
 8009898:	400200b8 	.word	0x400200b8
 800989c:	40020410 	.word	0x40020410
 80098a0:	40020428 	.word	0x40020428
 80098a4:	40020440 	.word	0x40020440
 80098a8:	40020458 	.word	0x40020458
 80098ac:	40020470 	.word	0x40020470
 80098b0:	40020488 	.word	0x40020488
 80098b4:	400204a0 	.word	0x400204a0
 80098b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80cf 	beq.w	8009a7c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80098de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 80ca 	beq.w	8009a7c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800990a:	647b      	str	r3, [r7, #68]	@ 0x44
 800990c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e4      	bne.n	80098e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	623b      	str	r3, [r7, #32]
   return(result);
 800992e:	6a3a      	ldr	r2, [r7, #32]
 8009930:	4b55      	ldr	r3, [pc, #340]	@ (8009a88 <HAL_UART_IRQHandler+0x770>)
 8009932:	4013      	ands	r3, r2
 8009934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3308      	adds	r3, #8
 800993e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009942:	633a      	str	r2, [r7, #48]	@ 0x30
 8009944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e3      	bne.n	800991e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2220      	movs	r2, #32
 800995a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	60fb      	str	r3, [r7, #12]
   return(result);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f023 0310 	bic.w	r3, r3, #16
 800997e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	69b9      	ldr	r1, [r7, #24]
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	617b      	str	r3, [r7, #20]
   return(result);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e4      	bne.n	800996a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2202      	movs	r2, #2
 80099a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f881 	bl	8009ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099b2:	e063      	b.n	8009a7c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00e      	beq.n	80099de <HAL_UART_IRQHandler+0x6c6>
 80099c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d008      	beq.n	80099de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80099d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 f841 	bl	800aa5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099dc:	e051      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d014      	beq.n	8009a14 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d105      	bne.n	8009a02 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d008      	beq.n	8009a14 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d03a      	beq.n	8009a80 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
    }
    return;
 8009a12:	e035      	b.n	8009a80 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <HAL_UART_IRQHandler+0x71c>
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 ffeb 	bl	800aa08 <UART_EndTransmit_IT>
    return;
 8009a32:	e026      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d009      	beq.n	8009a54 <HAL_UART_IRQHandler+0x73c>
 8009a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 f81a 	bl	800aa86 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a52:	e016      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d010      	beq.n	8009a82 <HAL_UART_IRQHandler+0x76a>
 8009a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	da0c      	bge.n	8009a82 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 f802 	bl	800aa72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a6e:	e008      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
      return;
 8009a70:	bf00      	nop
 8009a72:	e006      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
    return;
 8009a74:	bf00      	nop
 8009a76:	e004      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
      return;
 8009a78:	bf00      	nop
 8009a7a:	e002      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
      return;
 8009a7c:	bf00      	nop
 8009a7e:	e000      	b.n	8009a82 <HAL_UART_IRQHandler+0x76a>
    return;
 8009a80:	bf00      	nop
  }
}
 8009a82:	37e8      	adds	r7, #232	@ 0xe8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	effffffe 	.word	0xeffffffe

08009a8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ad0:	b092      	sub	sp, #72	@ 0x48
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	431a      	orrs	r2, r3
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	4bbe      	ldr	r3, [pc, #760]	@ (8009df4 <UART_SetConfig+0x328>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b04:	430b      	orrs	r3, r1
 8009b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	68da      	ldr	r2, [r3, #12]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4ab3      	ldr	r2, [pc, #716]	@ (8009df8 <UART_SetConfig+0x32c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d004      	beq.n	8009b38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b34:	4313      	orrs	r3, r2
 8009b36:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689a      	ldr	r2, [r3, #8]
 8009b3e:	4baf      	ldr	r3, [pc, #700]	@ (8009dfc <UART_SetConfig+0x330>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b52:	f023 010f 	bic.w	r1, r3, #15
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4aa6      	ldr	r2, [pc, #664]	@ (8009e00 <UART_SetConfig+0x334>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d177      	bne.n	8009c5c <UART_SetConfig+0x190>
 8009b6c:	4ba5      	ldr	r3, [pc, #660]	@ (8009e04 <UART_SetConfig+0x338>)
 8009b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b74:	2b28      	cmp	r3, #40	@ 0x28
 8009b76:	d86d      	bhi.n	8009c54 <UART_SetConfig+0x188>
 8009b78:	a201      	add	r2, pc, #4	@ (adr r2, 8009b80 <UART_SetConfig+0xb4>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009c25 	.word	0x08009c25
 8009b84:	08009c55 	.word	0x08009c55
 8009b88:	08009c55 	.word	0x08009c55
 8009b8c:	08009c55 	.word	0x08009c55
 8009b90:	08009c55 	.word	0x08009c55
 8009b94:	08009c55 	.word	0x08009c55
 8009b98:	08009c55 	.word	0x08009c55
 8009b9c:	08009c55 	.word	0x08009c55
 8009ba0:	08009c2d 	.word	0x08009c2d
 8009ba4:	08009c55 	.word	0x08009c55
 8009ba8:	08009c55 	.word	0x08009c55
 8009bac:	08009c55 	.word	0x08009c55
 8009bb0:	08009c55 	.word	0x08009c55
 8009bb4:	08009c55 	.word	0x08009c55
 8009bb8:	08009c55 	.word	0x08009c55
 8009bbc:	08009c55 	.word	0x08009c55
 8009bc0:	08009c35 	.word	0x08009c35
 8009bc4:	08009c55 	.word	0x08009c55
 8009bc8:	08009c55 	.word	0x08009c55
 8009bcc:	08009c55 	.word	0x08009c55
 8009bd0:	08009c55 	.word	0x08009c55
 8009bd4:	08009c55 	.word	0x08009c55
 8009bd8:	08009c55 	.word	0x08009c55
 8009bdc:	08009c55 	.word	0x08009c55
 8009be0:	08009c3d 	.word	0x08009c3d
 8009be4:	08009c55 	.word	0x08009c55
 8009be8:	08009c55 	.word	0x08009c55
 8009bec:	08009c55 	.word	0x08009c55
 8009bf0:	08009c55 	.word	0x08009c55
 8009bf4:	08009c55 	.word	0x08009c55
 8009bf8:	08009c55 	.word	0x08009c55
 8009bfc:	08009c55 	.word	0x08009c55
 8009c00:	08009c45 	.word	0x08009c45
 8009c04:	08009c55 	.word	0x08009c55
 8009c08:	08009c55 	.word	0x08009c55
 8009c0c:	08009c55 	.word	0x08009c55
 8009c10:	08009c55 	.word	0x08009c55
 8009c14:	08009c55 	.word	0x08009c55
 8009c18:	08009c55 	.word	0x08009c55
 8009c1c:	08009c55 	.word	0x08009c55
 8009c20:	08009c4d 	.word	0x08009c4d
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e222      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c2c:	2304      	movs	r3, #4
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e21e      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c34:	2308      	movs	r3, #8
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e21a      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e216      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c44:	2320      	movs	r3, #32
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e212      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c4c:	2340      	movs	r3, #64	@ 0x40
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e20e      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c54:	2380      	movs	r3, #128	@ 0x80
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e20a      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a69      	ldr	r2, [pc, #420]	@ (8009e08 <UART_SetConfig+0x33c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d130      	bne.n	8009cc8 <UART_SetConfig+0x1fc>
 8009c66:	4b67      	ldr	r3, [pc, #412]	@ (8009e04 <UART_SetConfig+0x338>)
 8009c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	2b05      	cmp	r3, #5
 8009c70:	d826      	bhi.n	8009cc0 <UART_SetConfig+0x1f4>
 8009c72:	a201      	add	r2, pc, #4	@ (adr r2, 8009c78 <UART_SetConfig+0x1ac>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009c91 	.word	0x08009c91
 8009c7c:	08009c99 	.word	0x08009c99
 8009c80:	08009ca1 	.word	0x08009ca1
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e1ec      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	e1e8      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e1e4      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009ca8:	2310      	movs	r3, #16
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e1e0      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e1dc      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009cb8:	2340      	movs	r3, #64	@ 0x40
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e1d8      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009cc0:	2380      	movs	r3, #128	@ 0x80
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e1d4      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a4f      	ldr	r2, [pc, #316]	@ (8009e0c <UART_SetConfig+0x340>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d130      	bne.n	8009d34 <UART_SetConfig+0x268>
 8009cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8009e04 <UART_SetConfig+0x338>)
 8009cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	2b05      	cmp	r3, #5
 8009cdc:	d826      	bhi.n	8009d2c <UART_SetConfig+0x260>
 8009cde:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce4 <UART_SetConfig+0x218>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009cfd 	.word	0x08009cfd
 8009ce8:	08009d05 	.word	0x08009d05
 8009cec:	08009d0d 	.word	0x08009d0d
 8009cf0:	08009d15 	.word	0x08009d15
 8009cf4:	08009d1d 	.word	0x08009d1d
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e1b6      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e1b2      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e1ae      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e1aa      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e1a6      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d24:	2340      	movs	r3, #64	@ 0x40
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e1a2      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d2c:	2380      	movs	r3, #128	@ 0x80
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e19e      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a35      	ldr	r2, [pc, #212]	@ (8009e10 <UART_SetConfig+0x344>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d130      	bne.n	8009da0 <UART_SetConfig+0x2d4>
 8009d3e:	4b31      	ldr	r3, [pc, #196]	@ (8009e04 <UART_SetConfig+0x338>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b05      	cmp	r3, #5
 8009d48:	d826      	bhi.n	8009d98 <UART_SetConfig+0x2cc>
 8009d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d50 <UART_SetConfig+0x284>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009d69 	.word	0x08009d69
 8009d54:	08009d71 	.word	0x08009d71
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d89 	.word	0x08009d89
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e180      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d70:	2304      	movs	r3, #4
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e17c      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e178      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d80:	2310      	movs	r3, #16
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e174      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e170      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d90:	2340      	movs	r3, #64	@ 0x40
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e16c      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009d98:	2380      	movs	r3, #128	@ 0x80
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e168      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a1b      	ldr	r2, [pc, #108]	@ (8009e14 <UART_SetConfig+0x348>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d142      	bne.n	8009e30 <UART_SetConfig+0x364>
 8009daa:	4b16      	ldr	r3, [pc, #88]	@ (8009e04 <UART_SetConfig+0x338>)
 8009dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d838      	bhi.n	8009e28 <UART_SetConfig+0x35c>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <UART_SetConfig+0x2f0>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dd5 	.word	0x08009dd5
 8009dc0:	08009ddd 	.word	0x08009ddd
 8009dc4:	08009de5 	.word	0x08009de5
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009e19 	.word	0x08009e19
 8009dd0:	08009e21 	.word	0x08009e21
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e14a      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e146      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009de4:	2308      	movs	r3, #8
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e142      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009dec:	2310      	movs	r3, #16
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e13e      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009df4:	cfff69f3 	.word	0xcfff69f3
 8009df8:	58000c00 	.word	0x58000c00
 8009dfc:	11fff4ff 	.word	0x11fff4ff
 8009e00:	40011000 	.word	0x40011000
 8009e04:	58024400 	.word	0x58024400
 8009e08:	40004400 	.word	0x40004400
 8009e0c:	40004800 	.word	0x40004800
 8009e10:	40004c00 	.word	0x40004c00
 8009e14:	40005000 	.word	0x40005000
 8009e18:	2320      	movs	r3, #32
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e128      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009e20:	2340      	movs	r3, #64	@ 0x40
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e124      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009e28:	2380      	movs	r3, #128	@ 0x80
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e120      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4acb      	ldr	r2, [pc, #812]	@ (800a164 <UART_SetConfig+0x698>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d176      	bne.n	8009f28 <UART_SetConfig+0x45c>
 8009e3a:	4bcb      	ldr	r3, [pc, #812]	@ (800a168 <UART_SetConfig+0x69c>)
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e42:	2b28      	cmp	r3, #40	@ 0x28
 8009e44:	d86c      	bhi.n	8009f20 <UART_SetConfig+0x454>
 8009e46:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <UART_SetConfig+0x380>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009ef1 	.word	0x08009ef1
 8009e50:	08009f21 	.word	0x08009f21
 8009e54:	08009f21 	.word	0x08009f21
 8009e58:	08009f21 	.word	0x08009f21
 8009e5c:	08009f21 	.word	0x08009f21
 8009e60:	08009f21 	.word	0x08009f21
 8009e64:	08009f21 	.word	0x08009f21
 8009e68:	08009f21 	.word	0x08009f21
 8009e6c:	08009ef9 	.word	0x08009ef9
 8009e70:	08009f21 	.word	0x08009f21
 8009e74:	08009f21 	.word	0x08009f21
 8009e78:	08009f21 	.word	0x08009f21
 8009e7c:	08009f21 	.word	0x08009f21
 8009e80:	08009f21 	.word	0x08009f21
 8009e84:	08009f21 	.word	0x08009f21
 8009e88:	08009f21 	.word	0x08009f21
 8009e8c:	08009f01 	.word	0x08009f01
 8009e90:	08009f21 	.word	0x08009f21
 8009e94:	08009f21 	.word	0x08009f21
 8009e98:	08009f21 	.word	0x08009f21
 8009e9c:	08009f21 	.word	0x08009f21
 8009ea0:	08009f21 	.word	0x08009f21
 8009ea4:	08009f21 	.word	0x08009f21
 8009ea8:	08009f21 	.word	0x08009f21
 8009eac:	08009f09 	.word	0x08009f09
 8009eb0:	08009f21 	.word	0x08009f21
 8009eb4:	08009f21 	.word	0x08009f21
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009f21 	.word	0x08009f21
 8009ec0:	08009f21 	.word	0x08009f21
 8009ec4:	08009f21 	.word	0x08009f21
 8009ec8:	08009f21 	.word	0x08009f21
 8009ecc:	08009f11 	.word	0x08009f11
 8009ed0:	08009f21 	.word	0x08009f21
 8009ed4:	08009f21 	.word	0x08009f21
 8009ed8:	08009f21 	.word	0x08009f21
 8009edc:	08009f21 	.word	0x08009f21
 8009ee0:	08009f21 	.word	0x08009f21
 8009ee4:	08009f21 	.word	0x08009f21
 8009ee8:	08009f21 	.word	0x08009f21
 8009eec:	08009f19 	.word	0x08009f19
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e0bc      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efe:	e0b8      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f00:	2308      	movs	r3, #8
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e0b4      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f08:	2310      	movs	r3, #16
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e0b0      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f10:	2320      	movs	r3, #32
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e0ac      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f18:	2340      	movs	r3, #64	@ 0x40
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e0a8      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f20:	2380      	movs	r3, #128	@ 0x80
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e0a4      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a8f      	ldr	r2, [pc, #572]	@ (800a16c <UART_SetConfig+0x6a0>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d130      	bne.n	8009f94 <UART_SetConfig+0x4c8>
 8009f32:	4b8d      	ldr	r3, [pc, #564]	@ (800a168 <UART_SetConfig+0x69c>)
 8009f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b05      	cmp	r3, #5
 8009f3c:	d826      	bhi.n	8009f8c <UART_SetConfig+0x4c0>
 8009f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f44 <UART_SetConfig+0x478>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f5d 	.word	0x08009f5d
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f6d 	.word	0x08009f6d
 8009f50:	08009f75 	.word	0x08009f75
 8009f54:	08009f7d 	.word	0x08009f7d
 8009f58:	08009f85 	.word	0x08009f85
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f62:	e086      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f64:	2304      	movs	r3, #4
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6a:	e082      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e07e      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f74:	2310      	movs	r3, #16
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e07a      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f7c:	2320      	movs	r3, #32
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e076      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f84:	2340      	movs	r3, #64	@ 0x40
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e072      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f8c:	2380      	movs	r3, #128	@ 0x80
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e06e      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a75      	ldr	r2, [pc, #468]	@ (800a170 <UART_SetConfig+0x6a4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d130      	bne.n	800a000 <UART_SetConfig+0x534>
 8009f9e:	4b72      	ldr	r3, [pc, #456]	@ (800a168 <UART_SetConfig+0x69c>)
 8009fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	d826      	bhi.n	8009ff8 <UART_SetConfig+0x52c>
 8009faa:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <UART_SetConfig+0x4e4>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	08009fc9 	.word	0x08009fc9
 8009fb4:	08009fd1 	.word	0x08009fd1
 8009fb8:	08009fd9 	.word	0x08009fd9
 8009fbc:	08009fe1 	.word	0x08009fe1
 8009fc0:	08009fe9 	.word	0x08009fe9
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fce:	e050      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd6:	e04c      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009fd8:	2308      	movs	r3, #8
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e048      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e044      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009fe8:	2320      	movs	r3, #32
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e040      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009ff0:	2340      	movs	r3, #64	@ 0x40
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e03c      	b.n	800a072 <UART_SetConfig+0x5a6>
 8009ff8:	2380      	movs	r3, #128	@ 0x80
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e038      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a5b      	ldr	r2, [pc, #364]	@ (800a174 <UART_SetConfig+0x6a8>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d130      	bne.n	800a06c <UART_SetConfig+0x5a0>
 800a00a:	4b57      	ldr	r3, [pc, #348]	@ (800a168 <UART_SetConfig+0x69c>)
 800a00c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	2b05      	cmp	r3, #5
 800a014:	d826      	bhi.n	800a064 <UART_SetConfig+0x598>
 800a016:	a201      	add	r2, pc, #4	@ (adr r2, 800a01c <UART_SetConfig+0x550>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a035 	.word	0x0800a035
 800a020:	0800a03d 	.word	0x0800a03d
 800a024:	0800a045 	.word	0x0800a045
 800a028:	0800a04d 	.word	0x0800a04d
 800a02c:	0800a055 	.word	0x0800a055
 800a030:	0800a05d 	.word	0x0800a05d
 800a034:	2302      	movs	r3, #2
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e01a      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a03c:	2304      	movs	r3, #4
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e016      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a044:	2308      	movs	r3, #8
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e012      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a04c:	2310      	movs	r3, #16
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e00e      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a054:	2320      	movs	r3, #32
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e00a      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a05c:	2340      	movs	r3, #64	@ 0x40
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e006      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a064:	2380      	movs	r3, #128	@ 0x80
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06a:	e002      	b.n	800a072 <UART_SetConfig+0x5a6>
 800a06c:	2380      	movs	r3, #128	@ 0x80
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a3f      	ldr	r2, [pc, #252]	@ (800a174 <UART_SetConfig+0x6a8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	f040 80f8 	bne.w	800a26e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a07e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a082:	2b20      	cmp	r3, #32
 800a084:	dc46      	bgt.n	800a114 <UART_SetConfig+0x648>
 800a086:	2b02      	cmp	r3, #2
 800a088:	f2c0 8082 	blt.w	800a190 <UART_SetConfig+0x6c4>
 800a08c:	3b02      	subs	r3, #2
 800a08e:	2b1e      	cmp	r3, #30
 800a090:	d87e      	bhi.n	800a190 <UART_SetConfig+0x6c4>
 800a092:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <UART_SetConfig+0x5cc>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a11b 	.word	0x0800a11b
 800a09c:	0800a191 	.word	0x0800a191
 800a0a0:	0800a123 	.word	0x0800a123
 800a0a4:	0800a191 	.word	0x0800a191
 800a0a8:	0800a191 	.word	0x0800a191
 800a0ac:	0800a191 	.word	0x0800a191
 800a0b0:	0800a133 	.word	0x0800a133
 800a0b4:	0800a191 	.word	0x0800a191
 800a0b8:	0800a191 	.word	0x0800a191
 800a0bc:	0800a191 	.word	0x0800a191
 800a0c0:	0800a191 	.word	0x0800a191
 800a0c4:	0800a191 	.word	0x0800a191
 800a0c8:	0800a191 	.word	0x0800a191
 800a0cc:	0800a191 	.word	0x0800a191
 800a0d0:	0800a143 	.word	0x0800a143
 800a0d4:	0800a191 	.word	0x0800a191
 800a0d8:	0800a191 	.word	0x0800a191
 800a0dc:	0800a191 	.word	0x0800a191
 800a0e0:	0800a191 	.word	0x0800a191
 800a0e4:	0800a191 	.word	0x0800a191
 800a0e8:	0800a191 	.word	0x0800a191
 800a0ec:	0800a191 	.word	0x0800a191
 800a0f0:	0800a191 	.word	0x0800a191
 800a0f4:	0800a191 	.word	0x0800a191
 800a0f8:	0800a191 	.word	0x0800a191
 800a0fc:	0800a191 	.word	0x0800a191
 800a100:	0800a191 	.word	0x0800a191
 800a104:	0800a191 	.word	0x0800a191
 800a108:	0800a191 	.word	0x0800a191
 800a10c:	0800a191 	.word	0x0800a191
 800a110:	0800a183 	.word	0x0800a183
 800a114:	2b40      	cmp	r3, #64	@ 0x40
 800a116:	d037      	beq.n	800a188 <UART_SetConfig+0x6bc>
 800a118:	e03a      	b.n	800a190 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a11a:	f7fd ffdd 	bl	80080d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a11e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a120:	e03c      	b.n	800a19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a126:	4618      	mov	r0, r3
 800a128:	f7fd ffec 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a130:	e034      	b.n	800a19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a132:	f107 0318 	add.w	r3, r7, #24
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe f938 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a140:	e02c      	b.n	800a19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a142:	4b09      	ldr	r3, [pc, #36]	@ (800a168 <UART_SetConfig+0x69c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0320 	and.w	r3, r3, #32
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d016      	beq.n	800a17c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a14e:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <UART_SetConfig+0x69c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	08db      	lsrs	r3, r3, #3
 800a154:	f003 0303 	and.w	r3, r3, #3
 800a158:	4a07      	ldr	r2, [pc, #28]	@ (800a178 <UART_SetConfig+0x6ac>)
 800a15a:	fa22 f303 	lsr.w	r3, r2, r3
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a160:	e01c      	b.n	800a19c <UART_SetConfig+0x6d0>
 800a162:	bf00      	nop
 800a164:	40011400 	.word	0x40011400
 800a168:	58024400 	.word	0x58024400
 800a16c:	40007800 	.word	0x40007800
 800a170:	40007c00 	.word	0x40007c00
 800a174:	58000c00 	.word	0x58000c00
 800a178:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a17c:	4b9d      	ldr	r3, [pc, #628]	@ (800a3f4 <UART_SetConfig+0x928>)
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a180:	e00c      	b.n	800a19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a182:	4b9d      	ldr	r3, [pc, #628]	@ (800a3f8 <UART_SetConfig+0x92c>)
 800a184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a186:	e009      	b.n	800a19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a188:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18e:	e005      	b.n	800a19c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a19a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 81de 	beq.w	800a560 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a8:	4a94      	ldr	r2, [pc, #592]	@ (800a3fc <UART_SetConfig+0x930>)
 800a1aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	4413      	add	r3, r2
 800a1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d305      	bcc.n	800a1d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d903      	bls.n	800a1dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1da:	e1c1      	b.n	800a560 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1de:	2200      	movs	r2, #0
 800a1e0:	60bb      	str	r3, [r7, #8]
 800a1e2:	60fa      	str	r2, [r7, #12]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e8:	4a84      	ldr	r2, [pc, #528]	@ (800a3fc <UART_SetConfig+0x930>)
 800a1ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	607a      	str	r2, [r7, #4]
 800a1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1fe:	f7f6 f86f 	bl	80002e0 <__aeabi_uldivmod>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4610      	mov	r0, r2
 800a208:	4619      	mov	r1, r3
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	f04f 0300 	mov.w	r3, #0
 800a212:	020b      	lsls	r3, r1, #8
 800a214:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a218:	0202      	lsls	r2, r0, #8
 800a21a:	6979      	ldr	r1, [r7, #20]
 800a21c:	6849      	ldr	r1, [r1, #4]
 800a21e:	0849      	lsrs	r1, r1, #1
 800a220:	2000      	movs	r0, #0
 800a222:	460c      	mov	r4, r1
 800a224:	4605      	mov	r5, r0
 800a226:	eb12 0804 	adds.w	r8, r2, r4
 800a22a:	eb43 0905 	adc.w	r9, r3, r5
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	469a      	mov	sl, r3
 800a236:	4693      	mov	fp, r2
 800a238:	4652      	mov	r2, sl
 800a23a:	465b      	mov	r3, fp
 800a23c:	4640      	mov	r0, r8
 800a23e:	4649      	mov	r1, r9
 800a240:	f7f6 f84e 	bl	80002e0 <__aeabi_uldivmod>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4613      	mov	r3, r2
 800a24a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a252:	d308      	bcc.n	800a266 <UART_SetConfig+0x79a>
 800a254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a25a:	d204      	bcs.n	800a266 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a262:	60da      	str	r2, [r3, #12]
 800a264:	e17c      	b.n	800a560 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a26c:	e178      	b.n	800a560 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a276:	f040 80c5 	bne.w	800a404 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a27a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a27e:	2b20      	cmp	r3, #32
 800a280:	dc48      	bgt.n	800a314 <UART_SetConfig+0x848>
 800a282:	2b00      	cmp	r3, #0
 800a284:	db7b      	blt.n	800a37e <UART_SetConfig+0x8b2>
 800a286:	2b20      	cmp	r3, #32
 800a288:	d879      	bhi.n	800a37e <UART_SetConfig+0x8b2>
 800a28a:	a201      	add	r2, pc, #4	@ (adr r2, 800a290 <UART_SetConfig+0x7c4>)
 800a28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a290:	0800a31b 	.word	0x0800a31b
 800a294:	0800a323 	.word	0x0800a323
 800a298:	0800a37f 	.word	0x0800a37f
 800a29c:	0800a37f 	.word	0x0800a37f
 800a2a0:	0800a32b 	.word	0x0800a32b
 800a2a4:	0800a37f 	.word	0x0800a37f
 800a2a8:	0800a37f 	.word	0x0800a37f
 800a2ac:	0800a37f 	.word	0x0800a37f
 800a2b0:	0800a33b 	.word	0x0800a33b
 800a2b4:	0800a37f 	.word	0x0800a37f
 800a2b8:	0800a37f 	.word	0x0800a37f
 800a2bc:	0800a37f 	.word	0x0800a37f
 800a2c0:	0800a37f 	.word	0x0800a37f
 800a2c4:	0800a37f 	.word	0x0800a37f
 800a2c8:	0800a37f 	.word	0x0800a37f
 800a2cc:	0800a37f 	.word	0x0800a37f
 800a2d0:	0800a34b 	.word	0x0800a34b
 800a2d4:	0800a37f 	.word	0x0800a37f
 800a2d8:	0800a37f 	.word	0x0800a37f
 800a2dc:	0800a37f 	.word	0x0800a37f
 800a2e0:	0800a37f 	.word	0x0800a37f
 800a2e4:	0800a37f 	.word	0x0800a37f
 800a2e8:	0800a37f 	.word	0x0800a37f
 800a2ec:	0800a37f 	.word	0x0800a37f
 800a2f0:	0800a37f 	.word	0x0800a37f
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a37f 	.word	0x0800a37f
 800a2fc:	0800a37f 	.word	0x0800a37f
 800a300:	0800a37f 	.word	0x0800a37f
 800a304:	0800a37f 	.word	0x0800a37f
 800a308:	0800a37f 	.word	0x0800a37f
 800a30c:	0800a37f 	.word	0x0800a37f
 800a310:	0800a371 	.word	0x0800a371
 800a314:	2b40      	cmp	r3, #64	@ 0x40
 800a316:	d02e      	beq.n	800a376 <UART_SetConfig+0x8aa>
 800a318:	e031      	b.n	800a37e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a31a:	f7fb fee5 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 800a31e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a320:	e033      	b.n	800a38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a322:	f7fb fef7 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 800a326:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a328:	e02f      	b.n	800a38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fd fee8 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a338:	e027      	b.n	800a38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a33a:	f107 0318 	add.w	r3, r7, #24
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe f834 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a348:	e01f      	b.n	800a38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a34a:	4b2d      	ldr	r3, [pc, #180]	@ (800a400 <UART_SetConfig+0x934>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	2b00      	cmp	r3, #0
 800a354:	d009      	beq.n	800a36a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a356:	4b2a      	ldr	r3, [pc, #168]	@ (800a400 <UART_SetConfig+0x934>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	08db      	lsrs	r3, r3, #3
 800a35c:	f003 0303 	and.w	r3, r3, #3
 800a360:	4a24      	ldr	r2, [pc, #144]	@ (800a3f4 <UART_SetConfig+0x928>)
 800a362:	fa22 f303 	lsr.w	r3, r2, r3
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a368:	e00f      	b.n	800a38a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a36a:	4b22      	ldr	r3, [pc, #136]	@ (800a3f4 <UART_SetConfig+0x928>)
 800a36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a36e:	e00c      	b.n	800a38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a370:	4b21      	ldr	r3, [pc, #132]	@ (800a3f8 <UART_SetConfig+0x92c>)
 800a372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a374:	e009      	b.n	800a38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a37c:	e005      	b.n	800a38a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a37e:	2300      	movs	r3, #0
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 80e7 	beq.w	800a560 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a396:	4a19      	ldr	r2, [pc, #100]	@ (800a3fc <UART_SetConfig+0x930>)
 800a398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39c:	461a      	mov	r2, r3
 800a39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a4:	005a      	lsls	r2, r3, #1
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	085b      	lsrs	r3, r3, #1
 800a3ac:	441a      	add	r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	2b0f      	cmp	r3, #15
 800a3bc:	d916      	bls.n	800a3ec <UART_SetConfig+0x920>
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3c4:	d212      	bcs.n	800a3ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	f023 030f 	bic.w	r3, r3, #15
 800a3ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	085b      	lsrs	r3, r3, #1
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a3e8:	60da      	str	r2, [r3, #12]
 800a3ea:	e0b9      	b.n	800a560 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3f2:	e0b5      	b.n	800a560 <UART_SetConfig+0xa94>
 800a3f4:	03d09000 	.word	0x03d09000
 800a3f8:	003d0900 	.word	0x003d0900
 800a3fc:	0800ca3c 	.word	0x0800ca3c
 800a400:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a404:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a408:	2b20      	cmp	r3, #32
 800a40a:	dc49      	bgt.n	800a4a0 <UART_SetConfig+0x9d4>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	db7c      	blt.n	800a50a <UART_SetConfig+0xa3e>
 800a410:	2b20      	cmp	r3, #32
 800a412:	d87a      	bhi.n	800a50a <UART_SetConfig+0xa3e>
 800a414:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <UART_SetConfig+0x950>)
 800a416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41a:	bf00      	nop
 800a41c:	0800a4a7 	.word	0x0800a4a7
 800a420:	0800a4af 	.word	0x0800a4af
 800a424:	0800a50b 	.word	0x0800a50b
 800a428:	0800a50b 	.word	0x0800a50b
 800a42c:	0800a4b7 	.word	0x0800a4b7
 800a430:	0800a50b 	.word	0x0800a50b
 800a434:	0800a50b 	.word	0x0800a50b
 800a438:	0800a50b 	.word	0x0800a50b
 800a43c:	0800a4c7 	.word	0x0800a4c7
 800a440:	0800a50b 	.word	0x0800a50b
 800a444:	0800a50b 	.word	0x0800a50b
 800a448:	0800a50b 	.word	0x0800a50b
 800a44c:	0800a50b 	.word	0x0800a50b
 800a450:	0800a50b 	.word	0x0800a50b
 800a454:	0800a50b 	.word	0x0800a50b
 800a458:	0800a50b 	.word	0x0800a50b
 800a45c:	0800a4d7 	.word	0x0800a4d7
 800a460:	0800a50b 	.word	0x0800a50b
 800a464:	0800a50b 	.word	0x0800a50b
 800a468:	0800a50b 	.word	0x0800a50b
 800a46c:	0800a50b 	.word	0x0800a50b
 800a470:	0800a50b 	.word	0x0800a50b
 800a474:	0800a50b 	.word	0x0800a50b
 800a478:	0800a50b 	.word	0x0800a50b
 800a47c:	0800a50b 	.word	0x0800a50b
 800a480:	0800a50b 	.word	0x0800a50b
 800a484:	0800a50b 	.word	0x0800a50b
 800a488:	0800a50b 	.word	0x0800a50b
 800a48c:	0800a50b 	.word	0x0800a50b
 800a490:	0800a50b 	.word	0x0800a50b
 800a494:	0800a50b 	.word	0x0800a50b
 800a498:	0800a50b 	.word	0x0800a50b
 800a49c:	0800a4fd 	.word	0x0800a4fd
 800a4a0:	2b40      	cmp	r3, #64	@ 0x40
 800a4a2:	d02e      	beq.n	800a502 <UART_SetConfig+0xa36>
 800a4a4:	e031      	b.n	800a50a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4a6:	f7fb fe1f 	bl	80060e8 <HAL_RCC_GetPCLK1Freq>
 800a4aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4ac:	e033      	b.n	800a516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4ae:	f7fb fe31 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 800a4b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4b4:	e02f      	b.n	800a516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fd fe22 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c4:	e027      	b.n	800a516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c6:	f107 0318 	add.w	r3, r7, #24
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fd ff6e 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	e01f      	b.n	800a516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4d6:	4b2d      	ldr	r3, [pc, #180]	@ (800a58c <UART_SetConfig+0xac0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0320 	and.w	r3, r3, #32
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d009      	beq.n	800a4f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a58c <UART_SetConfig+0xac0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	08db      	lsrs	r3, r3, #3
 800a4e8:	f003 0303 	and.w	r3, r3, #3
 800a4ec:	4a28      	ldr	r2, [pc, #160]	@ (800a590 <UART_SetConfig+0xac4>)
 800a4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4f4:	e00f      	b.n	800a516 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a4f6:	4b26      	ldr	r3, [pc, #152]	@ (800a590 <UART_SetConfig+0xac4>)
 800a4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fa:	e00c      	b.n	800a516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4fc:	4b25      	ldr	r3, [pc, #148]	@ (800a594 <UART_SetConfig+0xac8>)
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a500:	e009      	b.n	800a516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a508:	e005      	b.n	800a516 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a514:	bf00      	nop
    }

    if (pclk != 0U)
 800a516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d021      	beq.n	800a560 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a520:	4a1d      	ldr	r2, [pc, #116]	@ (800a598 <UART_SetConfig+0xacc>)
 800a522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a526:	461a      	mov	r2, r3
 800a528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a52a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	441a      	add	r2, r3
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a53e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	2b0f      	cmp	r3, #15
 800a544:	d909      	bls.n	800a55a <UART_SetConfig+0xa8e>
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a54c:	d205      	bcs.n	800a55a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	b29a      	uxth	r2, r3
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	60da      	str	r2, [r3, #12]
 800a558:	e002      	b.n	800a560 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2201      	movs	r2, #1
 800a564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2200      	movs	r2, #0
 800a574:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2200      	movs	r2, #0
 800a57a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a57c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a580:	4618      	mov	r0, r3
 800a582:	3748      	adds	r7, #72	@ 0x48
 800a584:	46bd      	mov	sp, r7
 800a586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a58a:	bf00      	nop
 800a58c:	58024400 	.word	0x58024400
 800a590:	03d09000 	.word	0x03d09000
 800a594:	003d0900 	.word	0x003d0900
 800a598:	0800ca3c 	.word	0x0800ca3c

0800a59c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a8:	f003 0308 	and.w	r3, r3, #8
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00a      	beq.n	800a60a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60e:	f003 0304 	and.w	r3, r3, #4
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00a      	beq.n	800a62c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00a      	beq.n	800a64e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a652:	f003 0320 	and.w	r3, r3, #32
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d01a      	beq.n	800a6b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a69a:	d10a      	bne.n	800a6b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00a      	beq.n	800a6d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	605a      	str	r2, [r3, #4]
  }
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b098      	sub	sp, #96	@ 0x60
 800a6e4:	af02      	add	r7, sp, #8
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6f0:	f7f6 fe20 	bl	8001334 <HAL_GetTick>
 800a6f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	2b08      	cmp	r3, #8
 800a702:	d12f      	bne.n	800a764 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a704:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a70c:	2200      	movs	r2, #0
 800a70e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f88e 	bl	800a834 <UART_WaitOnFlagUntilTimeout>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d022      	beq.n	800a764 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a732:	653b      	str	r3, [r7, #80]	@ 0x50
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a73c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a73e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e6      	bne.n	800a71e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2220      	movs	r2, #32
 800a754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e063      	b.n	800a82c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d149      	bne.n	800a806 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a772:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a77a:	2200      	movs	r2, #0
 800a77c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 f857 	bl	800a834 <UART_WaitOnFlagUntilTimeout>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d03c      	beq.n	800a806 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	623b      	str	r3, [r7, #32]
   return(result);
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7b2:	e841 2300 	strex	r3, r2, [r1]
 800a7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1e6      	bne.n	800a78c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f023 0301 	bic.w	r3, r3, #1
 800a7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7de:	61fa      	str	r2, [r7, #28]
 800a7e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	69b9      	ldr	r1, [r7, #24]
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e5      	bne.n	800a7be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e012      	b.n	800a82c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3758      	adds	r7, #88	@ 0x58
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	4613      	mov	r3, r2
 800a842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a844:	e04f      	b.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d04b      	beq.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a84e:	f7f6 fd71 	bl	8001334 <HAL_GetTick>
 800a852:	4602      	mov	r2, r0
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	69ba      	ldr	r2, [r7, #24]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <UART_WaitOnFlagUntilTimeout+0x30>
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e04e      	b.n	800a906 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0304 	and.w	r3, r3, #4
 800a872:	2b00      	cmp	r3, #0
 800a874:	d037      	beq.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b80      	cmp	r3, #128	@ 0x80
 800a87a:	d034      	beq.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b40      	cmp	r3, #64	@ 0x40
 800a880:	d031      	beq.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	d110      	bne.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2208      	movs	r2, #8
 800a896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f839 	bl	800a910 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2208      	movs	r2, #8
 800a8a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e029      	b.n	800a906 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8c0:	d111      	bne.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 f81f 	bl	800a910 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e00f      	b.n	800a906 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69da      	ldr	r2, [r3, #28]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	bf0c      	ite	eq
 800a8f6:	2301      	moveq	r3, #1
 800a8f8:	2300      	movne	r3, #0
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	429a      	cmp	r2, r3
 800a902:	d0a0      	beq.n	800a846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a910:	b480      	push	{r7}
 800a912:	b095      	sub	sp, #84	@ 0x54
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a92c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a936:	643b      	str	r3, [r7, #64]	@ 0x40
 800a938:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a93c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e6      	bne.n	800a918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6a3b      	ldr	r3, [r7, #32]
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	61fb      	str	r3, [r7, #28]
   return(result);
 800a95a:	69fa      	ldr	r2, [r7, #28]
 800a95c:	4b1e      	ldr	r3, [pc, #120]	@ (800a9d8 <UART_EndRxTransfer+0xc8>)
 800a95e:	4013      	ands	r3, r2
 800a960:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a96a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a96c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a972:	e841 2300 	strex	r3, r2, [r1]
 800a976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1e5      	bne.n	800a94a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a982:	2b01      	cmp	r3, #1
 800a984:	d118      	bne.n	800a9b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	60bb      	str	r3, [r7, #8]
   return(result);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f023 0310 	bic.w	r3, r3, #16
 800a99a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a4:	61bb      	str	r3, [r7, #24]
 800a9a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	6979      	ldr	r1, [r7, #20]
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	e841 2300 	strex	r3, r2, [r1]
 800a9b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e6      	bne.n	800a986 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9cc:	bf00      	nop
 800a9ce:	3754      	adds	r7, #84	@ 0x54
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	effffffe 	.word	0xeffffffe

0800a9dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff f850 	bl	8009aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa24:	61fb      	str	r3, [r7, #28]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	61bb      	str	r3, [r7, #24]
 800aa30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6979      	ldr	r1, [r7, #20]
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e6      	bne.n	800aa10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7ff f81b 	bl	8009a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa56:	bf00      	nop
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa7a:	bf00      	nop
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b085      	sub	sp, #20
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d101      	bne.n	800aab0 <HAL_UARTEx_DisableFifoMode+0x16>
 800aaac:	2302      	movs	r3, #2
 800aaae:	e027      	b.n	800ab00 <HAL_UARTEx_DisableFifoMode+0x66>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2224      	movs	r2, #36	@ 0x24
 800aabc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f022 0201 	bic.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aade:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d101      	bne.n	800ab24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab20:	2302      	movs	r3, #2
 800ab22:	e02d      	b.n	800ab80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2224      	movs	r2, #36	@ 0x24
 800ab30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0201 	bic.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	430a      	orrs	r2, r1
 800ab5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f84f 	bl	800ac04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e02d      	b.n	800abfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2224      	movs	r2, #36	@ 0x24
 800abac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f022 0201 	bic.w	r2, r2, #1
 800abc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f811 	bl	800ac04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d108      	bne.n	800ac26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac24:	e031      	b.n	800ac8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac26:	2310      	movs	r3, #16
 800ac28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac2a:	2310      	movs	r3, #16
 800ac2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	0e5b      	lsrs	r3, r3, #25
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 0307 	and.w	r3, r3, #7
 800ac3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	0f5b      	lsrs	r3, r3, #29
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	f003 0307 	and.w	r3, r3, #7
 800ac4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	7b3a      	ldrb	r2, [r7, #12]
 800ac52:	4911      	ldr	r1, [pc, #68]	@ (800ac98 <UARTEx_SetNbDataToProcess+0x94>)
 800ac54:	5c8a      	ldrb	r2, [r1, r2]
 800ac56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac5a:	7b3a      	ldrb	r2, [r7, #12]
 800ac5c:	490f      	ldr	r1, [pc, #60]	@ (800ac9c <UARTEx_SetNbDataToProcess+0x98>)
 800ac5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac60:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	7b7a      	ldrb	r2, [r7, #13]
 800ac70:	4909      	ldr	r1, [pc, #36]	@ (800ac98 <UARTEx_SetNbDataToProcess+0x94>)
 800ac72:	5c8a      	ldrb	r2, [r1, r2]
 800ac74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac78:	7b7a      	ldrb	r2, [r7, #13]
 800ac7a:	4908      	ldr	r1, [pc, #32]	@ (800ac9c <UARTEx_SetNbDataToProcess+0x98>)
 800ac7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac8a:	bf00      	nop
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	0800ca54 	.word	0x0800ca54
 800ac9c:	0800ca5c 	.word	0x0800ca5c

0800aca0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aca0:	b084      	sub	sp, #16
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	f107 001c 	add.w	r0, r7, #28
 800acae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acb2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d121      	bne.n	800acfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	4b2c      	ldr	r3, [pc, #176]	@ (800ad7c <USB_CoreInit+0xdc>)
 800accc:	4013      	ands	r3, r2
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d105      	bne.n	800acf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 faaa 	bl	800b24c <USB_CoreReset>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]
 800acfc:	e01b      	b.n	800ad36 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa9e 	bl	800b24c <USB_CoreReset>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d106      	bne.n	800ad2a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad28:	e005      	b.n	800ad36 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad36:	7fbb      	ldrb	r3, [r7, #30]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d116      	bne.n	800ad6a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <USB_CoreInit+0xe0>)
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f043 0206 	orr.w	r2, r3, #6
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f043 0220 	orr.w	r2, r3, #32
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad76:	b004      	add	sp, #16
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	ffbdffbf 	.word	0xffbdffbf
 800ad80:	03ee0000 	.word	0x03ee0000

0800ad84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f023 0201 	bic.w	r2, r3, #1
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d115      	bne.n	800adf4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800add4:	200a      	movs	r0, #10
 800add6:	f7f6 fab9 	bl	800134c <HAL_Delay>
      ms += 10U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	330a      	adds	r3, #10
 800adde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fa25 	bl	800b230 <USB_GetMode>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d01e      	beq.n	800ae2a <USB_SetCurrentMode+0x84>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2bc7      	cmp	r3, #199	@ 0xc7
 800adf0:	d9f0      	bls.n	800add4 <USB_SetCurrentMode+0x2e>
 800adf2:	e01a      	b.n	800ae2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d115      	bne.n	800ae26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae06:	200a      	movs	r0, #10
 800ae08:	f7f6 faa0 	bl	800134c <HAL_Delay>
      ms += 10U;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	330a      	adds	r3, #10
 800ae10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa0c 	bl	800b230 <USB_GetMode>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d005      	beq.n	800ae2a <USB_SetCurrentMode+0x84>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae22:	d9f0      	bls.n	800ae06 <USB_SetCurrentMode+0x60>
 800ae24:	e001      	b.n	800ae2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e005      	b.n	800ae36 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2bc8      	cmp	r3, #200	@ 0xc8
 800ae2e:	d101      	bne.n	800ae34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e000      	b.n	800ae36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae40:	b084      	sub	sp, #16
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b086      	sub	sp, #24
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ae4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	613b      	str	r3, [r7, #16]
 800ae5e:	e009      	b.n	800ae74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	3340      	adds	r3, #64	@ 0x40
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	3301      	adds	r3, #1
 800ae72:	613b      	str	r3, [r7, #16]
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	2b0e      	cmp	r3, #14
 800ae78:	d9f2      	bls.n	800ae60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d11c      	bne.n	800aebc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae90:	f043 0302 	orr.w	r3, r3, #2
 800ae94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	e005      	b.n	800aec8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aece:	461a      	mov	r2, r3
 800aed0:	2300      	movs	r3, #0
 800aed2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aed4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d10d      	bne.n	800aef8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aedc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d104      	bne.n	800aeee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aee4:	2100      	movs	r1, #0
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f968 	bl	800b1bc <USB_SetDevSpeed>
 800aeec:	e008      	b.n	800af00 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aeee:	2101      	movs	r1, #1
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f963 	bl	800b1bc <USB_SetDevSpeed>
 800aef6:	e003      	b.n	800af00 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aef8:	2103      	movs	r1, #3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f95e 	bl	800b1bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af00:	2110      	movs	r1, #16
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f8fa 	bl	800b0fc <USB_FlushTxFifo>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f924 	bl	800b160 <USB_FlushRxFifo>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af28:	461a      	mov	r2, r3
 800af2a:	2300      	movs	r3, #0
 800af2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af34:	461a      	mov	r2, r3
 800af36:	2300      	movs	r3, #0
 800af38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af40:	461a      	mov	r2, r3
 800af42:	2300      	movs	r3, #0
 800af44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af46:	2300      	movs	r3, #0
 800af48:	613b      	str	r3, [r7, #16]
 800af4a:	e043      	b.n	800afd4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af62:	d118      	bne.n	800af96 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af76:	461a      	mov	r2, r3
 800af78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	e013      	b.n	800afa8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af8c:	461a      	mov	r2, r3
 800af8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	e008      	b.n	800afa8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	015a      	lsls	r2, r3, #5
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	4413      	add	r3, r2
 800af9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afa2:	461a      	mov	r2, r3
 800afa4:	2300      	movs	r3, #0
 800afa6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb4:	461a      	mov	r2, r3
 800afb6:	2300      	movs	r3, #0
 800afb8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc6:	461a      	mov	r2, r3
 800afc8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800afcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3301      	adds	r3, #1
 800afd2:	613b      	str	r3, [r7, #16]
 800afd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afd8:	461a      	mov	r2, r3
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	4293      	cmp	r3, r2
 800afde:	d3b5      	bcc.n	800af4c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afe0:	2300      	movs	r3, #0
 800afe2:	613b      	str	r3, [r7, #16]
 800afe4:	e043      	b.n	800b06e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	015a      	lsls	r2, r3, #5
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	4413      	add	r3, r2
 800afee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800affc:	d118      	bne.n	800b030 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10a      	bne.n	800b01a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b010:	461a      	mov	r2, r3
 800b012:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	e013      	b.n	800b042 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b026:	461a      	mov	r2, r3
 800b028:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b02c:	6013      	str	r3, [r2, #0]
 800b02e:	e008      	b.n	800b042 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4413      	add	r3, r2
 800b038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b03c:	461a      	mov	r2, r3
 800b03e:	2300      	movs	r3, #0
 800b040:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	015a      	lsls	r2, r3, #5
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b04e:	461a      	mov	r2, r3
 800b050:	2300      	movs	r3, #0
 800b052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b060:	461a      	mov	r2, r3
 800b062:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	3301      	adds	r3, #1
 800b06c:	613b      	str	r3, [r7, #16]
 800b06e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b072:	461a      	mov	r2, r3
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	4293      	cmp	r3, r2
 800b078:	d3b5      	bcc.n	800afe6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b08c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b09a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b09c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d105      	bne.n	800b0b0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	f043 0210 	orr.w	r2, r3, #16
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	699a      	ldr	r2, [r3, #24]
 800b0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f4 <USB_DevInit+0x2b4>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b0bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	f043 0208 	orr.w	r2, r3, #8
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b0d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d105      	bne.n	800b0e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	699a      	ldr	r2, [r3, #24]
 800b0dc:	4b06      	ldr	r3, [pc, #24]	@ (800b0f8 <USB_DevInit+0x2b8>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3718      	adds	r7, #24
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0f0:	b004      	add	sp, #16
 800b0f2:	4770      	bx	lr
 800b0f4:	803c3800 	.word	0x803c3800
 800b0f8:	40000004 	.word	0x40000004

0800b0fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3301      	adds	r3, #1
 800b10e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b116:	d901      	bls.n	800b11c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e01b      	b.n	800b154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	daf2      	bge.n	800b10a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	019b      	lsls	r3, r3, #6
 800b12c:	f043 0220 	orr.w	r2, r3, #32
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3301      	adds	r3, #1
 800b138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b140:	d901      	bls.n	800b146 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e006      	b.n	800b154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	f003 0320 	and.w	r3, r3, #32
 800b14e:	2b20      	cmp	r3, #32
 800b150:	d0f0      	beq.n	800b134 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b168:	2300      	movs	r3, #0
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3301      	adds	r3, #1
 800b170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b178:	d901      	bls.n	800b17e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e018      	b.n	800b1b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	daf2      	bge.n	800b16c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2210      	movs	r2, #16
 800b18e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3301      	adds	r3, #1
 800b194:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b19c:	d901      	bls.n	800b1a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e006      	b.n	800b1b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	f003 0310 	and.w	r3, r3, #16
 800b1aa:	2b10      	cmp	r3, #16
 800b1ac:	d0f0      	beq.n	800b190 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b085      	sub	sp, #20
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b208:	f023 0303 	bic.w	r3, r3, #3
 800b20c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b21c:	f043 0302 	orr.w	r3, r3, #2
 800b220:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	f003 0301 	and.w	r3, r3, #1
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	3301      	adds	r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b264:	d901      	bls.n	800b26a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e01b      	b.n	800b2a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	daf2      	bge.n	800b258 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	f043 0201 	orr.w	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b28e:	d901      	bls.n	800b294 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b290:	2303      	movs	r3, #3
 800b292:	e006      	b.n	800b2a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d0f0      	beq.n	800b282 <USB_CoreReset+0x36>

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b2bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2c0:	2b84      	cmp	r3, #132	@ 0x84
 800b2c2:	d005      	beq.n	800b2d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b2c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	3303      	adds	r3, #3
 800b2ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2e2:	f000 fafd 	bl	800b8e0 <vTaskStartScheduler>
  
  return osOK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ee:	b089      	sub	sp, #36	@ 0x24
 800b2f0:	af04      	add	r7, sp, #16
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d020      	beq.n	800b340 <osThreadCreate+0x54>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01c      	beq.n	800b340 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685c      	ldr	r4, [r3, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	691e      	ldr	r6, [r3, #16]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff ffc8 	bl	800b2ae <makeFreeRtosPriority>
 800b31e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b328:	9202      	str	r2, [sp, #8]
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	9100      	str	r1, [sp, #0]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	4632      	mov	r2, r6
 800b332:	4629      	mov	r1, r5
 800b334:	4620      	mov	r0, r4
 800b336:	f000 f8ed 	bl	800b514 <xTaskCreateStatic>
 800b33a:	4603      	mov	r3, r0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	e01c      	b.n	800b37a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685c      	ldr	r4, [r3, #4]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b34c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff ffaa 	bl	800b2ae <makeFreeRtosPriority>
 800b35a:	4602      	mov	r2, r0
 800b35c:	f107 030c 	add.w	r3, r7, #12
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	9200      	str	r2, [sp, #0]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	4632      	mov	r2, r6
 800b368:	4629      	mov	r1, r5
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f932 	bl	800b5d4 <xTaskCreate>
 800b370:	4603      	mov	r3, r0
 800b372:	2b01      	cmp	r3, #1
 800b374:	d001      	beq.n	800b37a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b376:	2300      	movs	r3, #0
 800b378:	e000      	b.n	800b37c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b37a:	68fb      	ldr	r3, [r7, #12]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b384 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <osDelay+0x16>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	e000      	b.n	800b39c <osDelay+0x18>
 800b39a:	2301      	movs	r3, #1
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fa69 	bl	800b874 <vTaskDelay>
  
  return osOK;
 800b3a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f103 0208 	add.w	r2, r3, #8
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f103 0208 	add.w	r2, r3, #8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f103 0208 	add.w	r2, r3, #8
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	689a      	ldr	r2, [r3, #8]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	1c5a      	adds	r2, r3, #1
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]
}
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b44e:	b480      	push	{r7}
 800b450:	b085      	sub	sp, #20
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b464:	d103      	bne.n	800b46e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	e00c      	b.n	800b488 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3308      	adds	r3, #8
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	e002      	b.n	800b47c <vListInsert+0x2e>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	429a      	cmp	r2, r3
 800b486:	d2f6      	bcs.n	800b476 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	601a      	str	r2, [r3, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	6892      	ldr	r2, [r2, #8]
 800b4d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	6852      	ldr	r2, [r2, #4]
 800b4e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d103      	bne.n	800b4f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	1e5a      	subs	r2, r3, #1
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08e      	sub	sp, #56	@ 0x38
 800b518:	af04      	add	r7, sp, #16
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10b      	bne.n	800b540 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b53a:	bf00      	nop
 800b53c:	bf00      	nop
 800b53e:	e7fd      	b.n	800b53c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10b      	bne.n	800b55e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	61fb      	str	r3, [r7, #28]
}
 800b558:	bf00      	nop
 800b55a:	bf00      	nop
 800b55c:	e7fd      	b.n	800b55a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b55e:	23a0      	movs	r3, #160	@ 0xa0
 800b560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	2ba0      	cmp	r3, #160	@ 0xa0
 800b566:	d00b      	beq.n	800b580 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	61bb      	str	r3, [r7, #24]
}
 800b57a:	bf00      	nop
 800b57c:	bf00      	nop
 800b57e:	e7fd      	b.n	800b57c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b580:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01e      	beq.n	800b5c6 <xTaskCreateStatic+0xb2>
 800b588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d01b      	beq.n	800b5c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b590:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b596:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	9303      	str	r3, [sp, #12]
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a6:	9302      	str	r3, [sp, #8]
 800b5a8:	f107 0314 	add.w	r3, r7, #20
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 f851 	bl	800b660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5c0:	f000 f8ee 	bl	800b7a0 <prvAddNewTaskToReadyList>
 800b5c4:	e001      	b.n	800b5ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5ca:	697b      	ldr	r3, [r7, #20]
	}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3728      	adds	r7, #40	@ 0x28
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08c      	sub	sp, #48	@ 0x30
 800b5d8:	af04      	add	r7, sp, #16
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	603b      	str	r3, [r7, #0]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5e4:	88fb      	ldrh	r3, [r7, #6]
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fefd 	bl	800c3e8 <pvPortMalloc>
 800b5ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00e      	beq.n	800b614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5f6:	20a0      	movs	r0, #160	@ 0xa0
 800b5f8:	f000 fef6 	bl	800c3e8 <pvPortMalloc>
 800b5fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d003      	beq.n	800b60c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	631a      	str	r2, [r3, #48]	@ 0x30
 800b60a:	e005      	b.n	800b618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b60c:	6978      	ldr	r0, [r7, #20]
 800b60e:	f000 ffb9 	bl	800c584 <vPortFree>
 800b612:	e001      	b.n	800b618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b614:	2300      	movs	r3, #0
 800b616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d017      	beq.n	800b64e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b626:	88fa      	ldrh	r2, [r7, #6]
 800b628:	2300      	movs	r3, #0
 800b62a:	9303      	str	r3, [sp, #12]
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	9302      	str	r3, [sp, #8]
 800b630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 f80f 	bl	800b660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b642:	69f8      	ldr	r0, [r7, #28]
 800b644:	f000 f8ac 	bl	800b7a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b648:	2301      	movs	r3, #1
 800b64a:	61bb      	str	r3, [r7, #24]
 800b64c:	e002      	b.n	800b654 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b64e:	f04f 33ff 	mov.w	r3, #4294967295
 800b652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b654:	69bb      	ldr	r3, [r7, #24]
	}
 800b656:	4618      	mov	r0, r3
 800b658:	3720      	adds	r7, #32
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
	...

0800b660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b678:	440b      	add	r3, r1
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4413      	add	r3, r2
 800b67e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f023 0307 	bic.w	r3, r3, #7
 800b686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	f003 0307 	and.w	r3, r3, #7
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00b      	beq.n	800b6aa <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	617b      	str	r3, [r7, #20]
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d01f      	beq.n	800b6f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	61fb      	str	r3, [r7, #28]
 800b6b4:	e012      	b.n	800b6dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	7819      	ldrb	r1, [r3, #0]
 800b6be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	3334      	adds	r3, #52	@ 0x34
 800b6c6:	460a      	mov	r2, r1
 800b6c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d006      	beq.n	800b6e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	61fb      	str	r3, [r7, #28]
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	2b0f      	cmp	r3, #15
 800b6e0:	d9e9      	bls.n	800b6b6 <prvInitialiseNewTask+0x56>
 800b6e2:	e000      	b.n	800b6e6 <prvInitialiseNewTask+0x86>
			{
				break;
 800b6e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6ee:	e003      	b.n	800b6f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	2b06      	cmp	r3, #6
 800b6fc:	d901      	bls.n	800b702 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6fe:	2306      	movs	r3, #6
 800b700:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b706:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b70c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b710:	2200      	movs	r2, #0
 800b712:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	3304      	adds	r3, #4
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fe67 	bl	800b3ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b720:	3318      	adds	r3, #24
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff fe62 	bl	800b3ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b72c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b730:	f1c3 0207 	rsb	r2, r3, #7
 800b734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b736:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b73c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	2200      	movs	r2, #0
 800b742:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b750:	334c      	adds	r3, #76	@ 0x4c
 800b752:	224c      	movs	r2, #76	@ 0x4c
 800b754:	2100      	movs	r1, #0
 800b756:	4618      	mov	r0, r3
 800b758:	f001 f834 	bl	800c7c4 <memset>
 800b75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b75e:	4a0d      	ldr	r2, [pc, #52]	@ (800b794 <prvInitialiseNewTask+0x134>)
 800b760:	651a      	str	r2, [r3, #80]	@ 0x50
 800b762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b764:	4a0c      	ldr	r2, [pc, #48]	@ (800b798 <prvInitialiseNewTask+0x138>)
 800b766:	655a      	str	r2, [r3, #84]	@ 0x54
 800b768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76a:	4a0c      	ldr	r2, [pc, #48]	@ (800b79c <prvInitialiseNewTask+0x13c>)
 800b76c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	68f9      	ldr	r1, [r7, #12]
 800b772:	69b8      	ldr	r0, [r7, #24]
 800b774:	f000 fc2a 	bl	800bfcc <pxPortInitialiseStack>
 800b778:	4602      	mov	r2, r0
 800b77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b78a:	bf00      	nop
 800b78c:	3720      	adds	r7, #32
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	24004724 	.word	0x24004724
 800b798:	2400478c 	.word	0x2400478c
 800b79c:	240047f4 	.word	0x240047f4

0800b7a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7a8:	f000 fd3e 	bl	800c228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7ac:	4b2a      	ldr	r3, [pc, #168]	@ (800b858 <prvAddNewTaskToReadyList+0xb8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	4a29      	ldr	r2, [pc, #164]	@ (800b858 <prvAddNewTaskToReadyList+0xb8>)
 800b7b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7b6:	4b29      	ldr	r3, [pc, #164]	@ (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7be:	4a27      	ldr	r2, [pc, #156]	@ (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7c4:	4b24      	ldr	r3, [pc, #144]	@ (800b858 <prvAddNewTaskToReadyList+0xb8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d110      	bne.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7cc:	f000 fad4 	bl	800bd78 <prvInitialiseTaskLists>
 800b7d0:	e00d      	b.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7d2:	4b23      	ldr	r3, [pc, #140]	@ (800b860 <prvAddNewTaskToReadyList+0xc0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d109      	bne.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7da:	4b20      	ldr	r3, [pc, #128]	@ (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d802      	bhi.n	800b7ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b864 <prvAddNewTaskToReadyList+0xc4>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b864 <prvAddNewTaskToReadyList+0xc4>)
 800b7f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	409a      	lsls	r2, r3
 800b800:	4b19      	ldr	r3, [pc, #100]	@ (800b868 <prvAddNewTaskToReadyList+0xc8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4313      	orrs	r3, r2
 800b806:	4a18      	ldr	r2, [pc, #96]	@ (800b868 <prvAddNewTaskToReadyList+0xc8>)
 800b808:	6013      	str	r3, [r2, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4a15      	ldr	r2, [pc, #84]	@ (800b86c <prvAddNewTaskToReadyList+0xcc>)
 800b818:	441a      	add	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7ff fdf0 	bl	800b406 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b826:	f000 fd31 	bl	800c28c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b82a:	4b0d      	ldr	r3, [pc, #52]	@ (800b860 <prvAddNewTaskToReadyList+0xc0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00e      	beq.n	800b850 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b832:	4b0a      	ldr	r3, [pc, #40]	@ (800b85c <prvAddNewTaskToReadyList+0xbc>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d207      	bcs.n	800b850 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b840:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <prvAddNewTaskToReadyList+0xd0>)
 800b842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	24000ad0 	.word	0x24000ad0
 800b85c:	240009d0 	.word	0x240009d0
 800b860:	24000adc 	.word	0x24000adc
 800b864:	24000aec 	.word	0x24000aec
 800b868:	24000ad8 	.word	0x24000ad8
 800b86c:	240009d4 	.word	0x240009d4
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d018      	beq.n	800b8b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b886:	4b14      	ldr	r3, [pc, #80]	@ (800b8d8 <vTaskDelay+0x64>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00b      	beq.n	800b8a6 <vTaskDelay+0x32>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	60bb      	str	r3, [r7, #8]
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	e7fd      	b.n	800b8a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8a6:	f000 f885 	bl	800b9b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fb27 	bl	800bf00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8b2:	f000 f88d 	bl	800b9d0 <xTaskResumeAll>
 800b8b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d107      	bne.n	800b8ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b8be:	4b07      	ldr	r3, [pc, #28]	@ (800b8dc <vTaskDelay+0x68>)
 800b8c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8ce:	bf00      	nop
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	24000af8 	.word	0x24000af8
 800b8dc:	e000ed04 	.word	0xe000ed04

0800b8e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08a      	sub	sp, #40	@ 0x28
 800b8e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8ee:	463a      	mov	r2, r7
 800b8f0:	1d39      	adds	r1, r7, #4
 800b8f2:	f107 0308 	add.w	r3, r7, #8
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7f4 ffb4 	bl	8000864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	9202      	str	r2, [sp, #8]
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	2300      	movs	r3, #0
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	2300      	movs	r3, #0
 800b90c:	460a      	mov	r2, r1
 800b90e:	4921      	ldr	r1, [pc, #132]	@ (800b994 <vTaskStartScheduler+0xb4>)
 800b910:	4821      	ldr	r0, [pc, #132]	@ (800b998 <vTaskStartScheduler+0xb8>)
 800b912:	f7ff fdff 	bl	800b514 <xTaskCreateStatic>
 800b916:	4603      	mov	r3, r0
 800b918:	4a20      	ldr	r2, [pc, #128]	@ (800b99c <vTaskStartScheduler+0xbc>)
 800b91a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b91c:	4b1f      	ldr	r3, [pc, #124]	@ (800b99c <vTaskStartScheduler+0xbc>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b924:	2301      	movs	r3, #1
 800b926:	617b      	str	r3, [r7, #20]
 800b928:	e001      	b.n	800b92e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d11b      	bne.n	800b96c <vTaskStartScheduler+0x8c>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	613b      	str	r3, [r7, #16]
}
 800b946:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b948:	4b15      	ldr	r3, [pc, #84]	@ (800b9a0 <vTaskStartScheduler+0xc0>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	334c      	adds	r3, #76	@ 0x4c
 800b94e:	4a15      	ldr	r2, [pc, #84]	@ (800b9a4 <vTaskStartScheduler+0xc4>)
 800b950:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b952:	4b15      	ldr	r3, [pc, #84]	@ (800b9a8 <vTaskStartScheduler+0xc8>)
 800b954:	f04f 32ff 	mov.w	r2, #4294967295
 800b958:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b95a:	4b14      	ldr	r3, [pc, #80]	@ (800b9ac <vTaskStartScheduler+0xcc>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b960:	4b13      	ldr	r3, [pc, #76]	@ (800b9b0 <vTaskStartScheduler+0xd0>)
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b966:	f000 fbbb 	bl	800c0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b96a:	e00f      	b.n	800b98c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b972:	d10b      	bne.n	800b98c <vTaskStartScheduler+0xac>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	60fb      	str	r3, [r7, #12]
}
 800b986:	bf00      	nop
 800b988:	bf00      	nop
 800b98a:	e7fd      	b.n	800b988 <vTaskStartScheduler+0xa8>
}
 800b98c:	bf00      	nop
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	0800ca1c 	.word	0x0800ca1c
 800b998:	0800bd49 	.word	0x0800bd49
 800b99c:	24000af4 	.word	0x24000af4
 800b9a0:	240009d0 	.word	0x240009d0
 800b9a4:	24000014 	.word	0x24000014
 800b9a8:	24000af0 	.word	0x24000af0
 800b9ac:	24000adc 	.word	0x24000adc
 800b9b0:	24000ad4 	.word	0x24000ad4

0800b9b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9b8:	4b04      	ldr	r3, [pc, #16]	@ (800b9cc <vTaskSuspendAll+0x18>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	4a03      	ldr	r2, [pc, #12]	@ (800b9cc <vTaskSuspendAll+0x18>)
 800b9c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9c2:	bf00      	nop
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	24000af8 	.word	0x24000af8

0800b9d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9de:	4b42      	ldr	r3, [pc, #264]	@ (800bae8 <xTaskResumeAll+0x118>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10b      	bne.n	800b9fe <xTaskResumeAll+0x2e>
	__asm volatile
 800b9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	603b      	str	r3, [r7, #0]
}
 800b9f8:	bf00      	nop
 800b9fa:	bf00      	nop
 800b9fc:	e7fd      	b.n	800b9fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9fe:	f000 fc13 	bl	800c228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba02:	4b39      	ldr	r3, [pc, #228]	@ (800bae8 <xTaskResumeAll+0x118>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4a37      	ldr	r2, [pc, #220]	@ (800bae8 <xTaskResumeAll+0x118>)
 800ba0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba0c:	4b36      	ldr	r3, [pc, #216]	@ (800bae8 <xTaskResumeAll+0x118>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d161      	bne.n	800bad8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba14:	4b35      	ldr	r3, [pc, #212]	@ (800baec <xTaskResumeAll+0x11c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d05d      	beq.n	800bad8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba1c:	e02e      	b.n	800ba7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba1e:	4b34      	ldr	r3, [pc, #208]	@ (800baf0 <xTaskResumeAll+0x120>)
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3318      	adds	r3, #24
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff fd48 	bl	800b4c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fd43 	bl	800b4c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3e:	2201      	movs	r2, #1
 800ba40:	409a      	lsls	r2, r3
 800ba42:	4b2c      	ldr	r3, [pc, #176]	@ (800baf4 <xTaskResumeAll+0x124>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	4a2a      	ldr	r2, [pc, #168]	@ (800baf4 <xTaskResumeAll+0x124>)
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4a27      	ldr	r2, [pc, #156]	@ (800baf8 <xTaskResumeAll+0x128>)
 800ba5a:	441a      	add	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f7ff fccf 	bl	800b406 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba6c:	4b23      	ldr	r3, [pc, #140]	@ (800bafc <xTaskResumeAll+0x12c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d302      	bcc.n	800ba7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba76:	4b22      	ldr	r3, [pc, #136]	@ (800bb00 <xTaskResumeAll+0x130>)
 800ba78:	2201      	movs	r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba7c:	4b1c      	ldr	r3, [pc, #112]	@ (800baf0 <xTaskResumeAll+0x120>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1cc      	bne.n	800ba1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba8a:	f000 fa19 	bl	800bec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba8e:	4b1d      	ldr	r3, [pc, #116]	@ (800bb04 <xTaskResumeAll+0x134>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d010      	beq.n	800babc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba9a:	f000 f837 	bl	800bb0c <xTaskIncrementTick>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800baa4:	4b16      	ldr	r3, [pc, #88]	@ (800bb00 <xTaskResumeAll+0x130>)
 800baa6:	2201      	movs	r2, #1
 800baa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	3b01      	subs	r3, #1
 800baae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1f1      	bne.n	800ba9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bab6:	4b13      	ldr	r3, [pc, #76]	@ (800bb04 <xTaskResumeAll+0x134>)
 800bab8:	2200      	movs	r2, #0
 800baba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800babc:	4b10      	ldr	r3, [pc, #64]	@ (800bb00 <xTaskResumeAll+0x130>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d009      	beq.n	800bad8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bac4:	2301      	movs	r3, #1
 800bac6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bac8:	4b0f      	ldr	r3, [pc, #60]	@ (800bb08 <xTaskResumeAll+0x138>)
 800baca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bad8:	f000 fbd8 	bl	800c28c <vPortExitCritical>

	return xAlreadyYielded;
 800badc:	68bb      	ldr	r3, [r7, #8]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	24000af8 	.word	0x24000af8
 800baec:	24000ad0 	.word	0x24000ad0
 800baf0:	24000a90 	.word	0x24000a90
 800baf4:	24000ad8 	.word	0x24000ad8
 800baf8:	240009d4 	.word	0x240009d4
 800bafc:	240009d0 	.word	0x240009d0
 800bb00:	24000ae4 	.word	0x24000ae4
 800bb04:	24000ae0 	.word	0x24000ae0
 800bb08:	e000ed04 	.word	0xe000ed04

0800bb0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb12:	2300      	movs	r3, #0
 800bb14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb16:	4b4f      	ldr	r3, [pc, #316]	@ (800bc54 <xTaskIncrementTick+0x148>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f040 808f 	bne.w	800bc3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb20:	4b4d      	ldr	r3, [pc, #308]	@ (800bc58 <xTaskIncrementTick+0x14c>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3301      	adds	r3, #1
 800bb26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb28:	4a4b      	ldr	r2, [pc, #300]	@ (800bc58 <xTaskIncrementTick+0x14c>)
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d121      	bne.n	800bb78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb34:	4b49      	ldr	r3, [pc, #292]	@ (800bc5c <xTaskIncrementTick+0x150>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	603b      	str	r3, [r7, #0]
}
 800bb50:	bf00      	nop
 800bb52:	bf00      	nop
 800bb54:	e7fd      	b.n	800bb52 <xTaskIncrementTick+0x46>
 800bb56:	4b41      	ldr	r3, [pc, #260]	@ (800bc5c <xTaskIncrementTick+0x150>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	4b40      	ldr	r3, [pc, #256]	@ (800bc60 <xTaskIncrementTick+0x154>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a3e      	ldr	r2, [pc, #248]	@ (800bc5c <xTaskIncrementTick+0x150>)
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	4a3e      	ldr	r2, [pc, #248]	@ (800bc60 <xTaskIncrementTick+0x154>)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6013      	str	r3, [r2, #0]
 800bb6a:	4b3e      	ldr	r3, [pc, #248]	@ (800bc64 <xTaskIncrementTick+0x158>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	4a3c      	ldr	r2, [pc, #240]	@ (800bc64 <xTaskIncrementTick+0x158>)
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	f000 f9a4 	bl	800bec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb78:	4b3b      	ldr	r3, [pc, #236]	@ (800bc68 <xTaskIncrementTick+0x15c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d348      	bcc.n	800bc14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb82:	4b36      	ldr	r3, [pc, #216]	@ (800bc5c <xTaskIncrementTick+0x150>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb8c:	4b36      	ldr	r3, [pc, #216]	@ (800bc68 <xTaskIncrementTick+0x15c>)
 800bb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb92:	601a      	str	r2, [r3, #0]
					break;
 800bb94:	e03e      	b.n	800bc14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb96:	4b31      	ldr	r3, [pc, #196]	@ (800bc5c <xTaskIncrementTick+0x150>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d203      	bcs.n	800bbb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbae:	4a2e      	ldr	r2, [pc, #184]	@ (800bc68 <xTaskIncrementTick+0x15c>)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbb4:	e02e      	b.n	800bc14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fc80 	bl	800b4c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d004      	beq.n	800bbd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	3318      	adds	r3, #24
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff fc77 	bl	800b4c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	409a      	lsls	r2, r3
 800bbda:	4b24      	ldr	r3, [pc, #144]	@ (800bc6c <xTaskIncrementTick+0x160>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	4a22      	ldr	r2, [pc, #136]	@ (800bc6c <xTaskIncrementTick+0x160>)
 800bbe2:	6013      	str	r3, [r2, #0]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe8:	4613      	mov	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4a1f      	ldr	r2, [pc, #124]	@ (800bc70 <xTaskIncrementTick+0x164>)
 800bbf2:	441a      	add	r2, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	f7ff fc03 	bl	800b406 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc04:	4b1b      	ldr	r3, [pc, #108]	@ (800bc74 <xTaskIncrementTick+0x168>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d3b9      	bcc.n	800bb82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc12:	e7b6      	b.n	800bb82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc14:	4b17      	ldr	r3, [pc, #92]	@ (800bc74 <xTaskIncrementTick+0x168>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1a:	4915      	ldr	r1, [pc, #84]	@ (800bc70 <xTaskIncrementTick+0x164>)
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	440b      	add	r3, r1
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d901      	bls.n	800bc30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc30:	4b11      	ldr	r3, [pc, #68]	@ (800bc78 <xTaskIncrementTick+0x16c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d007      	beq.n	800bc48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	e004      	b.n	800bc48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc7c <xTaskIncrementTick+0x170>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3301      	adds	r3, #1
 800bc44:	4a0d      	ldr	r2, [pc, #52]	@ (800bc7c <xTaskIncrementTick+0x170>)
 800bc46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc48:	697b      	ldr	r3, [r7, #20]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	24000af8 	.word	0x24000af8
 800bc58:	24000ad4 	.word	0x24000ad4
 800bc5c:	24000a88 	.word	0x24000a88
 800bc60:	24000a8c 	.word	0x24000a8c
 800bc64:	24000ae8 	.word	0x24000ae8
 800bc68:	24000af0 	.word	0x24000af0
 800bc6c:	24000ad8 	.word	0x24000ad8
 800bc70:	240009d4 	.word	0x240009d4
 800bc74:	240009d0 	.word	0x240009d0
 800bc78:	24000ae4 	.word	0x24000ae4
 800bc7c:	24000ae0 	.word	0x24000ae0

0800bc80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc86:	4b2a      	ldr	r3, [pc, #168]	@ (800bd30 <vTaskSwitchContext+0xb0>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc8e:	4b29      	ldr	r3, [pc, #164]	@ (800bd34 <vTaskSwitchContext+0xb4>)
 800bc90:	2201      	movs	r2, #1
 800bc92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc94:	e045      	b.n	800bd22 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800bc96:	4b27      	ldr	r3, [pc, #156]	@ (800bd34 <vTaskSwitchContext+0xb4>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc9c:	4b26      	ldr	r3, [pc, #152]	@ (800bd38 <vTaskSwitchContext+0xb8>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	fab3 f383 	clz	r3, r3
 800bca8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bcaa:	7afb      	ldrb	r3, [r7, #11]
 800bcac:	f1c3 031f 	rsb	r3, r3, #31
 800bcb0:	617b      	str	r3, [r7, #20]
 800bcb2:	4922      	ldr	r1, [pc, #136]	@ (800bd3c <vTaskSwitchContext+0xbc>)
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	440b      	add	r3, r1
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10b      	bne.n	800bcde <vTaskSwitchContext+0x5e>
	__asm volatile
 800bcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcca:	f383 8811 	msr	BASEPRI, r3
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	607b      	str	r3, [r7, #4]
}
 800bcd8:	bf00      	nop
 800bcda:	bf00      	nop
 800bcdc:	e7fd      	b.n	800bcda <vTaskSwitchContext+0x5a>
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	4613      	mov	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4a14      	ldr	r2, [pc, #80]	@ (800bd3c <vTaskSwitchContext+0xbc>)
 800bcea:	4413      	add	r3, r2
 800bcec:	613b      	str	r3, [r7, #16]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	605a      	str	r2, [r3, #4]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	3308      	adds	r3, #8
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d104      	bne.n	800bd0e <vTaskSwitchContext+0x8e>
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	605a      	str	r2, [r3, #4]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	4a0a      	ldr	r2, [pc, #40]	@ (800bd40 <vTaskSwitchContext+0xc0>)
 800bd16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd18:	4b09      	ldr	r3, [pc, #36]	@ (800bd40 <vTaskSwitchContext+0xc0>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	334c      	adds	r3, #76	@ 0x4c
 800bd1e:	4a09      	ldr	r2, [pc, #36]	@ (800bd44 <vTaskSwitchContext+0xc4>)
 800bd20:	6013      	str	r3, [r2, #0]
}
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	24000af8 	.word	0x24000af8
 800bd34:	24000ae4 	.word	0x24000ae4
 800bd38:	24000ad8 	.word	0x24000ad8
 800bd3c:	240009d4 	.word	0x240009d4
 800bd40:	240009d0 	.word	0x240009d0
 800bd44:	24000014 	.word	0x24000014

0800bd48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd50:	f000 f852 	bl	800bdf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd54:	4b06      	ldr	r3, [pc, #24]	@ (800bd70 <prvIdleTask+0x28>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d9f9      	bls.n	800bd50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd5c:	4b05      	ldr	r3, [pc, #20]	@ (800bd74 <prvIdleTask+0x2c>)
 800bd5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd6c:	e7f0      	b.n	800bd50 <prvIdleTask+0x8>
 800bd6e:	bf00      	nop
 800bd70:	240009d4 	.word	0x240009d4
 800bd74:	e000ed04 	.word	0xe000ed04

0800bd78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd7e:	2300      	movs	r3, #0
 800bd80:	607b      	str	r3, [r7, #4]
 800bd82:	e00c      	b.n	800bd9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4a12      	ldr	r2, [pc, #72]	@ (800bdd8 <prvInitialiseTaskLists+0x60>)
 800bd90:	4413      	add	r3, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fb0a 	bl	800b3ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	607b      	str	r3, [r7, #4]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b06      	cmp	r3, #6
 800bda2:	d9ef      	bls.n	800bd84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bda4:	480d      	ldr	r0, [pc, #52]	@ (800bddc <prvInitialiseTaskLists+0x64>)
 800bda6:	f7ff fb01 	bl	800b3ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdaa:	480d      	ldr	r0, [pc, #52]	@ (800bde0 <prvInitialiseTaskLists+0x68>)
 800bdac:	f7ff fafe 	bl	800b3ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdb0:	480c      	ldr	r0, [pc, #48]	@ (800bde4 <prvInitialiseTaskLists+0x6c>)
 800bdb2:	f7ff fafb 	bl	800b3ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdb6:	480c      	ldr	r0, [pc, #48]	@ (800bde8 <prvInitialiseTaskLists+0x70>)
 800bdb8:	f7ff faf8 	bl	800b3ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdbc:	480b      	ldr	r0, [pc, #44]	@ (800bdec <prvInitialiseTaskLists+0x74>)
 800bdbe:	f7ff faf5 	bl	800b3ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdc2:	4b0b      	ldr	r3, [pc, #44]	@ (800bdf0 <prvInitialiseTaskLists+0x78>)
 800bdc4:	4a05      	ldr	r2, [pc, #20]	@ (800bddc <prvInitialiseTaskLists+0x64>)
 800bdc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdc8:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf4 <prvInitialiseTaskLists+0x7c>)
 800bdca:	4a05      	ldr	r2, [pc, #20]	@ (800bde0 <prvInitialiseTaskLists+0x68>)
 800bdcc:	601a      	str	r2, [r3, #0]
}
 800bdce:	bf00      	nop
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	240009d4 	.word	0x240009d4
 800bddc:	24000a60 	.word	0x24000a60
 800bde0:	24000a74 	.word	0x24000a74
 800bde4:	24000a90 	.word	0x24000a90
 800bde8:	24000aa4 	.word	0x24000aa4
 800bdec:	24000abc 	.word	0x24000abc
 800bdf0:	24000a88 	.word	0x24000a88
 800bdf4:	24000a8c 	.word	0x24000a8c

0800bdf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdfe:	e019      	b.n	800be34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be00:	f000 fa12 	bl	800c228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be04:	4b10      	ldr	r3, [pc, #64]	@ (800be48 <prvCheckTasksWaitingTermination+0x50>)
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	3304      	adds	r3, #4
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff fb55 	bl	800b4c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be16:	4b0d      	ldr	r3, [pc, #52]	@ (800be4c <prvCheckTasksWaitingTermination+0x54>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	4a0b      	ldr	r2, [pc, #44]	@ (800be4c <prvCheckTasksWaitingTermination+0x54>)
 800be1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be20:	4b0b      	ldr	r3, [pc, #44]	@ (800be50 <prvCheckTasksWaitingTermination+0x58>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3b01      	subs	r3, #1
 800be26:	4a0a      	ldr	r2, [pc, #40]	@ (800be50 <prvCheckTasksWaitingTermination+0x58>)
 800be28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be2a:	f000 fa2f 	bl	800c28c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f810 	bl	800be54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be34:	4b06      	ldr	r3, [pc, #24]	@ (800be50 <prvCheckTasksWaitingTermination+0x58>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1e1      	bne.n	800be00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	24000aa4 	.word	0x24000aa4
 800be4c:	24000ad0 	.word	0x24000ad0
 800be50:	24000ab8 	.word	0x24000ab8

0800be54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	334c      	adds	r3, #76	@ 0x4c
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fcb7 	bl	800c7d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d108      	bne.n	800be82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be74:	4618      	mov	r0, r3
 800be76:	f000 fb85 	bl	800c584 <vPortFree>
				vPortFree( pxTCB );
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fb82 	bl	800c584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be80:	e019      	b.n	800beb6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d103      	bne.n	800be94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fb79 	bl	800c584 <vPortFree>
	}
 800be92:	e010      	b.n	800beb6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d00b      	beq.n	800beb6 <prvDeleteTCB+0x62>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	60fb      	str	r3, [r7, #12]
}
 800beb0:	bf00      	nop
 800beb2:	bf00      	nop
 800beb4:	e7fd      	b.n	800beb2 <prvDeleteTCB+0x5e>
	}
 800beb6:	bf00      	nop
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bec6:	4b0c      	ldr	r3, [pc, #48]	@ (800bef8 <prvResetNextTaskUnblockTime+0x38>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d104      	bne.n	800beda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bed0:	4b0a      	ldr	r3, [pc, #40]	@ (800befc <prvResetNextTaskUnblockTime+0x3c>)
 800bed2:	f04f 32ff 	mov.w	r2, #4294967295
 800bed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bed8:	e008      	b.n	800beec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beda:	4b07      	ldr	r3, [pc, #28]	@ (800bef8 <prvResetNextTaskUnblockTime+0x38>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	4a04      	ldr	r2, [pc, #16]	@ (800befc <prvResetNextTaskUnblockTime+0x3c>)
 800beea:	6013      	str	r3, [r2, #0]
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	24000a88 	.word	0x24000a88
 800befc:	24000af0 	.word	0x24000af0

0800bf00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf0a:	4b29      	ldr	r3, [pc, #164]	@ (800bfb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf10:	4b28      	ldr	r3, [pc, #160]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7ff fad2 	bl	800b4c0 <uxListRemove>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10b      	bne.n	800bf3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bf22:	4b24      	ldr	r3, [pc, #144]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf28:	2201      	movs	r2, #1
 800bf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2e:	43da      	mvns	r2, r3
 800bf30:	4b21      	ldr	r3, [pc, #132]	@ (800bfb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4013      	ands	r3, r2
 800bf36:	4a20      	ldr	r2, [pc, #128]	@ (800bfb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf40:	d10a      	bne.n	800bf58 <prvAddCurrentTaskToDelayedList+0x58>
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d007      	beq.n	800bf58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf48:	4b1a      	ldr	r3, [pc, #104]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4619      	mov	r1, r3
 800bf50:	481a      	ldr	r0, [pc, #104]	@ (800bfbc <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf52:	f7ff fa58 	bl	800b406 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf56:	e026      	b.n	800bfa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf60:	4b14      	ldr	r3, [pc, #80]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d209      	bcs.n	800bf84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf70:	4b13      	ldr	r3, [pc, #76]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7ff fa66 	bl	800b44e <vListInsert>
}
 800bf82:	e010      	b.n	800bfa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf84:	4b0f      	ldr	r3, [pc, #60]	@ (800bfc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7ff fa5c 	bl	800b44e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf96:	4b0c      	ldr	r3, [pc, #48]	@ (800bfc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d202      	bcs.n	800bfa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bfa0:	4a09      	ldr	r2, [pc, #36]	@ (800bfc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	6013      	str	r3, [r2, #0]
}
 800bfa6:	bf00      	nop
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	24000ad4 	.word	0x24000ad4
 800bfb4:	240009d0 	.word	0x240009d0
 800bfb8:	24000ad8 	.word	0x24000ad8
 800bfbc:	24000abc 	.word	0x24000abc
 800bfc0:	24000a8c 	.word	0x24000a8c
 800bfc4:	24000a88 	.word	0x24000a88
 800bfc8:	24000af0 	.word	0x24000af0

0800bfcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3b04      	subs	r3, #4
 800bfdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bfe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3b04      	subs	r3, #4
 800bfea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f023 0201 	bic.w	r2, r3, #1
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3b04      	subs	r3, #4
 800bffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bffc:	4a0c      	ldr	r2, [pc, #48]	@ (800c030 <pxPortInitialiseStack+0x64>)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3b14      	subs	r3, #20
 800c006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3b04      	subs	r3, #4
 800c012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f06f 0202 	mvn.w	r2, #2
 800c01a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3b20      	subs	r3, #32
 800c020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c022:	68fb      	ldr	r3, [r7, #12]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	0800c035 	.word	0x0800c035

0800c034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c03e:	4b13      	ldr	r3, [pc, #76]	@ (800c08c <prvTaskExitError+0x58>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	d00b      	beq.n	800c060 <prvTaskExitError+0x2c>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	60fb      	str	r3, [r7, #12]
}
 800c05a:	bf00      	nop
 800c05c:	bf00      	nop
 800c05e:	e7fd      	b.n	800c05c <prvTaskExitError+0x28>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	60bb      	str	r3, [r7, #8]
}
 800c072:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c074:	bf00      	nop
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d0fc      	beq.n	800c076 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c07c:	bf00      	nop
 800c07e:	bf00      	nop
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	24000010 	.word	0x24000010

0800c090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c090:	4b07      	ldr	r3, [pc, #28]	@ (800c0b0 <pxCurrentTCBConst2>)
 800c092:	6819      	ldr	r1, [r3, #0]
 800c094:	6808      	ldr	r0, [r1, #0]
 800c096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09a:	f380 8809 	msr	PSP, r0
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f04f 0000 	mov.w	r0, #0
 800c0a6:	f380 8811 	msr	BASEPRI, r0
 800c0aa:	4770      	bx	lr
 800c0ac:	f3af 8000 	nop.w

0800c0b0 <pxCurrentTCBConst2>:
 800c0b0:	240009d0 	.word	0x240009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop

0800c0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0b8:	4808      	ldr	r0, [pc, #32]	@ (800c0dc <prvPortStartFirstTask+0x24>)
 800c0ba:	6800      	ldr	r0, [r0, #0]
 800c0bc:	6800      	ldr	r0, [r0, #0]
 800c0be:	f380 8808 	msr	MSP, r0
 800c0c2:	f04f 0000 	mov.w	r0, #0
 800c0c6:	f380 8814 	msr	CONTROL, r0
 800c0ca:	b662      	cpsie	i
 800c0cc:	b661      	cpsie	f
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	df00      	svc	0
 800c0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0da:	bf00      	nop
 800c0dc:	e000ed08 	.word	0xe000ed08

0800c0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0e6:	4b47      	ldr	r3, [pc, #284]	@ (800c204 <xPortStartScheduler+0x124>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a47      	ldr	r2, [pc, #284]	@ (800c208 <xPortStartScheduler+0x128>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d10b      	bne.n	800c108 <xPortStartScheduler+0x28>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	613b      	str	r3, [r7, #16]
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c108:	4b3e      	ldr	r3, [pc, #248]	@ (800c204 <xPortStartScheduler+0x124>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a3f      	ldr	r2, [pc, #252]	@ (800c20c <xPortStartScheduler+0x12c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d10b      	bne.n	800c12a <xPortStartScheduler+0x4a>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	60fb      	str	r3, [r7, #12]
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	e7fd      	b.n	800c126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c12a:	4b39      	ldr	r3, [pc, #228]	@ (800c210 <xPortStartScheduler+0x130>)
 800c12c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	b2db      	uxtb	r3, r3
 800c134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	22ff      	movs	r2, #255	@ 0xff
 800c13a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	b2db      	uxtb	r3, r3
 800c142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c144:	78fb      	ldrb	r3, [r7, #3]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	4b31      	ldr	r3, [pc, #196]	@ (800c214 <xPortStartScheduler+0x134>)
 800c150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c152:	4b31      	ldr	r3, [pc, #196]	@ (800c218 <xPortStartScheduler+0x138>)
 800c154:	2207      	movs	r2, #7
 800c156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c158:	e009      	b.n	800c16e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c15a:	4b2f      	ldr	r3, [pc, #188]	@ (800c218 <xPortStartScheduler+0x138>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3b01      	subs	r3, #1
 800c160:	4a2d      	ldr	r2, [pc, #180]	@ (800c218 <xPortStartScheduler+0x138>)
 800c162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	b2db      	uxtb	r3, r3
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c16e:	78fb      	ldrb	r3, [r7, #3]
 800c170:	b2db      	uxtb	r3, r3
 800c172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c176:	2b80      	cmp	r3, #128	@ 0x80
 800c178:	d0ef      	beq.n	800c15a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c17a:	4b27      	ldr	r3, [pc, #156]	@ (800c218 <xPortStartScheduler+0x138>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f1c3 0307 	rsb	r3, r3, #7
 800c182:	2b04      	cmp	r3, #4
 800c184:	d00b      	beq.n	800c19e <xPortStartScheduler+0xbe>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	60bb      	str	r3, [r7, #8]
}
 800c198:	bf00      	nop
 800c19a:	bf00      	nop
 800c19c:	e7fd      	b.n	800c19a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c19e:	4b1e      	ldr	r3, [pc, #120]	@ (800c218 <xPortStartScheduler+0x138>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c218 <xPortStartScheduler+0x138>)
 800c1a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c218 <xPortStartScheduler+0x138>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c1b0:	4a19      	ldr	r2, [pc, #100]	@ (800c218 <xPortStartScheduler+0x138>)
 800c1b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1bc:	4b17      	ldr	r3, [pc, #92]	@ (800c21c <xPortStartScheduler+0x13c>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a16      	ldr	r2, [pc, #88]	@ (800c21c <xPortStartScheduler+0x13c>)
 800c1c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c1c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1c8:	4b14      	ldr	r3, [pc, #80]	@ (800c21c <xPortStartScheduler+0x13c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a13      	ldr	r2, [pc, #76]	@ (800c21c <xPortStartScheduler+0x13c>)
 800c1ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c1d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1d4:	f000 f8da 	bl	800c38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1d8:	4b11      	ldr	r3, [pc, #68]	@ (800c220 <xPortStartScheduler+0x140>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1de:	f000 f8f9 	bl	800c3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1e2:	4b10      	ldr	r3, [pc, #64]	@ (800c224 <xPortStartScheduler+0x144>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a0f      	ldr	r2, [pc, #60]	@ (800c224 <xPortStartScheduler+0x144>)
 800c1e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c1ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1ee:	f7ff ff63 	bl	800c0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1f2:	f7ff fd45 	bl	800bc80 <vTaskSwitchContext>
	prvTaskExitError();
 800c1f6:	f7ff ff1d 	bl	800c034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	e000ed00 	.word	0xe000ed00
 800c208:	410fc271 	.word	0x410fc271
 800c20c:	410fc270 	.word	0x410fc270
 800c210:	e000e400 	.word	0xe000e400
 800c214:	24000afc 	.word	0x24000afc
 800c218:	24000b00 	.word	0x24000b00
 800c21c:	e000ed20 	.word	0xe000ed20
 800c220:	24000010 	.word	0x24000010
 800c224:	e000ef34 	.word	0xe000ef34

0800c228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	607b      	str	r3, [r7, #4]
}
 800c240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c242:	4b10      	ldr	r3, [pc, #64]	@ (800c284 <vPortEnterCritical+0x5c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3301      	adds	r3, #1
 800c248:	4a0e      	ldr	r2, [pc, #56]	@ (800c284 <vPortEnterCritical+0x5c>)
 800c24a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c24c:	4b0d      	ldr	r3, [pc, #52]	@ (800c284 <vPortEnterCritical+0x5c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d110      	bne.n	800c276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c254:	4b0c      	ldr	r3, [pc, #48]	@ (800c288 <vPortEnterCritical+0x60>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00b      	beq.n	800c276 <vPortEnterCritical+0x4e>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	603b      	str	r3, [r7, #0]
}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	e7fd      	b.n	800c272 <vPortEnterCritical+0x4a>
	}
}
 800c276:	bf00      	nop
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	24000010 	.word	0x24000010
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c292:	4b12      	ldr	r3, [pc, #72]	@ (800c2dc <vPortExitCritical+0x50>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10b      	bne.n	800c2b2 <vPortExitCritical+0x26>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	607b      	str	r3, [r7, #4]
}
 800c2ac:	bf00      	nop
 800c2ae:	bf00      	nop
 800c2b0:	e7fd      	b.n	800c2ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2dc <vPortExitCritical+0x50>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	4a08      	ldr	r2, [pc, #32]	@ (800c2dc <vPortExitCritical+0x50>)
 800c2ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2bc:	4b07      	ldr	r3, [pc, #28]	@ (800c2dc <vPortExitCritical+0x50>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d105      	bne.n	800c2d0 <vPortExitCritical+0x44>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	24000010 	.word	0x24000010

0800c2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2e0:	f3ef 8009 	mrs	r0, PSP
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	4b15      	ldr	r3, [pc, #84]	@ (800c340 <pxCurrentTCBConst>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	f01e 0f10 	tst.w	lr, #16
 800c2f0:	bf08      	it	eq
 800c2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	6010      	str	r0, [r2, #0]
 800c2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c304:	f380 8811 	msr	BASEPRI, r0
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f7ff fcb6 	bl	800bc80 <vTaskSwitchContext>
 800c314:	f04f 0000 	mov.w	r0, #0
 800c318:	f380 8811 	msr	BASEPRI, r0
 800c31c:	bc09      	pop	{r0, r3}
 800c31e:	6819      	ldr	r1, [r3, #0]
 800c320:	6808      	ldr	r0, [r1, #0]
 800c322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c326:	f01e 0f10 	tst.w	lr, #16
 800c32a:	bf08      	it	eq
 800c32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c330:	f380 8809 	msr	PSP, r0
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w

0800c340 <pxCurrentTCBConst>:
 800c340:	240009d0 	.word	0x240009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop

0800c348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	607b      	str	r3, [r7, #4]
}
 800c360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c362:	f7ff fbd3 	bl	800bb0c <xTaskIncrementTick>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d003      	beq.n	800c374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c36c:	4b06      	ldr	r3, [pc, #24]	@ (800c388 <SysTick_Handler+0x40>)
 800c36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	2300      	movs	r3, #0
 800c376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	f383 8811 	msr	BASEPRI, r3
}
 800c37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	e000ed04 	.word	0xe000ed04

0800c38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c38c:	b480      	push	{r7}
 800c38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c390:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c0 <vPortSetupTimerInterrupt+0x34>)
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c396:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c4 <vPortSetupTimerInterrupt+0x38>)
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c39c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c8 <vPortSetupTimerInterrupt+0x3c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c3cc <vPortSetupTimerInterrupt+0x40>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	099b      	lsrs	r3, r3, #6
 800c3a8:	4a09      	ldr	r2, [pc, #36]	@ (800c3d0 <vPortSetupTimerInterrupt+0x44>)
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3ae:	4b04      	ldr	r3, [pc, #16]	@ (800c3c0 <vPortSetupTimerInterrupt+0x34>)
 800c3b0:	2207      	movs	r2, #7
 800c3b2:	601a      	str	r2, [r3, #0]
}
 800c3b4:	bf00      	nop
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	e000e010 	.word	0xe000e010
 800c3c4:	e000e018 	.word	0xe000e018
 800c3c8:	24000000 	.word	0x24000000
 800c3cc:	10624dd3 	.word	0x10624dd3
 800c3d0:	e000e014 	.word	0xe000e014

0800c3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c3e4 <vPortEnableVFP+0x10>
 800c3d8:	6801      	ldr	r1, [r0, #0]
 800c3da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c3de:	6001      	str	r1, [r0, #0]
 800c3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3e2:	bf00      	nop
 800c3e4:	e000ed88 	.word	0xe000ed88

0800c3e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08a      	sub	sp, #40	@ 0x28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3f4:	f7ff fade 	bl	800b9b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3f8:	4b5c      	ldr	r3, [pc, #368]	@ (800c56c <pvPortMalloc+0x184>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c400:	f000 f924 	bl	800c64c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c404:	4b5a      	ldr	r3, [pc, #360]	@ (800c570 <pvPortMalloc+0x188>)
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4013      	ands	r3, r2
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f040 8095 	bne.w	800c53c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d01e      	beq.n	800c456 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c418:	2208      	movs	r2, #8
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4413      	add	r3, r2
 800c41e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	2b00      	cmp	r3, #0
 800c428:	d015      	beq.n	800c456 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f023 0307 	bic.w	r3, r3, #7
 800c430:	3308      	adds	r3, #8
 800c432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00b      	beq.n	800c456 <pvPortMalloc+0x6e>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	617b      	str	r3, [r7, #20]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d06f      	beq.n	800c53c <pvPortMalloc+0x154>
 800c45c:	4b45      	ldr	r3, [pc, #276]	@ (800c574 <pvPortMalloc+0x18c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	429a      	cmp	r2, r3
 800c464:	d86a      	bhi.n	800c53c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c466:	4b44      	ldr	r3, [pc, #272]	@ (800c578 <pvPortMalloc+0x190>)
 800c468:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c46a:	4b43      	ldr	r3, [pc, #268]	@ (800c578 <pvPortMalloc+0x190>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c470:	e004      	b.n	800c47c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c474:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	429a      	cmp	r2, r3
 800c484:	d903      	bls.n	800c48e <pvPortMalloc+0xa6>
 800c486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1f1      	bne.n	800c472 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c48e:	4b37      	ldr	r3, [pc, #220]	@ (800c56c <pvPortMalloc+0x184>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c494:	429a      	cmp	r2, r3
 800c496:	d051      	beq.n	800c53c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2208      	movs	r2, #8
 800c49e:	4413      	add	r3, r2
 800c4a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	6a3b      	ldr	r3, [r7, #32]
 800c4a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	1ad2      	subs	r2, r2, r3
 800c4b2:	2308      	movs	r3, #8
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d920      	bls.n	800c4fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4413      	add	r3, r2
 800c4c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	f003 0307 	and.w	r3, r3, #7
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00b      	beq.n	800c4e4 <pvPortMalloc+0xfc>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	613b      	str	r3, [r7, #16]
}
 800c4de:	bf00      	nop
 800c4e0:	bf00      	nop
 800c4e2:	e7fd      	b.n	800c4e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	1ad2      	subs	r2, r2, r3
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4f6:	69b8      	ldr	r0, [r7, #24]
 800c4f8:	f000 f90a 	bl	800c710 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c574 <pvPortMalloc+0x18c>)
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	4a1b      	ldr	r2, [pc, #108]	@ (800c574 <pvPortMalloc+0x18c>)
 800c508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c50a:	4b1a      	ldr	r3, [pc, #104]	@ (800c574 <pvPortMalloc+0x18c>)
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	4b1b      	ldr	r3, [pc, #108]	@ (800c57c <pvPortMalloc+0x194>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d203      	bcs.n	800c51e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c516:	4b17      	ldr	r3, [pc, #92]	@ (800c574 <pvPortMalloc+0x18c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a18      	ldr	r2, [pc, #96]	@ (800c57c <pvPortMalloc+0x194>)
 800c51c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	4b13      	ldr	r3, [pc, #76]	@ (800c570 <pvPortMalloc+0x188>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	431a      	orrs	r2, r3
 800c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c532:	4b13      	ldr	r3, [pc, #76]	@ (800c580 <pvPortMalloc+0x198>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3301      	adds	r3, #1
 800c538:	4a11      	ldr	r2, [pc, #68]	@ (800c580 <pvPortMalloc+0x198>)
 800c53a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c53c:	f7ff fa48 	bl	800b9d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	f003 0307 	and.w	r3, r3, #7
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00b      	beq.n	800c562 <pvPortMalloc+0x17a>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	60fb      	str	r3, [r7, #12]
}
 800c55c:	bf00      	nop
 800c55e:	bf00      	nop
 800c560:	e7fd      	b.n	800c55e <pvPortMalloc+0x176>
	return pvReturn;
 800c562:	69fb      	ldr	r3, [r7, #28]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3728      	adds	r7, #40	@ 0x28
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	2400470c 	.word	0x2400470c
 800c570:	24004720 	.word	0x24004720
 800c574:	24004710 	.word	0x24004710
 800c578:	24004704 	.word	0x24004704
 800c57c:	24004714 	.word	0x24004714
 800c580:	24004718 	.word	0x24004718

0800c584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d04f      	beq.n	800c636 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c596:	2308      	movs	r3, #8
 800c598:	425b      	negs	r3, r3
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	4413      	add	r3, r2
 800c59e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	4b25      	ldr	r3, [pc, #148]	@ (800c640 <vPortFree+0xbc>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10b      	bne.n	800c5ca <vPortFree+0x46>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	60fb      	str	r3, [r7, #12]
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	e7fd      	b.n	800c5c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <vPortFree+0x66>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	60bb      	str	r3, [r7, #8]
}
 800c5e4:	bf00      	nop
 800c5e6:	bf00      	nop
 800c5e8:	e7fd      	b.n	800c5e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	685a      	ldr	r2, [r3, #4]
 800c5ee:	4b14      	ldr	r3, [pc, #80]	@ (800c640 <vPortFree+0xbc>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d01e      	beq.n	800c636 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11a      	bne.n	800c636 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	4b0e      	ldr	r3, [pc, #56]	@ (800c640 <vPortFree+0xbc>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	43db      	mvns	r3, r3
 800c60a:	401a      	ands	r2, r3
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c610:	f7ff f9d0 	bl	800b9b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	4b0a      	ldr	r3, [pc, #40]	@ (800c644 <vPortFree+0xc0>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4413      	add	r3, r2
 800c61e:	4a09      	ldr	r2, [pc, #36]	@ (800c644 <vPortFree+0xc0>)
 800c620:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c622:	6938      	ldr	r0, [r7, #16]
 800c624:	f000 f874 	bl	800c710 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c628:	4b07      	ldr	r3, [pc, #28]	@ (800c648 <vPortFree+0xc4>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	4a06      	ldr	r2, [pc, #24]	@ (800c648 <vPortFree+0xc4>)
 800c630:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c632:	f7ff f9cd 	bl	800b9d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c636:	bf00      	nop
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	24004720 	.word	0x24004720
 800c644:	24004710 	.word	0x24004710
 800c648:	2400471c 	.word	0x2400471c

0800c64c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c652:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c656:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c658:	4b27      	ldr	r3, [pc, #156]	@ (800c6f8 <prvHeapInit+0xac>)
 800c65a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00c      	beq.n	800c680 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3307      	adds	r3, #7
 800c66a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f023 0307 	bic.w	r3, r3, #7
 800c672:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	4a1f      	ldr	r2, [pc, #124]	@ (800c6f8 <prvHeapInit+0xac>)
 800c67c:	4413      	add	r3, r2
 800c67e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c684:	4a1d      	ldr	r2, [pc, #116]	@ (800c6fc <prvHeapInit+0xb0>)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c68a:	4b1c      	ldr	r3, [pc, #112]	@ (800c6fc <prvHeapInit+0xb0>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	4413      	add	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c698:	2208      	movs	r2, #8
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	1a9b      	subs	r3, r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f023 0307 	bic.w	r3, r3, #7
 800c6a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4a15      	ldr	r2, [pc, #84]	@ (800c700 <prvHeapInit+0xb4>)
 800c6ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6ae:	4b14      	ldr	r3, [pc, #80]	@ (800c700 <prvHeapInit+0xb4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6b6:	4b12      	ldr	r3, [pc, #72]	@ (800c700 <prvHeapInit+0xb4>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	1ad2      	subs	r2, r2, r3
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c700 <prvHeapInit+0xb4>)
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	4a0a      	ldr	r2, [pc, #40]	@ (800c704 <prvHeapInit+0xb8>)
 800c6da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4a09      	ldr	r2, [pc, #36]	@ (800c708 <prvHeapInit+0xbc>)
 800c6e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6e4:	4b09      	ldr	r3, [pc, #36]	@ (800c70c <prvHeapInit+0xc0>)
 800c6e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c6ea:	601a      	str	r2, [r3, #0]
}
 800c6ec:	bf00      	nop
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	24000b04 	.word	0x24000b04
 800c6fc:	24004704 	.word	0x24004704
 800c700:	2400470c 	.word	0x2400470c
 800c704:	24004714 	.word	0x24004714
 800c708:	24004710 	.word	0x24004710
 800c70c:	24004720 	.word	0x24004720

0800c710 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c718:	4b28      	ldr	r3, [pc, #160]	@ (800c7bc <prvInsertBlockIntoFreeList+0xac>)
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	e002      	b.n	800c724 <prvInsertBlockIntoFreeList+0x14>
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d8f7      	bhi.n	800c71e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	4413      	add	r3, r2
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d108      	bne.n	800c752 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	441a      	add	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	441a      	add	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d118      	bne.n	800c798 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	4b15      	ldr	r3, [pc, #84]	@ (800c7c0 <prvInsertBlockIntoFreeList+0xb0>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d00d      	beq.n	800c78e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	441a      	add	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	e008      	b.n	800c7a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c78e:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c0 <prvInsertBlockIntoFreeList+0xb0>)
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	e003      	b.n	800c7a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d002      	beq.n	800c7ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7ae:	bf00      	nop
 800c7b0:	3714      	adds	r7, #20
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	24004704 	.word	0x24004704
 800c7c0:	2400470c 	.word	0x2400470c

0800c7c4 <memset>:
 800c7c4:	4402      	add	r2, r0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d100      	bne.n	800c7ce <memset+0xa>
 800c7cc:	4770      	bx	lr
 800c7ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c7d2:	e7f9      	b.n	800c7c8 <memset+0x4>

0800c7d4 <_reclaim_reent>:
 800c7d4:	4b29      	ldr	r3, [pc, #164]	@ (800c87c <_reclaim_reent+0xa8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4283      	cmp	r3, r0
 800c7da:	b570      	push	{r4, r5, r6, lr}
 800c7dc:	4604      	mov	r4, r0
 800c7de:	d04b      	beq.n	800c878 <_reclaim_reent+0xa4>
 800c7e0:	69c3      	ldr	r3, [r0, #28]
 800c7e2:	b1ab      	cbz	r3, 800c810 <_reclaim_reent+0x3c>
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	b16b      	cbz	r3, 800c804 <_reclaim_reent+0x30>
 800c7e8:	2500      	movs	r5, #0
 800c7ea:	69e3      	ldr	r3, [r4, #28]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	5959      	ldr	r1, [r3, r5]
 800c7f0:	2900      	cmp	r1, #0
 800c7f2:	d13b      	bne.n	800c86c <_reclaim_reent+0x98>
 800c7f4:	3504      	adds	r5, #4
 800c7f6:	2d80      	cmp	r5, #128	@ 0x80
 800c7f8:	d1f7      	bne.n	800c7ea <_reclaim_reent+0x16>
 800c7fa:	69e3      	ldr	r3, [r4, #28]
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	68d9      	ldr	r1, [r3, #12]
 800c800:	f000 f864 	bl	800c8cc <_free_r>
 800c804:	69e3      	ldr	r3, [r4, #28]
 800c806:	6819      	ldr	r1, [r3, #0]
 800c808:	b111      	cbz	r1, 800c810 <_reclaim_reent+0x3c>
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 f85e 	bl	800c8cc <_free_r>
 800c810:	6961      	ldr	r1, [r4, #20]
 800c812:	b111      	cbz	r1, 800c81a <_reclaim_reent+0x46>
 800c814:	4620      	mov	r0, r4
 800c816:	f000 f859 	bl	800c8cc <_free_r>
 800c81a:	69e1      	ldr	r1, [r4, #28]
 800c81c:	b111      	cbz	r1, 800c824 <_reclaim_reent+0x50>
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 f854 	bl	800c8cc <_free_r>
 800c824:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c826:	b111      	cbz	r1, 800c82e <_reclaim_reent+0x5a>
 800c828:	4620      	mov	r0, r4
 800c82a:	f000 f84f 	bl	800c8cc <_free_r>
 800c82e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c830:	b111      	cbz	r1, 800c838 <_reclaim_reent+0x64>
 800c832:	4620      	mov	r0, r4
 800c834:	f000 f84a 	bl	800c8cc <_free_r>
 800c838:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c83a:	b111      	cbz	r1, 800c842 <_reclaim_reent+0x6e>
 800c83c:	4620      	mov	r0, r4
 800c83e:	f000 f845 	bl	800c8cc <_free_r>
 800c842:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c844:	b111      	cbz	r1, 800c84c <_reclaim_reent+0x78>
 800c846:	4620      	mov	r0, r4
 800c848:	f000 f840 	bl	800c8cc <_free_r>
 800c84c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c84e:	b111      	cbz	r1, 800c856 <_reclaim_reent+0x82>
 800c850:	4620      	mov	r0, r4
 800c852:	f000 f83b 	bl	800c8cc <_free_r>
 800c856:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c858:	b111      	cbz	r1, 800c860 <_reclaim_reent+0x8c>
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 f836 	bl	800c8cc <_free_r>
 800c860:	6a23      	ldr	r3, [r4, #32]
 800c862:	b14b      	cbz	r3, 800c878 <_reclaim_reent+0xa4>
 800c864:	4620      	mov	r0, r4
 800c866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c86a:	4718      	bx	r3
 800c86c:	680e      	ldr	r6, [r1, #0]
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 f82c 	bl	800c8cc <_free_r>
 800c874:	4631      	mov	r1, r6
 800c876:	e7bb      	b.n	800c7f0 <_reclaim_reent+0x1c>
 800c878:	bd70      	pop	{r4, r5, r6, pc}
 800c87a:	bf00      	nop
 800c87c:	24000014 	.word	0x24000014

0800c880 <__libc_init_array>:
 800c880:	b570      	push	{r4, r5, r6, lr}
 800c882:	4d0d      	ldr	r5, [pc, #52]	@ (800c8b8 <__libc_init_array+0x38>)
 800c884:	4c0d      	ldr	r4, [pc, #52]	@ (800c8bc <__libc_init_array+0x3c>)
 800c886:	1b64      	subs	r4, r4, r5
 800c888:	10a4      	asrs	r4, r4, #2
 800c88a:	2600      	movs	r6, #0
 800c88c:	42a6      	cmp	r6, r4
 800c88e:	d109      	bne.n	800c8a4 <__libc_init_array+0x24>
 800c890:	4d0b      	ldr	r5, [pc, #44]	@ (800c8c0 <__libc_init_array+0x40>)
 800c892:	4c0c      	ldr	r4, [pc, #48]	@ (800c8c4 <__libc_init_array+0x44>)
 800c894:	f000 f870 	bl	800c978 <_init>
 800c898:	1b64      	subs	r4, r4, r5
 800c89a:	10a4      	asrs	r4, r4, #2
 800c89c:	2600      	movs	r6, #0
 800c89e:	42a6      	cmp	r6, r4
 800c8a0:	d105      	bne.n	800c8ae <__libc_init_array+0x2e>
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
 800c8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8a8:	4798      	blx	r3
 800c8aa:	3601      	adds	r6, #1
 800c8ac:	e7ee      	b.n	800c88c <__libc_init_array+0xc>
 800c8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8b2:	4798      	blx	r3
 800c8b4:	3601      	adds	r6, #1
 800c8b6:	e7f2      	b.n	800c89e <__libc_init_array+0x1e>
 800c8b8:	0800ca6c 	.word	0x0800ca6c
 800c8bc:	0800ca6c 	.word	0x0800ca6c
 800c8c0:	0800ca6c 	.word	0x0800ca6c
 800c8c4:	0800ca70 	.word	0x0800ca70

0800c8c8 <__retarget_lock_acquire_recursive>:
 800c8c8:	4770      	bx	lr

0800c8ca <__retarget_lock_release_recursive>:
 800c8ca:	4770      	bx	lr

0800c8cc <_free_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	2900      	cmp	r1, #0
 800c8d2:	d041      	beq.n	800c958 <_free_r+0x8c>
 800c8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8d8:	1f0c      	subs	r4, r1, #4
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	bfb8      	it	lt
 800c8de:	18e4      	addlt	r4, r4, r3
 800c8e0:	f000 f83e 	bl	800c960 <__malloc_lock>
 800c8e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c95c <_free_r+0x90>)
 800c8e6:	6813      	ldr	r3, [r2, #0]
 800c8e8:	b933      	cbnz	r3, 800c8f8 <_free_r+0x2c>
 800c8ea:	6063      	str	r3, [r4, #4]
 800c8ec:	6014      	str	r4, [r2, #0]
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8f4:	f000 b83a 	b.w	800c96c <__malloc_unlock>
 800c8f8:	42a3      	cmp	r3, r4
 800c8fa:	d908      	bls.n	800c90e <_free_r+0x42>
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	1821      	adds	r1, r4, r0
 800c900:	428b      	cmp	r3, r1
 800c902:	bf01      	itttt	eq
 800c904:	6819      	ldreq	r1, [r3, #0]
 800c906:	685b      	ldreq	r3, [r3, #4]
 800c908:	1809      	addeq	r1, r1, r0
 800c90a:	6021      	streq	r1, [r4, #0]
 800c90c:	e7ed      	b.n	800c8ea <_free_r+0x1e>
 800c90e:	461a      	mov	r2, r3
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	b10b      	cbz	r3, 800c918 <_free_r+0x4c>
 800c914:	42a3      	cmp	r3, r4
 800c916:	d9fa      	bls.n	800c90e <_free_r+0x42>
 800c918:	6811      	ldr	r1, [r2, #0]
 800c91a:	1850      	adds	r0, r2, r1
 800c91c:	42a0      	cmp	r0, r4
 800c91e:	d10b      	bne.n	800c938 <_free_r+0x6c>
 800c920:	6820      	ldr	r0, [r4, #0]
 800c922:	4401      	add	r1, r0
 800c924:	1850      	adds	r0, r2, r1
 800c926:	4283      	cmp	r3, r0
 800c928:	6011      	str	r1, [r2, #0]
 800c92a:	d1e0      	bne.n	800c8ee <_free_r+0x22>
 800c92c:	6818      	ldr	r0, [r3, #0]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	6053      	str	r3, [r2, #4]
 800c932:	4408      	add	r0, r1
 800c934:	6010      	str	r0, [r2, #0]
 800c936:	e7da      	b.n	800c8ee <_free_r+0x22>
 800c938:	d902      	bls.n	800c940 <_free_r+0x74>
 800c93a:	230c      	movs	r3, #12
 800c93c:	602b      	str	r3, [r5, #0]
 800c93e:	e7d6      	b.n	800c8ee <_free_r+0x22>
 800c940:	6820      	ldr	r0, [r4, #0]
 800c942:	1821      	adds	r1, r4, r0
 800c944:	428b      	cmp	r3, r1
 800c946:	bf04      	itt	eq
 800c948:	6819      	ldreq	r1, [r3, #0]
 800c94a:	685b      	ldreq	r3, [r3, #4]
 800c94c:	6063      	str	r3, [r4, #4]
 800c94e:	bf04      	itt	eq
 800c950:	1809      	addeq	r1, r1, r0
 800c952:	6021      	streq	r1, [r4, #0]
 800c954:	6054      	str	r4, [r2, #4]
 800c956:	e7ca      	b.n	800c8ee <_free_r+0x22>
 800c958:	bd38      	pop	{r3, r4, r5, pc}
 800c95a:	bf00      	nop
 800c95c:	24004860 	.word	0x24004860

0800c960 <__malloc_lock>:
 800c960:	4801      	ldr	r0, [pc, #4]	@ (800c968 <__malloc_lock+0x8>)
 800c962:	f7ff bfb1 	b.w	800c8c8 <__retarget_lock_acquire_recursive>
 800c966:	bf00      	nop
 800c968:	2400485c 	.word	0x2400485c

0800c96c <__malloc_unlock>:
 800c96c:	4801      	ldr	r0, [pc, #4]	@ (800c974 <__malloc_unlock+0x8>)
 800c96e:	f7ff bfac 	b.w	800c8ca <__retarget_lock_release_recursive>
 800c972:	bf00      	nop
 800c974:	2400485c 	.word	0x2400485c

0800c978 <_init>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	bf00      	nop
 800c97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97e:	bc08      	pop	{r3}
 800c980:	469e      	mov	lr, r3
 800c982:	4770      	bx	lr

0800c984 <_fini>:
 800c984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c986:	bf00      	nop
 800c988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c98a:	bc08      	pop	{r3}
 800c98c:	469e      	mov	lr, r3
 800c98e:	4770      	bx	lr
